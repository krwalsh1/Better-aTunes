package net.sourceforge.atunes.randoop;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest2 {

    public static boolean debug = false;

    @Test
    public void test1001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1001");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.lang.String str3 = cDMetadata0.getGenre();
        int int4 = cDMetadata0.getYear();
        int int5 = cDMetadata0.getYear();
        cDMetadata0.setGenre("./enclosure/@url");
        java.util.List<java.lang.String> strList8 = null;
        cDMetadata0.setTrackNames(strList8);
        cDMetadata0.setAlbumArtist("");
        net.sourceforge.atunes.model.CDMetadata cDMetadata12 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str13 = cDMetadata12.getGenre();
        java.util.List<java.lang.String> strList14 = cDMetadata12.getComposerNames();
        java.lang.String str15 = cDMetadata12.getAlbum();
        java.util.List<java.lang.Integer> intList16 = cDMetadata12.getTracks();
        net.sourceforge.atunes.model.CDMetadata cDMetadata17 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata17.setAlbumArtist("");
        java.lang.String str21 = cDMetadata17.getTitle((int) (byte) -1);
        java.lang.String[] strArray23 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        cDMetadata17.setTrackNames((java.util.List<java.lang.String>) strList24);
        cDMetadata12.setTrackNames((java.util.List<java.lang.String>) strList24);
        cDMetadata12.setYear((int) (short) 1);
        int int30 = cDMetadata12.getYear();
        java.lang.String str31 = cDMetadata12.getGenre();
        cDMetadata12.setAlbum("/rss/channel/title");
        java.util.List<java.lang.String> strList34 = cDMetadata12.getTrackNames();
        cDMetadata0.setComposerNames(strList34);
        java.lang.String str36 = cDMetadata0.getGenre();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(intList16);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "./enclosure/@url" + "'", str36, "./enclosure/@url");
    }

    @Test
    public void test1002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1002");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType8 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion13 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType8, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str14 = applicationVersion13.getDate();
        java.lang.String str15 = applicationVersion13.toShortString();
        int int16 = applicationVersion13.getMajorNumber();
        int int17 = applicationVersion13.getMinorNumber();
        java.lang.String str18 = applicationVersion13.getName();
        java.lang.String str19 = applicationVersion13.getChanges();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType20 = applicationVersion13.getVersionType();
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion25 = new net.sourceforge.atunes.model.ApplicationVersion("./summary", (int) (byte) -1, (int) '#', 52, versionType20, "net.sourceforge.atunes.model.SearchQuerySyntaxException: net.sourceforge.atunes.model.SearchIndexNotAvailableException: net.sourceforge.atunes.model.SearchQuerySyntaxException: net.sourceforge.atunes.model.SearchQuerySyntaxException", "net.sourceforge.atunes.model.SearchQuerySyntaxException", "./summary", "/feed/title");
        org.junit.Assert.assertTrue("'" + versionType8 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType8.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "./title" + "'", str14, "./title");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1.0.0 " + "'", str15, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "mpc" + "'", str18, "mpc");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "./title" + "'", str19, "./title");
        org.junit.Assert.assertTrue("'" + versionType20 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType20.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
    }

    @Test
    public void test1003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1003");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str1 = feedType0.getUrlXPath();
        java.lang.String str2 = feedType0.getNameXPath();
        java.lang.String str3 = feedType0.getDescriptionXPath();
        java.lang.String str4 = feedType0.getDurationXPath();
        java.lang.String str5 = feedType0.getTitleXPath();
        java.lang.String str6 = feedType0.getDurationXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "./enclosure/@url" + "'", str1, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "/rss/channel/title" + "'", str2, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "./description" + "'", str3, "./description");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "./duration" + "'", str4, "./duration");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "./title" + "'", str5, "./title");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "./duration" + "'", str6, "./duration");
    }

    @Test
    public void test1004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1004");
        java.lang.Throwable throwable0 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException1 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable0);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList2 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable3 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException4 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable3);
        java.lang.Throwable[] throwableArray5 = searchQuerySyntaxException4.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException6 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException4);
        java.lang.Throwable throwable7 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException8 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable7);
        java.lang.Throwable[] throwableArray9 = searchQuerySyntaxException8.getSuppressed();
        throwableRankList2.replaceItem((java.lang.Throwable) searchQuerySyntaxException4, (java.lang.Throwable) searchQuerySyntaxException8);
        searchQuerySyntaxException1.addSuppressed((java.lang.Throwable) searchQuerySyntaxException8);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException12 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException1);
        java.lang.Throwable throwable13 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException14 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable13);
        java.lang.Throwable[] throwableArray15 = searchQuerySyntaxException14.getSuppressed();
        searchQuerySyntaxException1.addSuppressed((java.lang.Throwable) searchQuerySyntaxException14);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList17 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        net.sourceforge.atunes.model.InconsistentRepositoryException inconsistentRepositoryException18 = new net.sourceforge.atunes.model.InconsistentRepositoryException();
        net.sourceforge.atunes.model.InconsistentRepositoryException inconsistentRepositoryException19 = new net.sourceforge.atunes.model.InconsistentRepositoryException();
        throwableRankList17.replaceItem((java.lang.Throwable) inconsistentRepositoryException18, (java.lang.Throwable) inconsistentRepositoryException19);
        int int21 = throwableRankList17.size();
        java.lang.Throwable throwable22 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException23 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable22);
        java.lang.Throwable[] throwableArray24 = searchQuerySyntaxException23.getSuppressed();
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException25 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException23);
        throwableRankList17.addItem((java.lang.Throwable) searchQuerySyntaxException23);
        java.lang.Throwable throwable27 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException28 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable27);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList29 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable30 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException31 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable30);
        java.lang.Throwable[] throwableArray32 = searchQuerySyntaxException31.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException33 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException31);
        java.lang.Throwable throwable34 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException35 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable34);
        java.lang.Throwable[] throwableArray36 = searchQuerySyntaxException35.getSuppressed();
        throwableRankList29.replaceItem((java.lang.Throwable) searchQuerySyntaxException31, (java.lang.Throwable) searchQuerySyntaxException35);
        searchQuerySyntaxException28.addSuppressed((java.lang.Throwable) searchQuerySyntaxException35);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException39 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException28);
        java.lang.Throwable throwable40 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException41 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable40);
        java.lang.Throwable[] throwableArray42 = searchQuerySyntaxException41.getSuppressed();
        searchQuerySyntaxException28.addSuppressed((java.lang.Throwable) searchQuerySyntaxException41);
        java.lang.Integer int44 = throwableRankList17.getCount((java.lang.Throwable) searchQuerySyntaxException28);
        java.lang.Throwable throwable45 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException46 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable45);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList47 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable48 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException49 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable48);
        java.lang.Throwable[] throwableArray50 = searchQuerySyntaxException49.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException51 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException49);
        java.lang.Throwable throwable52 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException53 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable52);
        java.lang.Throwable[] throwableArray54 = searchQuerySyntaxException53.getSuppressed();
        throwableRankList47.replaceItem((java.lang.Throwable) searchQuerySyntaxException49, (java.lang.Throwable) searchQuerySyntaxException53);
        searchQuerySyntaxException46.addSuppressed((java.lang.Throwable) searchQuerySyntaxException53);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException57 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException46);
        java.lang.Throwable throwable58 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException59 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable58);
        java.lang.Throwable[] throwableArray60 = searchQuerySyntaxException59.getSuppressed();
        searchQuerySyntaxException46.addSuppressed((java.lang.Throwable) searchQuerySyntaxException59);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException62 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException46);
        java.lang.Integer int63 = throwableRankList17.getCount((java.lang.Throwable) searchQuerySyntaxException46);
        java.lang.Throwable throwable64 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException65 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable64);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList66 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable67 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException68 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable67);
        java.lang.Throwable[] throwableArray69 = searchQuerySyntaxException68.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException70 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException68);
        java.lang.Throwable throwable71 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException72 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable71);
        java.lang.Throwable[] throwableArray73 = searchQuerySyntaxException72.getSuppressed();
        throwableRankList66.replaceItem((java.lang.Throwable) searchQuerySyntaxException68, (java.lang.Throwable) searchQuerySyntaxException72);
        searchQuerySyntaxException65.addSuppressed((java.lang.Throwable) searchQuerySyntaxException72);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException76 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException65);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException77 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException76);
        java.lang.Integer int78 = throwableRankList17.getCount((java.lang.Throwable) searchQuerySyntaxException77);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException79 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException77);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList80 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        net.sourceforge.atunes.model.InconsistentRepositoryException inconsistentRepositoryException81 = new net.sourceforge.atunes.model.InconsistentRepositoryException();
        net.sourceforge.atunes.model.InconsistentRepositoryException inconsistentRepositoryException82 = new net.sourceforge.atunes.model.InconsistentRepositoryException();
        throwableRankList80.replaceItem((java.lang.Throwable) inconsistentRepositoryException81, (java.lang.Throwable) inconsistentRepositoryException82);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException84 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) inconsistentRepositoryException82);
        java.lang.Throwable[] throwableArray85 = inconsistentRepositoryException82.getSuppressed();
        searchQuerySyntaxException77.addSuppressed((java.lang.Throwable) inconsistentRepositoryException82);
        searchQuerySyntaxException1.addSuppressed((java.lang.Throwable) searchQuerySyntaxException77);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNull(int44);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNull(int63);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNull(int78);
        org.junit.Assert.assertNotNull(throwableArray85);
    }

    @Test
    public void test1005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1005");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str1 = feedType0.getUrlXPath();
        java.lang.String str2 = feedType0.getDurationXPath();
        java.lang.String str3 = feedType0.getNameXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "./enclosure/@url" + "'", str1, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "./duration" + "'", str2, "./duration");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "/rss/channel/title" + "'", str3, "/rss/channel/title");
    }

    @Test
    public void test1006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1006");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        net.sourceforge.atunes.model.AudioObjectProperty audioObjectProperty1 = net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY;
        boolean boolean2 = columnBean0.equals((java.lang.Object) audioObjectProperty1);
        int int3 = columnBean0.getWidth();
        boolean boolean4 = columnBean0.isVisible();
        columnBean0.setVisible(true);
        org.junit.Assert.assertTrue("'" + audioObjectProperty1 + "' != '" + net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY + "'", audioObjectProperty1.equals(net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1007");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        java.lang.String str12 = applicationVersion9.getChanges();
        int int13 = applicationVersion9.getMinorNumber();
        java.lang.String str14 = applicationVersion9.getChanges();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType15 = applicationVersion9.getVersionType();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType20 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion25 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType20, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str26 = applicationVersion25.getDate();
        java.lang.String str27 = applicationVersion25.toShortString();
        int int28 = applicationVersion25.getMajorNumber();
        java.lang.String str29 = applicationVersion25.toShortString();
        net.sourceforge.atunes.model.ArtistViewMode artistViewMode30 = net.sourceforge.atunes.model.ArtistViewMode.BOTH;
        boolean boolean31 = applicationVersion25.equals((java.lang.Object) artistViewMode30);
        int int32 = applicationVersion25.getMajorNumber();
        java.lang.String str33 = applicationVersion25.getDirectDownloadURL();
        java.lang.String str34 = applicationVersion25.getDate();
        int int35 = applicationVersion9.compareTo(applicationVersion25);
        int int36 = applicationVersion25.getRevisionNumber();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "./title" + "'", str12, "./title");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "./title" + "'", str14, "./title");
        org.junit.Assert.assertTrue("'" + versionType15 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType15.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertTrue("'" + versionType20 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType20.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "./title" + "'", str26, "./title");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1.0.0 " + "'", str27, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1.0.0 " + "'", str29, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + artistViewMode30 + "' != '" + net.sourceforge.atunes.model.ArtistViewMode.BOTH + "'", artistViewMode30.equals(net.sourceforge.atunes.model.ArtistViewMode.BOTH));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "./pubDate" + "'", str33, "./pubDate");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "./title" + "'", str34, "./title");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test1008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1008");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str1 = feedType0.getUrlXPath();
        java.lang.String str2 = feedType0.getDateXPath();
        java.lang.String str3 = feedType0.getNameXPath();
        java.lang.String str4 = feedType0.getDateXPath();
        java.lang.String str5 = feedType0.getDurationXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "./enclosure/@url" + "'", str1, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "./pubDate" + "'", str2, "./pubDate");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "/rss/channel/title" + "'", str3, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "./pubDate" + "'", str4, "./pubDate");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "./duration" + "'", str5, "./duration");
    }

    @Test
    public void test1009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1009");
        net.sourceforge.atunes.model.LookAndFeelBean lookAndFeelBean0 = new net.sourceforge.atunes.model.LookAndFeelBean();
        lookAndFeelBean0.setName("./summary");
        lookAndFeelBean0.setName("net.sourceforge.atunes.model.SearchQuerySyntaxException");
        lookAndFeelBean0.setName("/feed/entry");
    }

    @Test
    public void test1010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1010");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable1 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException2 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable1);
        java.lang.Throwable[] throwableArray3 = searchQuerySyntaxException2.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException4 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException2);
        java.lang.Throwable throwable5 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException6 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable5);
        java.lang.Throwable[] throwableArray7 = searchQuerySyntaxException6.getSuppressed();
        throwableRankList0.replaceItem((java.lang.Throwable) searchQuerySyntaxException2, (java.lang.Throwable) searchQuerySyntaxException6);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList9 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable10 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException11 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable10);
        java.lang.Throwable[] throwableArray12 = searchQuerySyntaxException11.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException13 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException11);
        java.lang.Throwable throwable14 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException15 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable14);
        java.lang.Throwable[] throwableArray16 = searchQuerySyntaxException15.getSuppressed();
        throwableRankList9.replaceItem((java.lang.Throwable) searchQuerySyntaxException11, (java.lang.Throwable) searchQuerySyntaxException15);
        java.lang.Integer int18 = throwableRankList0.getCount((java.lang.Throwable) searchQuerySyntaxException15);
        java.lang.Throwable throwable19 = null;
        java.lang.Throwable throwable20 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException21 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable20);
        throwableRankList0.replaceItem(throwable19, (java.lang.Throwable) searchQuerySyntaxException21);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList23 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable24 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException25 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable24);
        java.lang.Throwable[] throwableArray26 = searchQuerySyntaxException25.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException27 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException25);
        java.lang.Throwable throwable28 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException29 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable28);
        java.lang.Throwable[] throwableArray30 = searchQuerySyntaxException29.getSuppressed();
        throwableRankList23.replaceItem((java.lang.Throwable) searchQuerySyntaxException25, (java.lang.Throwable) searchQuerySyntaxException29);
        java.util.List<java.lang.Throwable> throwableList32 = throwableRankList23.getOrder();
        java.lang.Throwable throwable33 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException34 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable33);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList35 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable36 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException37 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable36);
        java.lang.Throwable[] throwableArray38 = searchQuerySyntaxException37.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException39 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException37);
        java.lang.Throwable throwable40 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException41 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable40);
        java.lang.Throwable[] throwableArray42 = searchQuerySyntaxException41.getSuppressed();
        throwableRankList35.replaceItem((java.lang.Throwable) searchQuerySyntaxException37, (java.lang.Throwable) searchQuerySyntaxException41);
        searchQuerySyntaxException34.addSuppressed((java.lang.Throwable) searchQuerySyntaxException41);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException45 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException34);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException46 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException34);
        java.lang.Integer int47 = throwableRankList23.getCount((java.lang.Throwable) searchIndexNotAvailableException46);
        throwableRankList0.addItem((java.lang.Throwable) searchIndexNotAvailableException46);
        java.util.List<java.lang.Integer> intList50 = throwableRankList0.getNFirstElementCounts(90);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList51 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList53 = throwableRankList51.getNFirstElements((int) (short) 100);
        java.lang.Throwable throwable54 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException55 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable54);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList56 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable57 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException58 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable57);
        java.lang.Throwable[] throwableArray59 = searchQuerySyntaxException58.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException60 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException58);
        java.lang.Throwable throwable61 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException62 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable61);
        java.lang.Throwable[] throwableArray63 = searchQuerySyntaxException62.getSuppressed();
        throwableRankList56.replaceItem((java.lang.Throwable) searchQuerySyntaxException58, (java.lang.Throwable) searchQuerySyntaxException62);
        searchQuerySyntaxException55.addSuppressed((java.lang.Throwable) searchQuerySyntaxException62);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException66 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException55);
        java.lang.Throwable throwable67 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException68 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable67);
        java.lang.Throwable[] throwableArray69 = searchQuerySyntaxException68.getSuppressed();
        searchQuerySyntaxException55.addSuppressed((java.lang.Throwable) searchQuerySyntaxException68);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException71 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException55);
        java.lang.Throwable throwable72 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException73 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable72);
        java.lang.Throwable[] throwableArray74 = searchQuerySyntaxException73.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException75 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException73);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException76 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException73);
        throwableRankList51.replaceItem((java.lang.Throwable) searchQuerySyntaxException55, (java.lang.Throwable) searchQuerySyntaxException76);
        throwableRankList0.addItem((java.lang.Throwable) searchQuerySyntaxException55);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList79 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList81 = throwableRankList79.getNFirstElements((int) (short) 10);
        int int82 = throwableRankList79.size();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList83 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable84 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException85 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable84);
        java.lang.Throwable[] throwableArray86 = searchQuerySyntaxException85.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException87 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException85);
        java.lang.Throwable throwable88 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException89 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable88);
        java.lang.Throwable[] throwableArray90 = searchQuerySyntaxException89.getSuppressed();
        throwableRankList83.replaceItem((java.lang.Throwable) searchQuerySyntaxException85, (java.lang.Throwable) searchQuerySyntaxException89);
        java.lang.Throwable[] throwableArray92 = searchQuerySyntaxException85.getSuppressed();
        java.lang.Integer int93 = throwableRankList79.getCount((java.lang.Throwable) searchQuerySyntaxException85);
        throwableRankList0.addItem((java.lang.Throwable) searchQuerySyntaxException85);
        java.util.List<java.lang.Integer> intList96 = throwableRankList0.getNFirstElementCounts(0);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableList32);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNull(int47);
        org.junit.Assert.assertNotNull(intList50);
        org.junit.Assert.assertNotNull(throwableList53);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableList81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(throwableArray86);
        org.junit.Assert.assertNotNull(throwableArray90);
        org.junit.Assert.assertNotNull(throwableArray92);
        org.junit.Assert.assertNull(int93);
        org.junit.Assert.assertNotNull(intList96);
    }

    @Test
    public void test1011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1011");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList2 = throwableRankList0.getNFirstElements((int) (short) 10);
        throwableRankList0.clear();
        java.util.List<java.lang.Integer> intList5 = throwableRankList0.getNFirstElementCounts(150);
        java.util.List<java.lang.Integer> intList7 = throwableRankList0.getNFirstElementCounts((int) (short) 10);
        java.util.List<java.lang.Integer> intList9 = throwableRankList0.getNFirstElementCounts(35);
        org.junit.Assert.assertNotNull(throwableList2);
        org.junit.Assert.assertNotNull(intList5);
        org.junit.Assert.assertNotNull(intList7);
        org.junit.Assert.assertNotNull(intList9);
    }

    @Test
    public void test1012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1012");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        fontSettings0.setUseFontSmoothing(false);
        fontSettings0.setUseFontSmoothingSettingsFromOs(false);
        net.sourceforge.atunes.model.FontSettings fontSettings5 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata6 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata6.setAlbumArtist("");
        boolean boolean9 = fontSettings5.equals((java.lang.Object) cDMetadata6);
        net.sourceforge.atunes.model.FeedType feedType10 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str11 = feedType10.getUrlXPath();
        java.lang.String str12 = feedType10.getNameXPath();
        java.lang.String str13 = feedType10.getDescriptionXPath();
        boolean boolean14 = fontSettings5.equals((java.lang.Object) str13);
        boolean boolean15 = fontSettings5.isUseFontSmoothing();
        net.sourceforge.atunes.model.IFontBean iFontBean16 = fontSettings5.getFont();
        boolean boolean17 = fontSettings0.equals((java.lang.Object) fontSettings5);
        fontSettings5.setUseFontSmoothingSettingsFromOs(false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + feedType10 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType10.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "./enclosure/@url" + "'", str11, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "/rss/channel/title" + "'", str12, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "./description" + "'", str13, "./description");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(iFontBean16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test1013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1013");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        columnBean0.setVisible(false);
        columnBean0.setWidth(0);
        net.sourceforge.atunes.model.ColumnSort columnSort8 = columnBean0.getSort();
        columnBean0.setWidth((int) (byte) 10);
        columnBean0.setOrder((-1));
        boolean boolean13 = columnBean0.isVisible();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(columnSort8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1014");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        net.sourceforge.atunes.model.SubmissionState submissionState2 = net.sourceforge.atunes.model.SubmissionState.PENDING;
        boolean boolean3 = columnBean0.equals((java.lang.Object) submissionState2);
        columnBean0.setVisible(false);
        net.sourceforge.atunes.model.ColumnSort columnSort6 = columnBean0.getSort();
        net.sourceforge.atunes.model.ColumnSort columnSort7 = net.sourceforge.atunes.model.ColumnSort.ASCENDING;
        columnBean0.setSort(columnSort7);
        columnBean0.setOrder(0);
        int int11 = columnBean0.getOrder();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + submissionState2 + "' != '" + net.sourceforge.atunes.model.SubmissionState.PENDING + "'", submissionState2.equals(net.sourceforge.atunes.model.SubmissionState.PENDING));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(columnSort6);
        org.junit.Assert.assertTrue("'" + columnSort7 + "' != '" + net.sourceforge.atunes.model.ColumnSort.ASCENDING + "'", columnSort7.equals(net.sourceforge.atunes.model.ColumnSort.ASCENDING));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test1015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1015");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType8 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion13 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType8, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str14 = applicationVersion13.getDate();
        java.lang.String str15 = applicationVersion13.toShortString();
        int int16 = applicationVersion13.getMajorNumber();
        int int17 = applicationVersion13.getMinorNumber();
        java.lang.String str18 = applicationVersion13.getName();
        java.lang.String str19 = applicationVersion13.getChanges();
        boolean boolean20 = columnBean0.equals((java.lang.Object) applicationVersion13);
        int int21 = columnBean0.getOrder();
        net.sourceforge.atunes.model.ColumnSort columnSort22 = null;
        columnBean0.setSort(columnSort22);
        int int24 = columnBean0.getOrder();
        int int25 = columnBean0.getOrder();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + versionType8 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType8.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "./title" + "'", str14, "./title");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1.0.0 " + "'", str15, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "mpc" + "'", str18, "mpc");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "./title" + "'", str19, "./title");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
    }

    @Test
    public void test1016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1016");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.lang.String str3 = cDMetadata0.getAlbum();
        java.util.List<java.lang.Integer> intList4 = cDMetadata0.getTracks();
        int int5 = cDMetadata0.getDisc();
        java.lang.String[] strArray13 = new java.lang.String[] { "net.sourceforge.atunes.model.InconsistentRepositoryException", "./title", "1.0.0 ", "./title", "./duration", "mpc", "net.sourceforge.atunes.model.InconsistentRepositoryException" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        cDMetadata0.setArtistNames((java.util.List<java.lang.String>) strList14);
        net.sourceforge.atunes.model.CDMetadata cDMetadata17 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str18 = cDMetadata17.getGenre();
        java.util.List<java.lang.String> strList19 = cDMetadata17.getComposerNames();
        java.lang.String str20 = cDMetadata17.getAlbum();
        java.util.List<java.lang.Integer> intList21 = cDMetadata17.getTracks();
        net.sourceforge.atunes.model.CDMetadata cDMetadata22 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata22.setAlbumArtist("");
        java.lang.String str26 = cDMetadata22.getTitle((int) (byte) -1);
        java.lang.String[] strArray28 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        cDMetadata22.setTrackNames((java.util.List<java.lang.String>) strList29);
        cDMetadata17.setTrackNames((java.util.List<java.lang.String>) strList29);
        cDMetadata17.setYear((int) (short) 1);
        int int35 = cDMetadata17.getYear();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList36 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable37 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException38 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable37);
        java.lang.Throwable[] throwableArray39 = searchQuerySyntaxException38.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException40 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException38);
        java.lang.Throwable throwable41 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException42 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable41);
        java.lang.Throwable[] throwableArray43 = searchQuerySyntaxException42.getSuppressed();
        throwableRankList36.replaceItem((java.lang.Throwable) searchQuerySyntaxException38, (java.lang.Throwable) searchQuerySyntaxException42);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList45 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable46 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException47 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable46);
        java.lang.Throwable[] throwableArray48 = searchQuerySyntaxException47.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException49 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException47);
        java.lang.Throwable throwable50 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException51 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable50);
        java.lang.Throwable[] throwableArray52 = searchQuerySyntaxException51.getSuppressed();
        throwableRankList45.replaceItem((java.lang.Throwable) searchQuerySyntaxException47, (java.lang.Throwable) searchQuerySyntaxException51);
        java.lang.Integer int54 = throwableRankList36.getCount((java.lang.Throwable) searchQuerySyntaxException51);
        java.lang.Throwable throwable55 = null;
        java.lang.Throwable throwable56 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException57 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable56);
        throwableRankList36.replaceItem(throwable55, (java.lang.Throwable) searchQuerySyntaxException57);
        java.util.List<java.lang.Integer> intList60 = throwableRankList36.getNFirstElementCounts((int) (byte) 1);
        cDMetadata17.setTracks(intList60);
        cDMetadata0.setTracks(intList60);
        java.lang.String str63 = cDMetadata0.getAlbum();
        cDMetadata0.setAlbumArtist("./link[@rel='enclosure']/@type");
        java.util.List<java.lang.String> strList66 = cDMetadata0.getComposerNames();
        java.lang.String str68 = cDMetadata0.getTitle((int) '4');
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(intList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(strList19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(intList21);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNull(int54);
        org.junit.Assert.assertNotNull(intList60);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNull(strList66);
        org.junit.Assert.assertNull(str68);
    }

    @Test
    public void test1017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1017");
        net.sourceforge.atunes.model.LookAndFeelBean lookAndFeelBean0 = new net.sourceforge.atunes.model.LookAndFeelBean();
        lookAndFeelBean0.setName("./summary");
        java.lang.String str3 = lookAndFeelBean0.getSkin();
        lookAndFeelBean0.setName("./description");
        java.lang.String str6 = lookAndFeelBean0.getSkin();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test1018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1018");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str1 = feedType0.getEntryXPath();
        java.lang.String str2 = feedType0.getTypeXPath();
        java.lang.String str3 = feedType0.getTypeXPath();
        java.lang.String str4 = feedType0.getNameXPath();
        java.lang.String str5 = feedType0.getDurationXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "/rss/channel/item" + "'", str1, "/rss/channel/item");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "./enclosure/@type" + "'", str2, "./enclosure/@type");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "./enclosure/@type" + "'", str3, "./enclosure/@type");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "/rss/channel/title" + "'", str4, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "./duration" + "'", str5, "./duration");
    }

    @Test
    public void test1019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1019");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata1 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata1.setAlbumArtist("");
        boolean boolean4 = fontSettings0.equals((java.lang.Object) cDMetadata1);
        fontSettings0.setUseFontSmoothingSettingsFromOs(true);
        boolean boolean7 = fontSettings0.isUseFontSmoothingSettingsFromOs();
        fontSettings0.setUseFontSmoothingSettingsFromOs(false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test1020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1020");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.lang.String str2 = cDMetadata0.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata3 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str4 = cDMetadata3.getGenre();
        java.util.List<java.lang.String> strList5 = cDMetadata3.getComposerNames();
        java.lang.String str6 = cDMetadata3.getAlbum();
        java.util.List<java.lang.Integer> intList7 = cDMetadata3.getTracks();
        int int8 = cDMetadata3.getYear();
        net.sourceforge.atunes.model.CDMetadata cDMetadata9 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str10 = cDMetadata9.getGenre();
        java.util.List<java.lang.String> strList11 = cDMetadata9.getComposerNames();
        java.lang.String str12 = cDMetadata9.getAlbum();
        java.util.List<java.lang.Integer> intList13 = cDMetadata9.getTracks();
        net.sourceforge.atunes.model.CDMetadata cDMetadata14 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata14.setAlbumArtist("");
        java.lang.String str18 = cDMetadata14.getTitle((int) (byte) -1);
        java.lang.String[] strArray20 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        cDMetadata14.setTrackNames((java.util.List<java.lang.String>) strList21);
        cDMetadata9.setTrackNames((java.util.List<java.lang.String>) strList21);
        cDMetadata9.setYear((int) (short) 1);
        int int27 = cDMetadata9.getYear();
        java.lang.String str28 = cDMetadata9.getGenre();
        cDMetadata9.setYear((int) (short) 10);
        net.sourceforge.atunes.model.CDMetadata cDMetadata31 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata31.setAlbumArtist("");
        java.lang.String str34 = cDMetadata31.getGenre();
        java.lang.String[] strArray36 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        cDMetadata31.setTrackNames((java.util.List<java.lang.String>) strList37);
        cDMetadata9.setTrackNames((java.util.List<java.lang.String>) strList37);
        cDMetadata3.setComposerNames((java.util.List<java.lang.String>) strList37);
        cDMetadata0.setArtistNames((java.util.List<java.lang.String>) strList37);
        int int43 = cDMetadata0.getYear();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(intList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(intList13);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test1021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1021");
        net.sourceforge.atunes.model.LookAndFeelBean lookAndFeelBean0 = new net.sourceforge.atunes.model.LookAndFeelBean();
        lookAndFeelBean0.setName("./summary");
        java.lang.String str3 = lookAndFeelBean0.getSkin();
        lookAndFeelBean0.setName("./description");
        java.lang.String str6 = lookAndFeelBean0.getName();
        lookAndFeelBean0.setName("HTTP_PROXY");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "./description" + "'", str6, "./description");
    }

    @Test
    public void test1022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1022");
        net.sourceforge.atunes.model.LookAndFeelBean lookAndFeelBean0 = new net.sourceforge.atunes.model.LookAndFeelBean();
        lookAndFeelBean0.setName("./summary");
        java.lang.String str3 = lookAndFeelBean0.getSkin();
        lookAndFeelBean0.setName("./summary");
        lookAndFeelBean0.setName("./updated");
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test1023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1023");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType8 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion13 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType8, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str14 = applicationVersion13.getDate();
        java.lang.String str15 = applicationVersion13.toShortString();
        int int16 = applicationVersion13.getMajorNumber();
        int int17 = applicationVersion13.getMinorNumber();
        java.lang.String str18 = applicationVersion13.getName();
        java.lang.String str19 = applicationVersion13.getChanges();
        boolean boolean20 = columnBean0.equals((java.lang.Object) applicationVersion13);
        int int21 = columnBean0.getOrder();
        net.sourceforge.atunes.model.ColumnSort columnSort22 = null;
        columnBean0.setSort(columnSort22);
        int int24 = columnBean0.getOrder();
        net.sourceforge.atunes.model.InconsistentRepositoryException inconsistentRepositoryException25 = new net.sourceforge.atunes.model.InconsistentRepositoryException();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList26 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable27 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException28 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable27);
        java.lang.Throwable[] throwableArray29 = searchQuerySyntaxException28.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException30 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException28);
        java.lang.Throwable throwable31 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException32 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable31);
        java.lang.Throwable[] throwableArray33 = searchQuerySyntaxException32.getSuppressed();
        throwableRankList26.replaceItem((java.lang.Throwable) searchQuerySyntaxException28, (java.lang.Throwable) searchQuerySyntaxException32);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList35 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable36 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException37 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable36);
        java.lang.Throwable[] throwableArray38 = searchQuerySyntaxException37.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException39 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException37);
        java.lang.Throwable throwable40 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException41 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable40);
        java.lang.Throwable[] throwableArray42 = searchQuerySyntaxException41.getSuppressed();
        throwableRankList35.replaceItem((java.lang.Throwable) searchQuerySyntaxException37, (java.lang.Throwable) searchQuerySyntaxException41);
        java.lang.Integer int44 = throwableRankList26.getCount((java.lang.Throwable) searchQuerySyntaxException41);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList45 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable46 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException47 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable46);
        java.lang.Throwable[] throwableArray48 = searchQuerySyntaxException47.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException49 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException47);
        java.lang.Throwable throwable50 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException51 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable50);
        java.lang.Throwable[] throwableArray52 = searchQuerySyntaxException51.getSuppressed();
        throwableRankList45.replaceItem((java.lang.Throwable) searchQuerySyntaxException47, (java.lang.Throwable) searchQuerySyntaxException51);
        java.util.List<java.lang.Throwable> throwableList54 = throwableRankList45.getOrder();
        java.lang.Throwable throwable55 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException56 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable55);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList57 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable58 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException59 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable58);
        java.lang.Throwable[] throwableArray60 = searchQuerySyntaxException59.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException61 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException59);
        java.lang.Throwable throwable62 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException63 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable62);
        java.lang.Throwable[] throwableArray64 = searchQuerySyntaxException63.getSuppressed();
        throwableRankList57.replaceItem((java.lang.Throwable) searchQuerySyntaxException59, (java.lang.Throwable) searchQuerySyntaxException63);
        searchQuerySyntaxException56.addSuppressed((java.lang.Throwable) searchQuerySyntaxException63);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException67 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException56);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException68 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException56);
        java.lang.Integer int69 = throwableRankList45.getCount((java.lang.Throwable) searchIndexNotAvailableException68);
        java.lang.Integer int70 = throwableRankList26.getCount((java.lang.Throwable) searchIndexNotAvailableException68);
        java.lang.Throwable[] throwableArray71 = searchIndexNotAvailableException68.getSuppressed();
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException72 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchIndexNotAvailableException68);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList73 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        net.sourceforge.atunes.model.InconsistentRepositoryException inconsistentRepositoryException74 = new net.sourceforge.atunes.model.InconsistentRepositoryException();
        net.sourceforge.atunes.model.InconsistentRepositoryException inconsistentRepositoryException75 = new net.sourceforge.atunes.model.InconsistentRepositoryException();
        throwableRankList73.replaceItem((java.lang.Throwable) inconsistentRepositoryException74, (java.lang.Throwable) inconsistentRepositoryException75);
        java.lang.Throwable throwable77 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException78 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable77);
        java.lang.Throwable[] throwableArray79 = searchQuerySyntaxException78.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException80 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException78);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException81 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException78);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList82 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable83 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException84 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable83);
        java.lang.Throwable[] throwableArray85 = searchQuerySyntaxException84.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException86 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException84);
        java.lang.Throwable throwable87 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException88 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable87);
        java.lang.Throwable[] throwableArray89 = searchQuerySyntaxException88.getSuppressed();
        throwableRankList82.replaceItem((java.lang.Throwable) searchQuerySyntaxException84, (java.lang.Throwable) searchQuerySyntaxException88);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException91 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException88);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException92 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException91);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException93 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchIndexNotAvailableException92);
        searchQuerySyntaxException81.addSuppressed((java.lang.Throwable) searchIndexNotAvailableException93);
        throwableRankList73.addItem((java.lang.Throwable) searchQuerySyntaxException81);
        searchIndexNotAvailableException68.addSuppressed((java.lang.Throwable) searchQuerySyntaxException81);
        inconsistentRepositoryException25.addSuppressed((java.lang.Throwable) searchQuerySyntaxException81);
        boolean boolean98 = columnBean0.equals((java.lang.Object) searchQuerySyntaxException81);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + versionType8 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType8.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "./title" + "'", str14, "./title");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1.0.0 " + "'", str15, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "mpc" + "'", str18, "mpc");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "./title" + "'", str19, "./title");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNull(int44);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableList54);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNull(int69);
        org.junit.Assert.assertNull(int70);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(throwableArray89);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test1024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1024");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata2 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata2.setAlbumArtist("");
        java.lang.String str5 = cDMetadata2.getGenre();
        java.lang.String[] strArray7 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        cDMetadata2.setTrackNames((java.util.List<java.lang.String>) strList8);
        cDMetadata0.setComposerNames((java.util.List<java.lang.String>) strList8);
        java.lang.String str12 = cDMetadata0.getAlbum();
        cDMetadata0.setAlbum("./duration");
        cDMetadata0.setAlbumArtist("HTTP_PROXY");
        java.util.List<java.lang.String> strList17 = cDMetadata0.getComposerNames();
        cDMetadata0.setAlbumArtist("flv");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = cDMetadata0.getComposer(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index -1 out of bounds for length 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strList17);
    }

    @Test
    public void test1025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1025");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType8 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion13 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType8, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str14 = applicationVersion13.getDate();
        java.lang.String str15 = applicationVersion13.toShortString();
        int int16 = applicationVersion13.getMajorNumber();
        int int17 = applicationVersion13.getMinorNumber();
        java.lang.String str18 = applicationVersion13.getName();
        java.lang.String str19 = applicationVersion13.getChanges();
        boolean boolean20 = columnBean0.equals((java.lang.Object) applicationVersion13);
        int int21 = applicationVersion13.getRevisionNumber();
        java.lang.String str22 = applicationVersion13.getChanges();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + versionType8 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType8.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "./title" + "'", str14, "./title");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1.0.0 " + "'", str15, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "mpc" + "'", str18, "mpc");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "./title" + "'", str19, "./title");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "./title" + "'", str22, "./title");
    }

    @Test
    public void test1026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1026");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata1 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata1.setAlbumArtist("");
        boolean boolean4 = fontSettings0.equals((java.lang.Object) cDMetadata1);
        java.lang.String str5 = cDMetadata1.getGenre();
        java.lang.String str6 = cDMetadata1.getAlbumArtist();
        java.util.List<java.lang.String> strList7 = cDMetadata1.getArtistNames();
        java.lang.String str8 = cDMetadata1.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata9 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str10 = cDMetadata9.getGenre();
        java.util.List<java.lang.String> strList11 = cDMetadata9.getComposerNames();
        java.lang.String str12 = cDMetadata9.getAlbum();
        cDMetadata9.setAlbumArtist("./description");
        cDMetadata9.setAlbumArtist("./description");
        net.sourceforge.atunes.model.CDMetadata cDMetadata17 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata17.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList20 = cDMetadata17.getTracks();
        cDMetadata17.setAlbumArtist("/rss/channel/title");
        java.util.List<java.lang.String> strList23 = cDMetadata17.getTrackNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata24 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata24.setAlbumArtist("");
        java.lang.String str27 = cDMetadata24.getGenre();
        java.lang.String[] strArray29 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        cDMetadata24.setTrackNames((java.util.List<java.lang.String>) strList30);
        cDMetadata17.setTrackNames((java.util.List<java.lang.String>) strList30);
        java.util.List<java.lang.String> strList34 = cDMetadata17.getTrackNames();
        cDMetadata9.setComposerNames(strList34);
        cDMetadata1.setArtistNames(strList34);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(strList7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(intList20);
        org.junit.Assert.assertNull(strList23);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strList34);
    }

    @Test
    public void test1027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1027");
        net.sourceforge.atunes.model.LookAndFeelBean lookAndFeelBean0 = new net.sourceforge.atunes.model.LookAndFeelBean();
        java.lang.String str1 = lookAndFeelBean0.getSkin();
        lookAndFeelBean0.setName("net.sourceforge.atunes.model.SearchQuerySyntaxException");
        lookAndFeelBean0.setSkin("");
        java.lang.String str6 = lookAndFeelBean0.getSkin();
        java.lang.String str7 = lookAndFeelBean0.getSkin();
        lookAndFeelBean0.setName("flac");
        java.lang.String str10 = lookAndFeelBean0.getName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "flac" + "'", str10, "flac");
    }

    @Test
    public void test1028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1028");
        net.sourceforge.atunes.model.LookAndFeelBean lookAndFeelBean0 = new net.sourceforge.atunes.model.LookAndFeelBean();
        lookAndFeelBean0.setName("./summary");
        java.lang.String str3 = lookAndFeelBean0.getSkin();
        lookAndFeelBean0.setName("./description");
        java.lang.String str6 = lookAndFeelBean0.getName();
        lookAndFeelBean0.setSkin("net.sourceforge.atunes.model.InconsistentRepositoryException");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "./description" + "'", str6, "./description");
    }

    @Test
    public void test1029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1029");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        columnBean0.setVisible(false);
        columnBean0.setWidth(0);
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType12 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion17 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType12, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str18 = applicationVersion17.getDate();
        java.lang.String str19 = applicationVersion17.toShortString();
        java.lang.String str20 = applicationVersion17.getChanges();
        boolean boolean21 = columnBean0.equals((java.lang.Object) applicationVersion17);
        net.sourceforge.atunes.model.ColumnSort columnSort22 = columnBean0.getSort();
        int int23 = columnBean0.getWidth();
        net.sourceforge.atunes.model.ColumnSort columnSort24 = columnBean0.getSort();
        net.sourceforge.atunes.model.LocalAudioObjectFormat localAudioObjectFormat25 = net.sourceforge.atunes.model.LocalAudioObjectFormat.OGG;
        boolean boolean26 = columnBean0.equals((java.lang.Object) localAudioObjectFormat25);
        columnBean0.setVisible(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + versionType12 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType12.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "./title" + "'", str18, "./title");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1.0.0 " + "'", str19, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "./title" + "'", str20, "./title");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(columnSort22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNull(columnSort24);
        org.junit.Assert.assertTrue("'" + localAudioObjectFormat25 + "' != '" + net.sourceforge.atunes.model.LocalAudioObjectFormat.OGG + "'", localAudioObjectFormat25.equals(net.sourceforge.atunes.model.LocalAudioObjectFormat.OGG));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1030");
        net.sourceforge.atunes.model.LookAndFeelBean lookAndFeelBean0 = new net.sourceforge.atunes.model.LookAndFeelBean();
        lookAndFeelBean0.setName("./summary");
        java.lang.String str3 = lookAndFeelBean0.getSkin();
        lookAndFeelBean0.setSkin("./summary");
        lookAndFeelBean0.setName("rm");
        java.lang.String str8 = lookAndFeelBean0.getName();
        lookAndFeelBean0.setSkin("wav");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "rm" + "'", str8, "rm");
    }

    @Test
    public void test1031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1031");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        int int12 = applicationVersion9.getMajorNumber();
        int int13 = applicationVersion9.getMinorNumber();
        java.lang.String str14 = applicationVersion9.getName();
        java.lang.String str15 = applicationVersion9.toShortString();
        java.lang.String str16 = applicationVersion9.getDirectDownloadURL();
        java.lang.String str17 = applicationVersion9.toShortString();
        java.lang.String str18 = applicationVersion9.getDownloadURL();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType19 = applicationVersion9.getVersionType();
        java.lang.String str20 = applicationVersion9.toShortString();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "mpc" + "'", str14, "mpc");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1.0.0 " + "'", str15, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "./pubDate" + "'", str16, "./pubDate");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1.0.0 " + "'", str17, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "./description" + "'", str18, "./description");
        org.junit.Assert.assertTrue("'" + versionType19 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType19.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1.0.0 " + "'", str20, "1.0.0 ");
    }

    @Test
    public void test1032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1032");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        int int12 = applicationVersion9.getMajorNumber();
        int int13 = applicationVersion9.getMinorNumber();
        java.lang.String str14 = applicationVersion9.getName();
        java.lang.String str15 = applicationVersion9.toShortString();
        java.lang.String str16 = applicationVersion9.getDirectDownloadURL();
        java.lang.String str17 = applicationVersion9.toShortString();
        java.lang.String str18 = applicationVersion9.getDownloadURL();
        int int19 = applicationVersion9.getMinorNumber();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType24 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion29 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType24, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str30 = applicationVersion29.getDate();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType31 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.BETA;
        boolean boolean32 = applicationVersion29.equals((java.lang.Object) versionType31);
        int int33 = applicationVersion29.getMajorNumber();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType34 = applicationVersion29.getVersionType();
        int int35 = applicationVersion29.getMinorNumber();
        int int36 = applicationVersion9.compareTo(applicationVersion29);
        java.lang.String str37 = applicationVersion29.getDate();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "mpc" + "'", str14, "mpc");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1.0.0 " + "'", str15, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "./pubDate" + "'", str16, "./pubDate");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1.0.0 " + "'", str17, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "./description" + "'", str18, "./description");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + versionType24 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType24.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "./title" + "'", str30, "./title");
        org.junit.Assert.assertTrue("'" + versionType31 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.BETA + "'", versionType31.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.BETA));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + versionType34 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType34.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "./title" + "'", str37, "./title");
    }

    @Test
    public void test1033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1033");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList2 = throwableRankList0.getNFirstElements((int) (short) 10);
        throwableRankList0.clear();
        java.util.List<java.lang.Integer> intList5 = throwableRankList0.getNFirstElementCounts(150);
        java.util.List<java.lang.Throwable> throwableList6 = throwableRankList0.getOrder();
        throwableRankList0.clear();
        java.util.List<java.lang.Throwable> throwableList8 = throwableRankList0.getOrder();
        throwableRankList0.clear();
        org.junit.Assert.assertNotNull(throwableList2);
        org.junit.Assert.assertNotNull(intList5);
        org.junit.Assert.assertNotNull(throwableList6);
        org.junit.Assert.assertNotNull(throwableList8);
    }

    @Test
    public void test1034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1034");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList2 = throwableRankList0.getNFirstElements((int) (short) 100);
        java.util.List<java.lang.Throwable> throwableList3 = throwableRankList0.getOrder();
        java.util.List<java.lang.Throwable> throwableList5 = throwableRankList0.getNFirstElements((int) 'a');
        java.lang.Throwable throwable6 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException7 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable6);
        java.lang.Throwable[] throwableArray8 = searchQuerySyntaxException7.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException9 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException7);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException10 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException7);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList11 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable12 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException13 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable12);
        java.lang.Throwable[] throwableArray14 = searchQuerySyntaxException13.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException15 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException13);
        java.lang.Throwable throwable16 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException17 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable16);
        java.lang.Throwable[] throwableArray18 = searchQuerySyntaxException17.getSuppressed();
        throwableRankList11.replaceItem((java.lang.Throwable) searchQuerySyntaxException13, (java.lang.Throwable) searchQuerySyntaxException17);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException20 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException17);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException21 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException20);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException22 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchIndexNotAvailableException21);
        searchQuerySyntaxException10.addSuppressed((java.lang.Throwable) searchIndexNotAvailableException22);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException24 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException10);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException25 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchIndexNotAvailableException24);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException26 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException25);
        throwableRankList0.addItem((java.lang.Throwable) searchQuerySyntaxException25);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList28 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        net.sourceforge.atunes.model.InconsistentRepositoryException inconsistentRepositoryException29 = new net.sourceforge.atunes.model.InconsistentRepositoryException();
        net.sourceforge.atunes.model.InconsistentRepositoryException inconsistentRepositoryException30 = new net.sourceforge.atunes.model.InconsistentRepositoryException();
        throwableRankList28.replaceItem((java.lang.Throwable) inconsistentRepositoryException29, (java.lang.Throwable) inconsistentRepositoryException30);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException32 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) inconsistentRepositoryException30);
        java.lang.Integer int33 = throwableRankList0.getCount((java.lang.Throwable) searchIndexNotAvailableException32);
        org.junit.Assert.assertNotNull(throwableList2);
        org.junit.Assert.assertNotNull(throwableList3);
        org.junit.Assert.assertNotNull(throwableList5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNull(int33);
    }

    @Test
    public void test1035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1035");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.lang.String str3 = cDMetadata0.getGenre();
        java.lang.String str4 = cDMetadata0.getAlbum();
        java.lang.String str5 = cDMetadata0.getAlbumArtist();
        java.lang.String str6 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList7 = cDMetadata0.getTrackNames();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(strList7);
    }

    @Test
    public void test1036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1036");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        int int12 = applicationVersion9.getMajorNumber();
        int int13 = applicationVersion9.getMinorNumber();
        java.lang.String str14 = applicationVersion9.getName();
        java.lang.String str15 = applicationVersion9.toShortString();
        java.lang.String str16 = applicationVersion9.getDirectDownloadURL();
        java.lang.String str17 = applicationVersion9.toShortString();
        java.lang.String str18 = applicationVersion9.getDownloadURL();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType19 = applicationVersion9.getVersionType();
        java.lang.String str20 = applicationVersion9.getDownloadURL();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "mpc" + "'", str14, "mpc");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1.0.0 " + "'", str15, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "./pubDate" + "'", str16, "./pubDate");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1.0.0 " + "'", str17, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "./description" + "'", str18, "./description");
        org.junit.Assert.assertTrue("'" + versionType19 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType19.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "./description" + "'", str20, "./description");
    }

    @Test
    public void test1037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1037");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable1 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException2 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable1);
        java.lang.Throwable[] throwableArray3 = searchQuerySyntaxException2.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException4 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException2);
        java.lang.Throwable throwable5 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException6 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable5);
        java.lang.Throwable[] throwableArray7 = searchQuerySyntaxException6.getSuppressed();
        throwableRankList0.replaceItem((java.lang.Throwable) searchQuerySyntaxException2, (java.lang.Throwable) searchQuerySyntaxException6);
        java.util.List<java.lang.Throwable> throwableList9 = throwableRankList0.getOrder();
        int int10 = throwableRankList0.size();
        java.util.List<java.lang.Throwable> throwableList12 = throwableRankList0.getNFirstElements(1);
        java.util.List<java.lang.Integer> intList14 = throwableRankList0.getNFirstElementCounts(0);
        java.lang.Throwable throwable15 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException16 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable15);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList17 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable18 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException19 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable18);
        java.lang.Throwable[] throwableArray20 = searchQuerySyntaxException19.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException21 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException19);
        java.lang.Throwable throwable22 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException23 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable22);
        java.lang.Throwable[] throwableArray24 = searchQuerySyntaxException23.getSuppressed();
        throwableRankList17.replaceItem((java.lang.Throwable) searchQuerySyntaxException19, (java.lang.Throwable) searchQuerySyntaxException23);
        searchQuerySyntaxException16.addSuppressed((java.lang.Throwable) searchQuerySyntaxException23);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException27 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException16);
        java.lang.Throwable throwable28 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException29 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable28);
        java.lang.Throwable[] throwableArray30 = searchQuerySyntaxException29.getSuppressed();
        searchQuerySyntaxException16.addSuppressed((java.lang.Throwable) searchQuerySyntaxException29);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException32 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException16);
        java.lang.Integer int33 = throwableRankList0.getCount((java.lang.Throwable) searchQuerySyntaxException16);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException34 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException16);
        java.lang.String str35 = searchQuerySyntaxException34.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableList9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(throwableList12);
        org.junit.Assert.assertNotNull(intList14);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNull(int33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "net.sourceforge.atunes.model.SearchQuerySyntaxException: net.sourceforge.atunes.model.SearchQuerySyntaxException" + "'", str35, "net.sourceforge.atunes.model.SearchQuerySyntaxException: net.sourceforge.atunes.model.SearchQuerySyntaxException");
    }

    @Test
    public void test1038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1038");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType10 = applicationVersion9.getVersionType();
        java.lang.String str11 = applicationVersion9.toString();
        java.lang.String str12 = applicationVersion9.getDirectDownloadURL();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertTrue("'" + versionType10 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType10.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 mpc " + "'", str11, "1.0.0 mpc ");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "./pubDate" + "'", str12, "./pubDate");
    }

    @Test
    public void test1039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1039");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.ATOM;
        java.lang.String str1 = feedType0.getUrlXPath();
        java.lang.String str2 = feedType0.getTypeXPath();
        java.lang.String str3 = feedType0.getUrlXPath();
        java.lang.String str4 = feedType0.getEntryXPath();
        java.lang.String str5 = feedType0.getDateXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.ATOM + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.ATOM));
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "./link[@rel='enclosure']/@type" + "'", str2, "./link[@rel='enclosure']/@type");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "/feed/entry" + "'", str4, "/feed/entry");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "./updated" + "'", str5, "./updated");
    }

    @Test
    public void test1040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1040");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList2 = throwableRankList0.getNFirstElements((int) (short) 10);
        int int3 = throwableRankList0.size();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList4 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable5 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException6 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable5);
        java.lang.Throwable[] throwableArray7 = searchQuerySyntaxException6.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException8 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException6);
        java.lang.Throwable throwable9 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException10 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable9);
        java.lang.Throwable[] throwableArray11 = searchQuerySyntaxException10.getSuppressed();
        throwableRankList4.replaceItem((java.lang.Throwable) searchQuerySyntaxException6, (java.lang.Throwable) searchQuerySyntaxException10);
        java.lang.Throwable[] throwableArray13 = searchQuerySyntaxException6.getSuppressed();
        java.lang.Integer int14 = throwableRankList0.getCount((java.lang.Throwable) searchQuerySyntaxException6);
        int int15 = throwableRankList0.size();
        java.util.List<java.lang.Throwable> throwableList17 = throwableRankList0.getNFirstElements((int) (byte) 1);
        java.util.List<java.lang.Throwable> throwableList19 = throwableRankList0.getNFirstElements((int) (short) 10);
        org.junit.Assert.assertNotNull(throwableList2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(throwableList17);
        org.junit.Assert.assertNotNull(throwableList19);
    }

    @Test
    public void test1041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1041");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList2 = throwableRankList0.getNFirstElements((int) (short) 10);
        throwableRankList0.clear();
        java.util.List<java.lang.Integer> intList5 = throwableRankList0.getNFirstElementCounts(150);
        throwableRankList0.clear();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList7 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable8 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException9 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable8);
        java.lang.Throwable[] throwableArray10 = searchQuerySyntaxException9.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException11 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException9);
        java.lang.Throwable throwable12 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException13 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable12);
        java.lang.Throwable[] throwableArray14 = searchQuerySyntaxException13.getSuppressed();
        throwableRankList7.replaceItem((java.lang.Throwable) searchQuerySyntaxException9, (java.lang.Throwable) searchQuerySyntaxException13);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException16 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException13);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException17 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException13);
        java.lang.Throwable throwable18 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException19 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable18);
        java.lang.Throwable[] throwableArray20 = searchQuerySyntaxException19.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException21 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException19);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException22 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException19);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList23 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable24 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException25 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable24);
        java.lang.Throwable[] throwableArray26 = searchQuerySyntaxException25.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException27 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException25);
        java.lang.Throwable throwable28 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException29 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable28);
        java.lang.Throwable[] throwableArray30 = searchQuerySyntaxException29.getSuppressed();
        throwableRankList23.replaceItem((java.lang.Throwable) searchQuerySyntaxException25, (java.lang.Throwable) searchQuerySyntaxException29);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException32 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException29);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException33 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException32);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException34 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchIndexNotAvailableException33);
        searchQuerySyntaxException22.addSuppressed((java.lang.Throwable) searchIndexNotAvailableException34);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException36 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException22);
        throwableRankList0.replaceItem((java.lang.Throwable) searchIndexNotAvailableException17, (java.lang.Throwable) searchQuerySyntaxException36);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException38 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchIndexNotAvailableException17);
        org.junit.Assert.assertNotNull(throwableList2);
        org.junit.Assert.assertNotNull(intList5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray30);
    }

    @Test
    public void test1042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1042");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType8 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion13 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType8, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str14 = applicationVersion13.getDate();
        java.lang.String str15 = applicationVersion13.toShortString();
        int int16 = applicationVersion13.getMajorNumber();
        int int17 = applicationVersion13.getMinorNumber();
        java.lang.String str18 = applicationVersion13.getName();
        java.lang.String str19 = applicationVersion13.getChanges();
        boolean boolean20 = columnBean0.equals((java.lang.Object) applicationVersion13);
        int int21 = applicationVersion13.getMajorNumber();
        net.sourceforge.atunes.model.ColumnBean columnBean22 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean23 = columnBean22.isVisible();
        columnBean22.setOrder((int) (byte) -1);
        columnBean22.setVisible(false);
        columnBean22.setWidth(0);
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType34 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion39 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType34, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str40 = applicationVersion39.getDate();
        java.lang.String str41 = applicationVersion39.toShortString();
        java.lang.String str42 = applicationVersion39.getChanges();
        boolean boolean43 = columnBean22.equals((java.lang.Object) applicationVersion39);
        java.lang.String str44 = applicationVersion39.getDownloadURL();
        java.lang.String str45 = applicationVersion39.getChanges();
        int int46 = applicationVersion13.compareTo(applicationVersion39);
        java.lang.String str47 = applicationVersion39.getDirectDownloadURL();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + versionType8 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType8.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "./title" + "'", str14, "./title");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1.0.0 " + "'", str15, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "mpc" + "'", str18, "mpc");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "./title" + "'", str19, "./title");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + versionType34 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType34.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "./title" + "'", str40, "./title");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1.0.0 " + "'", str41, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "./title" + "'", str42, "./title");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "./description" + "'", str44, "./description");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "./title" + "'", str45, "./title");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "./pubDate" + "'", str47, "./pubDate");
    }

    @Test
    public void test1043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1043");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        fontSettings0.setUseFontSmoothing(false);
        net.sourceforge.atunes.model.IFontBean iFontBean3 = fontSettings0.getFont();
        boolean boolean4 = fontSettings0.isUseFontSmoothing();
        fontSettings0.setUseFontSmoothing(true);
        net.sourceforge.atunes.model.IFontBean iFontBean7 = fontSettings0.getFont();
        boolean boolean8 = fontSettings0.isUseFontSmoothing();
        net.sourceforge.atunes.model.FontSettings fontSettings9 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata10 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata10.setAlbumArtist("");
        boolean boolean13 = fontSettings9.equals((java.lang.Object) cDMetadata10);
        fontSettings9.setUseFontSmoothingSettingsFromOs(true);
        boolean boolean16 = fontSettings9.isUseFontSmoothingSettingsFromOs();
        boolean boolean17 = fontSettings0.equals((java.lang.Object) fontSettings9);
        net.sourceforge.atunes.model.IFontBean iFontBean18 = null;
        fontSettings0.setFont(iFontBean18);
        org.junit.Assert.assertNull(iFontBean3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(iFontBean7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1044");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        int int1 = cDMetadata0.getYear();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.lang.String str3 = cDMetadata0.getAlbumArtist();
        cDMetadata0.setYear((int) '#');
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test1045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1045");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType20 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion25 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType20, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str26 = applicationVersion25.getDate();
        java.lang.String str27 = applicationVersion25.toShortString();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType28 = applicationVersion25.getVersionType();
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion33 = new net.sourceforge.atunes.model.ApplicationVersion("1.0.0 ", (int) (short) 10, (int) '4', (int) '#', versionType28, "", "./enclosure/@url", "SOCKS_PROXY", "./enclosure/@url");
        java.lang.String str34 = applicationVersion33.getName();
        java.lang.String str35 = applicationVersion33.toString();
        net.sourceforge.atunes.model.FeedType feedType36 = net.sourceforge.atunes.model.FeedType.ATOM;
        java.lang.String str37 = feedType36.getTypeXPath();
        java.lang.String str38 = feedType36.getUrlXPath();
        boolean boolean39 = applicationVersion33.equals((java.lang.Object) feedType36);
        int int40 = applicationVersion9.compareTo(applicationVersion33);
        net.sourceforge.atunes.model.FontSettings fontSettings41 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata42 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata42.setAlbumArtist("");
        boolean boolean45 = fontSettings41.equals((java.lang.Object) cDMetadata42);
        java.lang.String str46 = cDMetadata42.getAlbum();
        java.lang.String str47 = cDMetadata42.getAlbum();
        java.util.List<java.lang.Integer> intList48 = cDMetadata42.getTracks();
        boolean boolean49 = applicationVersion33.equals((java.lang.Object) cDMetadata42);
        java.util.List<java.lang.String> strList50 = cDMetadata42.getArtistNames();
        java.util.List<java.lang.String> strList51 = cDMetadata42.getComposerNames();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + versionType20 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType20.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "./title" + "'", str26, "./title");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1.0.0 " + "'", str27, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + versionType28 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType28.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "10.52.35  " + "'", str35, "10.52.35  ");
        org.junit.Assert.assertTrue("'" + feedType36 + "' != '" + net.sourceforge.atunes.model.FeedType.ATOM + "'", feedType36.equals(net.sourceforge.atunes.model.FeedType.ATOM));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "./link[@rel='enclosure']/@type" + "'", str37, "./link[@rel='enclosure']/@type");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(intList48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(strList50);
        org.junit.Assert.assertNull(strList51);
    }

    @Test
    public void test1046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1046");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList2 = throwableRankList0.getNFirstElements((int) (short) 10);
        int int3 = throwableRankList0.size();
        int int4 = throwableRankList0.size();
        java.lang.Throwable throwable5 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException6 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable5);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList7 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable8 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException9 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable8);
        java.lang.Throwable[] throwableArray10 = searchQuerySyntaxException9.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException11 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException9);
        java.lang.Throwable throwable12 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException13 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable12);
        java.lang.Throwable[] throwableArray14 = searchQuerySyntaxException13.getSuppressed();
        throwableRankList7.replaceItem((java.lang.Throwable) searchQuerySyntaxException9, (java.lang.Throwable) searchQuerySyntaxException13);
        searchQuerySyntaxException6.addSuppressed((java.lang.Throwable) searchQuerySyntaxException13);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException17 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException6);
        java.lang.Integer int18 = throwableRankList0.getCount((java.lang.Throwable) searchQuerySyntaxException6);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException19 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException6);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException20 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchIndexNotAvailableException19);
        org.junit.Assert.assertNotNull(throwableList2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNull(int18);
    }

    @Test
    public void test1047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1047");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata2 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata2.setAlbumArtist("");
        java.lang.String str5 = cDMetadata2.getGenre();
        java.lang.String[] strArray7 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        cDMetadata2.setTrackNames((java.util.List<java.lang.String>) strList8);
        cDMetadata0.setComposerNames((java.util.List<java.lang.String>) strList8);
        net.sourceforge.atunes.model.CDMetadata cDMetadata12 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str13 = cDMetadata12.getGenre();
        java.util.List<java.lang.String> strList14 = cDMetadata12.getComposerNames();
        java.lang.String str15 = cDMetadata12.getAlbum();
        net.sourceforge.atunes.model.CDMetadata cDMetadata16 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata16.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList19 = cDMetadata16.getTracks();
        cDMetadata16.setAlbumArtist("/rss/channel/title");
        java.util.List<java.lang.String> strList22 = cDMetadata16.getTrackNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata23 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata23.setAlbumArtist("");
        java.lang.String str26 = cDMetadata23.getGenre();
        java.lang.String[] strArray28 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        cDMetadata23.setTrackNames((java.util.List<java.lang.String>) strList29);
        cDMetadata16.setTrackNames((java.util.List<java.lang.String>) strList29);
        cDMetadata12.setTrackNames((java.util.List<java.lang.String>) strList29);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList29);
        cDMetadata0.setAlbum("/feed/entry");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(intList19);
        org.junit.Assert.assertNull(strList22);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test1048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1048");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList2 = throwableRankList0.getNFirstElements((int) (short) 100);
        java.lang.Throwable throwable3 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException4 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable3);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList5 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable6 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException7 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable6);
        java.lang.Throwable[] throwableArray8 = searchQuerySyntaxException7.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException9 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException7);
        java.lang.Throwable throwable10 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException11 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable10);
        java.lang.Throwable[] throwableArray12 = searchQuerySyntaxException11.getSuppressed();
        throwableRankList5.replaceItem((java.lang.Throwable) searchQuerySyntaxException7, (java.lang.Throwable) searchQuerySyntaxException11);
        searchQuerySyntaxException4.addSuppressed((java.lang.Throwable) searchQuerySyntaxException11);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException15 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException4);
        java.lang.Throwable throwable16 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException17 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable16);
        java.lang.Throwable[] throwableArray18 = searchQuerySyntaxException17.getSuppressed();
        searchQuerySyntaxException4.addSuppressed((java.lang.Throwable) searchQuerySyntaxException17);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException20 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException4);
        java.lang.Throwable throwable21 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException22 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable21);
        java.lang.Throwable[] throwableArray23 = searchQuerySyntaxException22.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException24 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException22);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException25 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException22);
        throwableRankList0.replaceItem((java.lang.Throwable) searchQuerySyntaxException4, (java.lang.Throwable) searchQuerySyntaxException25);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException27 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException4);
        java.lang.Throwable[] throwableArray28 = searchQuerySyntaxException4.getSuppressed();
        org.junit.Assert.assertNotNull(throwableList2);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray28);
    }

    @Test
    public void test1049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1049");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        int int12 = applicationVersion9.getMajorNumber();
        java.lang.String str13 = applicationVersion9.toShortString();
        java.lang.String str14 = applicationVersion9.getDownloadURL();
        java.lang.String str15 = applicationVersion9.getDate();
        net.sourceforge.atunes.model.LookAndFeelBean lookAndFeelBean16 = new net.sourceforge.atunes.model.LookAndFeelBean();
        lookAndFeelBean16.setName("./summary");
        lookAndFeelBean16.setSkin("flac");
        boolean boolean21 = applicationVersion9.equals((java.lang.Object) lookAndFeelBean16);
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType26 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion31 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType26, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str32 = applicationVersion31.getDate();
        java.lang.String str33 = applicationVersion31.toShortString();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType34 = applicationVersion31.getVersionType();
        java.lang.String str35 = applicationVersion31.getDirectDownloadURL();
        int int36 = applicationVersion9.compareTo(applicationVersion31);
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1.0.0 " + "'", str13, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "./description" + "'", str14, "./description");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "./title" + "'", str15, "./title");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + versionType26 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType26.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "./title" + "'", str32, "./title");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1.0.0 " + "'", str33, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + versionType34 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType34.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "./pubDate" + "'", str35, "./pubDate");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test1050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1050");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.lang.String str3 = cDMetadata0.getAlbum();
        java.util.List<java.lang.Integer> intList4 = cDMetadata0.getTracks();
        net.sourceforge.atunes.model.CDMetadata cDMetadata5 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata5.setAlbumArtist("");
        java.lang.String str9 = cDMetadata5.getTitle((int) (byte) -1);
        java.lang.String[] strArray11 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        cDMetadata5.setTrackNames((java.util.List<java.lang.String>) strList12);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList12);
        cDMetadata0.setYear((int) (short) 1);
        int int18 = cDMetadata0.getYear();
        java.lang.String str19 = cDMetadata0.getGenre();
        java.lang.String str21 = cDMetadata0.getTitle((int) (byte) 1);
        net.sourceforge.atunes.model.CDMetadata cDMetadata22 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata22.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList25 = cDMetadata22.getTracks();
        cDMetadata22.setAlbumArtist("/rss/channel/title");
        java.util.List<java.lang.String> strList28 = cDMetadata22.getTrackNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata29 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata29.setAlbumArtist("");
        java.lang.String str32 = cDMetadata29.getGenre();
        java.lang.String[] strArray34 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        cDMetadata29.setTrackNames((java.util.List<java.lang.String>) strList35);
        cDMetadata22.setTrackNames((java.util.List<java.lang.String>) strList35);
        net.sourceforge.atunes.model.CDMetadata cDMetadata39 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str40 = cDMetadata39.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata41 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata41.setAlbumArtist("");
        java.lang.String str44 = cDMetadata41.getGenre();
        java.lang.String[] strArray46 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        cDMetadata41.setTrackNames((java.util.List<java.lang.String>) strList47);
        cDMetadata39.setComposerNames((java.util.List<java.lang.String>) strList47);
        cDMetadata22.setTrackNames((java.util.List<java.lang.String>) strList47);
        int int52 = cDMetadata22.getDisc();
        net.sourceforge.atunes.model.CDMetadata cDMetadata53 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata53.setAlbumArtist("");
        java.lang.String str57 = cDMetadata53.getTitle((int) (byte) -1);
        java.lang.String[] strArray59 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList60 = new java.util.ArrayList<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList60, strArray59);
        cDMetadata53.setTrackNames((java.util.List<java.lang.String>) strList60);
        cDMetadata53.setAlbumArtist("/rss/channel/item");
        net.sourceforge.atunes.model.CDMetadata cDMetadata65 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str66 = cDMetadata65.getGenre();
        java.util.List<java.lang.String> strList67 = cDMetadata65.getComposerNames();
        java.lang.String str68 = cDMetadata65.getAlbum();
        java.util.List<java.lang.Integer> intList69 = cDMetadata65.getTracks();
        net.sourceforge.atunes.model.CDMetadata cDMetadata70 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata70.setAlbumArtist("");
        java.lang.String str74 = cDMetadata70.getTitle((int) (byte) -1);
        java.lang.String[] strArray76 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList77 = new java.util.ArrayList<java.lang.String>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList77, strArray76);
        cDMetadata70.setTrackNames((java.util.List<java.lang.String>) strList77);
        cDMetadata65.setTrackNames((java.util.List<java.lang.String>) strList77);
        cDMetadata53.setTrackNames((java.util.List<java.lang.String>) strList77);
        cDMetadata22.setArtistNames((java.util.List<java.lang.String>) strList77);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList77);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(intList4);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "./title" + "'", str21, "./title");
        org.junit.Assert.assertNull(intList25);
        org.junit.Assert.assertNull(strList28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNull(strList67);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNull(intList69);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test1051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1051");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        fontSettings0.setUseFontSmoothing(false);
        net.sourceforge.atunes.model.IFontBean iFontBean3 = fontSettings0.getFont();
        boolean boolean4 = fontSettings0.isUseFontSmoothing();
        fontSettings0.setUseFontSmoothing(true);
        boolean boolean7 = fontSettings0.isUseFontSmoothing();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType12 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion17 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType12, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str18 = applicationVersion17.getDate();
        java.lang.String str19 = applicationVersion17.toShortString();
        int int20 = applicationVersion17.getMajorNumber();
        java.lang.String str21 = applicationVersion17.toString();
        java.lang.String str22 = applicationVersion17.getChanges();
        int int23 = applicationVersion17.getRevisionNumber();
        boolean boolean24 = fontSettings0.equals((java.lang.Object) int23);
        net.sourceforge.atunes.model.CDMetadata cDMetadata25 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str26 = cDMetadata25.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata27 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata27.setAlbumArtist("");
        java.lang.String str30 = cDMetadata27.getGenre();
        java.lang.String[] strArray32 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        cDMetadata27.setTrackNames((java.util.List<java.lang.String>) strList33);
        cDMetadata25.setComposerNames((java.util.List<java.lang.String>) strList33);
        java.lang.String str37 = cDMetadata25.getAlbum();
        cDMetadata25.setAlbum("./duration");
        cDMetadata25.setDisc((int) (short) 1);
        boolean boolean42 = fontSettings0.equals((java.lang.Object) cDMetadata25);
        cDMetadata25.setDisc((int) (short) -1);
        org.junit.Assert.assertNull(iFontBean3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + versionType12 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType12.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "./title" + "'", str18, "./title");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1.0.0 " + "'", str19, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1.0.0 mpc " + "'", str21, "1.0.0 mpc ");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "./title" + "'", str22, "./title");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test1052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1052");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList2 = throwableRankList0.getNFirstElements((int) (short) 10);
        throwableRankList0.clear();
        java.util.List<java.lang.Integer> intList5 = throwableRankList0.getNFirstElementCounts(150);
        throwableRankList0.clear();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList7 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable8 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException9 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable8);
        java.lang.Throwable[] throwableArray10 = searchQuerySyntaxException9.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException11 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException9);
        java.lang.Throwable throwable12 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException13 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable12);
        java.lang.Throwable[] throwableArray14 = searchQuerySyntaxException13.getSuppressed();
        throwableRankList7.replaceItem((java.lang.Throwable) searchQuerySyntaxException9, (java.lang.Throwable) searchQuerySyntaxException13);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException16 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException13);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException17 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException13);
        java.lang.Throwable throwable18 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException19 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable18);
        java.lang.Throwable[] throwableArray20 = searchQuerySyntaxException19.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException21 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException19);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException22 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException19);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList23 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable24 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException25 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable24);
        java.lang.Throwable[] throwableArray26 = searchQuerySyntaxException25.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException27 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException25);
        java.lang.Throwable throwable28 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException29 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable28);
        java.lang.Throwable[] throwableArray30 = searchQuerySyntaxException29.getSuppressed();
        throwableRankList23.replaceItem((java.lang.Throwable) searchQuerySyntaxException25, (java.lang.Throwable) searchQuerySyntaxException29);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException32 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException29);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException33 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException32);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException34 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchIndexNotAvailableException33);
        searchQuerySyntaxException22.addSuppressed((java.lang.Throwable) searchIndexNotAvailableException34);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException36 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException22);
        throwableRankList0.replaceItem((java.lang.Throwable) searchIndexNotAvailableException17, (java.lang.Throwable) searchQuerySyntaxException36);
        int int38 = throwableRankList0.size();
        org.junit.Assert.assertNotNull(throwableList2);
        org.junit.Assert.assertNotNull(intList5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test1053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1053");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        net.sourceforge.atunes.model.SubmissionState submissionState2 = net.sourceforge.atunes.model.SubmissionState.PENDING;
        boolean boolean3 = columnBean0.equals((java.lang.Object) submissionState2);
        columnBean0.setVisible(false);
        net.sourceforge.atunes.model.ColumnSort columnSort6 = columnBean0.getSort();
        boolean boolean7 = columnBean0.isVisible();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + submissionState2 + "' != '" + net.sourceforge.atunes.model.SubmissionState.PENDING + "'", submissionState2.equals(net.sourceforge.atunes.model.SubmissionState.PENDING));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(columnSort6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1054");
        net.sourceforge.atunes.model.IFontBean iFontBean0 = null;
        net.sourceforge.atunes.model.FontSettings fontSettings3 = new net.sourceforge.atunes.model.FontSettings(iFontBean0, true, true);
        fontSettings3.setUseFontSmoothing(true);
        fontSettings3.setUseFontSmoothingSettingsFromOs(true);
        net.sourceforge.atunes.model.IFontBean iFontBean8 = null;
        fontSettings3.setFont(iFontBean8);
        boolean boolean10 = fontSettings3.isUseFontSmoothingSettingsFromOs();
        boolean boolean11 = fontSettings3.isUseFontSmoothingSettingsFromOs();
        fontSettings3.setUseFontSmoothing(false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test1055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1055");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.lang.String str3 = cDMetadata0.getAlbum();
        net.sourceforge.atunes.model.CDMetadata cDMetadata4 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata4.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList7 = cDMetadata4.getTracks();
        cDMetadata4.setAlbumArtist("/rss/channel/title");
        java.util.List<java.lang.String> strList10 = cDMetadata4.getTrackNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata11 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata11.setAlbumArtist("");
        java.lang.String str14 = cDMetadata11.getGenre();
        java.lang.String[] strArray16 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        cDMetadata11.setTrackNames((java.util.List<java.lang.String>) strList17);
        cDMetadata4.setTrackNames((java.util.List<java.lang.String>) strList17);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList17);
        java.util.List<java.lang.String> strList22 = cDMetadata0.getTrackNames();
        java.lang.String str23 = cDMetadata0.getAlbumArtist();
        cDMetadata0.setGenre("net.sourceforge.atunes.model.SearchQuerySyntaxException: net.sourceforge.atunes.model.SearchIndexNotAvailableException: net.sourceforge.atunes.model.SearchQuerySyntaxException: net.sourceforge.atunes.model.SearchQuerySyntaxException");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList26 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable27 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException28 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable27);
        java.lang.Throwable[] throwableArray29 = searchQuerySyntaxException28.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException30 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException28);
        java.lang.Throwable throwable31 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException32 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable31);
        java.lang.Throwable[] throwableArray33 = searchQuerySyntaxException32.getSuppressed();
        throwableRankList26.replaceItem((java.lang.Throwable) searchQuerySyntaxException28, (java.lang.Throwable) searchQuerySyntaxException32);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList35 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable36 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException37 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable36);
        java.lang.Throwable[] throwableArray38 = searchQuerySyntaxException37.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException39 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException37);
        java.lang.Throwable throwable40 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException41 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable40);
        java.lang.Throwable[] throwableArray42 = searchQuerySyntaxException41.getSuppressed();
        throwableRankList35.replaceItem((java.lang.Throwable) searchQuerySyntaxException37, (java.lang.Throwable) searchQuerySyntaxException41);
        java.lang.Integer int44 = throwableRankList26.getCount((java.lang.Throwable) searchQuerySyntaxException41);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList45 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable46 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException47 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable46);
        java.lang.Throwable[] throwableArray48 = searchQuerySyntaxException47.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException49 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException47);
        java.lang.Throwable throwable50 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException51 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable50);
        java.lang.Throwable[] throwableArray52 = searchQuerySyntaxException51.getSuppressed();
        throwableRankList45.replaceItem((java.lang.Throwable) searchQuerySyntaxException47, (java.lang.Throwable) searchQuerySyntaxException51);
        java.util.List<java.lang.Throwable> throwableList54 = throwableRankList45.getOrder();
        java.lang.Throwable throwable55 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException56 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable55);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList57 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable58 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException59 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable58);
        java.lang.Throwable[] throwableArray60 = searchQuerySyntaxException59.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException61 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException59);
        java.lang.Throwable throwable62 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException63 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable62);
        java.lang.Throwable[] throwableArray64 = searchQuerySyntaxException63.getSuppressed();
        throwableRankList57.replaceItem((java.lang.Throwable) searchQuerySyntaxException59, (java.lang.Throwable) searchQuerySyntaxException63);
        searchQuerySyntaxException56.addSuppressed((java.lang.Throwable) searchQuerySyntaxException63);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException67 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException56);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException68 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException56);
        java.lang.Integer int69 = throwableRankList45.getCount((java.lang.Throwable) searchIndexNotAvailableException68);
        java.lang.Integer int70 = throwableRankList26.getCount((java.lang.Throwable) searchIndexNotAvailableException68);
        java.util.List<java.lang.Integer> intList72 = throwableRankList26.getNFirstElementCounts((int) (byte) 0);
        cDMetadata0.setTracks(intList72);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(intList7);
        org.junit.Assert.assertNull(strList10);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNull(int44);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableList54);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNull(int69);
        org.junit.Assert.assertNull(int70);
        org.junit.Assert.assertNotNull(intList72);
    }

    @Test
    public void test1056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1056");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str1 = feedType0.getEntryXPath();
        java.lang.String str2 = feedType0.getTypeXPath();
        java.lang.String str3 = feedType0.getTypeXPath();
        java.lang.String str4 = feedType0.getDescriptionXPath();
        java.lang.String str5 = feedType0.getNameXPath();
        java.lang.String str6 = feedType0.getNameXPath();
        java.lang.String str7 = feedType0.getTitleXPath();
        java.lang.String str8 = feedType0.getEntryXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "/rss/channel/item" + "'", str1, "/rss/channel/item");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "./enclosure/@type" + "'", str2, "./enclosure/@type");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "./enclosure/@type" + "'", str3, "./enclosure/@type");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "./description" + "'", str4, "./description");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/rss/channel/title" + "'", str5, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "/rss/channel/title" + "'", str6, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "./title" + "'", str7, "./title");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "/rss/channel/item" + "'", str8, "/rss/channel/item");
    }

    @Test
    public void test1057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1057");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType8 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion13 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType8, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str14 = applicationVersion13.getDate();
        java.lang.String str15 = applicationVersion13.toShortString();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType16 = applicationVersion13.getVersionType();
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion21 = new net.sourceforge.atunes.model.ApplicationVersion("1.0.0 ", (int) (short) 10, (int) '4', (int) '#', versionType16, "", "./enclosure/@url", "SOCKS_PROXY", "./enclosure/@url");
        java.lang.String str22 = applicationVersion21.getName();
        java.lang.String str23 = applicationVersion21.toString();
        net.sourceforge.atunes.model.FeedType feedType24 = net.sourceforge.atunes.model.FeedType.ATOM;
        java.lang.String str25 = feedType24.getTypeXPath();
        java.lang.String str26 = feedType24.getUrlXPath();
        boolean boolean27 = applicationVersion21.equals((java.lang.Object) feedType24);
        java.lang.String str28 = applicationVersion21.getDate();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType29 = applicationVersion21.getVersionType();
        int int30 = applicationVersion21.getMinorNumber();
        java.lang.String str31 = applicationVersion21.getName();
        org.junit.Assert.assertTrue("'" + versionType8 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType8.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "./title" + "'", str14, "./title");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1.0.0 " + "'", str15, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + versionType16 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType16.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "10.52.35  " + "'", str23, "10.52.35  ");
        org.junit.Assert.assertTrue("'" + feedType24 + "' != '" + net.sourceforge.atunes.model.FeedType.ATOM + "'", feedType24.equals(net.sourceforge.atunes.model.FeedType.ATOM));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "./link[@rel='enclosure']/@type" + "'", str25, "./link[@rel='enclosure']/@type");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1.0.0 " + "'", str28, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + versionType29 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType29.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
    }

    @Test
    public void test1058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1058");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str1 = feedType0.getUrlXPath();
        java.lang.String str2 = feedType0.getNameXPath();
        java.lang.String str3 = feedType0.getDescriptionXPath();
        java.lang.String str4 = feedType0.getNameXPath();
        java.lang.String str5 = feedType0.getNameXPath();
        java.lang.String str6 = feedType0.getUrlXPath();
        java.lang.String str7 = feedType0.getTitleXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "./enclosure/@url" + "'", str1, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "/rss/channel/title" + "'", str2, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "./description" + "'", str3, "./description");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "/rss/channel/title" + "'", str4, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/rss/channel/title" + "'", str5, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "./enclosure/@url" + "'", str6, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "./title" + "'", str7, "./title");
    }

    @Test
    public void test1059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1059");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        columnBean0.setVisible(false);
        columnBean0.setWidth(0);
        net.sourceforge.atunes.model.ColumnSort columnSort8 = columnBean0.getSort();
        net.sourceforge.atunes.model.ColumnSort columnSort9 = columnBean0.getSort();
        columnBean0.setOrder((int) (short) 100);
        columnBean0.setOrder((int) (byte) -1);
        boolean boolean14 = columnBean0.isVisible();
        boolean boolean15 = columnBean0.isVisible();
        int int16 = columnBean0.getWidth();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType21 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion26 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType21, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str27 = applicationVersion26.getDate();
        java.lang.String str28 = applicationVersion26.toShortString();
        int int29 = applicationVersion26.getMajorNumber();
        int int30 = applicationVersion26.getMinorNumber();
        java.lang.String str31 = applicationVersion26.getName();
        java.lang.String str32 = applicationVersion26.toShortString();
        java.lang.String str33 = applicationVersion26.toShortString();
        boolean boolean34 = columnBean0.equals((java.lang.Object) applicationVersion26);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(columnSort8);
        org.junit.Assert.assertNull(columnSort9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + versionType21 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType21.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "./title" + "'", str27, "./title");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1.0.0 " + "'", str28, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "mpc" + "'", str31, "mpc");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1.0.0 " + "'", str32, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1.0.0 " + "'", str33, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test1060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1060");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable1 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException2 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable1);
        java.lang.Throwable[] throwableArray3 = searchQuerySyntaxException2.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException4 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException2);
        java.lang.Throwable throwable5 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException6 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable5);
        java.lang.Throwable[] throwableArray7 = searchQuerySyntaxException6.getSuppressed();
        throwableRankList0.replaceItem((java.lang.Throwable) searchQuerySyntaxException2, (java.lang.Throwable) searchQuerySyntaxException6);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList9 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable10 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException11 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable10);
        java.lang.Throwable[] throwableArray12 = searchQuerySyntaxException11.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException13 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException11);
        java.lang.Throwable throwable14 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException15 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable14);
        java.lang.Throwable[] throwableArray16 = searchQuerySyntaxException15.getSuppressed();
        throwableRankList9.replaceItem((java.lang.Throwable) searchQuerySyntaxException11, (java.lang.Throwable) searchQuerySyntaxException15);
        java.lang.Integer int18 = throwableRankList0.getCount((java.lang.Throwable) searchQuerySyntaxException15);
        java.util.List<java.lang.Throwable> throwableList20 = throwableRankList0.getNFirstElements((int) (byte) -1);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList21 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable22 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException23 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable22);
        java.lang.Throwable[] throwableArray24 = searchQuerySyntaxException23.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException25 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException23);
        java.lang.Throwable throwable26 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException27 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable26);
        java.lang.Throwable[] throwableArray28 = searchQuerySyntaxException27.getSuppressed();
        throwableRankList21.replaceItem((java.lang.Throwable) searchQuerySyntaxException23, (java.lang.Throwable) searchQuerySyntaxException27);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList30 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable31 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException32 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable31);
        java.lang.Throwable[] throwableArray33 = searchQuerySyntaxException32.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException34 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException32);
        java.lang.Throwable throwable35 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException36 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable35);
        java.lang.Throwable[] throwableArray37 = searchQuerySyntaxException36.getSuppressed();
        throwableRankList30.replaceItem((java.lang.Throwable) searchQuerySyntaxException32, (java.lang.Throwable) searchQuerySyntaxException36);
        java.lang.Integer int39 = throwableRankList21.getCount((java.lang.Throwable) searchQuerySyntaxException36);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList40 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList42 = throwableRankList40.getNFirstElements((int) (short) 10);
        throwableRankList40.clear();
        int int44 = throwableRankList40.size();
        java.lang.Throwable throwable45 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException46 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable45);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList47 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable48 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException49 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable48);
        java.lang.Throwable[] throwableArray50 = searchQuerySyntaxException49.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException51 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException49);
        java.lang.Throwable throwable52 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException53 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable52);
        java.lang.Throwable[] throwableArray54 = searchQuerySyntaxException53.getSuppressed();
        throwableRankList47.replaceItem((java.lang.Throwable) searchQuerySyntaxException49, (java.lang.Throwable) searchQuerySyntaxException53);
        searchQuerySyntaxException46.addSuppressed((java.lang.Throwable) searchQuerySyntaxException53);
        java.lang.Integer int57 = throwableRankList40.getCount((java.lang.Throwable) searchQuerySyntaxException53);
        searchQuerySyntaxException36.addSuppressed((java.lang.Throwable) searchQuerySyntaxException53);
        java.lang.Throwable throwable59 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException60 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable59);
        java.lang.Throwable[] throwableArray61 = searchQuerySyntaxException60.getSuppressed();
        searchQuerySyntaxException53.addSuppressed((java.lang.Throwable) searchQuerySyntaxException60);
        java.lang.Integer int63 = throwableRankList0.getCount((java.lang.Throwable) searchQuerySyntaxException60);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException64 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException60);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(throwableList20);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNull(int39);
        org.junit.Assert.assertNotNull(throwableList42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNull(int57);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNull(int63);
    }

    @Test
    public void test1061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1061");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata1 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata1.setAlbumArtist("");
        boolean boolean4 = fontSettings0.equals((java.lang.Object) cDMetadata1);
        fontSettings0.setUseFontSmoothingSettingsFromOs(false);
        net.sourceforge.atunes.model.ViewMode viewMode7 = net.sourceforge.atunes.model.ViewMode.ALBUM;
        boolean boolean8 = fontSettings0.equals((java.lang.Object) viewMode7);
        net.sourceforge.atunes.model.IFontBean iFontBean9 = null;
        fontSettings0.setFont(iFontBean9);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + viewMode7 + "' != '" + net.sourceforge.atunes.model.ViewMode.ALBUM + "'", viewMode7.equals(net.sourceforge.atunes.model.ViewMode.ALBUM));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1062");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        net.sourceforge.atunes.model.AudioObjectProperty audioObjectProperty1 = net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY;
        boolean boolean2 = columnBean0.equals((java.lang.Object) audioObjectProperty1);
        int int3 = columnBean0.getWidth();
        int int4 = columnBean0.getOrder();
        net.sourceforge.atunes.model.CDMetadata cDMetadata5 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata5.setAlbumArtist("");
        java.lang.String str9 = cDMetadata5.getTitle((int) (byte) -1);
        java.lang.String[] strArray11 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        cDMetadata5.setTrackNames((java.util.List<java.lang.String>) strList12);
        int int15 = cDMetadata5.getYear();
        net.sourceforge.atunes.model.CDMetadata cDMetadata16 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str17 = cDMetadata16.getGenre();
        java.util.List<java.lang.String> strList18 = cDMetadata16.getComposerNames();
        java.lang.String str19 = cDMetadata16.getAlbum();
        net.sourceforge.atunes.model.CDMetadata cDMetadata20 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata20.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList23 = cDMetadata20.getTracks();
        cDMetadata20.setAlbumArtist("/rss/channel/title");
        java.util.List<java.lang.String> strList26 = cDMetadata20.getTrackNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata27 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata27.setAlbumArtist("");
        java.lang.String str30 = cDMetadata27.getGenre();
        java.lang.String[] strArray32 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        cDMetadata27.setTrackNames((java.util.List<java.lang.String>) strList33);
        cDMetadata20.setTrackNames((java.util.List<java.lang.String>) strList33);
        cDMetadata16.setTrackNames((java.util.List<java.lang.String>) strList33);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList38 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList40 = throwableRankList38.getNFirstElements((int) (short) 10);
        throwableRankList38.clear();
        java.util.List<java.lang.Integer> intList43 = throwableRankList38.getNFirstElementCounts(150);
        java.util.List<java.lang.Throwable> throwableList44 = throwableRankList38.getOrder();
        throwableRankList38.clear();
        java.util.List<java.lang.Integer> intList47 = throwableRankList38.getNFirstElementCounts(120);
        java.util.List<java.lang.Integer> intList49 = throwableRankList38.getNFirstElementCounts(0);
        cDMetadata16.setTracks(intList49);
        cDMetadata5.setTracks(intList49);
        boolean boolean52 = columnBean0.equals((java.lang.Object) intList49);
        org.junit.Assert.assertTrue("'" + audioObjectProperty1 + "' != '" + net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY + "'", audioObjectProperty1.equals(net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(intList23);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(throwableList40);
        org.junit.Assert.assertNotNull(intList43);
        org.junit.Assert.assertNotNull(throwableList44);
        org.junit.Assert.assertNotNull(intList47);
        org.junit.Assert.assertNotNull(intList49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test1063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1063");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType12 = applicationVersion9.getVersionType();
        int int13 = applicationVersion9.getMinorNumber();
        java.lang.String str14 = applicationVersion9.getDirectDownloadURL();
        java.lang.String str15 = applicationVersion9.getDirectDownloadURL();
        java.lang.String str16 = applicationVersion9.getDate();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + versionType12 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType12.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "./pubDate" + "'", str14, "./pubDate");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "./pubDate" + "'", str15, "./pubDate");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "./title" + "'", str16, "./title");
    }

    @Test
    public void test1064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1064");
        java.lang.Throwable throwable0 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException1 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable0);
        java.lang.Throwable[] throwableArray2 = searchQuerySyntaxException1.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException3 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException1);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException4 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException1);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList5 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable6 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException7 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable6);
        java.lang.Throwable[] throwableArray8 = searchQuerySyntaxException7.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException9 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException7);
        java.lang.Throwable throwable10 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException11 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable10);
        java.lang.Throwable[] throwableArray12 = searchQuerySyntaxException11.getSuppressed();
        throwableRankList5.replaceItem((java.lang.Throwable) searchQuerySyntaxException7, (java.lang.Throwable) searchQuerySyntaxException11);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException14 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException11);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException15 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException14);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException16 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchIndexNotAvailableException15);
        searchQuerySyntaxException4.addSuppressed((java.lang.Throwable) searchIndexNotAvailableException16);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException18 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException4);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException19 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchIndexNotAvailableException18);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException20 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException19);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException21 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchIndexNotAvailableException20);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray12);
    }

    @Test
    public void test1065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1065");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.toString();
        int int11 = applicationVersion9.getMajorNumber();
        java.lang.String str12 = applicationVersion9.getName();
        java.lang.String str13 = applicationVersion9.getChanges();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1.0.0 mpc " + "'", str10, "1.0.0 mpc ");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "mpc" + "'", str12, "mpc");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "./title" + "'", str13, "./title");
    }

    @Test
    public void test1066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1066");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        fontSettings0.setUseFontSmoothing(false);
        fontSettings0.setUseFontSmoothing(false);
        net.sourceforge.atunes.model.IFontBean iFontBean5 = null;
        fontSettings0.setFont(iFontBean5);
        net.sourceforge.atunes.model.IFontBean iFontBean7 = fontSettings0.getFont();
        boolean boolean8 = fontSettings0.isUseFontSmoothingSettingsFromOs();
        boolean boolean9 = fontSettings0.isUseFontSmoothingSettingsFromOs();
        net.sourceforge.atunes.model.FeedType feedType10 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str11 = feedType10.getEntryXPath();
        java.lang.String str12 = feedType10.getTypeXPath();
        java.lang.String str13 = feedType10.getTypeXPath();
        java.lang.String str14 = feedType10.getDescriptionXPath();
        java.lang.String str15 = feedType10.getDateXPath();
        boolean boolean16 = fontSettings0.equals((java.lang.Object) str15);
        fontSettings0.setUseFontSmoothingSettingsFromOs(false);
        org.junit.Assert.assertNull(iFontBean7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + feedType10 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType10.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "/rss/channel/item" + "'", str11, "/rss/channel/item");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "./enclosure/@type" + "'", str12, "./enclosure/@type");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "./enclosure/@type" + "'", str13, "./enclosure/@type");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "./description" + "'", str14, "./description");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "./pubDate" + "'", str15, "./pubDate");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1067");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str1 = feedType0.getUrlXPath();
        java.lang.String str2 = feedType0.getNameXPath();
        java.lang.String str3 = feedType0.getDescriptionXPath();
        java.lang.String str4 = feedType0.getTypeXPath();
        java.lang.String str5 = feedType0.getEntryXPath();
        java.lang.String str6 = feedType0.getTitleXPath();
        java.lang.String str7 = feedType0.getUrlXPath();
        java.lang.String str8 = feedType0.getTitleXPath();
        java.lang.String str9 = feedType0.getUrlXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "./enclosure/@url" + "'", str1, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "/rss/channel/title" + "'", str2, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "./description" + "'", str3, "./description");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "./enclosure/@type" + "'", str4, "./enclosure/@type");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/rss/channel/item" + "'", str5, "/rss/channel/item");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "./title" + "'", str6, "./title");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "./enclosure/@url" + "'", str7, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "./title" + "'", str8, "./title");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "./enclosure/@url" + "'", str9, "./enclosure/@url");
    }

    @Test
    public void test1068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1068");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str1 = feedType0.getUrlXPath();
        java.lang.String str2 = feedType0.getNameXPath();
        java.lang.String str3 = feedType0.getDescriptionXPath();
        java.lang.String str4 = feedType0.getTypeXPath();
        java.lang.String str5 = feedType0.getDescriptionXPath();
        java.lang.String str6 = feedType0.getTitleXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "./enclosure/@url" + "'", str1, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "/rss/channel/title" + "'", str2, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "./description" + "'", str3, "./description");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "./enclosure/@type" + "'", str4, "./enclosure/@type");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "./description" + "'", str5, "./description");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "./title" + "'", str6, "./title");
    }

    @Test
    public void test1069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1069");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata2 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata2.setAlbumArtist("");
        java.lang.String str5 = cDMetadata2.getGenre();
        java.lang.String[] strArray7 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        cDMetadata2.setTrackNames((java.util.List<java.lang.String>) strList8);
        cDMetadata0.setComposerNames((java.util.List<java.lang.String>) strList8);
        java.lang.String str12 = cDMetadata0.getAlbum();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList13 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable14 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException15 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable14);
        java.lang.Throwable[] throwableArray16 = searchQuerySyntaxException15.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException17 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException15);
        java.lang.Throwable throwable18 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException19 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable18);
        java.lang.Throwable[] throwableArray20 = searchQuerySyntaxException19.getSuppressed();
        throwableRankList13.replaceItem((java.lang.Throwable) searchQuerySyntaxException15, (java.lang.Throwable) searchQuerySyntaxException19);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList22 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable23 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException24 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable23);
        java.lang.Throwable[] throwableArray25 = searchQuerySyntaxException24.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException26 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException24);
        java.lang.Throwable throwable27 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException28 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable27);
        java.lang.Throwable[] throwableArray29 = searchQuerySyntaxException28.getSuppressed();
        throwableRankList22.replaceItem((java.lang.Throwable) searchQuerySyntaxException24, (java.lang.Throwable) searchQuerySyntaxException28);
        java.lang.Integer int31 = throwableRankList13.getCount((java.lang.Throwable) searchQuerySyntaxException28);
        java.lang.Throwable throwable32 = null;
        java.lang.Throwable throwable33 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException34 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable33);
        throwableRankList13.replaceItem(throwable32, (java.lang.Throwable) searchQuerySyntaxException34);
        java.util.List<java.lang.Integer> intList37 = throwableRankList13.getNFirstElementCounts((int) (byte) 1);
        cDMetadata0.setTracks(intList37);
        cDMetadata0.setGenre("./author/name");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNull(int31);
        org.junit.Assert.assertNotNull(intList37);
    }

    @Test
    public void test1070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1070");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str1 = feedType0.getEntryXPath();
        java.lang.String str2 = feedType0.getNameXPath();
        java.lang.String str3 = feedType0.getDurationXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "/rss/channel/item" + "'", str1, "/rss/channel/item");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "/rss/channel/title" + "'", str2, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "./duration" + "'", str3, "./duration");
    }

    @Test
    public void test1071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1071");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.IFontBean iFontBean1 = fontSettings0.getFont();
        fontSettings0.setUseFontSmoothing(true);
        net.sourceforge.atunes.model.IFontBean iFontBean4 = fontSettings0.getFont();
        org.junit.Assert.assertNull(iFontBean1);
        org.junit.Assert.assertNull(iFontBean4);
    }

    @Test
    public void test1072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1072");
        net.sourceforge.atunes.model.LookAndFeelBean lookAndFeelBean0 = new net.sourceforge.atunes.model.LookAndFeelBean();
        lookAndFeelBean0.setName("./summary");
        lookAndFeelBean0.setSkin("./enclosure/@url");
        java.lang.String str5 = lookAndFeelBean0.getSkin();
        lookAndFeelBean0.setSkin("net.sourceforge.atunes.model.SearchQuerySyntaxException: net.sourceforge.atunes.model.SearchIndexNotAvailableException: net.sourceforge.atunes.model.SearchQuerySyntaxException");
        java.lang.String str8 = lookAndFeelBean0.getSkin();
        lookAndFeelBean0.setSkin("wav");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "./enclosure/@url" + "'", str5, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "net.sourceforge.atunes.model.SearchQuerySyntaxException: net.sourceforge.atunes.model.SearchIndexNotAvailableException: net.sourceforge.atunes.model.SearchQuerySyntaxException" + "'", str8, "net.sourceforge.atunes.model.SearchQuerySyntaxException: net.sourceforge.atunes.model.SearchIndexNotAvailableException: net.sourceforge.atunes.model.SearchQuerySyntaxException");
    }

    @Test
    public void test1073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1073");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        columnBean0.setVisible(false);
        net.sourceforge.atunes.model.ColumnSort columnSort6 = columnBean0.getSort();
        net.sourceforge.atunes.model.TextTagAttribute textTagAttribute7 = net.sourceforge.atunes.model.TextTagAttribute.COMPOSER;
        boolean boolean8 = columnBean0.equals((java.lang.Object) textTagAttribute7);
        columnBean0.setOrder(10);
        columnBean0.setOrder((int) ' ');
        int int13 = columnBean0.getWidth();
        int int14 = columnBean0.getWidth();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(columnSort6);
        org.junit.Assert.assertTrue("'" + textTagAttribute7 + "' != '" + net.sourceforge.atunes.model.TextTagAttribute.COMPOSER + "'", textTagAttribute7.equals(net.sourceforge.atunes.model.TextTagAttribute.COMPOSER));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test1074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1074");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.IFontBean iFontBean1 = fontSettings0.getFont();
        boolean boolean2 = fontSettings0.isUseFontSmoothingSettingsFromOs();
        fontSettings0.setUseFontSmoothingSettingsFromOs(true);
        org.junit.Assert.assertNull(iFontBean1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1075");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata1 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata1.setAlbumArtist("");
        boolean boolean4 = fontSettings0.equals((java.lang.Object) cDMetadata1);
        fontSettings0.setUseFontSmoothingSettingsFromOs(false);
        net.sourceforge.atunes.model.ViewMode viewMode7 = net.sourceforge.atunes.model.ViewMode.ALBUM;
        boolean boolean8 = fontSettings0.equals((java.lang.Object) viewMode7);
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType13 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion18 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType13, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str19 = applicationVersion18.getDate();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType20 = applicationVersion18.getVersionType();
        java.lang.String str21 = applicationVersion18.getDownloadURL();
        java.lang.String str22 = applicationVersion18.getDirectDownloadURL();
        boolean boolean23 = fontSettings0.equals((java.lang.Object) applicationVersion18);
        net.sourceforge.atunes.model.IFontBean iFontBean24 = fontSettings0.getFont();
        net.sourceforge.atunes.model.IFontBean iFontBean25 = null;
        fontSettings0.setFont(iFontBean25);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + viewMode7 + "' != '" + net.sourceforge.atunes.model.ViewMode.ALBUM + "'", viewMode7.equals(net.sourceforge.atunes.model.ViewMode.ALBUM));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + versionType13 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType13.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "./title" + "'", str19, "./title");
        org.junit.Assert.assertTrue("'" + versionType20 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType20.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "./description" + "'", str21, "./description");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "./pubDate" + "'", str22, "./pubDate");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(iFontBean24);
    }

    @Test
    public void test1076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1076");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        int int12 = applicationVersion9.getMajorNumber();
        java.lang.String str13 = applicationVersion9.toShortString();
        net.sourceforge.atunes.model.ArtistViewMode artistViewMode14 = net.sourceforge.atunes.model.ArtistViewMode.BOTH;
        boolean boolean15 = applicationVersion9.equals((java.lang.Object) artistViewMode14);
        int int16 = applicationVersion9.getMajorNumber();
        java.lang.String str17 = applicationVersion9.getDirectDownloadURL();
        net.sourceforge.atunes.model.ArtistViewMode artistViewMode18 = net.sourceforge.atunes.model.ArtistViewMode.ARTIST_OF_ALBUM;
        boolean boolean19 = applicationVersion9.equals((java.lang.Object) artistViewMode18);
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType20 = applicationVersion9.getVersionType();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1.0.0 " + "'", str13, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + artistViewMode14 + "' != '" + net.sourceforge.atunes.model.ArtistViewMode.BOTH + "'", artistViewMode14.equals(net.sourceforge.atunes.model.ArtistViewMode.BOTH));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "./pubDate" + "'", str17, "./pubDate");
        org.junit.Assert.assertTrue("'" + artistViewMode18 + "' != '" + net.sourceforge.atunes.model.ArtistViewMode.ARTIST_OF_ALBUM + "'", artistViewMode18.equals(net.sourceforge.atunes.model.ArtistViewMode.ARTIST_OF_ALBUM));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + versionType20 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType20.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
    }

    @Test
    public void test1077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1077");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.lang.String str3 = cDMetadata0.getGenre();
        java.lang.String[] strArray5 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList6);
        cDMetadata0.setAlbumArtist("net.sourceforge.atunes.model.InconsistentRepositoryException");
        cDMetadata0.setDisc((int) (short) -1);
        java.util.List<java.lang.String> strList13 = cDMetadata0.getArtistNames();
        java.util.List<java.lang.String> strList14 = cDMetadata0.getComposerNames();
        java.util.List<java.lang.String> strList15 = cDMetadata0.getArtistNames();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(strList13);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNull(strList15);
    }

    @Test
    public void test1078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1078");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        net.sourceforge.atunes.model.InconsistentRepositoryException inconsistentRepositoryException1 = new net.sourceforge.atunes.model.InconsistentRepositoryException();
        net.sourceforge.atunes.model.InconsistentRepositoryException inconsistentRepositoryException2 = new net.sourceforge.atunes.model.InconsistentRepositoryException();
        throwableRankList0.replaceItem((java.lang.Throwable) inconsistentRepositoryException1, (java.lang.Throwable) inconsistentRepositoryException2);
        int int4 = throwableRankList0.size();
        java.util.List<java.lang.Throwable> throwableList6 = throwableRankList0.getNFirstElements((int) (byte) 10);
        java.lang.Throwable throwable7 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException8 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable7);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList9 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable10 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException11 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable10);
        java.lang.Throwable[] throwableArray12 = searchQuerySyntaxException11.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException13 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException11);
        java.lang.Throwable throwable14 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException15 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable14);
        java.lang.Throwable[] throwableArray16 = searchQuerySyntaxException15.getSuppressed();
        throwableRankList9.replaceItem((java.lang.Throwable) searchQuerySyntaxException11, (java.lang.Throwable) searchQuerySyntaxException15);
        searchQuerySyntaxException8.addSuppressed((java.lang.Throwable) searchQuerySyntaxException15);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException19 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException8);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException20 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException19);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException21 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException20);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException22 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException20);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException23 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException22);
        java.lang.Integer int24 = throwableRankList0.getCount((java.lang.Throwable) searchQuerySyntaxException22);
        java.util.List<java.lang.Integer> intList26 = throwableRankList0.getNFirstElementCounts((int) (byte) 100);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(throwableList6);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNotNull(intList26);
    }

    @Test
    public void test1079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1079");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        columnBean0.setVisible(false);
        columnBean0.setWidth(0);
        net.sourceforge.atunes.model.ColumnSort columnSort8 = columnBean0.getSort();
        net.sourceforge.atunes.model.ColumnSort columnSort9 = columnBean0.getSort();
        columnBean0.setOrder((int) (short) 100);
        columnBean0.setOrder((int) (byte) -1);
        boolean boolean14 = columnBean0.isVisible();
        boolean boolean15 = columnBean0.isVisible();
        columnBean0.setVisible(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(columnSort8);
        org.junit.Assert.assertNull(columnSort9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1080");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        columnBean0.setVisible(false);
        columnBean0.setWidth(0);
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType12 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion17 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType12, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str18 = applicationVersion17.getDate();
        java.lang.String str19 = applicationVersion17.toShortString();
        java.lang.String str20 = applicationVersion17.getChanges();
        boolean boolean21 = columnBean0.equals((java.lang.Object) applicationVersion17);
        java.lang.String str22 = applicationVersion17.toString();
        java.lang.String str23 = applicationVersion17.getDownloadURL();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType24 = applicationVersion17.getVersionType();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType25 = applicationVersion17.getVersionType();
        java.lang.String str26 = applicationVersion17.getDownloadURL();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + versionType12 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType12.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "./title" + "'", str18, "./title");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1.0.0 " + "'", str19, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "./title" + "'", str20, "./title");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1.0.0 mpc " + "'", str22, "1.0.0 mpc ");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "./description" + "'", str23, "./description");
        org.junit.Assert.assertTrue("'" + versionType24 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType24.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertTrue("'" + versionType25 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType25.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "./description" + "'", str26, "./description");
    }

    @Test
    public void test1081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1081");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        java.lang.String str12 = applicationVersion9.getChanges();
        int int13 = applicationVersion9.getMinorNumber();
        int int14 = applicationVersion9.getMinorNumber();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType19 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion24 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType19, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str25 = applicationVersion24.getDate();
        java.lang.String str26 = applicationVersion24.toShortString();
        int int27 = applicationVersion24.getMajorNumber();
        java.lang.String str28 = applicationVersion24.toShortString();
        net.sourceforge.atunes.model.ArtistViewMode artistViewMode29 = net.sourceforge.atunes.model.ArtistViewMode.BOTH;
        boolean boolean30 = applicationVersion24.equals((java.lang.Object) artistViewMode29);
        int int31 = applicationVersion24.getMajorNumber();
        java.lang.String str32 = applicationVersion24.getDirectDownloadURL();
        java.lang.String str33 = applicationVersion24.getDownloadURL();
        int int34 = applicationVersion9.compareTo(applicationVersion24);
        java.lang.String str35 = applicationVersion9.getChanges();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType40 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion45 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType40, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str46 = applicationVersion45.getDate();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType47 = applicationVersion45.getVersionType();
        java.lang.String str48 = applicationVersion45.toShortString();
        int int49 = applicationVersion9.compareTo(applicationVersion45);
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "./title" + "'", str12, "./title");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + versionType19 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType19.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "./title" + "'", str25, "./title");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1.0.0 " + "'", str26, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1.0.0 " + "'", str28, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + artistViewMode29 + "' != '" + net.sourceforge.atunes.model.ArtistViewMode.BOTH + "'", artistViewMode29.equals(net.sourceforge.atunes.model.ArtistViewMode.BOTH));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "./pubDate" + "'", str32, "./pubDate");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "./description" + "'", str33, "./description");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "./title" + "'", str35, "./title");
        org.junit.Assert.assertTrue("'" + versionType40 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType40.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "./title" + "'", str46, "./title");
        org.junit.Assert.assertTrue("'" + versionType47 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType47.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1.0.0 " + "'", str48, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
    }

    @Test
    public void test1082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1082");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata1 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata1.setAlbumArtist("");
        boolean boolean4 = fontSettings0.equals((java.lang.Object) cDMetadata1);
        java.lang.String str5 = cDMetadata1.getAlbum();
        java.lang.String str6 = cDMetadata1.getAlbum();
        java.lang.String str8 = cDMetadata1.getTitle(1);
        java.util.List<java.lang.String> strList9 = cDMetadata1.getTrackNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata10 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str11 = cDMetadata10.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata12 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata12.setAlbumArtist("");
        java.lang.String str15 = cDMetadata12.getGenre();
        java.lang.String[] strArray17 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        cDMetadata12.setTrackNames((java.util.List<java.lang.String>) strList18);
        cDMetadata10.setComposerNames((java.util.List<java.lang.String>) strList18);
        cDMetadata1.setComposerNames((java.util.List<java.lang.String>) strList18);
        cDMetadata1.setDisc(10);
        cDMetadata1.setYear((int) (byte) 100);
        java.util.List<java.lang.String> strList27 = cDMetadata1.getArtistNames();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(strList9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(strList27);
    }

    @Test
    public void test1083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1083");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str1 = feedType0.getUrlXPath();
        java.lang.String str2 = feedType0.getDateXPath();
        java.lang.String str3 = feedType0.getUrlXPath();
        java.lang.String str4 = feedType0.getAuthorXPath();
        java.lang.String str5 = feedType0.getEntryXPath();
        java.lang.String str6 = feedType0.getTitleXPath();
        java.lang.String str7 = feedType0.getDescriptionXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "./enclosure/@url" + "'", str1, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "./pubDate" + "'", str2, "./pubDate");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "./enclosure/@url" + "'", str3, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "./author" + "'", str4, "./author");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/rss/channel/item" + "'", str5, "/rss/channel/item");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "./title" + "'", str6, "./title");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "./description" + "'", str7, "./description");
    }

    @Test
    public void test1084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1084");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.ATOM;
        java.lang.String str1 = feedType0.getTypeXPath();
        java.lang.String str2 = feedType0.getDurationXPath();
        java.lang.String str3 = feedType0.getTitleXPath();
        java.lang.String str4 = feedType0.getEntryXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.ATOM + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.ATOM));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "./link[@rel='enclosure']/@type" + "'", str1, "./link[@rel='enclosure']/@type");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "./title" + "'", str3, "./title");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "/feed/entry" + "'", str4, "/feed/entry");
    }

    @Test
    public void test1085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1085");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata1 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata1.setAlbumArtist("");
        boolean boolean4 = fontSettings0.equals((java.lang.Object) cDMetadata1);
        java.lang.String str5 = cDMetadata1.getGenre();
        cDMetadata1.setAlbum("net.sourceforge.atunes.model.SearchQuerySyntaxException");
        java.util.List<java.lang.String> strList8 = cDMetadata1.getArtistNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata9 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str10 = cDMetadata9.getGenre();
        java.util.List<java.lang.String> strList11 = cDMetadata9.getComposerNames();
        java.lang.String str12 = cDMetadata9.getAlbum();
        java.util.List<java.lang.Integer> intList13 = cDMetadata9.getTracks();
        net.sourceforge.atunes.model.CDMetadata cDMetadata14 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata14.setAlbumArtist("");
        java.lang.String str18 = cDMetadata14.getTitle((int) (byte) -1);
        java.lang.String[] strArray20 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        cDMetadata14.setTrackNames((java.util.List<java.lang.String>) strList21);
        cDMetadata9.setTrackNames((java.util.List<java.lang.String>) strList21);
        cDMetadata9.setYear((int) (short) 1);
        int int27 = cDMetadata9.getYear();
        java.lang.String str28 = cDMetadata9.getGenre();
        cDMetadata9.setYear((int) (short) 10);
        net.sourceforge.atunes.model.CDMetadata cDMetadata31 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata31.setAlbumArtist("");
        java.lang.String str34 = cDMetadata31.getGenre();
        java.lang.String[] strArray36 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        cDMetadata31.setTrackNames((java.util.List<java.lang.String>) strList37);
        cDMetadata9.setTrackNames((java.util.List<java.lang.String>) strList37);
        cDMetadata1.setTrackNames((java.util.List<java.lang.String>) strList37);
        java.util.List<java.lang.String> strList42 = cDMetadata1.getComposerNames();
        cDMetadata1.setYear(32);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(intList13);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNull(strList42);
    }

    @Test
    public void test1086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1086");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        fontSettings0.setUseFontSmoothing(false);
        net.sourceforge.atunes.model.IFontBean iFontBean3 = null;
        fontSettings0.setFont(iFontBean3);
        boolean boolean5 = fontSettings0.isUseFontSmoothing();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1087");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        int int1 = cDMetadata0.getDisc();
        java.lang.String str2 = cDMetadata0.getGenre();
        java.lang.String str4 = cDMetadata0.getTitle((int) (byte) 1);
        java.lang.String str5 = cDMetadata0.getAlbum();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test1088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1088");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable1 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException2 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable1);
        java.lang.Throwable[] throwableArray3 = searchQuerySyntaxException2.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException4 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException2);
        java.lang.Throwable throwable5 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException6 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable5);
        java.lang.Throwable[] throwableArray7 = searchQuerySyntaxException6.getSuppressed();
        throwableRankList0.replaceItem((java.lang.Throwable) searchQuerySyntaxException2, (java.lang.Throwable) searchQuerySyntaxException6);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList9 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable10 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException11 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable10);
        java.lang.Throwable[] throwableArray12 = searchQuerySyntaxException11.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException13 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException11);
        java.lang.Throwable throwable14 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException15 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable14);
        java.lang.Throwable[] throwableArray16 = searchQuerySyntaxException15.getSuppressed();
        throwableRankList9.replaceItem((java.lang.Throwable) searchQuerySyntaxException11, (java.lang.Throwable) searchQuerySyntaxException15);
        java.lang.Integer int18 = throwableRankList0.getCount((java.lang.Throwable) searchQuerySyntaxException15);
        java.util.List<java.lang.Integer> intList20 = throwableRankList0.getNFirstElementCounts((int) (short) -1);
        java.lang.Throwable throwable21 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException22 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable21);
        java.lang.Throwable[] throwableArray23 = searchQuerySyntaxException22.getSuppressed();
        throwableRankList0.addItem((java.lang.Throwable) searchQuerySyntaxException22);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException25 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException22);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException26 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException22);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(intList20);
        org.junit.Assert.assertNotNull(throwableArray23);
    }

    @Test
    public void test1089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1089");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.lang.String str3 = cDMetadata0.getAlbum();
        cDMetadata0.setAlbumArtist("./description");
        cDMetadata0.setAlbumArtist("./description");
        java.lang.String str8 = cDMetadata0.getAlbumArtist();
        int int9 = cDMetadata0.getDisc();
        cDMetadata0.setAlbumArtist("net.sourceforge.atunes.model.SearchQuerySyntaxException: net.sourceforge.atunes.model.SearchQuerySyntaxException");
        cDMetadata0.setDisc((int) '#');
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "./description" + "'", str8, "./description");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test1090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1090");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        fontSettings0.setUseFontSmoothing(false);
        net.sourceforge.atunes.model.IFontBean iFontBean3 = fontSettings0.getFont();
        boolean boolean4 = fontSettings0.isUseFontSmoothing();
        boolean boolean5 = fontSettings0.isUseFontSmoothing();
        org.junit.Assert.assertNull(iFontBean3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1091");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType8 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion13 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType8, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str14 = applicationVersion13.getDate();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType15 = applicationVersion13.getVersionType();
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion20 = new net.sourceforge.atunes.model.ApplicationVersion("./summary", (int) (short) 1, 120, 35, versionType15, "hi!", "./author/name", "hi!", "10.1.1 ");
        java.lang.String str21 = applicationVersion20.getDirectDownloadURL();
        java.lang.String str22 = applicationVersion20.toString();
        org.junit.Assert.assertTrue("'" + versionType8 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType8.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "./title" + "'", str14, "./title");
        org.junit.Assert.assertTrue("'" + versionType15 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType15.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1.120.35 hi! " + "'", str22, "1.120.35 hi! ");
    }

    @Test
    public void test1092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1092");
        net.sourceforge.atunes.model.LocalAudioObjectFormat localAudioObjectFormat0 = net.sourceforge.atunes.model.LocalAudioObjectFormat.MPC;
        java.lang.String str1 = localAudioObjectFormat0.getExtension();
        java.lang.String str2 = localAudioObjectFormat0.getExtension();
        java.lang.String str3 = localAudioObjectFormat0.getExtension();
        java.lang.String str4 = localAudioObjectFormat0.getExtension();
        org.junit.Assert.assertTrue("'" + localAudioObjectFormat0 + "' != '" + net.sourceforge.atunes.model.LocalAudioObjectFormat.MPC + "'", localAudioObjectFormat0.equals(net.sourceforge.atunes.model.LocalAudioObjectFormat.MPC));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "mpc" + "'", str1, "mpc");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mpc" + "'", str2, "mpc");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mpc" + "'", str3, "mpc");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mpc" + "'", str4, "mpc");
    }

    @Test
    public void test1093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1093");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.lang.String str3 = cDMetadata0.getGenre();
        int int4 = cDMetadata0.getYear();
        int int5 = cDMetadata0.getYear();
        net.sourceforge.atunes.model.CDMetadata cDMetadata6 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str7 = cDMetadata6.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata8 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata8.setAlbumArtist("");
        java.lang.String str11 = cDMetadata8.getGenre();
        java.lang.String[] strArray13 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        cDMetadata8.setTrackNames((java.util.List<java.lang.String>) strList14);
        cDMetadata6.setComposerNames((java.util.List<java.lang.String>) strList14);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList14);
        net.sourceforge.atunes.model.CDMetadata cDMetadata19 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str20 = cDMetadata19.getGenre();
        java.util.List<java.lang.String> strList21 = cDMetadata19.getComposerNames();
        java.lang.String str22 = cDMetadata19.getAlbum();
        java.util.List<java.lang.Integer> intList23 = cDMetadata19.getTracks();
        int int24 = cDMetadata19.getDisc();
        java.lang.String[] strArray32 = new java.lang.String[] { "net.sourceforge.atunes.model.InconsistentRepositoryException", "./title", "1.0.0 ", "./title", "./duration", "mpc", "net.sourceforge.atunes.model.InconsistentRepositoryException" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        cDMetadata19.setArtistNames((java.util.List<java.lang.String>) strList33);
        cDMetadata0.setArtistNames((java.util.List<java.lang.String>) strList33);
        java.util.List<java.lang.String> strList37 = null;
        cDMetadata0.setArtistNames(strList37);
        java.lang.String str39 = cDMetadata0.getGenre();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(strList21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(intList23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(str39);
    }

    @Test
    public void test1094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1094");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        net.sourceforge.atunes.model.AudioObjectProperty audioObjectProperty1 = net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY;
        boolean boolean2 = columnBean0.equals((java.lang.Object) audioObjectProperty1);
        net.sourceforge.atunes.model.TextTagAttribute textTagAttribute3 = net.sourceforge.atunes.model.TextTagAttribute.LYRICS;
        boolean boolean4 = columnBean0.equals((java.lang.Object) textTagAttribute3);
        net.sourceforge.atunes.model.ColumnSort columnSort5 = columnBean0.getSort();
        net.sourceforge.atunes.model.ColumnSort columnSort6 = null;
        columnBean0.setSort(columnSort6);
        int int8 = columnBean0.getWidth();
        columnBean0.setWidth((int) (short) -1);
        org.junit.Assert.assertTrue("'" + audioObjectProperty1 + "' != '" + net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY + "'", audioObjectProperty1.equals(net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + textTagAttribute3 + "' != '" + net.sourceforge.atunes.model.TextTagAttribute.LYRICS + "'", textTagAttribute3.equals(net.sourceforge.atunes.model.TextTagAttribute.LYRICS));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(columnSort5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test1095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1095");
        net.sourceforge.atunes.model.LookAndFeelBean lookAndFeelBean0 = new net.sourceforge.atunes.model.LookAndFeelBean();
        java.lang.String str1 = lookAndFeelBean0.getSkin();
        lookAndFeelBean0.setName("net.sourceforge.atunes.model.SearchQuerySyntaxException");
        lookAndFeelBean0.setSkin("");
        java.lang.String str6 = lookAndFeelBean0.getName();
        lookAndFeelBean0.setSkin("/feed/title");
        java.lang.String str9 = lookAndFeelBean0.getSkin();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "net.sourceforge.atunes.model.SearchQuerySyntaxException" + "'", str6, "net.sourceforge.atunes.model.SearchQuerySyntaxException");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/feed/title" + "'", str9, "/feed/title");
    }

    @Test
    public void test1096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1096");
        net.sourceforge.atunes.model.ColumnBean columnBean4 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean5 = columnBean4.isVisible();
        columnBean4.setOrder((int) (byte) -1);
        columnBean4.setVisible(false);
        columnBean4.setWidth(0);
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType16 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion21 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType16, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str22 = applicationVersion21.getDate();
        java.lang.String str23 = applicationVersion21.toShortString();
        java.lang.String str24 = applicationVersion21.getChanges();
        boolean boolean25 = columnBean4.equals((java.lang.Object) applicationVersion21);
        java.lang.String str26 = applicationVersion21.getDownloadURL();
        java.lang.String str27 = applicationVersion21.getChanges();
        java.lang.String str28 = applicationVersion21.getDownloadURL();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType29 = applicationVersion21.getVersionType();
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion34 = new net.sourceforge.atunes.model.ApplicationVersion("/rss/channel/item", (int) (short) 10, 1, (int) (byte) 1, versionType29, "./updated", "mp4", "1.0.0 mpc ", "rm");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType39 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion44 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType39, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str45 = applicationVersion44.getDate();
        java.lang.String str46 = applicationVersion44.toShortString();
        java.lang.String str47 = applicationVersion44.toShortString();
        java.lang.String str48 = applicationVersion44.getDownloadURL();
        int int49 = applicationVersion44.getMinorNumber();
        java.lang.String str50 = applicationVersion44.getDate();
        int int51 = applicationVersion34.compareTo(applicationVersion44);
        java.lang.String str52 = applicationVersion44.toString();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + versionType16 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType16.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "./title" + "'", str22, "./title");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1.0.0 " + "'", str23, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "./title" + "'", str24, "./title");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "./description" + "'", str26, "./description");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "./title" + "'", str27, "./title");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "./description" + "'", str28, "./description");
        org.junit.Assert.assertTrue("'" + versionType29 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType29.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertTrue("'" + versionType39 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType39.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "./title" + "'", str45, "./title");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1.0.0 " + "'", str46, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1.0.0 " + "'", str47, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "./description" + "'", str48, "./description");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "./title" + "'", str50, "./title");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "1.0.0 mpc " + "'", str52, "1.0.0 mpc ");
    }

    @Test
    public void test1097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1097");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata1 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata1.setAlbumArtist("");
        boolean boolean4 = fontSettings0.equals((java.lang.Object) cDMetadata1);
        java.lang.String str5 = cDMetadata1.getGenre();
        cDMetadata1.setAlbum("net.sourceforge.atunes.model.SearchQuerySyntaxException");
        java.util.List<java.lang.String> strList8 = cDMetadata1.getArtistNames();
        cDMetadata1.setAlbumArtist("1.120.35 hi! ");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(strList8);
    }

    @Test
    public void test1098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1098");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.ATOM;
        java.lang.String str1 = feedType0.getUrlXPath();
        java.lang.String str2 = feedType0.getDateXPath();
        java.lang.String str3 = feedType0.getNameXPath();
        java.lang.String str4 = feedType0.getTitleXPath();
        java.lang.String str5 = feedType0.getDateXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.ATOM + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.ATOM));
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "./updated" + "'", str2, "./updated");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "/feed/title" + "'", str3, "/feed/title");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "./title" + "'", str4, "./title");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "./updated" + "'", str5, "./updated");
    }

    @Test
    public void test1099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1099");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        columnBean0.setVisible(false);
        net.sourceforge.atunes.model.ColumnSort columnSort6 = columnBean0.getSort();
        int int7 = columnBean0.getWidth();
        boolean boolean8 = columnBean0.isVisible();
        boolean boolean9 = columnBean0.isVisible();
        net.sourceforge.atunes.model.ColumnSort columnSort10 = null;
        columnBean0.setSort(columnSort10);
        columnBean0.setWidth((int) (short) 0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(columnSort6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1100");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        net.sourceforge.atunes.model.SubmissionState submissionState2 = net.sourceforge.atunes.model.SubmissionState.PENDING;
        boolean boolean3 = columnBean0.equals((java.lang.Object) submissionState2);
        net.sourceforge.atunes.model.ColumnSort columnSort4 = net.sourceforge.atunes.model.ColumnSort.DESCENDING;
        columnBean0.setSort(columnSort4);
        columnBean0.setOrder((int) (short) 100);
        int int8 = columnBean0.getWidth();
        net.sourceforge.atunes.model.ColumnSort columnSort9 = columnBean0.getSort();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + submissionState2 + "' != '" + net.sourceforge.atunes.model.SubmissionState.PENDING + "'", submissionState2.equals(net.sourceforge.atunes.model.SubmissionState.PENDING));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + columnSort4 + "' != '" + net.sourceforge.atunes.model.ColumnSort.DESCENDING + "'", columnSort4.equals(net.sourceforge.atunes.model.ColumnSort.DESCENDING));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + columnSort9 + "' != '" + net.sourceforge.atunes.model.ColumnSort.DESCENDING + "'", columnSort9.equals(net.sourceforge.atunes.model.ColumnSort.DESCENDING));
    }

    @Test
    public void test1101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1101");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata1 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata1.setAlbumArtist("");
        boolean boolean4 = fontSettings0.equals((java.lang.Object) cDMetadata1);
        fontSettings0.setUseFontSmoothing(true);
        net.sourceforge.atunes.model.IFontBean iFontBean7 = fontSettings0.getFont();
        boolean boolean9 = fontSettings0.equals((java.lang.Object) 150);
        boolean boolean10 = fontSettings0.isUseFontSmoothing();
        boolean boolean11 = fontSettings0.isUseFontSmoothingSettingsFromOs();
        net.sourceforge.atunes.model.IFontBean iFontBean12 = fontSettings0.getFont();
        boolean boolean13 = fontSettings0.isUseFontSmoothingSettingsFromOs();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(iFontBean7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(iFontBean12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1102");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.lang.String str3 = cDMetadata0.getAlbum();
        java.util.List<java.lang.Integer> intList4 = cDMetadata0.getTracks();
        int int5 = cDMetadata0.getYear();
        net.sourceforge.atunes.model.CDMetadata cDMetadata6 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str7 = cDMetadata6.getGenre();
        java.util.List<java.lang.String> strList8 = cDMetadata6.getComposerNames();
        java.lang.String str9 = cDMetadata6.getAlbum();
        java.util.List<java.lang.Integer> intList10 = cDMetadata6.getTracks();
        net.sourceforge.atunes.model.CDMetadata cDMetadata11 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata11.setAlbumArtist("");
        java.lang.String str15 = cDMetadata11.getTitle((int) (byte) -1);
        java.lang.String[] strArray17 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        cDMetadata11.setTrackNames((java.util.List<java.lang.String>) strList18);
        cDMetadata6.setTrackNames((java.util.List<java.lang.String>) strList18);
        cDMetadata6.setYear((int) (short) 1);
        int int24 = cDMetadata6.getYear();
        java.lang.String str25 = cDMetadata6.getGenre();
        cDMetadata6.setYear((int) (short) 10);
        net.sourceforge.atunes.model.CDMetadata cDMetadata28 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata28.setAlbumArtist("");
        java.lang.String str31 = cDMetadata28.getGenre();
        java.lang.String[] strArray33 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        cDMetadata28.setTrackNames((java.util.List<java.lang.String>) strList34);
        cDMetadata6.setTrackNames((java.util.List<java.lang.String>) strList34);
        cDMetadata0.setComposerNames((java.util.List<java.lang.String>) strList34);
        java.lang.String[] strArray56 = new java.lang.String[] { "mpc", "1.0.0 ", "hi!", "/feed/title", "net.sourceforge.atunes.model.SearchQuerySyntaxException", "./updated", "./pubDate", "./updated", "rm", "/rss/channel/title", "net.sourceforge.atunes.model.SearchIndexNotAvailableException: net.sourceforge.atunes.model.SearchQuerySyntaxException", "mac", "mpc", "/rss/channel/item", "./author", "", "1.0.0 " };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList57);
        net.sourceforge.atunes.model.FontSettings fontSettings60 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata61 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata61.setAlbumArtist("");
        boolean boolean64 = fontSettings60.equals((java.lang.Object) cDMetadata61);
        java.lang.String str65 = cDMetadata61.getAlbum();
        java.lang.String str66 = cDMetadata61.getAlbum();
        java.lang.String str68 = cDMetadata61.getTitle(1);
        java.util.List<java.lang.String> strList69 = cDMetadata61.getTrackNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata70 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str71 = cDMetadata70.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata72 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata72.setAlbumArtist("");
        java.lang.String str75 = cDMetadata72.getGenre();
        java.lang.String[] strArray77 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList78 = new java.util.ArrayList<java.lang.String>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList78, strArray77);
        cDMetadata72.setTrackNames((java.util.List<java.lang.String>) strList78);
        cDMetadata70.setComposerNames((java.util.List<java.lang.String>) strList78);
        cDMetadata61.setComposerNames((java.util.List<java.lang.String>) strList78);
        cDMetadata0.setArtistNames((java.util.List<java.lang.String>) strList78);
        cDMetadata0.setYear(52);
        java.lang.String str86 = cDMetadata0.getAlbum();
        int int87 = cDMetadata0.getYear();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(intList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(intList10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNull(strList69);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 52 + "'", int87 == 52);
    }

    @Test
    public void test1103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1103");
        net.sourceforge.atunes.model.LookAndFeelBean lookAndFeelBean0 = new net.sourceforge.atunes.model.LookAndFeelBean();
        java.lang.String str1 = lookAndFeelBean0.getSkin();
        lookAndFeelBean0.setName("net.sourceforge.atunes.model.SearchQuerySyntaxException");
        lookAndFeelBean0.setSkin("");
        lookAndFeelBean0.setName("./summary");
        lookAndFeelBean0.setName("10.52.35 ");
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test1104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1104");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.ATOM;
        java.lang.String str1 = feedType0.getDurationXPath();
        java.lang.String str2 = feedType0.getEntryXPath();
        java.lang.String str3 = feedType0.getDurationXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.ATOM + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.ATOM));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "/feed/entry" + "'", str2, "/feed/entry");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test1105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1105");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable1 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException2 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable1);
        java.lang.Throwable[] throwableArray3 = searchQuerySyntaxException2.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException4 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException2);
        java.lang.Throwable throwable5 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException6 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable5);
        java.lang.Throwable[] throwableArray7 = searchQuerySyntaxException6.getSuppressed();
        throwableRankList0.replaceItem((java.lang.Throwable) searchQuerySyntaxException2, (java.lang.Throwable) searchQuerySyntaxException6);
        java.util.List<java.lang.Throwable> throwableList9 = throwableRankList0.getOrder();
        java.util.List<java.lang.Throwable> throwableList10 = throwableRankList0.getOrder();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList11 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable12 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException13 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable12);
        java.lang.Throwable[] throwableArray14 = searchQuerySyntaxException13.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException15 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException13);
        java.lang.Throwable throwable16 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException17 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable16);
        java.lang.Throwable[] throwableArray18 = searchQuerySyntaxException17.getSuppressed();
        throwableRankList11.replaceItem((java.lang.Throwable) searchQuerySyntaxException13, (java.lang.Throwable) searchQuerySyntaxException17);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException20 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException17);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException21 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException20);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException22 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchIndexNotAvailableException21);
        java.lang.Throwable[] throwableArray23 = searchIndexNotAvailableException21.getSuppressed();
        throwableRankList0.addItem((java.lang.Throwable) searchIndexNotAvailableException21);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableList9);
        org.junit.Assert.assertNotNull(throwableList10);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray23);
    }

    @Test
    public void test1106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1106");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList2 = throwableRankList0.getNFirstElements((int) (short) 10);
        throwableRankList0.clear();
        java.util.List<java.lang.Integer> intList5 = throwableRankList0.getNFirstElementCounts(150);
        java.util.List<java.lang.Throwable> throwableList6 = throwableRankList0.getOrder();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList7 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList9 = throwableRankList7.getNFirstElements((int) (short) 100);
        java.lang.Throwable throwable10 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException11 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable10);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList12 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable13 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException14 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable13);
        java.lang.Throwable[] throwableArray15 = searchQuerySyntaxException14.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException16 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException14);
        java.lang.Throwable throwable17 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException18 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable17);
        java.lang.Throwable[] throwableArray19 = searchQuerySyntaxException18.getSuppressed();
        throwableRankList12.replaceItem((java.lang.Throwable) searchQuerySyntaxException14, (java.lang.Throwable) searchQuerySyntaxException18);
        searchQuerySyntaxException11.addSuppressed((java.lang.Throwable) searchQuerySyntaxException18);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException22 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException11);
        java.lang.Throwable throwable23 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException24 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable23);
        java.lang.Throwable[] throwableArray25 = searchQuerySyntaxException24.getSuppressed();
        searchQuerySyntaxException11.addSuppressed((java.lang.Throwable) searchQuerySyntaxException24);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException27 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException11);
        java.lang.Throwable throwable28 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException29 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable28);
        java.lang.Throwable[] throwableArray30 = searchQuerySyntaxException29.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException31 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException29);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException32 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException29);
        throwableRankList7.replaceItem((java.lang.Throwable) searchQuerySyntaxException11, (java.lang.Throwable) searchQuerySyntaxException32);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException34 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException32);
        java.lang.Integer int35 = throwableRankList0.getCount((java.lang.Throwable) searchQuerySyntaxException34);
        int int36 = throwableRankList0.size();
        org.junit.Assert.assertNotNull(throwableList2);
        org.junit.Assert.assertNotNull(intList5);
        org.junit.Assert.assertNotNull(throwableList6);
        org.junit.Assert.assertNotNull(throwableList9);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNull(int35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test1107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1107");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.lang.String str3 = cDMetadata0.getAlbum();
        net.sourceforge.atunes.model.CDMetadata cDMetadata4 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata4.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList7 = cDMetadata4.getTracks();
        cDMetadata4.setAlbumArtist("/rss/channel/title");
        java.util.List<java.lang.String> strList10 = cDMetadata4.getTrackNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata11 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata11.setAlbumArtist("");
        java.lang.String str14 = cDMetadata11.getGenre();
        java.lang.String[] strArray16 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        cDMetadata11.setTrackNames((java.util.List<java.lang.String>) strList17);
        cDMetadata4.setTrackNames((java.util.List<java.lang.String>) strList17);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList17);
        cDMetadata0.setAlbum("/rss/channel/title");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(intList7);
        org.junit.Assert.assertNull(strList10);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test1108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1108");
        net.sourceforge.atunes.model.ViewMode viewMode0 = net.sourceforge.atunes.model.ViewMode.ARTIST;
        net.sourceforge.atunes.model.IRepository iRepository1 = null;
        java.util.Map<java.lang.String, ?> strMap2 = viewMode0.getDataForView(iRepository1);
        net.sourceforge.atunes.model.IRepository iRepository3 = null;
        java.util.Map<java.lang.String, ?> strMap4 = viewMode0.getDataForView(iRepository3);
        net.sourceforge.atunes.model.IRepository iRepository5 = null;
        java.util.Map<java.lang.String, ?> strMap6 = viewMode0.getDataForView(iRepository5);
        net.sourceforge.atunes.model.IRepository iRepository7 = null;
        java.util.Map<java.lang.String, ?> strMap8 = viewMode0.getDataForView(iRepository7);
        org.junit.Assert.assertTrue("'" + viewMode0 + "' != '" + net.sourceforge.atunes.model.ViewMode.ARTIST + "'", viewMode0.equals(net.sourceforge.atunes.model.ViewMode.ARTIST));
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(strMap8);
    }

    @Test
    public void test1109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1109");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.lang.String str3 = cDMetadata0.getAlbum();
        java.util.List<java.lang.Integer> intList4 = cDMetadata0.getTracks();
        int int5 = cDMetadata0.getYear();
        java.util.List<java.lang.String> strList6 = cDMetadata0.getArtistNames();
        cDMetadata0.setDisc((int) (short) 100);
        net.sourceforge.atunes.model.CDMetadata cDMetadata9 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata9.setAlbumArtist("");
        java.lang.String str12 = cDMetadata9.getGenre();
        java.lang.String[] strArray14 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        cDMetadata9.setTrackNames((java.util.List<java.lang.String>) strList15);
        cDMetadata0.setArtistNames((java.util.List<java.lang.String>) strList15);
        cDMetadata0.setGenre("/rss/channel/item");
        java.lang.String str21 = cDMetadata0.getAlbum();
        java.util.List<java.lang.String> strList22 = cDMetadata0.getArtistNames();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(intList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(strList22);
    }

    @Test
    public void test1110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1110");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType8 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion13 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType8, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str14 = applicationVersion13.getDate();
        java.lang.String str15 = applicationVersion13.toShortString();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType16 = applicationVersion13.getVersionType();
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion21 = new net.sourceforge.atunes.model.ApplicationVersion("1.0.0 ", (int) (short) 10, (int) '4', (int) '#', versionType16, "", "./enclosure/@url", "SOCKS_PROXY", "./enclosure/@url");
        java.lang.Throwable throwable22 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException23 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable22);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList24 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable25 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException26 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable25);
        java.lang.Throwable[] throwableArray27 = searchQuerySyntaxException26.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException28 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException26);
        java.lang.Throwable throwable29 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException30 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable29);
        java.lang.Throwable[] throwableArray31 = searchQuerySyntaxException30.getSuppressed();
        throwableRankList24.replaceItem((java.lang.Throwable) searchQuerySyntaxException26, (java.lang.Throwable) searchQuerySyntaxException30);
        searchQuerySyntaxException23.addSuppressed((java.lang.Throwable) searchQuerySyntaxException30);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException34 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException23);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException35 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException23);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException36 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchIndexNotAvailableException35);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException37 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchIndexNotAvailableException35);
        java.lang.Throwable throwable38 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException39 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable38);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList40 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable41 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException42 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable41);
        java.lang.Throwable[] throwableArray43 = searchQuerySyntaxException42.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException44 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException42);
        java.lang.Throwable throwable45 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException46 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable45);
        java.lang.Throwable[] throwableArray47 = searchQuerySyntaxException46.getSuppressed();
        throwableRankList40.replaceItem((java.lang.Throwable) searchQuerySyntaxException42, (java.lang.Throwable) searchQuerySyntaxException46);
        searchQuerySyntaxException39.addSuppressed((java.lang.Throwable) searchQuerySyntaxException46);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException50 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException39);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException51 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException39);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException52 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchIndexNotAvailableException51);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException53 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchIndexNotAvailableException51);
        searchIndexNotAvailableException37.addSuppressed((java.lang.Throwable) searchIndexNotAvailableException51);
        boolean boolean55 = applicationVersion21.equals((java.lang.Object) searchIndexNotAvailableException37);
        int int56 = applicationVersion21.getMajorNumber();
        org.junit.Assert.assertTrue("'" + versionType8 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType8.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "./title" + "'", str14, "./title");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1.0.0 " + "'", str15, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + versionType16 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType16.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10 + "'", int56 == 10);
    }

    @Test
    public void test1111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1111");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str1 = feedType0.getEntryXPath();
        java.lang.String str2 = feedType0.getTypeXPath();
        java.lang.String str3 = feedType0.getNameXPath();
        java.lang.String str4 = feedType0.getUrlXPath();
        java.lang.String str5 = feedType0.getUrlXPath();
        java.lang.String str6 = feedType0.getNameXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "/rss/channel/item" + "'", str1, "/rss/channel/item");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "./enclosure/@type" + "'", str2, "./enclosure/@type");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "/rss/channel/title" + "'", str3, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "./enclosure/@url" + "'", str4, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "./enclosure/@url" + "'", str5, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "/rss/channel/title" + "'", str6, "/rss/channel/title");
    }

    @Test
    public void test1112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1112");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        net.sourceforge.atunes.model.TextTagAttribute textTagAttribute2 = net.sourceforge.atunes.model.TextTagAttribute.YEAR;
        boolean boolean3 = columnBean0.equals((java.lang.Object) textTagAttribute2);
        columnBean0.setOrder((int) (short) 1);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + textTagAttribute2 + "' != '" + net.sourceforge.atunes.model.TextTagAttribute.YEAR + "'", textTagAttribute2.equals(net.sourceforge.atunes.model.TextTagAttribute.YEAR));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1113");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.lang.String str3 = cDMetadata0.getGenre();
        java.lang.String[] strArray5 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList6);
        cDMetadata0.setYear((int) (short) 10);
        cDMetadata0.setDisc(0);
        cDMetadata0.setYear((-1));
        java.lang.String str15 = cDMetadata0.getAlbumArtist();
        java.util.List<java.lang.Integer> intList16 = cDMetadata0.getTracks();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(intList16);
    }

    @Test
    public void test1114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1114");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        columnBean0.setOrder((int) (short) 0);
        columnBean0.setWidth((int) 'a');
        int int5 = columnBean0.getWidth();
        columnBean0.setVisible(false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 97 + "'", int5 == 97);
    }

    @Test
    public void test1115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1115");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        fontSettings0.setUseFontSmoothing(false);
        net.sourceforge.atunes.model.IFontBean iFontBean3 = fontSettings0.getFont();
        boolean boolean4 = fontSettings0.isUseFontSmoothing();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList5 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList7 = throwableRankList5.getNFirstElements((int) (short) 10);
        int int8 = throwableRankList5.size();
        java.util.List<java.lang.Integer> intList10 = throwableRankList5.getNFirstElementCounts((int) (short) 100);
        boolean boolean11 = fontSettings0.equals((java.lang.Object) intList10);
        boolean boolean12 = fontSettings0.isUseFontSmoothing();
        fontSettings0.setUseFontSmoothingSettingsFromOs(true);
        org.junit.Assert.assertNull(iFontBean3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(throwableList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intList10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1116");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        net.sourceforge.atunes.model.AudioObjectProperty audioObjectProperty1 = net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY;
        boolean boolean2 = columnBean0.equals((java.lang.Object) audioObjectProperty1);
        int int3 = columnBean0.getWidth();
        int int4 = columnBean0.getOrder();
        net.sourceforge.atunes.model.CDMetadata cDMetadata5 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata5.setAlbumArtist("");
        java.lang.String str8 = cDMetadata5.getGenre();
        int int9 = cDMetadata5.getYear();
        int int10 = cDMetadata5.getYear();
        cDMetadata5.setGenre("./enclosure/@url");
        java.util.List<java.lang.String> strList13 = null;
        cDMetadata5.setTrackNames(strList13);
        cDMetadata5.setAlbumArtist("./link[@rel='enclosure']/@type");
        boolean boolean17 = columnBean0.equals((java.lang.Object) "./link[@rel='enclosure']/@type");
        columnBean0.setWidth((int) (byte) -1);
        int int20 = columnBean0.getWidth();
        int int21 = columnBean0.getOrder();
        org.junit.Assert.assertTrue("'" + audioObjectProperty1 + "' != '" + net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY + "'", audioObjectProperty1.equals(net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test1117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1117");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList3 = cDMetadata0.getTracks();
        cDMetadata0.setAlbumArtist("/rss/channel/title");
        java.util.List<java.lang.String> strList6 = cDMetadata0.getTrackNames();
        java.util.List<java.lang.String> strList7 = null;
        cDMetadata0.setComposerNames(strList7);
        java.lang.String str9 = cDMetadata0.getAlbumArtist();
        org.junit.Assert.assertNull(intList3);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/rss/channel/title" + "'", str9, "/rss/channel/title");
    }

    @Test
    public void test1118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1118");
        net.sourceforge.atunes.model.LocalAudioObjectFormat localAudioObjectFormat0 = net.sourceforge.atunes.model.LocalAudioObjectFormat.MPPLUS;
        java.lang.String str1 = localAudioObjectFormat0.getExtension();
        org.junit.Assert.assertTrue("'" + localAudioObjectFormat0 + "' != '" + net.sourceforge.atunes.model.LocalAudioObjectFormat.MPPLUS + "'", localAudioObjectFormat0.equals(net.sourceforge.atunes.model.LocalAudioObjectFormat.MPPLUS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "mp+" + "'", str1, "mp+");
    }

    @Test
    public void test1119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1119");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.ATOM;
        java.lang.String str1 = feedType0.getUrlXPath();
        java.lang.String str2 = feedType0.getAuthorXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.ATOM + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.ATOM));
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "./author/name" + "'", str2, "./author/name");
    }

    @Test
    public void test1120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1120");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str1 = feedType0.getUrlXPath();
        java.lang.String str2 = feedType0.getNameXPath();
        java.lang.String str3 = feedType0.getDescriptionXPath();
        java.lang.String str4 = feedType0.getNameXPath();
        java.lang.String str5 = feedType0.getEntryXPath();
        java.lang.String str6 = feedType0.getTypeXPath();
        java.lang.String str7 = feedType0.getUrlXPath();
        java.lang.String str8 = feedType0.getDateXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "./enclosure/@url" + "'", str1, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "/rss/channel/title" + "'", str2, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "./description" + "'", str3, "./description");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "/rss/channel/title" + "'", str4, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/rss/channel/item" + "'", str5, "/rss/channel/item");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "./enclosure/@type" + "'", str6, "./enclosure/@type");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "./enclosure/@url" + "'", str7, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "./pubDate" + "'", str8, "./pubDate");
    }

    @Test
    public void test1121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1121");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        fontSettings0.setUseFontSmoothing(false);
        net.sourceforge.atunes.model.IFontBean iFontBean3 = fontSettings0.getFont();
        boolean boolean4 = fontSettings0.isUseFontSmoothing();
        fontSettings0.setUseFontSmoothing(true);
        net.sourceforge.atunes.model.IFontBean iFontBean7 = fontSettings0.getFont();
        net.sourceforge.atunes.model.IFontBean iFontBean8 = fontSettings0.getFont();
        net.sourceforge.atunes.model.IFontBean iFontBean9 = null;
        fontSettings0.setFont(iFontBean9);
        org.junit.Assert.assertNull(iFontBean3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(iFontBean7);
        org.junit.Assert.assertNull(iFontBean8);
    }

    @Test
    public void test1122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1122");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable1 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException2 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable1);
        java.lang.Throwable[] throwableArray3 = searchQuerySyntaxException2.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException4 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException2);
        java.lang.Throwable throwable5 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException6 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable5);
        java.lang.Throwable[] throwableArray7 = searchQuerySyntaxException6.getSuppressed();
        throwableRankList0.replaceItem((java.lang.Throwable) searchQuerySyntaxException2, (java.lang.Throwable) searchQuerySyntaxException6);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList9 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable10 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException11 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable10);
        java.lang.Throwable[] throwableArray12 = searchQuerySyntaxException11.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException13 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException11);
        java.lang.Throwable throwable14 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException15 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable14);
        java.lang.Throwable[] throwableArray16 = searchQuerySyntaxException15.getSuppressed();
        throwableRankList9.replaceItem((java.lang.Throwable) searchQuerySyntaxException11, (java.lang.Throwable) searchQuerySyntaxException15);
        java.lang.Integer int18 = throwableRankList0.getCount((java.lang.Throwable) searchQuerySyntaxException15);
        java.util.List<java.lang.Throwable> throwableList19 = throwableRankList0.getOrder();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList20 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList22 = throwableRankList20.getNFirstElements((int) (short) 10);
        int int23 = throwableRankList20.size();
        int int24 = throwableRankList20.size();
        java.util.List<java.lang.Throwable> throwableList25 = throwableRankList20.getOrder();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList26 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable27 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException28 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable27);
        java.lang.Throwable[] throwableArray29 = searchQuerySyntaxException28.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException30 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException28);
        java.lang.Throwable throwable31 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException32 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable31);
        java.lang.Throwable[] throwableArray33 = searchQuerySyntaxException32.getSuppressed();
        throwableRankList26.replaceItem((java.lang.Throwable) searchQuerySyntaxException28, (java.lang.Throwable) searchQuerySyntaxException32);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList35 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable36 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException37 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable36);
        java.lang.Throwable[] throwableArray38 = searchQuerySyntaxException37.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException39 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException37);
        java.lang.Throwable throwable40 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException41 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable40);
        java.lang.Throwable[] throwableArray42 = searchQuerySyntaxException41.getSuppressed();
        throwableRankList35.replaceItem((java.lang.Throwable) searchQuerySyntaxException37, (java.lang.Throwable) searchQuerySyntaxException41);
        java.lang.Integer int44 = throwableRankList26.getCount((java.lang.Throwable) searchQuerySyntaxException41);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList45 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable46 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException47 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable46);
        java.lang.Throwable[] throwableArray48 = searchQuerySyntaxException47.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException49 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException47);
        java.lang.Throwable throwable50 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException51 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable50);
        java.lang.Throwable[] throwableArray52 = searchQuerySyntaxException51.getSuppressed();
        throwableRankList45.replaceItem((java.lang.Throwable) searchQuerySyntaxException47, (java.lang.Throwable) searchQuerySyntaxException51);
        java.util.List<java.lang.Throwable> throwableList54 = throwableRankList45.getOrder();
        java.lang.Throwable throwable55 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException56 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable55);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList57 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable58 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException59 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable58);
        java.lang.Throwable[] throwableArray60 = searchQuerySyntaxException59.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException61 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException59);
        java.lang.Throwable throwable62 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException63 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable62);
        java.lang.Throwable[] throwableArray64 = searchQuerySyntaxException63.getSuppressed();
        throwableRankList57.replaceItem((java.lang.Throwable) searchQuerySyntaxException59, (java.lang.Throwable) searchQuerySyntaxException63);
        searchQuerySyntaxException56.addSuppressed((java.lang.Throwable) searchQuerySyntaxException63);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException67 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException56);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException68 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException56);
        java.lang.Integer int69 = throwableRankList45.getCount((java.lang.Throwable) searchIndexNotAvailableException68);
        java.lang.Integer int70 = throwableRankList26.getCount((java.lang.Throwable) searchIndexNotAvailableException68);
        throwableRankList20.addItem((java.lang.Throwable) searchIndexNotAvailableException68);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList72 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable73 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException74 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable73);
        java.lang.Throwable[] throwableArray75 = searchQuerySyntaxException74.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException76 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException74);
        java.lang.Throwable throwable77 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException78 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable77);
        java.lang.Throwable[] throwableArray79 = searchQuerySyntaxException78.getSuppressed();
        throwableRankList72.replaceItem((java.lang.Throwable) searchQuerySyntaxException74, (java.lang.Throwable) searchQuerySyntaxException78);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException81 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException78);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException82 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException78);
        throwableRankList0.replaceItem((java.lang.Throwable) searchIndexNotAvailableException68, (java.lang.Throwable) searchQuerySyntaxException78);
        java.util.List<java.lang.Throwable> throwableList85 = throwableRankList0.getNFirstElements((int) ' ');
        java.lang.Throwable throwable86 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException87 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable86);
        java.lang.Throwable[] throwableArray88 = searchQuerySyntaxException87.getSuppressed();
        net.sourceforge.atunes.model.InconsistentRepositoryException inconsistentRepositoryException89 = new net.sourceforge.atunes.model.InconsistentRepositoryException();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException90 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) inconsistentRepositoryException89);
        throwableRankList0.replaceItem((java.lang.Throwable) searchQuerySyntaxException87, (java.lang.Throwable) searchIndexNotAvailableException90);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(throwableList19);
        org.junit.Assert.assertNotNull(throwableList22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(throwableList25);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNull(int44);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableList54);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNull(int69);
        org.junit.Assert.assertNull(int70);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(throwableList85);
        org.junit.Assert.assertNotNull(throwableArray88);
    }

    @Test
    public void test1123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1123");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.lang.String str3 = cDMetadata0.getGenre();
        java.lang.String[] strArray5 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList6);
        cDMetadata0.setYear((int) (short) 10);
        cDMetadata0.setDisc(0);
        java.lang.String str13 = cDMetadata0.getAlbum();
        int int14 = cDMetadata0.getYear();
        cDMetadata0.setAlbumArtist("net.sourceforge.atunes.model.SearchIndexNotAvailableException: net.sourceforge.atunes.model.SearchQuerySyntaxException");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
    }

    @Test
    public void test1124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1124");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType11 = applicationVersion9.getVersionType();
        java.lang.String str12 = applicationVersion9.getDownloadURL();
        java.lang.String str13 = applicationVersion9.getDirectDownloadURL();
        java.lang.String str14 = applicationVersion9.getDownloadURL();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType15 = applicationVersion9.getVersionType();
        net.sourceforge.atunes.model.RankList<java.util.List<java.lang.String>> strListRankList16 = new net.sourceforge.atunes.model.RankList<java.util.List<java.lang.String>>();
        boolean boolean17 = applicationVersion9.equals((java.lang.Object) strListRankList16);
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertTrue("'" + versionType11 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType11.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "./description" + "'", str12, "./description");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "./pubDate" + "'", str13, "./pubDate");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "./description" + "'", str14, "./description");
        org.junit.Assert.assertTrue("'" + versionType15 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType15.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1125");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        net.sourceforge.atunes.model.SubmissionState submissionState2 = net.sourceforge.atunes.model.SubmissionState.PENDING;
        boolean boolean3 = columnBean0.equals((java.lang.Object) submissionState2);
        columnBean0.setVisible(false);
        net.sourceforge.atunes.model.ColumnSort columnSort6 = columnBean0.getSort();
        columnBean0.setWidth((int) '4');
        columnBean0.setOrder((int) (short) -1);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + submissionState2 + "' != '" + net.sourceforge.atunes.model.SubmissionState.PENDING + "'", submissionState2.equals(net.sourceforge.atunes.model.SubmissionState.PENDING));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(columnSort6);
    }

    @Test
    public void test1126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1126");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.toString();
        int int11 = applicationVersion9.getMajorNumber();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType16 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion21 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType16, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str22 = applicationVersion21.getDate();
        java.lang.String str23 = applicationVersion21.toShortString();
        java.lang.String str24 = applicationVersion21.toShortString();
        java.lang.String str25 = applicationVersion21.getDownloadURL();
        java.lang.String str26 = applicationVersion21.getDate();
        int int27 = applicationVersion21.getMajorNumber();
        int int28 = applicationVersion21.getMinorNumber();
        java.lang.String str29 = applicationVersion21.getDirectDownloadURL();
        int int30 = applicationVersion9.compareTo(applicationVersion21);
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType31 = applicationVersion9.getVersionType();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1.0.0 mpc " + "'", str10, "1.0.0 mpc ");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + versionType16 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType16.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "./title" + "'", str22, "./title");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1.0.0 " + "'", str23, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1.0.0 " + "'", str24, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "./description" + "'", str25, "./description");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "./title" + "'", str26, "./title");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "./pubDate" + "'", str29, "./pubDate");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + versionType31 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType31.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
    }

    @Test
    public void test1127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1127");
        net.sourceforge.atunes.model.IFontBean iFontBean0 = null;
        net.sourceforge.atunes.model.FontSettings fontSettings3 = new net.sourceforge.atunes.model.FontSettings(iFontBean0, true, false);
        boolean boolean4 = fontSettings3.isUseFontSmoothing();
        net.sourceforge.atunes.model.IFontBean iFontBean5 = fontSettings3.getFont();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(iFontBean5);
    }

    @Test
    public void test1128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1128");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata1 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata1.setAlbumArtist("");
        boolean boolean4 = fontSettings0.equals((java.lang.Object) cDMetadata1);
        java.lang.String str5 = cDMetadata1.getAlbum();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList6 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList8 = throwableRankList6.getNFirstElements((int) (short) 10);
        throwableRankList6.clear();
        java.util.List<java.lang.Integer> intList11 = throwableRankList6.getNFirstElementCounts(150);
        cDMetadata1.setTracks(intList11);
        java.util.List<java.lang.Integer> intList13 = cDMetadata1.getTracks();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(throwableList8);
        org.junit.Assert.assertNotNull(intList11);
        org.junit.Assert.assertNotNull(intList13);
    }

    @Test
    public void test1129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1129");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        java.lang.String str12 = applicationVersion9.getChanges();
        int int13 = applicationVersion9.getMinorNumber();
        java.lang.String str14 = applicationVersion9.getChanges();
        int int15 = applicationVersion9.getMajorNumber();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType20 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion25 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType20, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str26 = applicationVersion25.getDate();
        java.lang.String str27 = applicationVersion25.toShortString();
        java.lang.String str28 = applicationVersion25.getChanges();
        int int29 = applicationVersion25.getMinorNumber();
        java.lang.String str30 = applicationVersion25.getChanges();
        int int31 = applicationVersion9.compareTo(applicationVersion25);
        java.lang.String str32 = applicationVersion25.toString();
        java.lang.String str33 = applicationVersion25.getName();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "./title" + "'", str12, "./title");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "./title" + "'", str14, "./title");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + versionType20 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType20.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "./title" + "'", str26, "./title");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1.0.0 " + "'", str27, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "./title" + "'", str28, "./title");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "./title" + "'", str30, "./title");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1.0.0 mpc " + "'", str32, "1.0.0 mpc ");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "mpc" + "'", str33, "mpc");
    }

    @Test
    public void test1130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1130");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        net.sourceforge.atunes.model.InconsistentRepositoryException inconsistentRepositoryException1 = new net.sourceforge.atunes.model.InconsistentRepositoryException();
        net.sourceforge.atunes.model.InconsistentRepositoryException inconsistentRepositoryException2 = new net.sourceforge.atunes.model.InconsistentRepositoryException();
        throwableRankList0.replaceItem((java.lang.Throwable) inconsistentRepositoryException1, (java.lang.Throwable) inconsistentRepositoryException2);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException4 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) inconsistentRepositoryException1);
    }

    @Test
    public void test1131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1131");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str1 = feedType0.getEntryXPath();
        java.lang.String str2 = feedType0.getTypeXPath();
        java.lang.String str3 = feedType0.getTypeXPath();
        java.lang.String str4 = feedType0.getNameXPath();
        java.lang.String str5 = feedType0.getDescriptionXPath();
        java.lang.String str6 = feedType0.getAuthorXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "/rss/channel/item" + "'", str1, "/rss/channel/item");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "./enclosure/@type" + "'", str2, "./enclosure/@type");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "./enclosure/@type" + "'", str3, "./enclosure/@type");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "/rss/channel/title" + "'", str4, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "./description" + "'", str5, "./description");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "./author" + "'", str6, "./author");
    }

    @Test
    public void test1132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1132");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata2 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata2.setAlbumArtist("");
        java.lang.String str5 = cDMetadata2.getGenre();
        java.lang.String[] strArray7 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        cDMetadata2.setTrackNames((java.util.List<java.lang.String>) strList8);
        cDMetadata0.setComposerNames((java.util.List<java.lang.String>) strList8);
        java.lang.String str12 = cDMetadata0.getAlbum();
        cDMetadata0.setAlbum("./duration");
        java.lang.String str16 = cDMetadata0.getTitle(10);
        java.lang.String str17 = cDMetadata0.getAlbumArtist();
        cDMetadata0.setGenre("1.0.0 mpc ");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test1133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1133");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList3 = cDMetadata0.getTracks();
        cDMetadata0.setAlbumArtist("/rss/channel/title");
        java.util.List<java.lang.String> strList6 = cDMetadata0.getTrackNames();
        java.lang.String str7 = cDMetadata0.getAlbumArtist();
        cDMetadata0.setYear((-1));
        java.util.List<java.lang.String> strList10 = cDMetadata0.getTrackNames();
        int int11 = cDMetadata0.getYear();
        int int12 = cDMetadata0.getYear();
        java.util.List<java.lang.Integer> intList13 = cDMetadata0.getTracks();
        org.junit.Assert.assertNull(intList3);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/rss/channel/title" + "'", str7, "/rss/channel/title");
        org.junit.Assert.assertNull(strList10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(intList13);
    }

    @Test
    public void test1134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1134");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata1 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata1.setAlbumArtist("");
        boolean boolean4 = fontSettings0.equals((java.lang.Object) cDMetadata1);
        fontSettings0.setUseFontSmoothingSettingsFromOs(false);
        net.sourceforge.atunes.model.ViewMode viewMode7 = net.sourceforge.atunes.model.ViewMode.ALBUM;
        boolean boolean8 = fontSettings0.equals((java.lang.Object) viewMode7);
        net.sourceforge.atunes.model.IRepository iRepository9 = null;
        java.util.Map<java.lang.String, ?> strMap10 = viewMode7.getDataForView(iRepository9);
        net.sourceforge.atunes.model.IRepository iRepository11 = null;
        java.util.Map<java.lang.String, ?> strMap12 = viewMode7.getDataForView(iRepository11);
        net.sourceforge.atunes.model.IRepository iRepository13 = null;
        java.util.Map<java.lang.String, ?> strMap14 = viewMode7.getDataForView(iRepository13);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + viewMode7 + "' != '" + net.sourceforge.atunes.model.ViewMode.ALBUM + "'", viewMode7.equals(net.sourceforge.atunes.model.ViewMode.ALBUM));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(strMap14);
    }

    @Test
    public void test1135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1135");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable1 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException2 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable1);
        java.lang.Throwable[] throwableArray3 = searchQuerySyntaxException2.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException4 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException2);
        java.lang.Throwable throwable5 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException6 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable5);
        java.lang.Throwable[] throwableArray7 = searchQuerySyntaxException6.getSuppressed();
        throwableRankList0.replaceItem((java.lang.Throwable) searchQuerySyntaxException2, (java.lang.Throwable) searchQuerySyntaxException6);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList9 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable10 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException11 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable10);
        java.lang.Throwable[] throwableArray12 = searchQuerySyntaxException11.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException13 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException11);
        java.lang.Throwable throwable14 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException15 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable14);
        java.lang.Throwable[] throwableArray16 = searchQuerySyntaxException15.getSuppressed();
        throwableRankList9.replaceItem((java.lang.Throwable) searchQuerySyntaxException11, (java.lang.Throwable) searchQuerySyntaxException15);
        java.lang.Integer int18 = throwableRankList0.getCount((java.lang.Throwable) searchQuerySyntaxException15);
        java.lang.Throwable throwable19 = null;
        java.lang.Throwable throwable20 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException21 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable20);
        throwableRankList0.replaceItem(throwable19, (java.lang.Throwable) searchQuerySyntaxException21);
        java.util.List<java.lang.Integer> intList24 = throwableRankList0.getNFirstElementCounts((int) (byte) 1);
        java.util.List<java.lang.Throwable> throwableList26 = throwableRankList0.getNFirstElements(0);
        java.util.List<java.lang.Integer> intList28 = throwableRankList0.getNFirstElementCounts((int) 'a');
        java.util.List<java.lang.Throwable> throwableList30 = throwableRankList0.getNFirstElements((int) (byte) 100);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(intList24);
        org.junit.Assert.assertNotNull(throwableList26);
        org.junit.Assert.assertNotNull(intList28);
        org.junit.Assert.assertNotNull(throwableList30);
    }

    @Test
    public void test1136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1136");
        net.sourceforge.atunes.model.LookAndFeelBean lookAndFeelBean0 = new net.sourceforge.atunes.model.LookAndFeelBean();
        java.lang.String str1 = lookAndFeelBean0.getSkin();
        lookAndFeelBean0.setSkin("1.0.0 ");
        java.lang.String str4 = lookAndFeelBean0.getName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test1137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1137");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.ATOM;
        java.lang.String str1 = feedType0.getUrlXPath();
        java.lang.String str2 = feedType0.getTypeXPath();
        java.lang.String str3 = feedType0.getDescriptionXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.ATOM + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.ATOM));
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "./link[@rel='enclosure']/@type" + "'", str2, "./link[@rel='enclosure']/@type");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "./summary" + "'", str3, "./summary");
    }

    @Test
    public void test1138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1138");
        net.sourceforge.atunes.model.LookAndFeelBean lookAndFeelBean0 = new net.sourceforge.atunes.model.LookAndFeelBean();
        java.lang.String str1 = lookAndFeelBean0.getSkin();
        lookAndFeelBean0.setSkin("./enclosure/@url");
        lookAndFeelBean0.setName("./duration");
        java.lang.String str6 = lookAndFeelBean0.getName();
        java.lang.String str7 = lookAndFeelBean0.getSkin();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "./duration" + "'", str6, "./duration");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "./enclosure/@url" + "'", str7, "./enclosure/@url");
    }

    @Test
    public void test1139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1139");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.BETA;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("mpc", (int) (short) 0, 150, (int) (byte) -1, versionType4, "flac", "/rss/channel/item", "hi!", "./pubDate");
        java.lang.String str10 = applicationVersion9.getDate();
        int int11 = applicationVersion9.getRevisionNumber();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.BETA + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.BETA));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "mpc" + "'", str10, "mpc");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test1140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1140");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.lang.String str3 = cDMetadata0.getGenre();
        int int4 = cDMetadata0.getYear();
        int int5 = cDMetadata0.getYear();
        net.sourceforge.atunes.model.CDMetadata cDMetadata6 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str7 = cDMetadata6.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata8 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata8.setAlbumArtist("");
        java.lang.String str11 = cDMetadata8.getGenre();
        java.lang.String[] strArray13 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        cDMetadata8.setTrackNames((java.util.List<java.lang.String>) strList14);
        cDMetadata6.setComposerNames((java.util.List<java.lang.String>) strList14);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList14);
        java.lang.String str19 = cDMetadata0.getAlbumArtist();
        java.util.List<java.lang.String> strList20 = cDMetadata0.getComposerNames();
        java.util.List<java.lang.String> strList21 = cDMetadata0.getArtistNames();
        net.sourceforge.atunes.model.FontSettings fontSettings22 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata23 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata23.setAlbumArtist("");
        boolean boolean26 = fontSettings22.equals((java.lang.Object) cDMetadata23);
        java.lang.String str27 = cDMetadata23.getAlbum();
        java.lang.String str28 = cDMetadata23.getAlbum();
        java.util.List<java.lang.Integer> intList29 = cDMetadata23.getTracks();
        net.sourceforge.atunes.model.FontSettings fontSettings30 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata31 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata31.setAlbumArtist("");
        boolean boolean34 = fontSettings30.equals((java.lang.Object) cDMetadata31);
        fontSettings30.setUseFontSmoothing(true);
        net.sourceforge.atunes.model.IFontBean iFontBean37 = fontSettings30.getFont();
        net.sourceforge.atunes.model.CDMetadata cDMetadata38 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str39 = cDMetadata38.getGenre();
        java.util.List<java.lang.String> strList40 = cDMetadata38.getComposerNames();
        java.lang.String str41 = cDMetadata38.getAlbum();
        java.util.List<java.lang.Integer> intList42 = cDMetadata38.getTracks();
        cDMetadata38.setAlbumArtist("mpc");
        java.lang.String str45 = cDMetadata38.getAlbum();
        boolean boolean46 = fontSettings30.equals((java.lang.Object) cDMetadata38);
        java.lang.String[] strArray71 = new java.lang.String[] { "./link[@rel='enclosure']/@type", "SOCKS_PROXY", "/feed/title", "./pubDate", "1.0.0 mpc ", "net.sourceforge.atunes.model.InconsistentRepositoryException", "1.0.0 mpc ", "1.0.0 mpc ", "rm", "./enclosure/@type", "/rss/channel/item", "mpc", "./title", "1.0.0 ", "flv", "1.0.0 ", "./link[@rel='enclosure']/@type", "hi!", "./link[@rel='enclosure']/@type", "./updated", "10.52.35  ", "net.sourceforge.atunes.model.InconsistentRepositoryException", "./enclosure/@url", "SOCKS_PROXY" };
        java.util.ArrayList<java.lang.String> strList72 = new java.util.ArrayList<java.lang.String>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList72, strArray71);
        cDMetadata38.setTrackNames((java.util.List<java.lang.String>) strList72);
        cDMetadata23.setTrackNames((java.util.List<java.lang.String>) strList72);
        net.sourceforge.atunes.model.ColumnBean columnBean76 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean77 = columnBean76.isVisible();
        net.sourceforge.atunes.model.SubmissionState submissionState78 = net.sourceforge.atunes.model.SubmissionState.PENDING;
        boolean boolean79 = columnBean76.equals((java.lang.Object) submissionState78);
        net.sourceforge.atunes.model.CDMetadata cDMetadata80 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata80.setAlbumArtist("");
        java.lang.String str84 = cDMetadata80.getTitle((int) (byte) -1);
        net.sourceforge.atunes.model.CDMetadata cDMetadata85 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata85.setAlbumArtist("");
        java.lang.String str89 = cDMetadata85.getTitle((int) (byte) -1);
        java.lang.String[] strArray91 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList92 = new java.util.ArrayList<java.lang.String>();
        boolean boolean93 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList92, strArray91);
        cDMetadata85.setTrackNames((java.util.List<java.lang.String>) strList92);
        cDMetadata80.setArtistNames((java.util.List<java.lang.String>) strList92);
        boolean boolean96 = columnBean76.equals((java.lang.Object) strList92);
        cDMetadata23.setComposerNames((java.util.List<java.lang.String>) strList92);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList92);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNull(strList20);
        org.junit.Assert.assertNull(strList21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(intList29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(iFontBean37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(strList40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(intList42);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + submissionState78 + "' != '" + net.sourceforge.atunes.model.SubmissionState.PENDING + "'", submissionState78.equals(net.sourceforge.atunes.model.SubmissionState.PENDING));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test1141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1141");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        net.sourceforge.atunes.model.ColumnSort columnSort4 = columnBean0.getSort();
        boolean boolean5 = columnBean0.isVisible();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(columnSort4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1142");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        net.sourceforge.atunes.model.InconsistentRepositoryException inconsistentRepositoryException1 = new net.sourceforge.atunes.model.InconsistentRepositoryException();
        net.sourceforge.atunes.model.InconsistentRepositoryException inconsistentRepositoryException2 = new net.sourceforge.atunes.model.InconsistentRepositoryException();
        throwableRankList0.replaceItem((java.lang.Throwable) inconsistentRepositoryException1, (java.lang.Throwable) inconsistentRepositoryException2);
        int int4 = throwableRankList0.size();
        java.util.List<java.lang.Throwable> throwableList6 = throwableRankList0.getNFirstElements((int) (byte) 10);
        java.util.List<java.lang.Throwable> throwableList8 = throwableRankList0.getNFirstElements(100);
        java.util.List<java.lang.Integer> intList10 = throwableRankList0.getNFirstElementCounts((int) (short) 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(throwableList6);
        org.junit.Assert.assertNotNull(throwableList8);
        org.junit.Assert.assertNotNull(intList10);
    }

    @Test
    public void test1143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1143");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        columnBean0.setVisible(false);
        columnBean0.setWidth(0);
        net.sourceforge.atunes.model.ColumnSort columnSort8 = columnBean0.getSort();
        net.sourceforge.atunes.model.ColumnSort columnSort9 = columnBean0.getSort();
        columnBean0.setOrder((int) (short) 100);
        columnBean0.setOrder((int) (byte) -1);
        boolean boolean14 = columnBean0.isVisible();
        columnBean0.setWidth(10);
        columnBean0.setWidth(90);
        columnBean0.setOrder(100);
        columnBean0.setVisible(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(columnSort8);
        org.junit.Assert.assertNull(columnSort9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1144");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        net.sourceforge.atunes.model.AudioObjectProperty audioObjectProperty1 = net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY;
        boolean boolean2 = columnBean0.equals((java.lang.Object) audioObjectProperty1);
        int int3 = columnBean0.getWidth();
        net.sourceforge.atunes.model.ColumnBean columnBean4 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean5 = columnBean4.isVisible();
        columnBean4.setOrder((int) (byte) -1);
        net.sourceforge.atunes.model.ColumnSort columnSort8 = net.sourceforge.atunes.model.ColumnSort.DESCENDING;
        columnBean4.setSort(columnSort8);
        net.sourceforge.atunes.model.ColumnBean columnBean10 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean11 = columnBean10.isVisible();
        net.sourceforge.atunes.model.SubmissionState submissionState12 = net.sourceforge.atunes.model.SubmissionState.PENDING;
        boolean boolean13 = columnBean10.equals((java.lang.Object) submissionState12);
        columnBean10.setVisible(false);
        net.sourceforge.atunes.model.ColumnSort columnSort16 = net.sourceforge.atunes.model.ColumnSort.ASCENDING;
        columnBean10.setSort(columnSort16);
        columnBean4.setSort(columnSort16);
        columnBean0.setSort(columnSort16);
        int int20 = columnBean0.getWidth();
        org.junit.Assert.assertTrue("'" + audioObjectProperty1 + "' != '" + net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY + "'", audioObjectProperty1.equals(net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + columnSort8 + "' != '" + net.sourceforge.atunes.model.ColumnSort.DESCENDING + "'", columnSort8.equals(net.sourceforge.atunes.model.ColumnSort.DESCENDING));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + submissionState12 + "' != '" + net.sourceforge.atunes.model.SubmissionState.PENDING + "'", submissionState12.equals(net.sourceforge.atunes.model.SubmissionState.PENDING));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + columnSort16 + "' != '" + net.sourceforge.atunes.model.ColumnSort.ASCENDING + "'", columnSort16.equals(net.sourceforge.atunes.model.ColumnSort.ASCENDING));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test1145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1145");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList3 = cDMetadata0.getTracks();
        cDMetadata0.setAlbumArtist("/rss/channel/title");
        java.util.List<java.lang.String> strList6 = cDMetadata0.getTrackNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata7 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata7.setAlbumArtist("");
        java.lang.String str10 = cDMetadata7.getGenre();
        java.lang.String[] strArray12 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        cDMetadata7.setTrackNames((java.util.List<java.lang.String>) strList13);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList13);
        net.sourceforge.atunes.model.CDMetadata cDMetadata17 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str18 = cDMetadata17.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata19 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata19.setAlbumArtist("");
        java.lang.String str22 = cDMetadata19.getGenre();
        java.lang.String[] strArray24 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        cDMetadata19.setTrackNames((java.util.List<java.lang.String>) strList25);
        cDMetadata17.setComposerNames((java.util.List<java.lang.String>) strList25);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList25);
        int int30 = cDMetadata0.getDisc();
        java.util.List<java.lang.String> strList31 = null;
        cDMetadata0.setTrackNames(strList31);
        org.junit.Assert.assertNull(intList3);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test1146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1146");
        net.sourceforge.atunes.model.LookAndFeelBean lookAndFeelBean0 = new net.sourceforge.atunes.model.LookAndFeelBean();
        java.lang.String str1 = lookAndFeelBean0.getSkin();
        lookAndFeelBean0.setName("net.sourceforge.atunes.model.SearchQuerySyntaxException");
        lookAndFeelBean0.setSkin("");
        lookAndFeelBean0.setName("hi!");
        java.lang.String str8 = lookAndFeelBean0.getName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
    }

    @Test
    public void test1147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1147");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        columnBean0.setVisible(false);
        net.sourceforge.atunes.model.ColumnSort columnSort6 = columnBean0.getSort();
        net.sourceforge.atunes.model.TextTagAttribute textTagAttribute7 = net.sourceforge.atunes.model.TextTagAttribute.COMPOSER;
        boolean boolean8 = columnBean0.equals((java.lang.Object) textTagAttribute7);
        columnBean0.setOrder(10);
        columnBean0.setOrder((int) ' ');
        columnBean0.setOrder((int) (byte) 100);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(columnSort6);
        org.junit.Assert.assertTrue("'" + textTagAttribute7 + "' != '" + net.sourceforge.atunes.model.TextTagAttribute.COMPOSER + "'", textTagAttribute7.equals(net.sourceforge.atunes.model.TextTagAttribute.COMPOSER));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1148");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.lang.String str3 = cDMetadata0.getGenre();
        java.lang.String[] strArray5 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList6);
        cDMetadata0.setYear((int) (short) 10);
        java.util.List<java.lang.String> strList11 = cDMetadata0.getComposerNames();
        cDMetadata0.setYear(10);
        net.sourceforge.atunes.model.CDMetadata cDMetadata14 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata14.setAlbumArtist("");
        java.lang.String str18 = cDMetadata14.getTitle((int) (byte) -1);
        java.lang.String[] strArray20 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        cDMetadata14.setTrackNames((java.util.List<java.lang.String>) strList21);
        cDMetadata14.setAlbumArtist("/rss/channel/item");
        java.util.List<java.lang.Integer> intList26 = cDMetadata14.getTracks();
        java.lang.String str28 = cDMetadata14.getTitle(100);
        net.sourceforge.atunes.model.ColumnBean columnBean29 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean30 = columnBean29.isVisible();
        net.sourceforge.atunes.model.SubmissionState submissionState31 = net.sourceforge.atunes.model.SubmissionState.PENDING;
        boolean boolean32 = columnBean29.equals((java.lang.Object) submissionState31);
        net.sourceforge.atunes.model.CDMetadata cDMetadata33 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata33.setAlbumArtist("");
        java.lang.String str37 = cDMetadata33.getTitle((int) (byte) -1);
        net.sourceforge.atunes.model.CDMetadata cDMetadata38 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata38.setAlbumArtist("");
        java.lang.String str42 = cDMetadata38.getTitle((int) (byte) -1);
        java.lang.String[] strArray44 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        cDMetadata38.setTrackNames((java.util.List<java.lang.String>) strList45);
        cDMetadata33.setArtistNames((java.util.List<java.lang.String>) strList45);
        boolean boolean49 = columnBean29.equals((java.lang.Object) strList45);
        cDMetadata14.setTrackNames((java.util.List<java.lang.String>) strList45);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList45);
        java.util.List<java.lang.Integer> intList52 = cDMetadata0.getTracks();
        net.sourceforge.atunes.model.CDMetadata cDMetadata53 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata53.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList56 = cDMetadata53.getTracks();
        cDMetadata53.setAlbumArtist("/rss/channel/title");
        java.util.List<java.lang.String> strList59 = cDMetadata53.getTrackNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata60 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata60.setAlbumArtist("");
        java.lang.String str63 = cDMetadata60.getGenre();
        java.lang.String[] strArray65 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList66 = new java.util.ArrayList<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList66, strArray65);
        cDMetadata60.setTrackNames((java.util.List<java.lang.String>) strList66);
        cDMetadata53.setTrackNames((java.util.List<java.lang.String>) strList66);
        net.sourceforge.atunes.model.CDMetadata cDMetadata70 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str71 = cDMetadata70.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata72 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata72.setAlbumArtist("");
        java.lang.String str75 = cDMetadata72.getGenre();
        java.lang.String[] strArray77 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList78 = new java.util.ArrayList<java.lang.String>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList78, strArray77);
        cDMetadata72.setTrackNames((java.util.List<java.lang.String>) strList78);
        cDMetadata70.setComposerNames((java.util.List<java.lang.String>) strList78);
        cDMetadata53.setTrackNames((java.util.List<java.lang.String>) strList78);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList78);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(intList26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + submissionState31 + "' != '" + net.sourceforge.atunes.model.SubmissionState.PENDING + "'", submissionState31.equals(net.sourceforge.atunes.model.SubmissionState.PENDING));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(intList52);
        org.junit.Assert.assertNull(intList56);
        org.junit.Assert.assertNull(strList59);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test1149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1149");
        net.sourceforge.atunes.model.ImageSize imageSize0 = net.sourceforge.atunes.model.ImageSize.SIZE_MAX;
        int int1 = imageSize0.getSize();
        int int2 = imageSize0.getSize();
        int int3 = imageSize0.getSize();
        int int4 = imageSize0.getSize();
        org.junit.Assert.assertTrue("'" + imageSize0 + "' != '" + net.sourceforge.atunes.model.ImageSize.SIZE_MAX + "'", imageSize0.equals(net.sourceforge.atunes.model.ImageSize.SIZE_MAX));
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test1150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1150");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.lang.String str3 = cDMetadata0.getAlbum();
        java.util.List<java.lang.Integer> intList4 = cDMetadata0.getTracks();
        net.sourceforge.atunes.model.CDMetadata cDMetadata5 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata5.setAlbumArtist("");
        java.lang.String str9 = cDMetadata5.getTitle((int) (byte) -1);
        java.lang.String[] strArray11 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        cDMetadata5.setTrackNames((java.util.List<java.lang.String>) strList12);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList12);
        cDMetadata0.setYear((int) (short) 1);
        int int18 = cDMetadata0.getYear();
        java.lang.String str19 = cDMetadata0.getGenre();
        cDMetadata0.setYear((int) (short) 10);
        net.sourceforge.atunes.model.CDMetadata cDMetadata22 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata22.setAlbumArtist("");
        java.lang.String str25 = cDMetadata22.getGenre();
        java.lang.String[] strArray27 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        cDMetadata22.setTrackNames((java.util.List<java.lang.String>) strList28);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList28);
        cDMetadata0.setAlbum("flv");
        java.lang.String str34 = cDMetadata0.getAlbumArtist();
        java.lang.String str36 = cDMetadata0.getTitle(3);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(intList4);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str36);
    }

    @Test
    public void test1151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1151");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata1 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata1.setAlbumArtist("");
        boolean boolean4 = fontSettings0.equals((java.lang.Object) cDMetadata1);
        fontSettings0.setUseFontSmoothingSettingsFromOs(false);
        net.sourceforge.atunes.model.ViewMode viewMode7 = net.sourceforge.atunes.model.ViewMode.ALBUM;
        boolean boolean8 = fontSettings0.equals((java.lang.Object) viewMode7);
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType13 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion18 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType13, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str19 = applicationVersion18.getDate();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType20 = applicationVersion18.getVersionType();
        java.lang.String str21 = applicationVersion18.getDownloadURL();
        java.lang.String str22 = applicationVersion18.getDirectDownloadURL();
        boolean boolean23 = fontSettings0.equals((java.lang.Object) applicationVersion18);
        net.sourceforge.atunes.model.IFontBean iFontBean24 = fontSettings0.getFont();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList25 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable26 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException27 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable26);
        java.lang.Throwable[] throwableArray28 = searchQuerySyntaxException27.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException29 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException27);
        java.lang.Throwable throwable30 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException31 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable30);
        java.lang.Throwable[] throwableArray32 = searchQuerySyntaxException31.getSuppressed();
        throwableRankList25.replaceItem((java.lang.Throwable) searchQuerySyntaxException27, (java.lang.Throwable) searchQuerySyntaxException31);
        java.util.List<java.lang.Throwable> throwableList34 = throwableRankList25.getOrder();
        java.lang.Throwable throwable35 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException36 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable35);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList37 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable38 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException39 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable38);
        java.lang.Throwable[] throwableArray40 = searchQuerySyntaxException39.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException41 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException39);
        java.lang.Throwable throwable42 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException43 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable42);
        java.lang.Throwable[] throwableArray44 = searchQuerySyntaxException43.getSuppressed();
        throwableRankList37.replaceItem((java.lang.Throwable) searchQuerySyntaxException39, (java.lang.Throwable) searchQuerySyntaxException43);
        searchQuerySyntaxException36.addSuppressed((java.lang.Throwable) searchQuerySyntaxException43);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException47 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException36);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException48 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException36);
        java.lang.Integer int49 = throwableRankList25.getCount((java.lang.Throwable) searchIndexNotAvailableException48);
        java.util.List<java.lang.Integer> intList51 = throwableRankList25.getNFirstElementCounts((int) '#');
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList52 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        net.sourceforge.atunes.model.InconsistentRepositoryException inconsistentRepositoryException53 = new net.sourceforge.atunes.model.InconsistentRepositoryException();
        net.sourceforge.atunes.model.InconsistentRepositoryException inconsistentRepositoryException54 = new net.sourceforge.atunes.model.InconsistentRepositoryException();
        throwableRankList52.replaceItem((java.lang.Throwable) inconsistentRepositoryException53, (java.lang.Throwable) inconsistentRepositoryException54);
        throwableRankList25.addItem((java.lang.Throwable) inconsistentRepositoryException53);
        boolean boolean57 = fontSettings0.equals((java.lang.Object) throwableRankList25);
        java.util.List<java.lang.Integer> intList59 = throwableRankList25.getNFirstElementCounts((int) '#');
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + viewMode7 + "' != '" + net.sourceforge.atunes.model.ViewMode.ALBUM + "'", viewMode7.equals(net.sourceforge.atunes.model.ViewMode.ALBUM));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + versionType13 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType13.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "./title" + "'", str19, "./title");
        org.junit.Assert.assertTrue("'" + versionType20 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType20.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "./description" + "'", str21, "./description");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "./pubDate" + "'", str22, "./pubDate");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(iFontBean24);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableList34);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNull(int49);
        org.junit.Assert.assertNotNull(intList51);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(intList59);
    }

    @Test
    public void test1152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1152");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        fontSettings0.setUseFontSmoothing(false);
        net.sourceforge.atunes.model.IFontBean iFontBean3 = fontSettings0.getFont();
        boolean boolean4 = fontSettings0.isUseFontSmoothing();
        fontSettings0.setUseFontSmoothing(true);
        boolean boolean7 = fontSettings0.isUseFontSmoothing();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType12 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion17 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType12, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str18 = applicationVersion17.getDate();
        java.lang.String str19 = applicationVersion17.toShortString();
        int int20 = applicationVersion17.getMajorNumber();
        java.lang.String str21 = applicationVersion17.toString();
        java.lang.String str22 = applicationVersion17.getChanges();
        int int23 = applicationVersion17.getRevisionNumber();
        boolean boolean24 = fontSettings0.equals((java.lang.Object) int23);
        boolean boolean25 = fontSettings0.isUseFontSmoothingSettingsFromOs();
        org.junit.Assert.assertNull(iFontBean3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + versionType12 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType12.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "./title" + "'", str18, "./title");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1.0.0 " + "'", str19, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1.0.0 mpc " + "'", str21, "1.0.0 mpc ");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "./title" + "'", str22, "./title");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test1153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1153");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        columnBean0.setVisible(false);
        columnBean0.setWidth(0);
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType12 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion17 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType12, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str18 = applicationVersion17.getDate();
        java.lang.String str19 = applicationVersion17.toShortString();
        java.lang.String str20 = applicationVersion17.getChanges();
        boolean boolean21 = columnBean0.equals((java.lang.Object) applicationVersion17);
        net.sourceforge.atunes.model.ColumnBean columnBean22 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean23 = columnBean22.isVisible();
        net.sourceforge.atunes.model.SubmissionState submissionState24 = net.sourceforge.atunes.model.SubmissionState.PENDING;
        boolean boolean25 = columnBean22.equals((java.lang.Object) submissionState24);
        columnBean22.setVisible(false);
        net.sourceforge.atunes.model.ColumnSort columnSort28 = net.sourceforge.atunes.model.ColumnSort.ASCENDING;
        columnBean22.setSort(columnSort28);
        columnBean0.setSort(columnSort28);
        net.sourceforge.atunes.model.FontSettings fontSettings31 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata32 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata32.setAlbumArtist("");
        boolean boolean35 = fontSettings31.equals((java.lang.Object) cDMetadata32);
        net.sourceforge.atunes.model.FeedType feedType36 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str37 = feedType36.getUrlXPath();
        java.lang.String str38 = feedType36.getNameXPath();
        java.lang.String str39 = feedType36.getDescriptionXPath();
        boolean boolean40 = fontSettings31.equals((java.lang.Object) str39);
        boolean boolean41 = fontSettings31.isUseFontSmoothing();
        boolean boolean42 = columnBean0.equals((java.lang.Object) boolean41);
        columnBean0.setWidth(10);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + versionType12 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType12.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "./title" + "'", str18, "./title");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1.0.0 " + "'", str19, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "./title" + "'", str20, "./title");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + submissionState24 + "' != '" + net.sourceforge.atunes.model.SubmissionState.PENDING + "'", submissionState24.equals(net.sourceforge.atunes.model.SubmissionState.PENDING));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + columnSort28 + "' != '" + net.sourceforge.atunes.model.ColumnSort.ASCENDING + "'", columnSort28.equals(net.sourceforge.atunes.model.ColumnSort.ASCENDING));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + feedType36 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType36.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "./enclosure/@url" + "'", str37, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "/rss/channel/title" + "'", str38, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "./description" + "'", str39, "./description");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test1154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1154");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        fontSettings0.setUseFontSmoothing(false);
        net.sourceforge.atunes.model.IFontBean iFontBean3 = fontSettings0.getFont();
        boolean boolean4 = fontSettings0.isUseFontSmoothing();
        fontSettings0.setUseFontSmoothing(true);
        net.sourceforge.atunes.model.IFontBean iFontBean7 = fontSettings0.getFont();
        boolean boolean8 = fontSettings0.isUseFontSmoothing();
        net.sourceforge.atunes.model.FontSettings fontSettings9 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata10 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata10.setAlbumArtist("");
        boolean boolean13 = fontSettings9.equals((java.lang.Object) cDMetadata10);
        fontSettings9.setUseFontSmoothingSettingsFromOs(true);
        boolean boolean16 = fontSettings9.isUseFontSmoothingSettingsFromOs();
        boolean boolean17 = fontSettings0.equals((java.lang.Object) fontSettings9);
        fontSettings0.setUseFontSmoothing(true);
        org.junit.Assert.assertNull(iFontBean3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(iFontBean7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1155");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        int int12 = applicationVersion9.getMajorNumber();
        int int13 = applicationVersion9.getMinorNumber();
        java.lang.String str14 = applicationVersion9.getDate();
        java.lang.String str15 = applicationVersion9.toShortString();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType16 = applicationVersion9.getVersionType();
        java.lang.String str17 = applicationVersion9.getDate();
        java.lang.String str18 = applicationVersion9.getName();
        java.lang.String str19 = applicationVersion9.toShortString();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "./title" + "'", str14, "./title");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1.0.0 " + "'", str15, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + versionType16 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType16.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "./title" + "'", str17, "./title");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "mpc" + "'", str18, "mpc");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1.0.0 " + "'", str19, "1.0.0 ");
    }

    @Test
    public void test1156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1156");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList3 = cDMetadata0.getTracks();
        cDMetadata0.setAlbumArtist("/rss/channel/title");
        java.lang.String str7 = cDMetadata0.getTitle((int) (short) 10);
        net.sourceforge.atunes.model.CDMetadata cDMetadata8 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str9 = cDMetadata8.getGenre();
        java.util.List<java.lang.String> strList10 = cDMetadata8.getComposerNames();
        java.lang.String str11 = cDMetadata8.getAlbum();
        java.util.List<java.lang.Integer> intList12 = cDMetadata8.getTracks();
        int int13 = cDMetadata8.getDisc();
        java.lang.String[] strArray21 = new java.lang.String[] { "net.sourceforge.atunes.model.InconsistentRepositoryException", "./title", "1.0.0 ", "./title", "./duration", "mpc", "net.sourceforge.atunes.model.InconsistentRepositoryException" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        cDMetadata8.setArtistNames((java.util.List<java.lang.String>) strList22);
        cDMetadata0.setComposerNames((java.util.List<java.lang.String>) strList22);
        net.sourceforge.atunes.model.CDMetadata cDMetadata26 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata26.setAlbumArtist("");
        java.lang.String str29 = cDMetadata26.getGenre();
        int int30 = cDMetadata26.getYear();
        int int31 = cDMetadata26.getYear();
        net.sourceforge.atunes.model.CDMetadata cDMetadata32 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str33 = cDMetadata32.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata34 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata34.setAlbumArtist("");
        java.lang.String str37 = cDMetadata34.getGenre();
        java.lang.String[] strArray39 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        cDMetadata34.setTrackNames((java.util.List<java.lang.String>) strList40);
        cDMetadata32.setComposerNames((java.util.List<java.lang.String>) strList40);
        cDMetadata26.setTrackNames((java.util.List<java.lang.String>) strList40);
        net.sourceforge.atunes.model.CDMetadata cDMetadata45 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str46 = cDMetadata45.getGenre();
        java.util.List<java.lang.String> strList47 = cDMetadata45.getComposerNames();
        java.lang.String str48 = cDMetadata45.getAlbum();
        java.util.List<java.lang.Integer> intList49 = cDMetadata45.getTracks();
        int int50 = cDMetadata45.getDisc();
        java.lang.String[] strArray58 = new java.lang.String[] { "net.sourceforge.atunes.model.InconsistentRepositoryException", "./title", "1.0.0 ", "./title", "./duration", "mpc", "net.sourceforge.atunes.model.InconsistentRepositoryException" };
        java.util.ArrayList<java.lang.String> strList59 = new java.util.ArrayList<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList59, strArray58);
        cDMetadata45.setArtistNames((java.util.List<java.lang.String>) strList59);
        cDMetadata26.setArtistNames((java.util.List<java.lang.String>) strList59);
        net.sourceforge.atunes.model.CDMetadata cDMetadata63 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata63.setAlbumArtist("");
        java.lang.String str66 = cDMetadata63.getGenre();
        java.lang.String[] strArray68 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        cDMetadata63.setTrackNames((java.util.List<java.lang.String>) strList69);
        cDMetadata26.setTrackNames((java.util.List<java.lang.String>) strList69);
        cDMetadata0.setArtistNames((java.util.List<java.lang.String>) strList69);
        org.junit.Assert.assertNull(intList3);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(strList10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(intList12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(strList47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(intList49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test1157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1157");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata1 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata1.setAlbumArtist("");
        boolean boolean4 = fontSettings0.equals((java.lang.Object) cDMetadata1);
        java.lang.String str5 = cDMetadata1.getAlbum();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList6 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList8 = throwableRankList6.getNFirstElements((int) (short) 10);
        throwableRankList6.clear();
        java.util.List<java.lang.Integer> intList11 = throwableRankList6.getNFirstElementCounts(150);
        cDMetadata1.setTracks(intList11);
        java.lang.String str13 = cDMetadata1.getAlbumArtist();
        cDMetadata1.setGenre("net.sourceforge.atunes.model.SearchIndexNotAvailableException: net.sourceforge.atunes.model.SearchQuerySyntaxException");
        java.lang.String str16 = cDMetadata1.getAlbum();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(throwableList8);
        org.junit.Assert.assertNotNull(intList11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test1158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1158");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        columnBean0.setVisible(false);
        columnBean0.setWidth(0);
        net.sourceforge.atunes.model.ColumnSort columnSort8 = columnBean0.getSort();
        columnBean0.setWidth((int) (byte) 10);
        columnBean0.setVisible(true);
        net.sourceforge.atunes.model.ColumnBean columnBean13 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean14 = columnBean13.isVisible();
        columnBean13.setOrder((int) (byte) -1);
        columnBean13.setVisible(false);
        columnBean13.setWidth(0);
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType25 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion30 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType25, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str31 = applicationVersion30.getDate();
        java.lang.String str32 = applicationVersion30.toShortString();
        java.lang.String str33 = applicationVersion30.getChanges();
        boolean boolean34 = columnBean13.equals((java.lang.Object) applicationVersion30);
        net.sourceforge.atunes.model.ColumnBean columnBean35 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean36 = columnBean35.isVisible();
        net.sourceforge.atunes.model.SubmissionState submissionState37 = net.sourceforge.atunes.model.SubmissionState.PENDING;
        boolean boolean38 = columnBean35.equals((java.lang.Object) submissionState37);
        columnBean35.setVisible(false);
        net.sourceforge.atunes.model.ColumnSort columnSort41 = net.sourceforge.atunes.model.ColumnSort.ASCENDING;
        columnBean35.setSort(columnSort41);
        columnBean13.setSort(columnSort41);
        columnBean0.setSort(columnSort41);
        boolean boolean45 = columnBean0.isVisible();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(columnSort8);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + versionType25 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType25.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "./title" + "'", str31, "./title");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1.0.0 " + "'", str32, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "./title" + "'", str33, "./title");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + submissionState37 + "' != '" + net.sourceforge.atunes.model.SubmissionState.PENDING + "'", submissionState37.equals(net.sourceforge.atunes.model.SubmissionState.PENDING));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + columnSort41 + "' != '" + net.sourceforge.atunes.model.ColumnSort.ASCENDING + "'", columnSort41.equals(net.sourceforge.atunes.model.ColumnSort.ASCENDING));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test1159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1159");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList3 = cDMetadata0.getTracks();
        cDMetadata0.setAlbumArtist("/rss/channel/title");
        java.util.List<java.lang.String> strList6 = cDMetadata0.getTrackNames();
        java.lang.String str7 = cDMetadata0.getAlbumArtist();
        cDMetadata0.setYear((-1));
        java.util.List<java.lang.String> strList10 = cDMetadata0.getTrackNames();
        java.lang.String str12 = cDMetadata0.getTitle((int) (short) -1);
        org.junit.Assert.assertNull(intList3);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/rss/channel/title" + "'", str7, "/rss/channel/title");
        org.junit.Assert.assertNull(strList10);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test1160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1160");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str1 = feedType0.getUrlXPath();
        java.lang.String str2 = feedType0.getDurationXPath();
        java.lang.String str3 = feedType0.getTitleXPath();
        java.lang.String str4 = feedType0.getDateXPath();
        java.lang.String str5 = feedType0.getUrlXPath();
        java.lang.String str6 = feedType0.getAuthorXPath();
        java.lang.String str7 = feedType0.getTypeXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "./enclosure/@url" + "'", str1, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "./duration" + "'", str2, "./duration");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "./title" + "'", str3, "./title");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "./pubDate" + "'", str4, "./pubDate");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "./enclosure/@url" + "'", str5, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "./author" + "'", str6, "./author");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "./enclosure/@type" + "'", str7, "./enclosure/@type");
    }

    @Test
    public void test1161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1161");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        net.sourceforge.atunes.model.InconsistentRepositoryException inconsistentRepositoryException1 = new net.sourceforge.atunes.model.InconsistentRepositoryException();
        net.sourceforge.atunes.model.InconsistentRepositoryException inconsistentRepositoryException2 = new net.sourceforge.atunes.model.InconsistentRepositoryException();
        throwableRankList0.replaceItem((java.lang.Throwable) inconsistentRepositoryException1, (java.lang.Throwable) inconsistentRepositoryException2);
        int int4 = throwableRankList0.size();
        java.lang.Throwable throwable5 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException6 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable5);
        java.lang.Throwable[] throwableArray7 = searchQuerySyntaxException6.getSuppressed();
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException8 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException6);
        throwableRankList0.addItem((java.lang.Throwable) searchQuerySyntaxException6);
        java.lang.Throwable throwable10 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException11 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable10);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList12 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable13 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException14 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable13);
        java.lang.Throwable[] throwableArray15 = searchQuerySyntaxException14.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException16 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException14);
        java.lang.Throwable throwable17 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException18 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable17);
        java.lang.Throwable[] throwableArray19 = searchQuerySyntaxException18.getSuppressed();
        throwableRankList12.replaceItem((java.lang.Throwable) searchQuerySyntaxException14, (java.lang.Throwable) searchQuerySyntaxException18);
        searchQuerySyntaxException11.addSuppressed((java.lang.Throwable) searchQuerySyntaxException18);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException22 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException11);
        java.lang.Throwable throwable23 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException24 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable23);
        java.lang.Throwable[] throwableArray25 = searchQuerySyntaxException24.getSuppressed();
        searchQuerySyntaxException11.addSuppressed((java.lang.Throwable) searchQuerySyntaxException24);
        java.lang.Integer int27 = throwableRankList0.getCount((java.lang.Throwable) searchQuerySyntaxException11);
        java.lang.Throwable throwable28 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException29 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable28);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList30 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable31 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException32 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable31);
        java.lang.Throwable[] throwableArray33 = searchQuerySyntaxException32.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException34 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException32);
        java.lang.Throwable throwable35 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException36 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable35);
        java.lang.Throwable[] throwableArray37 = searchQuerySyntaxException36.getSuppressed();
        throwableRankList30.replaceItem((java.lang.Throwable) searchQuerySyntaxException32, (java.lang.Throwable) searchQuerySyntaxException36);
        searchQuerySyntaxException29.addSuppressed((java.lang.Throwable) searchQuerySyntaxException36);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException40 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException29);
        java.lang.Throwable throwable41 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException42 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable41);
        java.lang.Throwable[] throwableArray43 = searchQuerySyntaxException42.getSuppressed();
        searchQuerySyntaxException29.addSuppressed((java.lang.Throwable) searchQuerySyntaxException42);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException45 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException29);
        java.lang.Integer int46 = throwableRankList0.getCount((java.lang.Throwable) searchQuerySyntaxException29);
        java.lang.Throwable throwable47 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException48 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable47);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList49 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable50 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException51 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable50);
        java.lang.Throwable[] throwableArray52 = searchQuerySyntaxException51.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException53 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException51);
        java.lang.Throwable throwable54 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException55 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable54);
        java.lang.Throwable[] throwableArray56 = searchQuerySyntaxException55.getSuppressed();
        throwableRankList49.replaceItem((java.lang.Throwable) searchQuerySyntaxException51, (java.lang.Throwable) searchQuerySyntaxException55);
        searchQuerySyntaxException48.addSuppressed((java.lang.Throwable) searchQuerySyntaxException55);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException59 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException48);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException60 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException59);
        java.lang.Integer int61 = throwableRankList0.getCount((java.lang.Throwable) searchQuerySyntaxException60);
        java.util.List<java.lang.Throwable> throwableList63 = throwableRankList0.getNFirstElements((int) (byte) 10);
        java.util.List<java.lang.Throwable> throwableList64 = throwableRankList0.getOrder();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNull(int27);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNull(int46);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNull(int61);
        org.junit.Assert.assertNotNull(throwableList63);
        org.junit.Assert.assertNotNull(throwableList64);
    }

    @Test
    public void test1162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1162");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str1 = feedType0.getUrlXPath();
        java.lang.String str2 = feedType0.getNameXPath();
        java.lang.String str3 = feedType0.getDescriptionXPath();
        java.lang.String str4 = feedType0.getNameXPath();
        java.lang.String str5 = feedType0.getEntryXPath();
        java.lang.String str6 = feedType0.getTypeXPath();
        java.lang.String str7 = feedType0.getDateXPath();
        java.lang.String str8 = feedType0.getTypeXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "./enclosure/@url" + "'", str1, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "/rss/channel/title" + "'", str2, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "./description" + "'", str3, "./description");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "/rss/channel/title" + "'", str4, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/rss/channel/item" + "'", str5, "/rss/channel/item");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "./enclosure/@type" + "'", str6, "./enclosure/@type");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "./pubDate" + "'", str7, "./pubDate");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "./enclosure/@type" + "'", str8, "./enclosure/@type");
    }

    @Test
    public void test1163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1163");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        columnBean0.setVisible(false);
        columnBean0.setWidth(0);
        columnBean0.setOrder((int) (short) 10);
        columnBean0.setOrder(52);
        columnBean0.setVisible(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test1164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1164");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.lang.String str4 = cDMetadata0.getTitle((int) (byte) -1);
        net.sourceforge.atunes.model.CDMetadata cDMetadata5 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata5.setAlbumArtist("");
        java.lang.String str8 = cDMetadata5.getGenre();
        int int9 = cDMetadata5.getYear();
        int int10 = cDMetadata5.getYear();
        net.sourceforge.atunes.model.CDMetadata cDMetadata11 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str12 = cDMetadata11.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata13 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata13.setAlbumArtist("");
        java.lang.String str16 = cDMetadata13.getGenre();
        java.lang.String[] strArray18 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        cDMetadata13.setTrackNames((java.util.List<java.lang.String>) strList19);
        cDMetadata11.setComposerNames((java.util.List<java.lang.String>) strList19);
        cDMetadata5.setTrackNames((java.util.List<java.lang.String>) strList19);
        net.sourceforge.atunes.model.CDMetadata cDMetadata24 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str25 = cDMetadata24.getGenre();
        java.util.List<java.lang.String> strList26 = cDMetadata24.getComposerNames();
        java.lang.String str27 = cDMetadata24.getAlbum();
        java.util.List<java.lang.Integer> intList28 = cDMetadata24.getTracks();
        int int29 = cDMetadata24.getDisc();
        java.lang.String[] strArray37 = new java.lang.String[] { "net.sourceforge.atunes.model.InconsistentRepositoryException", "./title", "1.0.0 ", "./title", "./duration", "mpc", "net.sourceforge.atunes.model.InconsistentRepositoryException" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        cDMetadata24.setArtistNames((java.util.List<java.lang.String>) strList38);
        cDMetadata5.setArtistNames((java.util.List<java.lang.String>) strList38);
        cDMetadata0.setComposerNames((java.util.List<java.lang.String>) strList38);
        java.lang.String str43 = cDMetadata0.getGenre();
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(intList28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(str43);
    }

    @Test
    public void test1165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1165");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata1 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata1.setAlbumArtist("");
        boolean boolean4 = fontSettings0.equals((java.lang.Object) cDMetadata1);
        fontSettings0.setUseFontSmoothingSettingsFromOs(false);
        net.sourceforge.atunes.model.IFontBean iFontBean7 = fontSettings0.getFont();
        net.sourceforge.atunes.model.IFontBean iFontBean8 = null;
        fontSettings0.setFont(iFontBean8);
        boolean boolean10 = fontSettings0.isUseFontSmoothing();
        boolean boolean11 = fontSettings0.isUseFontSmoothing();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(iFontBean7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1166");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./summary", 0, (int) (byte) 0, (int) (byte) 0, versionType4, "./title", "/rss/channel/title", "net.sourceforge.atunes.model.SearchQuerySyntaxException", "./title");
        java.lang.String str10 = applicationVersion9.getChanges();
        int int11 = applicationVersion9.getRevisionNumber();
        int int12 = applicationVersion9.getRevisionNumber();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test1167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1167");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        int int10 = applicationVersion9.getMinorNumber();
        java.lang.String str11 = applicationVersion9.toShortString();
        int int12 = applicationVersion9.getMinorNumber();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test1168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1168");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str1 = feedType0.getUrlXPath();
        java.lang.String str2 = feedType0.getNameXPath();
        java.lang.String str3 = feedType0.getDescriptionXPath();
        java.lang.String str4 = feedType0.getNameXPath();
        java.lang.String str5 = feedType0.getEntryXPath();
        java.lang.String str6 = feedType0.getDateXPath();
        java.lang.String str7 = feedType0.getDescriptionXPath();
        java.lang.String str8 = feedType0.getTypeXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "./enclosure/@url" + "'", str1, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "/rss/channel/title" + "'", str2, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "./description" + "'", str3, "./description");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "/rss/channel/title" + "'", str4, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/rss/channel/item" + "'", str5, "/rss/channel/item");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "./pubDate" + "'", str6, "./pubDate");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "./description" + "'", str7, "./description");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "./enclosure/@type" + "'", str8, "./enclosure/@type");
    }

    @Test
    public void test1169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1169");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        boolean boolean1 = fontSettings0.isUseFontSmoothing();
        fontSettings0.setUseFontSmoothing(false);
        fontSettings0.setUseFontSmoothingSettingsFromOs(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test1170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1170");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        int int12 = applicationVersion9.getMajorNumber();
        java.lang.String str13 = applicationVersion9.toShortString();
        net.sourceforge.atunes.model.ArtistViewMode artistViewMode14 = net.sourceforge.atunes.model.ArtistViewMode.BOTH;
        boolean boolean15 = applicationVersion9.equals((java.lang.Object) artistViewMode14);
        int int16 = applicationVersion9.getMajorNumber();
        net.sourceforge.atunes.model.FontSettings fontSettings17 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata18 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata18.setAlbumArtist("");
        boolean boolean21 = fontSettings17.equals((java.lang.Object) cDMetadata18);
        fontSettings17.setUseFontSmoothingSettingsFromOs(false);
        net.sourceforge.atunes.model.IFontBean iFontBean24 = fontSettings17.getFont();
        boolean boolean25 = fontSettings17.isUseFontSmoothing();
        java.lang.Throwable throwable26 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException27 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable26);
        boolean boolean28 = fontSettings17.equals((java.lang.Object) throwable26);
        boolean boolean29 = applicationVersion9.equals((java.lang.Object) throwable26);
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType34 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion39 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType34, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str40 = applicationVersion39.getDate();
        java.lang.String str41 = applicationVersion39.toShortString();
        java.lang.String str42 = applicationVersion39.getChanges();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType43 = applicationVersion39.getVersionType();
        int int44 = applicationVersion9.compareTo(applicationVersion39);
        java.lang.String str45 = applicationVersion39.toString();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1.0.0 " + "'", str13, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + artistViewMode14 + "' != '" + net.sourceforge.atunes.model.ArtistViewMode.BOTH + "'", artistViewMode14.equals(net.sourceforge.atunes.model.ArtistViewMode.BOTH));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(iFontBean24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + versionType34 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType34.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "./title" + "'", str40, "./title");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1.0.0 " + "'", str41, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "./title" + "'", str42, "./title");
        org.junit.Assert.assertTrue("'" + versionType43 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType43.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1.0.0 mpc " + "'", str45, "1.0.0 mpc ");
    }

    @Test
    public void test1171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1171");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType8 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion13 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType8, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str14 = applicationVersion13.getDate();
        java.lang.String str15 = applicationVersion13.toShortString();
        int int16 = applicationVersion13.getMajorNumber();
        int int17 = applicationVersion13.getMinorNumber();
        java.lang.String str18 = applicationVersion13.getName();
        java.lang.String str19 = applicationVersion13.getChanges();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType20 = applicationVersion13.getVersionType();
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion25 = new net.sourceforge.atunes.model.ApplicationVersion("", (int) (short) 1, (int) (byte) 100, (int) (byte) -1, versionType20, "mp+", "net.sourceforge.atunes.model.SearchQuerySyntaxException: net.sourceforge.atunes.model.SearchIndexNotAvailableException: net.sourceforge.atunes.model.SearchQuerySyntaxException: net.sourceforge.atunes.model.SearchQuerySyntaxException", "", "./author/name");
        org.junit.Assert.assertTrue("'" + versionType8 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType8.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "./title" + "'", str14, "./title");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1.0.0 " + "'", str15, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "mpc" + "'", str18, "mpc");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "./title" + "'", str19, "./title");
        org.junit.Assert.assertTrue("'" + versionType20 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType20.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
    }

    @Test
    public void test1172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1172");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        fontSettings0.setUseFontSmoothing(false);
        fontSettings0.setUseFontSmoothing(false);
        net.sourceforge.atunes.model.IFontBean iFontBean5 = null;
        fontSettings0.setFont(iFontBean5);
        net.sourceforge.atunes.model.IFontBean iFontBean7 = fontSettings0.getFont();
        fontSettings0.setUseFontSmoothing(false);
        net.sourceforge.atunes.model.IFontBean iFontBean10 = null;
        fontSettings0.setFont(iFontBean10);
        boolean boolean12 = fontSettings0.isUseFontSmoothingSettingsFromOs();
        fontSettings0.setUseFontSmoothing(false);
        boolean boolean15 = fontSettings0.isUseFontSmoothingSettingsFromOs();
        org.junit.Assert.assertNull(iFontBean7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1173");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        net.sourceforge.atunes.model.AudioObjectProperty audioObjectProperty1 = net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY;
        boolean boolean2 = columnBean0.equals((java.lang.Object) audioObjectProperty1);
        int int3 = columnBean0.getOrder();
        int int4 = columnBean0.getWidth();
        net.sourceforge.atunes.model.ColumnSort columnSort5 = null;
        columnBean0.setSort(columnSort5);
        org.junit.Assert.assertTrue("'" + audioObjectProperty1 + "' != '" + net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY + "'", audioObjectProperty1.equals(net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test1174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1174");
        net.sourceforge.atunes.model.LookAndFeelBean lookAndFeelBean0 = new net.sourceforge.atunes.model.LookAndFeelBean();
        lookAndFeelBean0.setName("./summary");
        lookAndFeelBean0.setSkin("./enclosure/@url");
        java.lang.String str5 = lookAndFeelBean0.getSkin();
        lookAndFeelBean0.setSkin("rm");
        java.lang.String str8 = lookAndFeelBean0.getName();
        lookAndFeelBean0.setName("./updated");
        lookAndFeelBean0.setSkin("1.120.35 hi! ");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "./enclosure/@url" + "'", str5, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "./summary" + "'", str8, "./summary");
    }

    @Test
    public void test1175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1175");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata1 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata1.setAlbumArtist("");
        boolean boolean4 = fontSettings0.equals((java.lang.Object) cDMetadata1);
        fontSettings0.setUseFontSmoothing(true);
        fontSettings0.setUseFontSmoothing(false);
        fontSettings0.setUseFontSmoothing(true);
        fontSettings0.setUseFontSmoothing(true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1176");
        net.sourceforge.atunes.model.InconsistentRepositoryException inconsistentRepositoryException0 = new net.sourceforge.atunes.model.InconsistentRepositoryException();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList1 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable2 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException3 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable2);
        java.lang.Throwable[] throwableArray4 = searchQuerySyntaxException3.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException5 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException3);
        java.lang.Throwable throwable6 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException7 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable6);
        java.lang.Throwable[] throwableArray8 = searchQuerySyntaxException7.getSuppressed();
        throwableRankList1.replaceItem((java.lang.Throwable) searchQuerySyntaxException3, (java.lang.Throwable) searchQuerySyntaxException7);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException10 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException7);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException11 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException10);
        inconsistentRepositoryException0.addSuppressed((java.lang.Throwable) searchIndexNotAvailableException11);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException13 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchIndexNotAvailableException11);
        java.lang.String str14 = searchIndexNotAvailableException11.toString();
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "net.sourceforge.atunes.model.SearchIndexNotAvailableException: net.sourceforge.atunes.model.SearchQuerySyntaxException: net.sourceforge.atunes.model.SearchQuerySyntaxException" + "'", str14, "net.sourceforge.atunes.model.SearchIndexNotAvailableException: net.sourceforge.atunes.model.SearchQuerySyntaxException: net.sourceforge.atunes.model.SearchQuerySyntaxException");
    }

    @Test
    public void test1177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1177");
        net.sourceforge.atunes.model.LookAndFeelBean lookAndFeelBean0 = new net.sourceforge.atunes.model.LookAndFeelBean();
        lookAndFeelBean0.setName("./summary");
        lookAndFeelBean0.setSkin("./enclosure/@url");
        java.lang.String str5 = lookAndFeelBean0.getSkin();
        lookAndFeelBean0.setSkin("rm");
        java.lang.String str8 = lookAndFeelBean0.getName();
        java.lang.String str9 = lookAndFeelBean0.getSkin();
        lookAndFeelBean0.setSkin("net.sourceforge.atunes.model.SearchIndexNotAvailableException: net.sourceforge.atunes.model.SearchIndexNotAvailableException: net.sourceforge.atunes.model.SearchQuerySyntaxException: net.sourceforge.atunes.model.SearchQuerySyntaxException");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "./enclosure/@url" + "'", str5, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "./summary" + "'", str8, "./summary");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "rm" + "'", str9, "rm");
    }

    @Test
    public void test1178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1178");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str1 = feedType0.getEntryXPath();
        java.lang.String str2 = feedType0.getAuthorXPath();
        java.lang.String str3 = feedType0.getDateXPath();
        java.lang.String str4 = feedType0.getEntryXPath();
        java.lang.String str5 = feedType0.getUrlXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "/rss/channel/item" + "'", str1, "/rss/channel/item");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "./author" + "'", str2, "./author");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "./pubDate" + "'", str3, "./pubDate");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "/rss/channel/item" + "'", str4, "/rss/channel/item");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "./enclosure/@url" + "'", str5, "./enclosure/@url");
    }

    @Test
    public void test1179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1179");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.lang.String str3 = cDMetadata0.getGenre();
        int int4 = cDMetadata0.getYear();
        int int5 = cDMetadata0.getYear();
        net.sourceforge.atunes.model.CDMetadata cDMetadata6 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str7 = cDMetadata6.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata8 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata8.setAlbumArtist("");
        java.lang.String str11 = cDMetadata8.getGenre();
        java.lang.String[] strArray13 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        cDMetadata8.setTrackNames((java.util.List<java.lang.String>) strList14);
        cDMetadata6.setComposerNames((java.util.List<java.lang.String>) strList14);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList14);
        java.lang.String str19 = cDMetadata0.getAlbumArtist();
        cDMetadata0.setDisc(100);
        int int22 = cDMetadata0.getYear();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test1180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1180");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str1 = feedType0.getUrlXPath();
        java.lang.String str2 = feedType0.getDateXPath();
        java.lang.String str3 = feedType0.getUrlXPath();
        java.lang.String str4 = feedType0.getAuthorXPath();
        java.lang.String str5 = feedType0.getEntryXPath();
        java.lang.String str6 = feedType0.getTypeXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "./enclosure/@url" + "'", str1, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "./pubDate" + "'", str2, "./pubDate");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "./enclosure/@url" + "'", str3, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "./author" + "'", str4, "./author");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/rss/channel/item" + "'", str5, "/rss/channel/item");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "./enclosure/@type" + "'", str6, "./enclosure/@type");
    }

    @Test
    public void test1181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1181");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType8 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion13 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType8, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str14 = applicationVersion13.getDate();
        java.lang.String str15 = applicationVersion13.toShortString();
        int int16 = applicationVersion13.getMajorNumber();
        int int17 = applicationVersion13.getMinorNumber();
        java.lang.String str18 = applicationVersion13.getName();
        java.lang.String str19 = applicationVersion13.toShortString();
        java.lang.String str20 = applicationVersion13.getDirectDownloadURL();
        java.lang.String str21 = applicationVersion13.toShortString();
        java.lang.String str22 = applicationVersion13.getDownloadURL();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType23 = applicationVersion13.getVersionType();
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion28 = new net.sourceforge.atunes.model.ApplicationVersion("1.0.0 mpc ", 1, 97, 120, versionType23, "./author/name", "mp4", "SOCKS_PROXY", "10.52.35  ");
        org.junit.Assert.assertTrue("'" + versionType8 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType8.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "./title" + "'", str14, "./title");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1.0.0 " + "'", str15, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "mpc" + "'", str18, "mpc");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1.0.0 " + "'", str19, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "./pubDate" + "'", str20, "./pubDate");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1.0.0 " + "'", str21, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "./description" + "'", str22, "./description");
        org.junit.Assert.assertTrue("'" + versionType23 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType23.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
    }

    @Test
    public void test1182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1182");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.lang.String str3 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList4 = cDMetadata0.getTrackNames();
        int int5 = cDMetadata0.getDisc();
        java.lang.String str6 = cDMetadata0.getGenre();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test1183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1183");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        int int12 = applicationVersion9.getMajorNumber();
        int int13 = applicationVersion9.getMinorNumber();
        java.lang.String str14 = applicationVersion9.getName();
        java.lang.String str15 = applicationVersion9.toShortString();
        java.lang.String str16 = applicationVersion9.toShortString();
        int int17 = applicationVersion9.getMajorNumber();
        java.lang.String str18 = applicationVersion9.getDirectDownloadURL();
        java.lang.String str19 = applicationVersion9.getName();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "mpc" + "'", str14, "mpc");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1.0.0 " + "'", str15, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1.0.0 " + "'", str16, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "./pubDate" + "'", str18, "./pubDate");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "mpc" + "'", str19, "mpc");
    }

    @Test
    public void test1184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1184");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        int int1 = cDMetadata0.getYear();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        cDMetadata0.setGenre("./link[@rel='enclosure']/@type");
        cDMetadata0.setDisc(90);
        cDMetadata0.setAlbumArtist("net.sourceforge.atunes.model.SearchIndexNotAvailableException: net.sourceforge.atunes.model.SearchIndexNotAvailableException: net.sourceforge.atunes.model.SearchQuerySyntaxException: net.sourceforge.atunes.model.SearchQuerySyntaxException");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(strList2);
    }

    @Test
    public void test1185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1185");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        columnBean0.setVisible(false);
        net.sourceforge.atunes.model.ColumnSort columnSort6 = columnBean0.getSort();
        net.sourceforge.atunes.model.TextTagAttribute textTagAttribute7 = net.sourceforge.atunes.model.TextTagAttribute.COMPOSER;
        boolean boolean8 = columnBean0.equals((java.lang.Object) textTagAttribute7);
        columnBean0.setVisible(true);
        columnBean0.setOrder((int) (short) 100);
        net.sourceforge.atunes.model.ColumnSort columnSort13 = columnBean0.getSort();
        int int14 = columnBean0.getOrder();
        columnBean0.setVisible(true);
        boolean boolean17 = columnBean0.isVisible();
        columnBean0.setWidth(0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(columnSort6);
        org.junit.Assert.assertTrue("'" + textTagAttribute7 + "' != '" + net.sourceforge.atunes.model.TextTagAttribute.COMPOSER + "'", textTagAttribute7.equals(net.sourceforge.atunes.model.TextTagAttribute.COMPOSER));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(columnSort13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test1186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1186");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType20 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion25 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType20, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str26 = applicationVersion25.getDate();
        java.lang.String str27 = applicationVersion25.toShortString();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType28 = applicationVersion25.getVersionType();
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion33 = new net.sourceforge.atunes.model.ApplicationVersion("1.0.0 ", (int) (short) 10, (int) '4', (int) '#', versionType28, "", "./enclosure/@url", "SOCKS_PROXY", "./enclosure/@url");
        java.lang.String str34 = applicationVersion33.getName();
        java.lang.String str35 = applicationVersion33.toString();
        net.sourceforge.atunes.model.FeedType feedType36 = net.sourceforge.atunes.model.FeedType.ATOM;
        java.lang.String str37 = feedType36.getTypeXPath();
        java.lang.String str38 = feedType36.getUrlXPath();
        boolean boolean39 = applicationVersion33.equals((java.lang.Object) feedType36);
        int int40 = applicationVersion9.compareTo(applicationVersion33);
        net.sourceforge.atunes.model.FontSettings fontSettings41 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata42 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata42.setAlbumArtist("");
        boolean boolean45 = fontSettings41.equals((java.lang.Object) cDMetadata42);
        java.lang.String str46 = cDMetadata42.getAlbum();
        java.lang.String str47 = cDMetadata42.getAlbum();
        java.util.List<java.lang.Integer> intList48 = cDMetadata42.getTracks();
        boolean boolean49 = applicationVersion33.equals((java.lang.Object) cDMetadata42);
        java.lang.String str50 = applicationVersion33.getChanges();
        int int51 = applicationVersion33.getRevisionNumber();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + versionType20 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType20.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "./title" + "'", str26, "./title");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1.0.0 " + "'", str27, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + versionType28 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType28.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "10.52.35  " + "'", str35, "10.52.35  ");
        org.junit.Assert.assertTrue("'" + feedType36 + "' != '" + net.sourceforge.atunes.model.FeedType.ATOM + "'", feedType36.equals(net.sourceforge.atunes.model.FeedType.ATOM));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "./link[@rel='enclosure']/@type" + "'", str37, "./link[@rel='enclosure']/@type");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(intList48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "./enclosure/@url" + "'", str50, "./enclosure/@url");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 35 + "'", int51 == 35);
    }

    @Test
    public void test1187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1187");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.lang.String str3 = cDMetadata0.getGenre();
        java.lang.String str4 = cDMetadata0.getAlbum();
        java.lang.String str5 = cDMetadata0.getAlbumArtist();
        java.lang.String str6 = cDMetadata0.getGenre();
        int int7 = cDMetadata0.getDisc();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test1188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1188");
        net.sourceforge.atunes.model.LookAndFeelBean lookAndFeelBean0 = new net.sourceforge.atunes.model.LookAndFeelBean();
        lookAndFeelBean0.setName("./summary");
        lookAndFeelBean0.setSkin("./enclosure/@url");
        java.lang.String str5 = lookAndFeelBean0.getSkin();
        lookAndFeelBean0.setSkin("rm");
        java.lang.String str8 = lookAndFeelBean0.getName();
        java.lang.String str9 = lookAndFeelBean0.getSkin();
        lookAndFeelBean0.setName("mp+");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "./enclosure/@url" + "'", str5, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "./summary" + "'", str8, "./summary");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "rm" + "'", str9, "rm");
    }

    @Test
    public void test1189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1189");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        columnBean0.setVisible(false);
        columnBean0.setWidth(0);
        net.sourceforge.atunes.model.ColumnSort columnSort8 = columnBean0.getSort();
        int int9 = columnBean0.getOrder();
        int int10 = columnBean0.getWidth();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(columnSort8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test1190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1190");
        net.sourceforge.atunes.model.IFontBean iFontBean0 = null;
        net.sourceforge.atunes.model.FontSettings fontSettings3 = new net.sourceforge.atunes.model.FontSettings(iFontBean0, false, true);
        fontSettings3.setUseFontSmoothingSettingsFromOs(true);
        net.sourceforge.atunes.model.IFontBean iFontBean6 = null;
        fontSettings3.setFont(iFontBean6);
        net.sourceforge.atunes.model.IFontBean iFontBean8 = fontSettings3.getFont();
        org.junit.Assert.assertNull(iFontBean8);
    }

    @Test
    public void test1191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1191");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList3 = cDMetadata0.getTracks();
        cDMetadata0.setAlbumArtist("/rss/channel/title");
        java.util.List<java.lang.String> strList6 = cDMetadata0.getTrackNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata7 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata7.setAlbumArtist("");
        java.lang.String str10 = cDMetadata7.getGenre();
        java.lang.String[] strArray12 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        cDMetadata7.setTrackNames((java.util.List<java.lang.String>) strList13);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList13);
        java.util.List<java.lang.String> strList17 = cDMetadata0.getTrackNames();
        int int18 = cDMetadata0.getDisc();
        org.junit.Assert.assertNull(intList3);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test1192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1192");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable1 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException2 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable1);
        java.lang.Throwable[] throwableArray3 = searchQuerySyntaxException2.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException4 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException2);
        java.lang.Throwable throwable5 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException6 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable5);
        java.lang.Throwable[] throwableArray7 = searchQuerySyntaxException6.getSuppressed();
        throwableRankList0.replaceItem((java.lang.Throwable) searchQuerySyntaxException2, (java.lang.Throwable) searchQuerySyntaxException6);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList9 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable10 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException11 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable10);
        java.lang.Throwable[] throwableArray12 = searchQuerySyntaxException11.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException13 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException11);
        java.lang.Throwable throwable14 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException15 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable14);
        java.lang.Throwable[] throwableArray16 = searchQuerySyntaxException15.getSuppressed();
        throwableRankList9.replaceItem((java.lang.Throwable) searchQuerySyntaxException11, (java.lang.Throwable) searchQuerySyntaxException15);
        java.lang.Integer int18 = throwableRankList0.getCount((java.lang.Throwable) searchQuerySyntaxException15);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList19 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList21 = throwableRankList19.getNFirstElements((int) (short) 10);
        throwableRankList19.clear();
        int int23 = throwableRankList19.size();
        java.lang.Throwable throwable24 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException25 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable24);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList26 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable27 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException28 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable27);
        java.lang.Throwable[] throwableArray29 = searchQuerySyntaxException28.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException30 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException28);
        java.lang.Throwable throwable31 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException32 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable31);
        java.lang.Throwable[] throwableArray33 = searchQuerySyntaxException32.getSuppressed();
        throwableRankList26.replaceItem((java.lang.Throwable) searchQuerySyntaxException28, (java.lang.Throwable) searchQuerySyntaxException32);
        searchQuerySyntaxException25.addSuppressed((java.lang.Throwable) searchQuerySyntaxException32);
        java.lang.Integer int36 = throwableRankList19.getCount((java.lang.Throwable) searchQuerySyntaxException32);
        searchQuerySyntaxException15.addSuppressed((java.lang.Throwable) searchQuerySyntaxException32);
        java.lang.Throwable[] throwableArray38 = searchQuerySyntaxException15.getSuppressed();
        java.lang.Throwable[] throwableArray39 = searchQuerySyntaxException15.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(throwableList21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNull(int36);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray39);
    }

    @Test
    public void test1193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1193");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType16 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion21 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType16, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str22 = applicationVersion21.getDate();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType23 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.BETA;
        boolean boolean24 = applicationVersion21.equals((java.lang.Object) versionType23);
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion29 = new net.sourceforge.atunes.model.ApplicationVersion("net.sourceforge.atunes.model.SearchQuerySyntaxException: net.sourceforge.atunes.model.SearchQuerySyntaxException", 1, (int) (byte) 10, (int) (byte) 100, versionType23, "10.52.35  ", "/rss/channel/item", "./pubDate", "flv");
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion34 = new net.sourceforge.atunes.model.ApplicationVersion("mac", (int) (byte) 0, 97, (int) (byte) -1, versionType23, "./enclosure/@type", "mpc", "net.sourceforge.atunes.model.SearchQuerySyntaxException", "./pubDate");
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion39 = new net.sourceforge.atunes.model.ApplicationVersion("mpc", (-1), 90, (int) 'a', versionType23, "./updated", "SOCKS_PROXY", "/feed/entry", "0.10.10 ");
        org.junit.Assert.assertTrue("'" + versionType16 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType16.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "./title" + "'", str22, "./title");
        org.junit.Assert.assertTrue("'" + versionType23 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.BETA + "'", versionType23.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.BETA));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1194");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata1 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata1.setAlbumArtist("");
        boolean boolean4 = fontSettings0.equals((java.lang.Object) cDMetadata1);
        fontSettings0.setUseFontSmoothingSettingsFromOs(false);
        boolean boolean7 = fontSettings0.isUseFontSmoothing();
        net.sourceforge.atunes.model.PlaybackState playbackState8 = net.sourceforge.atunes.model.PlaybackState.PLAY_FINISHED;
        boolean boolean9 = fontSettings0.equals((java.lang.Object) playbackState8);
        net.sourceforge.atunes.model.ColumnBean columnBean10 = new net.sourceforge.atunes.model.ColumnBean();
        net.sourceforge.atunes.model.AudioObjectProperty audioObjectProperty11 = net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY;
        boolean boolean12 = columnBean10.equals((java.lang.Object) audioObjectProperty11);
        boolean boolean13 = columnBean10.isVisible();
        boolean boolean14 = fontSettings0.equals((java.lang.Object) boolean13);
        boolean boolean15 = fontSettings0.isUseFontSmoothing();
        fontSettings0.setUseFontSmoothing(false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + playbackState8 + "' != '" + net.sourceforge.atunes.model.PlaybackState.PLAY_FINISHED + "'", playbackState8.equals(net.sourceforge.atunes.model.PlaybackState.PLAY_FINISHED));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + audioObjectProperty11 + "' != '" + net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY + "'", audioObjectProperty11.equals(net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1195");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        int int12 = applicationVersion9.getMajorNumber();
        int int13 = applicationVersion9.getMinorNumber();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType18 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion23 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType18, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str24 = applicationVersion23.getDate();
        java.lang.String str25 = applicationVersion23.toShortString();
        java.lang.String str26 = applicationVersion23.getChanges();
        int int27 = applicationVersion23.getMinorNumber();
        java.lang.String str28 = applicationVersion23.getChanges();
        int int29 = applicationVersion23.getRevisionNumber();
        int int30 = applicationVersion9.compareTo(applicationVersion23);
        java.lang.String str31 = applicationVersion23.getDate();
        net.sourceforge.atunes.model.ColumnBean columnBean32 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean33 = columnBean32.isVisible();
        net.sourceforge.atunes.model.SubmissionState submissionState34 = net.sourceforge.atunes.model.SubmissionState.PENDING;
        boolean boolean35 = columnBean32.equals((java.lang.Object) submissionState34);
        columnBean32.setOrder((int) (byte) 100);
        net.sourceforge.atunes.model.ColumnSort columnSort38 = columnBean32.getSort();
        columnBean32.setWidth(10);
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType45 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion50 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType45, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str51 = applicationVersion50.getDate();
        java.lang.String str52 = applicationVersion50.toShortString();
        int int53 = applicationVersion50.getMajorNumber();
        java.lang.String str54 = applicationVersion50.toShortString();
        java.lang.String str55 = applicationVersion50.getDownloadURL();
        java.lang.String str56 = applicationVersion50.getDate();
        net.sourceforge.atunes.model.LookAndFeelBean lookAndFeelBean57 = new net.sourceforge.atunes.model.LookAndFeelBean();
        lookAndFeelBean57.setName("./summary");
        lookAndFeelBean57.setSkin("flac");
        boolean boolean62 = applicationVersion50.equals((java.lang.Object) lookAndFeelBean57);
        boolean boolean63 = columnBean32.equals((java.lang.Object) applicationVersion50);
        int int64 = applicationVersion23.compareTo(applicationVersion50);
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + versionType18 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType18.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "./title" + "'", str24, "./title");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1.0.0 " + "'", str25, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "./title" + "'", str26, "./title");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "./title" + "'", str28, "./title");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "./title" + "'", str31, "./title");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + submissionState34 + "' != '" + net.sourceforge.atunes.model.SubmissionState.PENDING + "'", submissionState34.equals(net.sourceforge.atunes.model.SubmissionState.PENDING));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(columnSort38);
        org.junit.Assert.assertTrue("'" + versionType45 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType45.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "./title" + "'", str51, "./title");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "1.0.0 " + "'", str52, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "1.0.0 " + "'", str54, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "./description" + "'", str55, "./description");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "./title" + "'", str56, "./title");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
    }

    @Test
    public void test1196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1196");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata1 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata1.setAlbumArtist("");
        boolean boolean4 = fontSettings0.equals((java.lang.Object) cDMetadata1);
        fontSettings0.setUseFontSmoothingSettingsFromOs(false);
        net.sourceforge.atunes.model.ViewMode viewMode7 = net.sourceforge.atunes.model.ViewMode.ALBUM;
        boolean boolean8 = fontSettings0.equals((java.lang.Object) viewMode7);
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType13 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion18 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType13, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str19 = applicationVersion18.getDate();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType20 = applicationVersion18.getVersionType();
        java.lang.String str21 = applicationVersion18.getDownloadURL();
        java.lang.String str22 = applicationVersion18.getDirectDownloadURL();
        boolean boolean23 = fontSettings0.equals((java.lang.Object) applicationVersion18);
        int int24 = applicationVersion18.getRevisionNumber();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + viewMode7 + "' != '" + net.sourceforge.atunes.model.ViewMode.ALBUM + "'", viewMode7.equals(net.sourceforge.atunes.model.ViewMode.ALBUM));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + versionType13 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType13.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "./title" + "'", str19, "./title");
        org.junit.Assert.assertTrue("'" + versionType20 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType20.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "./description" + "'", str21, "./description");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "./pubDate" + "'", str22, "./pubDate");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test1197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1197");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList2 = throwableRankList0.getNFirstElements((int) (short) 10);
        int int3 = throwableRankList0.size();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList4 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable5 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException6 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable5);
        java.lang.Throwable[] throwableArray7 = searchQuerySyntaxException6.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException8 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException6);
        java.lang.Throwable throwable9 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException10 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable9);
        java.lang.Throwable[] throwableArray11 = searchQuerySyntaxException10.getSuppressed();
        throwableRankList4.replaceItem((java.lang.Throwable) searchQuerySyntaxException6, (java.lang.Throwable) searchQuerySyntaxException10);
        java.lang.Throwable[] throwableArray13 = searchQuerySyntaxException6.getSuppressed();
        java.lang.Integer int14 = throwableRankList0.getCount((java.lang.Throwable) searchQuerySyntaxException6);
        int int15 = throwableRankList0.size();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList16 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList18 = throwableRankList16.getNFirstElements((int) (short) 100);
        java.lang.Throwable throwable19 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException20 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable19);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList21 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable22 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException23 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable22);
        java.lang.Throwable[] throwableArray24 = searchQuerySyntaxException23.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException25 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException23);
        java.lang.Throwable throwable26 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException27 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable26);
        java.lang.Throwable[] throwableArray28 = searchQuerySyntaxException27.getSuppressed();
        throwableRankList21.replaceItem((java.lang.Throwable) searchQuerySyntaxException23, (java.lang.Throwable) searchQuerySyntaxException27);
        searchQuerySyntaxException20.addSuppressed((java.lang.Throwable) searchQuerySyntaxException27);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException31 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException20);
        java.lang.Throwable throwable32 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException33 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable32);
        java.lang.Throwable[] throwableArray34 = searchQuerySyntaxException33.getSuppressed();
        searchQuerySyntaxException20.addSuppressed((java.lang.Throwable) searchQuerySyntaxException33);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException36 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException20);
        java.lang.Throwable throwable37 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException38 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable37);
        java.lang.Throwable[] throwableArray39 = searchQuerySyntaxException38.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException40 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException38);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException41 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException38);
        throwableRankList16.replaceItem((java.lang.Throwable) searchQuerySyntaxException20, (java.lang.Throwable) searchQuerySyntaxException41);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException43 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException20);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException44 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchIndexNotAvailableException43);
        java.lang.Integer int45 = throwableRankList0.getCount((java.lang.Throwable) searchIndexNotAvailableException43);
        throwableRankList0.clear();
        org.junit.Assert.assertNotNull(throwableList2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(throwableList18);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNull(int45);
    }

    @Test
    public void test1198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1198");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType10 = applicationVersion9.getVersionType();
        java.lang.String str11 = applicationVersion9.getName();
        java.lang.String str12 = applicationVersion9.getDownloadURL();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertTrue("'" + versionType10 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType10.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mpc" + "'", str11, "mpc");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "./description" + "'", str12, "./description");
    }

    @Test
    public void test1199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1199");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList3 = cDMetadata0.getTracks();
        cDMetadata0.setAlbumArtist("/rss/channel/title");
        java.util.List<java.lang.String> strList6 = cDMetadata0.getTrackNames();
        java.lang.String str7 = cDMetadata0.getAlbumArtist();
        java.lang.String str8 = cDMetadata0.getGenre();
        cDMetadata0.setDisc(32);
        java.util.List<java.lang.String> strList11 = cDMetadata0.getArtistNames();
        org.junit.Assert.assertNull(intList3);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/rss/channel/title" + "'", str7, "/rss/channel/title");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(strList11);
    }

    @Test
    public void test1200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1200");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.Integer> intList2 = null;
        cDMetadata0.setTracks(intList2);
        cDMetadata0.setAlbum("SOCKS_PROXY");
        java.lang.String str6 = cDMetadata0.getAlbum();
        int int7 = cDMetadata0.getYear();
        java.util.List<java.lang.String> strList8 = cDMetadata0.getArtistNames();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "SOCKS_PROXY" + "'", str6, "SOCKS_PROXY");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(strList8);
    }

    @Test
    public void test1201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1201");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType12 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion17 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType12, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str18 = applicationVersion17.getDate();
        java.lang.String str19 = applicationVersion17.toShortString();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType20 = applicationVersion17.getVersionType();
        int int21 = applicationVersion17.getMinorNumber();
        java.lang.String str22 = applicationVersion17.getDirectDownloadURL();
        java.lang.String str23 = applicationVersion17.getDirectDownloadURL();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType24 = applicationVersion17.getVersionType();
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion29 = new net.sourceforge.atunes.model.ApplicationVersion("./author/name", (-1), 150, 32, versionType24, "net.sourceforge.atunes.model.SearchIndexNotAvailableException: net.sourceforge.atunes.model.SearchQuerySyntaxException", "./link[@rel='enclosure']/@type", "net.sourceforge.atunes.model.SearchIndexNotAvailableException: net.sourceforge.atunes.model.SearchQuerySyntaxException", "/feed/entry");
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion34 = new net.sourceforge.atunes.model.ApplicationVersion("./author", (int) (short) 100, (int) (short) 100, (int) (byte) 100, versionType24, "./summary", "hi!", "wav", "");
        org.junit.Assert.assertTrue("'" + versionType12 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType12.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "./title" + "'", str18, "./title");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1.0.0 " + "'", str19, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + versionType20 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType20.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "./pubDate" + "'", str22, "./pubDate");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "./pubDate" + "'", str23, "./pubDate");
        org.junit.Assert.assertTrue("'" + versionType24 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType24.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
    }

    @Test
    public void test1202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1202");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.lang.String str3 = cDMetadata0.getAlbum();
        java.util.List<java.lang.Integer> intList4 = cDMetadata0.getTracks();
        int int5 = cDMetadata0.getYear();
        cDMetadata0.setAlbumArtist("mpc");
        java.lang.String[] strArray32 = new java.lang.String[] { "/feed/entry", "./pubDate", "./link[@rel='enclosure']/@type", "mp4", "net.sourceforge.atunes.model.InconsistentRepositoryException", "./pubDate", "mpc", "10.52.35  ", "1.0.0 ", "./duration", "./enclosure/@url", "net.sourceforge.atunes.model.SearchQuerySyntaxException: net.sourceforge.atunes.model.SearchQuerySyntaxException", "./author/name", "./duration", "10.52.35  ", "/rss/channel/item", "./duration", "./author/name", "net.sourceforge.atunes.model.SearchIndexNotAvailableException: net.sourceforge.atunes.model.SearchQuerySyntaxException", "", "./link[@rel='enclosure']/@type", "./description", "hi!", "1.0.0 mpc " };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        cDMetadata0.setComposerNames((java.util.List<java.lang.String>) strList33);
        java.lang.String str36 = cDMetadata0.getGenre();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(intList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(str36);
    }

    @Test
    public void test1203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1203");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList3 = cDMetadata0.getTracks();
        cDMetadata0.setAlbumArtist("/rss/channel/title");
        java.util.List<java.lang.String> strList6 = cDMetadata0.getTrackNames();
        cDMetadata0.setGenre("");
        java.util.List<java.lang.String> strList9 = cDMetadata0.getTrackNames();
        java.lang.String str10 = cDMetadata0.getGenre();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList11 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        int int12 = throwableRankList11.size();
        java.util.List<java.lang.Throwable> throwableList13 = throwableRankList11.getOrder();
        java.lang.Throwable throwable14 = null;
        java.lang.Integer int15 = throwableRankList11.getCount(throwable14);
        java.util.List<java.lang.Integer> intList17 = throwableRankList11.getNFirstElementCounts(1);
        cDMetadata0.setTracks(intList17);
        org.junit.Assert.assertNull(intList3);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertNull(strList9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(throwableList13);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(intList17);
    }

    @Test
    public void test1204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1204");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        columnBean0.setVisible(false);
        columnBean0.setWidth(0);
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType12 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion17 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType12, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str18 = applicationVersion17.getDate();
        java.lang.String str19 = applicationVersion17.toShortString();
        java.lang.String str20 = applicationVersion17.getChanges();
        boolean boolean21 = columnBean0.equals((java.lang.Object) applicationVersion17);
        net.sourceforge.atunes.model.ColumnSort columnSort22 = columnBean0.getSort();
        boolean boolean23 = columnBean0.isVisible();
        columnBean0.setOrder((-1));
        columnBean0.setVisible(false);
        columnBean0.setWidth((int) (short) -1);
        int int30 = columnBean0.getOrder();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + versionType12 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType12.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "./title" + "'", str18, "./title");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1.0.0 " + "'", str19, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "./title" + "'", str20, "./title");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(columnSort22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
    }

    @Test
    public void test1205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1205");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str1 = feedType0.getEntryXPath();
        java.lang.String str2 = feedType0.getTypeXPath();
        java.lang.String str3 = feedType0.getTypeXPath();
        java.lang.String str4 = feedType0.getNameXPath();
        java.lang.String str5 = feedType0.getUrlXPath();
        java.lang.String str6 = feedType0.getAuthorXPath();
        java.lang.String str7 = feedType0.getNameXPath();
        java.lang.String str8 = feedType0.getTitleXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "/rss/channel/item" + "'", str1, "/rss/channel/item");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "./enclosure/@type" + "'", str2, "./enclosure/@type");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "./enclosure/@type" + "'", str3, "./enclosure/@type");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "/rss/channel/title" + "'", str4, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "./enclosure/@url" + "'", str5, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "./author" + "'", str6, "./author");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/rss/channel/title" + "'", str7, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "./title" + "'", str8, "./title");
    }

    @Test
    public void test1206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1206");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.lang.String str2 = cDMetadata0.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata3 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str4 = cDMetadata3.getGenre();
        java.util.List<java.lang.String> strList5 = cDMetadata3.getComposerNames();
        java.lang.String str6 = cDMetadata3.getAlbum();
        java.util.List<java.lang.Integer> intList7 = cDMetadata3.getTracks();
        int int8 = cDMetadata3.getYear();
        net.sourceforge.atunes.model.CDMetadata cDMetadata9 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str10 = cDMetadata9.getGenre();
        java.util.List<java.lang.String> strList11 = cDMetadata9.getComposerNames();
        java.lang.String str12 = cDMetadata9.getAlbum();
        java.util.List<java.lang.Integer> intList13 = cDMetadata9.getTracks();
        net.sourceforge.atunes.model.CDMetadata cDMetadata14 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata14.setAlbumArtist("");
        java.lang.String str18 = cDMetadata14.getTitle((int) (byte) -1);
        java.lang.String[] strArray20 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        cDMetadata14.setTrackNames((java.util.List<java.lang.String>) strList21);
        cDMetadata9.setTrackNames((java.util.List<java.lang.String>) strList21);
        cDMetadata9.setYear((int) (short) 1);
        int int27 = cDMetadata9.getYear();
        java.lang.String str28 = cDMetadata9.getGenre();
        cDMetadata9.setYear((int) (short) 10);
        net.sourceforge.atunes.model.CDMetadata cDMetadata31 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata31.setAlbumArtist("");
        java.lang.String str34 = cDMetadata31.getGenre();
        java.lang.String[] strArray36 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        cDMetadata31.setTrackNames((java.util.List<java.lang.String>) strList37);
        cDMetadata9.setTrackNames((java.util.List<java.lang.String>) strList37);
        cDMetadata3.setComposerNames((java.util.List<java.lang.String>) strList37);
        cDMetadata0.setArtistNames((java.util.List<java.lang.String>) strList37);
        cDMetadata0.setDisc(90);
        cDMetadata0.setAlbum("net.sourceforge.atunes.model.SearchQuerySyntaxException: net.sourceforge.atunes.model.SearchIndexNotAvailableException: net.sourceforge.atunes.model.SearchQuerySyntaxException: net.sourceforge.atunes.model.SearchQuerySyntaxException");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(intList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(intList13);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test1207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1207");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable1 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException2 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable1);
        java.lang.Throwable[] throwableArray3 = searchQuerySyntaxException2.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException4 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException2);
        java.lang.Throwable throwable5 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException6 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable5);
        java.lang.Throwable[] throwableArray7 = searchQuerySyntaxException6.getSuppressed();
        throwableRankList0.replaceItem((java.lang.Throwable) searchQuerySyntaxException2, (java.lang.Throwable) searchQuerySyntaxException6);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList9 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable10 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException11 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable10);
        java.lang.Throwable[] throwableArray12 = searchQuerySyntaxException11.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException13 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException11);
        java.lang.Throwable throwable14 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException15 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable14);
        java.lang.Throwable[] throwableArray16 = searchQuerySyntaxException15.getSuppressed();
        throwableRankList9.replaceItem((java.lang.Throwable) searchQuerySyntaxException11, (java.lang.Throwable) searchQuerySyntaxException15);
        java.lang.Integer int18 = throwableRankList0.getCount((java.lang.Throwable) searchQuerySyntaxException15);
        java.lang.Throwable throwable19 = null;
        java.lang.Throwable throwable20 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException21 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable20);
        throwableRankList0.replaceItem(throwable19, (java.lang.Throwable) searchQuerySyntaxException21);
        java.util.List<java.lang.Integer> intList24 = throwableRankList0.getNFirstElementCounts((int) (byte) 1);
        int int25 = throwableRankList0.size();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList26 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable27 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException28 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable27);
        java.lang.Throwable[] throwableArray29 = searchQuerySyntaxException28.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException30 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException28);
        java.lang.Throwable throwable31 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException32 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable31);
        java.lang.Throwable[] throwableArray33 = searchQuerySyntaxException32.getSuppressed();
        throwableRankList26.replaceItem((java.lang.Throwable) searchQuerySyntaxException28, (java.lang.Throwable) searchQuerySyntaxException32);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList35 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable36 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException37 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable36);
        java.lang.Throwable[] throwableArray38 = searchQuerySyntaxException37.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException39 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException37);
        java.lang.Throwable throwable40 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException41 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable40);
        java.lang.Throwable[] throwableArray42 = searchQuerySyntaxException41.getSuppressed();
        throwableRankList35.replaceItem((java.lang.Throwable) searchQuerySyntaxException37, (java.lang.Throwable) searchQuerySyntaxException41);
        java.lang.Integer int44 = throwableRankList26.getCount((java.lang.Throwable) searchQuerySyntaxException41);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList45 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList47 = throwableRankList45.getNFirstElements((int) (short) 10);
        throwableRankList45.clear();
        int int49 = throwableRankList45.size();
        java.lang.Throwable throwable50 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException51 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable50);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList52 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable53 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException54 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable53);
        java.lang.Throwable[] throwableArray55 = searchQuerySyntaxException54.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException56 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException54);
        java.lang.Throwable throwable57 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException58 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable57);
        java.lang.Throwable[] throwableArray59 = searchQuerySyntaxException58.getSuppressed();
        throwableRankList52.replaceItem((java.lang.Throwable) searchQuerySyntaxException54, (java.lang.Throwable) searchQuerySyntaxException58);
        searchQuerySyntaxException51.addSuppressed((java.lang.Throwable) searchQuerySyntaxException58);
        java.lang.Integer int62 = throwableRankList45.getCount((java.lang.Throwable) searchQuerySyntaxException58);
        searchQuerySyntaxException41.addSuppressed((java.lang.Throwable) searchQuerySyntaxException58);
        throwableRankList0.addItem((java.lang.Throwable) searchQuerySyntaxException41);
        java.util.List<java.lang.Throwable> throwableList65 = throwableRankList0.getOrder();
        java.util.List<java.lang.Throwable> throwableList66 = throwableRankList0.getOrder();
        java.lang.Throwable throwable67 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException68 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable67);
        java.lang.Throwable[] throwableArray69 = searchQuerySyntaxException68.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException70 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException68);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException71 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException68);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList72 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable73 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException74 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable73);
        java.lang.Throwable[] throwableArray75 = searchQuerySyntaxException74.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException76 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException74);
        java.lang.Throwable throwable77 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException78 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable77);
        java.lang.Throwable[] throwableArray79 = searchQuerySyntaxException78.getSuppressed();
        throwableRankList72.replaceItem((java.lang.Throwable) searchQuerySyntaxException74, (java.lang.Throwable) searchQuerySyntaxException78);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException81 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException78);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException82 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException81);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException83 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchIndexNotAvailableException82);
        searchQuerySyntaxException71.addSuppressed((java.lang.Throwable) searchIndexNotAvailableException83);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException85 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException71);
        java.lang.Throwable throwable86 = null;
        throwableRankList0.replaceItem((java.lang.Throwable) searchIndexNotAvailableException85, throwable86);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException88 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable86);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(intList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNull(int44);
        org.junit.Assert.assertNotNull(throwableList47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNull(int62);
        org.junit.Assert.assertNotNull(throwableList65);
        org.junit.Assert.assertNotNull(throwableList66);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray79);
    }

    @Test
    public void test1208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1208");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        java.lang.String str12 = applicationVersion9.toShortString();
        java.lang.String str13 = applicationVersion9.getName();
        int int14 = applicationVersion9.getRevisionNumber();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1.0.0 " + "'", str12, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "mpc" + "'", str13, "mpc");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test1209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1209");
        net.sourceforge.atunes.model.IFontBean iFontBean0 = null;
        net.sourceforge.atunes.model.FontSettings fontSettings3 = new net.sourceforge.atunes.model.FontSettings(iFontBean0, true, true);
        fontSettings3.setUseFontSmoothing(true);
        net.sourceforge.atunes.model.IFontBean iFontBean6 = fontSettings3.getFont();
        boolean boolean7 = fontSettings3.isUseFontSmoothingSettingsFromOs();
        boolean boolean8 = fontSettings3.isUseFontSmoothing();
        org.junit.Assert.assertNull(iFontBean6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test1210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1210");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList3 = cDMetadata0.getTracks();
        java.util.List<java.lang.String> strList4 = cDMetadata0.getTrackNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata5 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str6 = cDMetadata5.getGenre();
        java.util.List<java.lang.String> strList7 = cDMetadata5.getComposerNames();
        java.lang.String str8 = cDMetadata5.getAlbum();
        java.util.List<java.lang.Integer> intList9 = cDMetadata5.getTracks();
        net.sourceforge.atunes.model.CDMetadata cDMetadata10 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata10.setAlbumArtist("");
        java.lang.String str14 = cDMetadata10.getTitle((int) (byte) -1);
        java.lang.String[] strArray16 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        cDMetadata10.setTrackNames((java.util.List<java.lang.String>) strList17);
        cDMetadata5.setTrackNames((java.util.List<java.lang.String>) strList17);
        cDMetadata5.setYear((int) (short) 1);
        int int23 = cDMetadata5.getYear();
        java.lang.String str24 = cDMetadata5.getGenre();
        cDMetadata5.setYear((int) (short) 10);
        java.lang.String str27 = cDMetadata5.getAlbum();
        net.sourceforge.atunes.model.FontSettings fontSettings28 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata29 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata29.setAlbumArtist("");
        boolean boolean32 = fontSettings28.equals((java.lang.Object) cDMetadata29);
        java.lang.String str33 = cDMetadata29.getAlbum();
        java.lang.String str34 = cDMetadata29.getAlbum();
        java.lang.String str36 = cDMetadata29.getTitle(1);
        java.util.List<java.lang.String> strList37 = cDMetadata29.getTrackNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata38 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str39 = cDMetadata38.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata40 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata40.setAlbumArtist("");
        java.lang.String str43 = cDMetadata40.getGenre();
        java.lang.String[] strArray45 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        cDMetadata40.setTrackNames((java.util.List<java.lang.String>) strList46);
        cDMetadata38.setComposerNames((java.util.List<java.lang.String>) strList46);
        cDMetadata29.setComposerNames((java.util.List<java.lang.String>) strList46);
        cDMetadata5.setTrackNames((java.util.List<java.lang.String>) strList46);
        cDMetadata0.setArtistNames((java.util.List<java.lang.String>) strList46);
        org.junit.Assert.assertNull(intList3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(strList7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(intList9);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(strList37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test1211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1211");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType11 = applicationVersion9.getVersionType();
        java.lang.String str12 = applicationVersion9.getDownloadURL();
        int int13 = applicationVersion9.getMinorNumber();
        int int14 = applicationVersion9.getMajorNumber();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType15 = applicationVersion9.getVersionType();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType16 = applicationVersion9.getVersionType();
        java.lang.String str17 = applicationVersion9.getDirectDownloadURL();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertTrue("'" + versionType11 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType11.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "./description" + "'", str12, "./description");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + versionType15 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType15.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertTrue("'" + versionType16 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType16.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "./pubDate" + "'", str17, "./pubDate");
    }

    @Test
    public void test1212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1212");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable1 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException2 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable1);
        java.lang.Throwable[] throwableArray3 = searchQuerySyntaxException2.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException4 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException2);
        java.lang.Throwable throwable5 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException6 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable5);
        java.lang.Throwable[] throwableArray7 = searchQuerySyntaxException6.getSuppressed();
        throwableRankList0.replaceItem((java.lang.Throwable) searchQuerySyntaxException2, (java.lang.Throwable) searchQuerySyntaxException6);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList9 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable10 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException11 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable10);
        java.lang.Throwable[] throwableArray12 = searchQuerySyntaxException11.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException13 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException11);
        java.lang.Throwable throwable14 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException15 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable14);
        java.lang.Throwable[] throwableArray16 = searchQuerySyntaxException15.getSuppressed();
        throwableRankList9.replaceItem((java.lang.Throwable) searchQuerySyntaxException11, (java.lang.Throwable) searchQuerySyntaxException15);
        java.lang.Integer int18 = throwableRankList0.getCount((java.lang.Throwable) searchQuerySyntaxException15);
        java.lang.Throwable throwable19 = null;
        java.lang.Throwable throwable20 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException21 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable20);
        throwableRankList0.replaceItem(throwable19, (java.lang.Throwable) searchQuerySyntaxException21);
        java.util.List<java.lang.Integer> intList24 = throwableRankList0.getNFirstElementCounts((int) (byte) 1);
        int int25 = throwableRankList0.size();
        int int26 = throwableRankList0.size();
        int int27 = throwableRankList0.size();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(intList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test1213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1213");
        java.lang.Throwable throwable0 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException1 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable0);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList2 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable3 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException4 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable3);
        java.lang.Throwable[] throwableArray5 = searchQuerySyntaxException4.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException6 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException4);
        java.lang.Throwable throwable7 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException8 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable7);
        java.lang.Throwable[] throwableArray9 = searchQuerySyntaxException8.getSuppressed();
        throwableRankList2.replaceItem((java.lang.Throwable) searchQuerySyntaxException4, (java.lang.Throwable) searchQuerySyntaxException8);
        searchQuerySyntaxException1.addSuppressed((java.lang.Throwable) searchQuerySyntaxException8);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException12 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException1);
        java.lang.Throwable throwable13 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException14 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable13);
        java.lang.Throwable[] throwableArray15 = searchQuerySyntaxException14.getSuppressed();
        searchQuerySyntaxException1.addSuppressed((java.lang.Throwable) searchQuerySyntaxException14);
        java.lang.String str17 = searchQuerySyntaxException14.toString();
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "net.sourceforge.atunes.model.SearchQuerySyntaxException" + "'", str17, "net.sourceforge.atunes.model.SearchQuerySyntaxException");
    }

    @Test
    public void test1214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1214");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str1 = feedType0.getUrlXPath();
        java.lang.String str2 = feedType0.getNameXPath();
        java.lang.String str3 = feedType0.getDescriptionXPath();
        java.lang.String str4 = feedType0.getNameXPath();
        java.lang.String str5 = feedType0.getEntryXPath();
        java.lang.String str6 = feedType0.getEntryXPath();
        java.lang.String str7 = feedType0.getNameXPath();
        java.lang.String str8 = feedType0.getDurationXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "./enclosure/@url" + "'", str1, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "/rss/channel/title" + "'", str2, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "./description" + "'", str3, "./description");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "/rss/channel/title" + "'", str4, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/rss/channel/item" + "'", str5, "/rss/channel/item");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "/rss/channel/item" + "'", str6, "/rss/channel/item");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/rss/channel/title" + "'", str7, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "./duration" + "'", str8, "./duration");
    }

    @Test
    public void test1215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1215");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList2 = throwableRankList0.getNFirstElements((int) (short) 10);
        throwableRankList0.clear();
        java.util.List<java.lang.Integer> intList5 = throwableRankList0.getNFirstElementCounts(0);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList6 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable7 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException8 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable7);
        java.lang.Throwable[] throwableArray9 = searchQuerySyntaxException8.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException10 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException8);
        java.lang.Throwable throwable11 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException12 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable11);
        java.lang.Throwable[] throwableArray13 = searchQuerySyntaxException12.getSuppressed();
        throwableRankList6.replaceItem((java.lang.Throwable) searchQuerySyntaxException8, (java.lang.Throwable) searchQuerySyntaxException12);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException15 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException12);
        java.lang.Integer int16 = throwableRankList0.getCount((java.lang.Throwable) searchQuerySyntaxException15);
        java.lang.Throwable throwable17 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException18 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable17);
        java.lang.Throwable[] throwableArray19 = searchQuerySyntaxException18.getSuppressed();
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException20 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException18);
        java.lang.Integer int21 = throwableRankList0.getCount((java.lang.Throwable) searchQuerySyntaxException20);
        java.util.List<java.lang.Throwable> throwableList23 = throwableRankList0.getNFirstElements((int) ' ');
        int int24 = throwableRankList0.size();
        int int25 = throwableRankList0.size();
        org.junit.Assert.assertNotNull(throwableList2);
        org.junit.Assert.assertNotNull(intList5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNull(int21);
        org.junit.Assert.assertNotNull(throwableList23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test1216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1216");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata1 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata1.setAlbumArtist("");
        boolean boolean4 = fontSettings0.equals((java.lang.Object) cDMetadata1);
        net.sourceforge.atunes.model.FeedType feedType5 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str6 = feedType5.getUrlXPath();
        java.lang.String str7 = feedType5.getNameXPath();
        java.lang.String str8 = feedType5.getDescriptionXPath();
        boolean boolean9 = fontSettings0.equals((java.lang.Object) str8);
        boolean boolean10 = fontSettings0.isUseFontSmoothing();
        net.sourceforge.atunes.model.FontSettings fontSettings11 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata12 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata12.setAlbumArtist("");
        boolean boolean15 = fontSettings11.equals((java.lang.Object) cDMetadata12);
        fontSettings11.setUseFontSmoothingSettingsFromOs(false);
        boolean boolean18 = fontSettings11.isUseFontSmoothing();
        fontSettings11.setUseFontSmoothingSettingsFromOs(false);
        net.sourceforge.atunes.model.IFontBean iFontBean21 = fontSettings11.getFont();
        net.sourceforge.atunes.model.CDMetadata cDMetadata22 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str23 = cDMetadata22.getGenre();
        java.util.List<java.lang.String> strList24 = cDMetadata22.getComposerNames();
        java.lang.String str25 = cDMetadata22.getAlbum();
        java.util.List<java.lang.Integer> intList26 = cDMetadata22.getTracks();
        int int27 = cDMetadata22.getYear();
        java.util.List<java.lang.String> strList28 = cDMetadata22.getArtistNames();
        cDMetadata22.setDisc((int) (short) 100);
        net.sourceforge.atunes.model.CDMetadata cDMetadata31 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str32 = cDMetadata31.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata33 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata33.setAlbumArtist("");
        java.lang.String str36 = cDMetadata33.getGenre();
        java.lang.String[] strArray38 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        cDMetadata33.setTrackNames((java.util.List<java.lang.String>) strList39);
        cDMetadata31.setComposerNames((java.util.List<java.lang.String>) strList39);
        net.sourceforge.atunes.model.CDMetadata cDMetadata43 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str44 = cDMetadata43.getGenre();
        java.util.List<java.lang.String> strList45 = cDMetadata43.getComposerNames();
        java.lang.String str46 = cDMetadata43.getAlbum();
        net.sourceforge.atunes.model.CDMetadata cDMetadata47 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata47.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList50 = cDMetadata47.getTracks();
        cDMetadata47.setAlbumArtist("/rss/channel/title");
        java.util.List<java.lang.String> strList53 = cDMetadata47.getTrackNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata54 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata54.setAlbumArtist("");
        java.lang.String str57 = cDMetadata54.getGenre();
        java.lang.String[] strArray59 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList60 = new java.util.ArrayList<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList60, strArray59);
        cDMetadata54.setTrackNames((java.util.List<java.lang.String>) strList60);
        cDMetadata47.setTrackNames((java.util.List<java.lang.String>) strList60);
        cDMetadata43.setTrackNames((java.util.List<java.lang.String>) strList60);
        cDMetadata31.setTrackNames((java.util.List<java.lang.String>) strList60);
        cDMetadata22.setArtistNames((java.util.List<java.lang.String>) strList60);
        boolean boolean67 = fontSettings11.equals((java.lang.Object) strList60);
        net.sourceforge.atunes.model.FontSettings fontSettings68 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata69 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata69.setAlbumArtist("");
        boolean boolean72 = fontSettings68.equals((java.lang.Object) cDMetadata69);
        java.lang.String str73 = cDMetadata69.getAlbum();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList74 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList76 = throwableRankList74.getNFirstElements((int) (short) 10);
        throwableRankList74.clear();
        java.util.List<java.lang.Integer> intList79 = throwableRankList74.getNFirstElementCounts(150);
        cDMetadata69.setTracks(intList79);
        java.lang.String str81 = cDMetadata69.getAlbumArtist();
        cDMetadata69.setGenre("net.sourceforge.atunes.model.SearchIndexNotAvailableException: net.sourceforge.atunes.model.SearchQuerySyntaxException");
        boolean boolean84 = fontSettings11.equals((java.lang.Object) cDMetadata69);
        int int85 = cDMetadata69.getYear();
        boolean boolean86 = fontSettings0.equals((java.lang.Object) cDMetadata69);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + feedType5 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType5.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "./enclosure/@url" + "'", str6, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/rss/channel/title" + "'", str7, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "./description" + "'", str8, "./description");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(iFontBean21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(strList24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(intList26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNull(strList28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(strList45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(intList50);
        org.junit.Assert.assertNull(strList53);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(throwableList76);
        org.junit.Assert.assertNotNull(intList79);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test1217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1217");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.lang.String str3 = cDMetadata0.getAlbum();
        java.util.List<java.lang.Integer> intList4 = cDMetadata0.getTracks();
        int int5 = cDMetadata0.getDisc();
        java.lang.String[] strArray13 = new java.lang.String[] { "net.sourceforge.atunes.model.InconsistentRepositoryException", "./title", "1.0.0 ", "./title", "./duration", "mpc", "net.sourceforge.atunes.model.InconsistentRepositoryException" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        cDMetadata0.setArtistNames((java.util.List<java.lang.String>) strList14);
        net.sourceforge.atunes.model.CDMetadata cDMetadata17 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str18 = cDMetadata17.getGenre();
        java.util.List<java.lang.String> strList19 = cDMetadata17.getComposerNames();
        java.lang.String str20 = cDMetadata17.getAlbum();
        java.util.List<java.lang.Integer> intList21 = cDMetadata17.getTracks();
        net.sourceforge.atunes.model.CDMetadata cDMetadata22 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata22.setAlbumArtist("");
        java.lang.String str26 = cDMetadata22.getTitle((int) (byte) -1);
        java.lang.String[] strArray28 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        cDMetadata22.setTrackNames((java.util.List<java.lang.String>) strList29);
        cDMetadata17.setTrackNames((java.util.List<java.lang.String>) strList29);
        cDMetadata17.setYear((int) (short) 1);
        int int35 = cDMetadata17.getYear();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList36 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable37 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException38 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable37);
        java.lang.Throwable[] throwableArray39 = searchQuerySyntaxException38.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException40 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException38);
        java.lang.Throwable throwable41 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException42 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable41);
        java.lang.Throwable[] throwableArray43 = searchQuerySyntaxException42.getSuppressed();
        throwableRankList36.replaceItem((java.lang.Throwable) searchQuerySyntaxException38, (java.lang.Throwable) searchQuerySyntaxException42);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList45 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable46 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException47 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable46);
        java.lang.Throwable[] throwableArray48 = searchQuerySyntaxException47.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException49 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException47);
        java.lang.Throwable throwable50 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException51 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable50);
        java.lang.Throwable[] throwableArray52 = searchQuerySyntaxException51.getSuppressed();
        throwableRankList45.replaceItem((java.lang.Throwable) searchQuerySyntaxException47, (java.lang.Throwable) searchQuerySyntaxException51);
        java.lang.Integer int54 = throwableRankList36.getCount((java.lang.Throwable) searchQuerySyntaxException51);
        java.lang.Throwable throwable55 = null;
        java.lang.Throwable throwable56 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException57 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable56);
        throwableRankList36.replaceItem(throwable55, (java.lang.Throwable) searchQuerySyntaxException57);
        java.util.List<java.lang.Integer> intList60 = throwableRankList36.getNFirstElementCounts((int) (byte) 1);
        cDMetadata17.setTracks(intList60);
        cDMetadata0.setTracks(intList60);
        java.lang.String str63 = cDMetadata0.getAlbum();
        cDMetadata0.setAlbum("rm");
        java.util.List<java.lang.String> strList66 = cDMetadata0.getTrackNames();
        cDMetadata0.setGenre("/feed/title");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(intList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(strList19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(intList21);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNull(int54);
        org.junit.Assert.assertNotNull(intList60);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNull(strList66);
    }

    @Test
    public void test1218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1218");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str1 = feedType0.getUrlXPath();
        java.lang.String str2 = feedType0.getNameXPath();
        java.lang.String str3 = feedType0.getDescriptionXPath();
        java.lang.String str4 = feedType0.getNameXPath();
        java.lang.String str5 = feedType0.getEntryXPath();
        java.lang.String str6 = feedType0.getDateXPath();
        java.lang.String str7 = feedType0.getUrlXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "./enclosure/@url" + "'", str1, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "/rss/channel/title" + "'", str2, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "./description" + "'", str3, "./description");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "/rss/channel/title" + "'", str4, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/rss/channel/item" + "'", str5, "/rss/channel/item");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "./pubDate" + "'", str6, "./pubDate");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "./enclosure/@url" + "'", str7, "./enclosure/@url");
    }

    @Test
    public void test1219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1219");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList2 = throwableRankList0.getNFirstElements((int) (short) 10);
        throwableRankList0.clear();
        java.util.List<java.lang.Throwable> throwableList4 = throwableRankList0.getOrder();
        java.util.List<java.lang.Throwable> throwableList5 = throwableRankList0.getOrder();
        org.junit.Assert.assertNotNull(throwableList2);
        org.junit.Assert.assertNotNull(throwableList4);
        org.junit.Assert.assertNotNull(throwableList5);
    }

    @Test
    public void test1220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1220");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str1 = feedType0.getUrlXPath();
        java.lang.String str2 = feedType0.getNameXPath();
        java.lang.String str3 = feedType0.getNameXPath();
        java.lang.String str4 = feedType0.getNameXPath();
        java.lang.String str5 = feedType0.getDateXPath();
        java.lang.String str6 = feedType0.getEntryXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "./enclosure/@url" + "'", str1, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "/rss/channel/title" + "'", str2, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "/rss/channel/title" + "'", str3, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "/rss/channel/title" + "'", str4, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "./pubDate" + "'", str5, "./pubDate");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "/rss/channel/item" + "'", str6, "/rss/channel/item");
    }

    @Test
    public void test1221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1221");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.lang.String str3 = cDMetadata0.getAlbum();
        java.util.List<java.lang.Integer> intList4 = cDMetadata0.getTracks();
        int int5 = cDMetadata0.getYear();
        java.util.List<java.lang.String> strList6 = cDMetadata0.getArtistNames();
        cDMetadata0.setDisc((int) (short) 100);
        java.util.List<java.lang.String> strList9 = cDMetadata0.getArtistNames();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(intList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertNull(strList9);
    }

    @Test
    public void test1222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1222");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.lang.String str3 = cDMetadata0.getGenre();
        int int4 = cDMetadata0.getYear();
        int int5 = cDMetadata0.getYear();
        net.sourceforge.atunes.model.CDMetadata cDMetadata6 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str7 = cDMetadata6.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata8 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata8.setAlbumArtist("");
        java.lang.String str11 = cDMetadata8.getGenre();
        java.lang.String[] strArray13 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        cDMetadata8.setTrackNames((java.util.List<java.lang.String>) strList14);
        cDMetadata6.setComposerNames((java.util.List<java.lang.String>) strList14);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList14);
        java.lang.String str19 = cDMetadata0.getAlbumArtist();
        java.util.List<java.lang.String> strList20 = cDMetadata0.getComposerNames();
        java.util.List<java.lang.Integer> intList21 = cDMetadata0.getTracks();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNull(strList20);
        org.junit.Assert.assertNull(intList21);
    }

    @Test
    public void test1223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1223");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.ATOM;
        java.lang.String str1 = feedType0.getDurationXPath();
        java.lang.String str2 = feedType0.getUrlXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.ATOM + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.ATOM));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
    }

    @Test
    public void test1224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1224");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.ATOM;
        java.lang.String str1 = feedType0.getTypeXPath();
        java.lang.String str2 = feedType0.getDurationXPath();
        java.lang.String str3 = feedType0.getTitleXPath();
        java.lang.String str4 = feedType0.getDescriptionXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.ATOM + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.ATOM));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "./link[@rel='enclosure']/@type" + "'", str1, "./link[@rel='enclosure']/@type");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "./title" + "'", str3, "./title");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "./summary" + "'", str4, "./summary");
    }

    @Test
    public void test1225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1225");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType8 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion13 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType8, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str14 = applicationVersion13.getDate();
        java.lang.String str15 = applicationVersion13.toShortString();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType16 = applicationVersion13.getVersionType();
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion21 = new net.sourceforge.atunes.model.ApplicationVersion("./duration", (int) (short) 10, 100, 100, versionType16, "./summary", "hi!", "./updated", "/rss/channel/item");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType30 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.BETA;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion35 = new net.sourceforge.atunes.model.ApplicationVersion("mpc", (int) (short) 0, 150, (int) (byte) -1, versionType30, "flac", "/rss/channel/item", "hi!", "./pubDate");
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion40 = new net.sourceforge.atunes.model.ApplicationVersion("1.0.0 mpc ", (int) (short) 10, (int) (short) 1, (int) (short) 0, versionType30, "net.sourceforge.atunes.model.SearchIndexNotAvailableException: net.sourceforge.atunes.model.SearchQuerySyntaxException", "SOCKS_PROXY", "./enclosure/@type", "/feed/title");
        boolean boolean41 = applicationVersion21.equals((java.lang.Object) applicationVersion40);
        org.junit.Assert.assertTrue("'" + versionType8 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType8.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "./title" + "'", str14, "./title");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1.0.0 " + "'", str15, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + versionType16 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType16.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertTrue("'" + versionType30 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.BETA + "'", versionType30.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.BETA));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test1226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1226");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata1 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata1.setAlbumArtist("");
        boolean boolean4 = fontSettings0.equals((java.lang.Object) cDMetadata1);
        fontSettings0.setUseFontSmoothingSettingsFromOs(false);
        boolean boolean7 = fontSettings0.isUseFontSmoothing();
        net.sourceforge.atunes.model.IFontBean iFontBean8 = null;
        fontSettings0.setFont(iFontBean8);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList10 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList12 = throwableRankList10.getNFirstElements((int) (short) 10);
        throwableRankList10.clear();
        java.util.List<java.lang.Integer> intList15 = throwableRankList10.getNFirstElementCounts(150);
        throwableRankList10.clear();
        boolean boolean17 = fontSettings0.equals((java.lang.Object) throwableRankList10);
        java.util.List<java.lang.Throwable> throwableList18 = throwableRankList10.getOrder();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(throwableList12);
        org.junit.Assert.assertNotNull(intList15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(throwableList18);
    }

    @Test
    public void test1227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1227");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        net.sourceforge.atunes.model.AudioObjectProperty audioObjectProperty1 = net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY;
        boolean boolean2 = columnBean0.equals((java.lang.Object) audioObjectProperty1);
        int int3 = columnBean0.getWidth();
        int int4 = columnBean0.getOrder();
        net.sourceforge.atunes.model.CDMetadata cDMetadata5 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata5.setAlbumArtist("");
        java.lang.String str8 = cDMetadata5.getGenre();
        int int9 = cDMetadata5.getYear();
        int int10 = cDMetadata5.getYear();
        cDMetadata5.setGenre("./enclosure/@url");
        java.util.List<java.lang.String> strList13 = null;
        cDMetadata5.setTrackNames(strList13);
        cDMetadata5.setAlbumArtist("./link[@rel='enclosure']/@type");
        boolean boolean17 = columnBean0.equals((java.lang.Object) "./link[@rel='enclosure']/@type");
        columnBean0.setWidth((int) (byte) -1);
        int int20 = columnBean0.getWidth();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList21 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList23 = throwableRankList21.getNFirstElements((int) (short) 100);
        java.util.List<java.lang.Throwable> throwableList24 = throwableRankList21.getOrder();
        java.util.List<java.lang.Throwable> throwableList26 = throwableRankList21.getNFirstElements((int) 'a');
        java.lang.Throwable throwable27 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException28 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable27);
        java.lang.Throwable[] throwableArray29 = searchQuerySyntaxException28.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException30 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException28);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException31 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException28);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList32 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable33 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException34 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable33);
        java.lang.Throwable[] throwableArray35 = searchQuerySyntaxException34.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException36 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException34);
        java.lang.Throwable throwable37 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException38 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable37);
        java.lang.Throwable[] throwableArray39 = searchQuerySyntaxException38.getSuppressed();
        throwableRankList32.replaceItem((java.lang.Throwable) searchQuerySyntaxException34, (java.lang.Throwable) searchQuerySyntaxException38);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException41 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException38);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException42 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException41);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException43 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchIndexNotAvailableException42);
        searchQuerySyntaxException31.addSuppressed((java.lang.Throwable) searchIndexNotAvailableException43);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException45 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException31);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException46 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchIndexNotAvailableException45);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException47 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException46);
        throwableRankList21.addItem((java.lang.Throwable) searchQuerySyntaxException46);
        boolean boolean49 = columnBean0.equals((java.lang.Object) throwableRankList21);
        org.junit.Assert.assertTrue("'" + audioObjectProperty1 + "' != '" + net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY + "'", audioObjectProperty1.equals(net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(throwableList23);
        org.junit.Assert.assertNotNull(throwableList24);
        org.junit.Assert.assertNotNull(throwableList26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test1228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1228");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata1 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata1.setAlbumArtist("");
        boolean boolean4 = fontSettings0.equals((java.lang.Object) cDMetadata1);
        fontSettings0.setUseFontSmoothingSettingsFromOs(false);
        boolean boolean7 = fontSettings0.isUseFontSmoothing();
        net.sourceforge.atunes.model.IFontBean iFontBean8 = null;
        fontSettings0.setFont(iFontBean8);
        boolean boolean10 = fontSettings0.isUseFontSmoothing();
        fontSettings0.setUseFontSmoothing(true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1229");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        net.sourceforge.atunes.model.ColumnSort columnSort4 = net.sourceforge.atunes.model.ColumnSort.DESCENDING;
        columnBean0.setSort(columnSort4);
        columnBean0.setVisible(true);
        net.sourceforge.atunes.model.ColumnSort columnSort8 = columnBean0.getSort();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + columnSort4 + "' != '" + net.sourceforge.atunes.model.ColumnSort.DESCENDING + "'", columnSort4.equals(net.sourceforge.atunes.model.ColumnSort.DESCENDING));
        org.junit.Assert.assertTrue("'" + columnSort8 + "' != '" + net.sourceforge.atunes.model.ColumnSort.DESCENDING + "'", columnSort8.equals(net.sourceforge.atunes.model.ColumnSort.DESCENDING));
    }

    @Test
    public void test1230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1230");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.lang.String str3 = cDMetadata0.getAlbum();
        java.util.List<java.lang.Integer> intList4 = cDMetadata0.getTracks();
        int int5 = cDMetadata0.getYear();
        java.util.List<java.lang.String> strList6 = cDMetadata0.getArtistNames();
        cDMetadata0.setDisc((int) (short) 100);
        net.sourceforge.atunes.model.CDMetadata cDMetadata9 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str10 = cDMetadata9.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata11 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata11.setAlbumArtist("");
        java.lang.String str14 = cDMetadata11.getGenre();
        java.lang.String[] strArray16 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        cDMetadata11.setTrackNames((java.util.List<java.lang.String>) strList17);
        cDMetadata9.setComposerNames((java.util.List<java.lang.String>) strList17);
        net.sourceforge.atunes.model.CDMetadata cDMetadata21 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str22 = cDMetadata21.getGenre();
        java.util.List<java.lang.String> strList23 = cDMetadata21.getComposerNames();
        java.lang.String str24 = cDMetadata21.getAlbum();
        net.sourceforge.atunes.model.CDMetadata cDMetadata25 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata25.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList28 = cDMetadata25.getTracks();
        cDMetadata25.setAlbumArtist("/rss/channel/title");
        java.util.List<java.lang.String> strList31 = cDMetadata25.getTrackNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata32 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata32.setAlbumArtist("");
        java.lang.String str35 = cDMetadata32.getGenre();
        java.lang.String[] strArray37 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        cDMetadata32.setTrackNames((java.util.List<java.lang.String>) strList38);
        cDMetadata25.setTrackNames((java.util.List<java.lang.String>) strList38);
        cDMetadata21.setTrackNames((java.util.List<java.lang.String>) strList38);
        cDMetadata9.setTrackNames((java.util.List<java.lang.String>) strList38);
        cDMetadata0.setArtistNames((java.util.List<java.lang.String>) strList38);
        int int45 = cDMetadata0.getYear();
        cDMetadata0.setAlbumArtist("net.sourceforge.atunes.model.SearchQuerySyntaxException: net.sourceforge.atunes.model.SearchIndexNotAvailableException: net.sourceforge.atunes.model.SearchQuerySyntaxException: net.sourceforge.atunes.model.SearchQuerySyntaxException");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(intList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(strList23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(intList28);
        org.junit.Assert.assertNull(strList31);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test1231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1231");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str1 = feedType0.getUrlXPath();
        java.lang.String str2 = feedType0.getNameXPath();
        java.lang.String str3 = feedType0.getDescriptionXPath();
        java.lang.String str4 = feedType0.getTypeXPath();
        java.lang.String str5 = feedType0.getEntryXPath();
        java.lang.String str6 = feedType0.getDurationXPath();
        java.lang.String str7 = feedType0.getNameXPath();
        java.lang.String str8 = feedType0.getNameXPath();
        java.lang.String str9 = feedType0.getTitleXPath();
        java.lang.String str10 = feedType0.getUrlXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "./enclosure/@url" + "'", str1, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "/rss/channel/title" + "'", str2, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "./description" + "'", str3, "./description");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "./enclosure/@type" + "'", str4, "./enclosure/@type");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/rss/channel/item" + "'", str5, "/rss/channel/item");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "./duration" + "'", str6, "./duration");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/rss/channel/title" + "'", str7, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "/rss/channel/title" + "'", str8, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "./title" + "'", str9, "./title");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./enclosure/@url" + "'", str10, "./enclosure/@url");
    }

    @Test
    public void test1232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1232");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        fontSettings0.setUseFontSmoothing(false);
        net.sourceforge.atunes.model.IFontBean iFontBean3 = fontSettings0.getFont();
        boolean boolean4 = fontSettings0.isUseFontSmoothing();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList5 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList7 = throwableRankList5.getNFirstElements((int) (short) 10);
        int int8 = throwableRankList5.size();
        java.util.List<java.lang.Integer> intList10 = throwableRankList5.getNFirstElementCounts((int) (short) 100);
        boolean boolean11 = fontSettings0.equals((java.lang.Object) intList10);
        boolean boolean12 = fontSettings0.isUseFontSmoothing();
        boolean boolean13 = fontSettings0.isUseFontSmoothingSettingsFromOs();
        org.junit.Assert.assertNull(iFontBean3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(throwableList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intList10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1233");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable1 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException2 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable1);
        java.lang.Throwable[] throwableArray3 = searchQuerySyntaxException2.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException4 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException2);
        java.lang.Throwable throwable5 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException6 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable5);
        java.lang.Throwable[] throwableArray7 = searchQuerySyntaxException6.getSuppressed();
        throwableRankList0.replaceItem((java.lang.Throwable) searchQuerySyntaxException2, (java.lang.Throwable) searchQuerySyntaxException6);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList9 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable10 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException11 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable10);
        java.lang.Throwable[] throwableArray12 = searchQuerySyntaxException11.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException13 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException11);
        java.lang.Throwable throwable14 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException15 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable14);
        java.lang.Throwable[] throwableArray16 = searchQuerySyntaxException15.getSuppressed();
        throwableRankList9.replaceItem((java.lang.Throwable) searchQuerySyntaxException11, (java.lang.Throwable) searchQuerySyntaxException15);
        java.lang.Integer int18 = throwableRankList0.getCount((java.lang.Throwable) searchQuerySyntaxException15);
        java.util.List<java.lang.Integer> intList20 = throwableRankList0.getNFirstElementCounts((int) (short) -1);
        java.lang.Throwable throwable21 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException22 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable21);
        java.lang.Throwable[] throwableArray23 = searchQuerySyntaxException22.getSuppressed();
        throwableRankList0.addItem((java.lang.Throwable) searchQuerySyntaxException22);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException25 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException22);
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType30 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion35 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType30, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str36 = applicationVersion35.getDate();
        java.lang.String str37 = applicationVersion35.toShortString();
        int int38 = applicationVersion35.getMajorNumber();
        int int39 = applicationVersion35.getMinorNumber();
        java.lang.String str40 = applicationVersion35.getDate();
        java.lang.String str41 = applicationVersion35.getChanges();
        java.lang.String str42 = applicationVersion35.getDirectDownloadURL();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList43 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList45 = throwableRankList43.getNFirstElements((int) (short) 10);
        int int46 = throwableRankList43.size();
        int int47 = throwableRankList43.size();
        java.lang.Throwable throwable48 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException49 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable48);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList50 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable51 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException52 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable51);
        java.lang.Throwable[] throwableArray53 = searchQuerySyntaxException52.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException54 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException52);
        java.lang.Throwable throwable55 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException56 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable55);
        java.lang.Throwable[] throwableArray57 = searchQuerySyntaxException56.getSuppressed();
        throwableRankList50.replaceItem((java.lang.Throwable) searchQuerySyntaxException52, (java.lang.Throwable) searchQuerySyntaxException56);
        searchQuerySyntaxException49.addSuppressed((java.lang.Throwable) searchQuerySyntaxException56);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException60 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException49);
        java.lang.Integer int61 = throwableRankList43.getCount((java.lang.Throwable) searchQuerySyntaxException49);
        boolean boolean62 = applicationVersion35.equals((java.lang.Object) searchQuerySyntaxException49);
        searchQuerySyntaxException22.addSuppressed((java.lang.Throwable) searchQuerySyntaxException49);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException64 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException49);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(intList20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertTrue("'" + versionType30 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType30.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "./title" + "'", str36, "./title");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1.0.0 " + "'", str37, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "./title" + "'", str40, "./title");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "./title" + "'", str41, "./title");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "./pubDate" + "'", str42, "./pubDate");
        org.junit.Assert.assertNotNull(throwableList45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNull(int61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test1234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1234");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str1 = feedType0.getUrlXPath();
        java.lang.String str2 = feedType0.getUrlXPath();
        java.lang.String str3 = feedType0.getAuthorXPath();
        java.lang.String str4 = feedType0.getUrlXPath();
        java.lang.String str5 = feedType0.getDateXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "./enclosure/@url" + "'", str1, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "./enclosure/@url" + "'", str2, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "./author" + "'", str3, "./author");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "./enclosure/@url" + "'", str4, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "./pubDate" + "'", str5, "./pubDate");
    }

    @Test
    public void test1235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1235");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        int int12 = applicationVersion9.getMajorNumber();
        int int13 = applicationVersion9.getMinorNumber();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType18 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion23 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType18, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str24 = applicationVersion23.getDate();
        java.lang.String str25 = applicationVersion23.toShortString();
        java.lang.String str26 = applicationVersion23.getChanges();
        int int27 = applicationVersion23.getMinorNumber();
        java.lang.String str28 = applicationVersion23.getChanges();
        int int29 = applicationVersion23.getRevisionNumber();
        int int30 = applicationVersion9.compareTo(applicationVersion23);
        net.sourceforge.atunes.model.FeedType feedType31 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str32 = feedType31.getEntryXPath();
        java.lang.String str33 = feedType31.getTypeXPath();
        java.lang.String str34 = feedType31.getTypeXPath();
        java.lang.String str35 = feedType31.getNameXPath();
        java.lang.String str36 = feedType31.getUrlXPath();
        boolean boolean37 = applicationVersion23.equals((java.lang.Object) feedType31);
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + versionType18 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType18.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "./title" + "'", str24, "./title");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1.0.0 " + "'", str25, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "./title" + "'", str26, "./title");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "./title" + "'", str28, "./title");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + feedType31 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType31.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "/rss/channel/item" + "'", str32, "/rss/channel/item");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "./enclosure/@type" + "'", str33, "./enclosure/@type");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "./enclosure/@type" + "'", str34, "./enclosure/@type");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "/rss/channel/title" + "'", str35, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "./enclosure/@url" + "'", str36, "./enclosure/@url");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test1236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1236");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.IFontBean iFontBean1 = fontSettings0.getFont();
        net.sourceforge.atunes.model.IFontBean iFontBean2 = fontSettings0.getFont();
        net.sourceforge.atunes.model.IFontBean iFontBean3 = fontSettings0.getFont();
        org.junit.Assert.assertNull(iFontBean1);
        org.junit.Assert.assertNull(iFontBean2);
        org.junit.Assert.assertNull(iFontBean3);
    }

    @Test
    public void test1237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1237");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList2 = throwableRankList0.getNFirstElements((int) (short) 100);
        java.lang.Throwable throwable3 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException4 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable3);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList5 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable6 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException7 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable6);
        java.lang.Throwable[] throwableArray8 = searchQuerySyntaxException7.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException9 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException7);
        java.lang.Throwable throwable10 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException11 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable10);
        java.lang.Throwable[] throwableArray12 = searchQuerySyntaxException11.getSuppressed();
        throwableRankList5.replaceItem((java.lang.Throwable) searchQuerySyntaxException7, (java.lang.Throwable) searchQuerySyntaxException11);
        searchQuerySyntaxException4.addSuppressed((java.lang.Throwable) searchQuerySyntaxException11);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException15 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException4);
        java.lang.Throwable throwable16 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException17 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable16);
        java.lang.Throwable[] throwableArray18 = searchQuerySyntaxException17.getSuppressed();
        searchQuerySyntaxException4.addSuppressed((java.lang.Throwable) searchQuerySyntaxException17);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException20 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException4);
        java.lang.Throwable throwable21 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException22 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable21);
        java.lang.Throwable[] throwableArray23 = searchQuerySyntaxException22.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException24 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException22);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException25 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException22);
        throwableRankList0.replaceItem((java.lang.Throwable) searchQuerySyntaxException4, (java.lang.Throwable) searchQuerySyntaxException25);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException27 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException4);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException28 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchIndexNotAvailableException27);
        java.lang.Throwable[] throwableArray29 = searchQuerySyntaxException28.getSuppressed();
        org.junit.Assert.assertNotNull(throwableList2);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray29);
    }

    @Test
    public void test1238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1238");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata1 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata1.setAlbumArtist("");
        boolean boolean4 = fontSettings0.equals((java.lang.Object) cDMetadata1);
        java.lang.String str5 = cDMetadata1.getAlbum();
        java.lang.String str6 = cDMetadata1.getAlbum();
        java.util.List<java.lang.Integer> intList7 = cDMetadata1.getTracks();
        net.sourceforge.atunes.model.FontSettings fontSettings8 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata9 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata9.setAlbumArtist("");
        boolean boolean12 = fontSettings8.equals((java.lang.Object) cDMetadata9);
        fontSettings8.setUseFontSmoothing(true);
        net.sourceforge.atunes.model.IFontBean iFontBean15 = fontSettings8.getFont();
        net.sourceforge.atunes.model.CDMetadata cDMetadata16 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str17 = cDMetadata16.getGenre();
        java.util.List<java.lang.String> strList18 = cDMetadata16.getComposerNames();
        java.lang.String str19 = cDMetadata16.getAlbum();
        java.util.List<java.lang.Integer> intList20 = cDMetadata16.getTracks();
        cDMetadata16.setAlbumArtist("mpc");
        java.lang.String str23 = cDMetadata16.getAlbum();
        boolean boolean24 = fontSettings8.equals((java.lang.Object) cDMetadata16);
        java.lang.String[] strArray49 = new java.lang.String[] { "./link[@rel='enclosure']/@type", "SOCKS_PROXY", "/feed/title", "./pubDate", "1.0.0 mpc ", "net.sourceforge.atunes.model.InconsistentRepositoryException", "1.0.0 mpc ", "1.0.0 mpc ", "rm", "./enclosure/@type", "/rss/channel/item", "mpc", "./title", "1.0.0 ", "flv", "1.0.0 ", "./link[@rel='enclosure']/@type", "hi!", "./link[@rel='enclosure']/@type", "./updated", "10.52.35  ", "net.sourceforge.atunes.model.InconsistentRepositoryException", "./enclosure/@url", "SOCKS_PROXY" };
        java.util.ArrayList<java.lang.String> strList50 = new java.util.ArrayList<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList50, strArray49);
        cDMetadata16.setTrackNames((java.util.List<java.lang.String>) strList50);
        cDMetadata1.setTrackNames((java.util.List<java.lang.String>) strList50);
        java.util.List<java.lang.Integer> intList54 = cDMetadata1.getTracks();
        java.util.List<java.lang.String> strList55 = cDMetadata1.getArtistNames();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(intList7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(iFontBean15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(intList20);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNull(intList54);
        org.junit.Assert.assertNull(strList55);
    }

    @Test
    public void test1239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1239");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        columnBean0.setVisible(false);
        net.sourceforge.atunes.model.ColumnSort columnSort6 = columnBean0.getSort();
        net.sourceforge.atunes.model.TextTagAttribute textTagAttribute7 = net.sourceforge.atunes.model.TextTagAttribute.COMPOSER;
        boolean boolean8 = columnBean0.equals((java.lang.Object) textTagAttribute7);
        columnBean0.setVisible(true);
        columnBean0.setOrder((int) (short) 100);
        net.sourceforge.atunes.model.ColumnSort columnSort13 = columnBean0.getSort();
        int int14 = columnBean0.getOrder();
        int int15 = columnBean0.getOrder();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(columnSort6);
        org.junit.Assert.assertTrue("'" + textTagAttribute7 + "' != '" + net.sourceforge.atunes.model.TextTagAttribute.COMPOSER + "'", textTagAttribute7.equals(net.sourceforge.atunes.model.TextTagAttribute.COMPOSER));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(columnSort13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
    }

    @Test
    public void test1240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1240");
        net.sourceforge.atunes.model.RankList<java.lang.constant.ConstantDesc> constantDescRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.constant.ConstantDesc>();
    }

    @Test
    public void test1241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1241");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        net.sourceforge.atunes.model.ColumnSort columnSort4 = net.sourceforge.atunes.model.ColumnSort.DESCENDING;
        columnBean0.setSort(columnSort4);
        net.sourceforge.atunes.model.ColumnBean columnBean6 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean7 = columnBean6.isVisible();
        net.sourceforge.atunes.model.SubmissionState submissionState8 = net.sourceforge.atunes.model.SubmissionState.PENDING;
        boolean boolean9 = columnBean6.equals((java.lang.Object) submissionState8);
        columnBean6.setVisible(false);
        net.sourceforge.atunes.model.ColumnSort columnSort12 = net.sourceforge.atunes.model.ColumnSort.ASCENDING;
        columnBean6.setSort(columnSort12);
        columnBean0.setSort(columnSort12);
        boolean boolean15 = columnBean0.isVisible();
        net.sourceforge.atunes.model.ColumnSort columnSort16 = columnBean0.getSort();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + columnSort4 + "' != '" + net.sourceforge.atunes.model.ColumnSort.DESCENDING + "'", columnSort4.equals(net.sourceforge.atunes.model.ColumnSort.DESCENDING));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + submissionState8 + "' != '" + net.sourceforge.atunes.model.SubmissionState.PENDING + "'", submissionState8.equals(net.sourceforge.atunes.model.SubmissionState.PENDING));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + columnSort12 + "' != '" + net.sourceforge.atunes.model.ColumnSort.ASCENDING + "'", columnSort12.equals(net.sourceforge.atunes.model.ColumnSort.ASCENDING));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + columnSort16 + "' != '" + net.sourceforge.atunes.model.ColumnSort.ASCENDING + "'", columnSort16.equals(net.sourceforge.atunes.model.ColumnSort.ASCENDING));
    }

    @Test
    public void test1242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1242");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        net.sourceforge.atunes.model.ColumnSort columnSort4 = net.sourceforge.atunes.model.ColumnSort.DESCENDING;
        columnBean0.setSort(columnSort4);
        net.sourceforge.atunes.model.ColumnBean columnBean6 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean7 = columnBean6.isVisible();
        net.sourceforge.atunes.model.SubmissionState submissionState8 = net.sourceforge.atunes.model.SubmissionState.PENDING;
        boolean boolean9 = columnBean6.equals((java.lang.Object) submissionState8);
        columnBean6.setVisible(false);
        net.sourceforge.atunes.model.ColumnSort columnSort12 = net.sourceforge.atunes.model.ColumnSort.ASCENDING;
        columnBean6.setSort(columnSort12);
        columnBean0.setSort(columnSort12);
        columnBean0.setVisible(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + columnSort4 + "' != '" + net.sourceforge.atunes.model.ColumnSort.DESCENDING + "'", columnSort4.equals(net.sourceforge.atunes.model.ColumnSort.DESCENDING));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + submissionState8 + "' != '" + net.sourceforge.atunes.model.SubmissionState.PENDING + "'", submissionState8.equals(net.sourceforge.atunes.model.SubmissionState.PENDING));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + columnSort12 + "' != '" + net.sourceforge.atunes.model.ColumnSort.ASCENDING + "'", columnSort12.equals(net.sourceforge.atunes.model.ColumnSort.ASCENDING));
    }

    @Test
    public void test1243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1243");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.lang.String str3 = cDMetadata0.getGenre();
        int int4 = cDMetadata0.getYear();
        int int5 = cDMetadata0.getYear();
        net.sourceforge.atunes.model.CDMetadata cDMetadata6 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str7 = cDMetadata6.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata8 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata8.setAlbumArtist("");
        java.lang.String str11 = cDMetadata8.getGenre();
        java.lang.String[] strArray13 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        cDMetadata8.setTrackNames((java.util.List<java.lang.String>) strList14);
        cDMetadata6.setComposerNames((java.util.List<java.lang.String>) strList14);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList14);
        java.lang.String str19 = cDMetadata0.getAlbumArtist();
        java.util.List<java.lang.String> strList20 = cDMetadata0.getComposerNames();
        java.util.List<java.lang.String> strList21 = cDMetadata0.getArtistNames();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList22 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable23 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException24 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable23);
        java.lang.Throwable[] throwableArray25 = searchQuerySyntaxException24.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException26 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException24);
        java.lang.Throwable throwable27 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException28 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable27);
        java.lang.Throwable[] throwableArray29 = searchQuerySyntaxException28.getSuppressed();
        throwableRankList22.replaceItem((java.lang.Throwable) searchQuerySyntaxException24, (java.lang.Throwable) searchQuerySyntaxException28);
        java.util.List<java.lang.Throwable> throwableList31 = throwableRankList22.getOrder();
        java.util.List<java.lang.Throwable> throwableList32 = throwableRankList22.getOrder();
        java.util.List<java.lang.Throwable> throwableList34 = throwableRankList22.getNFirstElements((int) (byte) 100);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList35 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable36 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException37 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable36);
        java.lang.Throwable[] throwableArray38 = searchQuerySyntaxException37.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException39 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException37);
        java.lang.Throwable throwable40 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException41 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable40);
        java.lang.Throwable[] throwableArray42 = searchQuerySyntaxException41.getSuppressed();
        throwableRankList35.replaceItem((java.lang.Throwable) searchQuerySyntaxException37, (java.lang.Throwable) searchQuerySyntaxException41);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException44 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException41);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException45 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException44);
        throwableRankList22.addItem((java.lang.Throwable) searchIndexNotAvailableException45);
        java.util.List<java.lang.Integer> intList48 = throwableRankList22.getNFirstElementCounts((int) (byte) 1);
        cDMetadata0.setTracks(intList48);
        java.util.List<java.lang.String> strList50 = cDMetadata0.getArtistNames();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNull(strList20);
        org.junit.Assert.assertNull(strList21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableList31);
        org.junit.Assert.assertNotNull(throwableList32);
        org.junit.Assert.assertNotNull(throwableList34);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(intList48);
        org.junit.Assert.assertNull(strList50);
    }

    @Test
    public void test1244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1244");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.lang.String str3 = cDMetadata0.getGenre();
        int int4 = cDMetadata0.getYear();
        int int5 = cDMetadata0.getYear();
        cDMetadata0.setGenre("./enclosure/@url");
        java.util.List<java.lang.String> strList8 = null;
        cDMetadata0.setTrackNames(strList8);
        java.util.List<java.lang.Integer> intList10 = cDMetadata0.getTracks();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(intList10);
    }

    @Test
    public void test1245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1245");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.lang.String str3 = cDMetadata0.getGenre();
        java.lang.String[] strArray5 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList6);
        cDMetadata0.setDisc(2);
        cDMetadata0.setGenre("mac");
        java.lang.String str13 = cDMetadata0.getAlbumArtist();
        java.lang.String str14 = cDMetadata0.getGenre();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "mac" + "'", str14, "mac");
    }

    @Test
    public void test1246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1246");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        columnBean0.setVisible(false);
        columnBean0.setWidth(0);
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType12 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion17 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType12, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str18 = applicationVersion17.getDate();
        java.lang.String str19 = applicationVersion17.toShortString();
        java.lang.String str20 = applicationVersion17.getChanges();
        boolean boolean21 = columnBean0.equals((java.lang.Object) applicationVersion17);
        java.lang.String str22 = applicationVersion17.toString();
        java.lang.String str23 = applicationVersion17.getDownloadURL();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType24 = applicationVersion17.getVersionType();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType29 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion34 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType29, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str35 = applicationVersion34.getDate();
        java.lang.String str36 = applicationVersion34.toShortString();
        int int37 = applicationVersion34.getMajorNumber();
        int int38 = applicationVersion34.getMinorNumber();
        java.lang.String str39 = applicationVersion34.getDate();
        java.lang.String str40 = applicationVersion34.getChanges();
        java.lang.String str41 = applicationVersion34.getDirectDownloadURL();
        int int42 = applicationVersion17.compareTo(applicationVersion34);
        java.lang.String str43 = applicationVersion17.toShortString();
        java.lang.String str44 = applicationVersion17.toShortString();
        java.lang.String str45 = applicationVersion17.getDate();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + versionType12 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType12.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "./title" + "'", str18, "./title");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1.0.0 " + "'", str19, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "./title" + "'", str20, "./title");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1.0.0 mpc " + "'", str22, "1.0.0 mpc ");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "./description" + "'", str23, "./description");
        org.junit.Assert.assertTrue("'" + versionType24 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType24.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertTrue("'" + versionType29 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType29.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "./title" + "'", str35, "./title");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1.0.0 " + "'", str36, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "./title" + "'", str39, "./title");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "./title" + "'", str40, "./title");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "./pubDate" + "'", str41, "./pubDate");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1.0.0 " + "'", str43, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1.0.0 " + "'", str44, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "./title" + "'", str45, "./title");
    }

    @Test
    public void test1247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1247");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        columnBean0.setVisible(false);
        net.sourceforge.atunes.model.ColumnSort columnSort6 = columnBean0.getSort();
        net.sourceforge.atunes.model.TextTagAttribute textTagAttribute7 = net.sourceforge.atunes.model.TextTagAttribute.COMPOSER;
        boolean boolean8 = columnBean0.equals((java.lang.Object) textTagAttribute7);
        columnBean0.setVisible(true);
        columnBean0.setOrder((int) (short) 100);
        columnBean0.setOrder(100);
        int int15 = columnBean0.getOrder();
        net.sourceforge.atunes.model.ColumnBean columnBean16 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean17 = columnBean16.isVisible();
        net.sourceforge.atunes.model.ColumnBean columnBean18 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean19 = columnBean18.isVisible();
        columnBean18.setOrder((int) (byte) -1);
        net.sourceforge.atunes.model.ColumnSort columnSort22 = net.sourceforge.atunes.model.ColumnSort.DESCENDING;
        columnBean18.setSort(columnSort22);
        net.sourceforge.atunes.model.ColumnBean columnBean24 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean25 = columnBean24.isVisible();
        net.sourceforge.atunes.model.SubmissionState submissionState26 = net.sourceforge.atunes.model.SubmissionState.PENDING;
        boolean boolean27 = columnBean24.equals((java.lang.Object) submissionState26);
        columnBean24.setVisible(false);
        net.sourceforge.atunes.model.ColumnSort columnSort30 = net.sourceforge.atunes.model.ColumnSort.ASCENDING;
        columnBean24.setSort(columnSort30);
        columnBean18.setSort(columnSort30);
        columnBean16.setSort(columnSort30);
        columnBean16.setOrder(1);
        net.sourceforge.atunes.model.ColumnBean columnBean36 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean37 = columnBean36.isVisible();
        columnBean36.setOrder((int) (byte) -1);
        net.sourceforge.atunes.model.ColumnSort columnSort40 = net.sourceforge.atunes.model.ColumnSort.DESCENDING;
        columnBean36.setSort(columnSort40);
        net.sourceforge.atunes.model.ColumnBean columnBean42 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean43 = columnBean42.isVisible();
        net.sourceforge.atunes.model.SubmissionState submissionState44 = net.sourceforge.atunes.model.SubmissionState.PENDING;
        boolean boolean45 = columnBean42.equals((java.lang.Object) submissionState44);
        columnBean42.setVisible(false);
        net.sourceforge.atunes.model.ColumnSort columnSort48 = net.sourceforge.atunes.model.ColumnSort.ASCENDING;
        columnBean42.setSort(columnSort48);
        columnBean36.setSort(columnSort48);
        columnBean16.setSort(columnSort48);
        columnBean0.setSort(columnSort48);
        columnBean0.setVisible(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(columnSort6);
        org.junit.Assert.assertTrue("'" + textTagAttribute7 + "' != '" + net.sourceforge.atunes.model.TextTagAttribute.COMPOSER + "'", textTagAttribute7.equals(net.sourceforge.atunes.model.TextTagAttribute.COMPOSER));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + columnSort22 + "' != '" + net.sourceforge.atunes.model.ColumnSort.DESCENDING + "'", columnSort22.equals(net.sourceforge.atunes.model.ColumnSort.DESCENDING));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + submissionState26 + "' != '" + net.sourceforge.atunes.model.SubmissionState.PENDING + "'", submissionState26.equals(net.sourceforge.atunes.model.SubmissionState.PENDING));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + columnSort30 + "' != '" + net.sourceforge.atunes.model.ColumnSort.ASCENDING + "'", columnSort30.equals(net.sourceforge.atunes.model.ColumnSort.ASCENDING));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + columnSort40 + "' != '" + net.sourceforge.atunes.model.ColumnSort.DESCENDING + "'", columnSort40.equals(net.sourceforge.atunes.model.ColumnSort.DESCENDING));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + submissionState44 + "' != '" + net.sourceforge.atunes.model.SubmissionState.PENDING + "'", submissionState44.equals(net.sourceforge.atunes.model.SubmissionState.PENDING));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + columnSort48 + "' != '" + net.sourceforge.atunes.model.ColumnSort.ASCENDING + "'", columnSort48.equals(net.sourceforge.atunes.model.ColumnSort.ASCENDING));
    }

    @Test
    public void test1248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1248");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        java.lang.String str12 = applicationVersion9.getChanges();
        int int13 = applicationVersion9.getMinorNumber();
        java.lang.String str14 = applicationVersion9.getChanges();
        int int15 = applicationVersion9.getRevisionNumber();
        int int16 = applicationVersion9.getMajorNumber();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "./title" + "'", str12, "./title");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "./title" + "'", str14, "./title");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test1249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1249");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        net.sourceforge.atunes.model.AudioObjectProperty audioObjectProperty1 = net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY;
        boolean boolean2 = columnBean0.equals((java.lang.Object) audioObjectProperty1);
        net.sourceforge.atunes.model.TextTagAttribute textTagAttribute3 = net.sourceforge.atunes.model.TextTagAttribute.LYRICS;
        boolean boolean4 = columnBean0.equals((java.lang.Object) textTagAttribute3);
        columnBean0.setWidth((int) '#');
        int int7 = columnBean0.getOrder();
        org.junit.Assert.assertTrue("'" + audioObjectProperty1 + "' != '" + net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY + "'", audioObjectProperty1.equals(net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + textTagAttribute3 + "' != '" + net.sourceforge.atunes.model.TextTagAttribute.LYRICS + "'", textTagAttribute3.equals(net.sourceforge.atunes.model.TextTagAttribute.LYRICS));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test1250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1250");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str1 = feedType0.getUrlXPath();
        java.lang.String str2 = feedType0.getNameXPath();
        java.lang.String str3 = feedType0.getDescriptionXPath();
        java.lang.String str4 = feedType0.getNameXPath();
        java.lang.String str5 = feedType0.getEntryXPath();
        java.lang.String str6 = feedType0.getEntryXPath();
        java.lang.String str7 = feedType0.getNameXPath();
        java.lang.String str8 = feedType0.getUrlXPath();
        java.lang.String str9 = feedType0.getNameXPath();
        java.lang.String str10 = feedType0.getEntryXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "./enclosure/@url" + "'", str1, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "/rss/channel/title" + "'", str2, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "./description" + "'", str3, "./description");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "/rss/channel/title" + "'", str4, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/rss/channel/item" + "'", str5, "/rss/channel/item");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "/rss/channel/item" + "'", str6, "/rss/channel/item");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/rss/channel/title" + "'", str7, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "./enclosure/@url" + "'", str8, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/rss/channel/title" + "'", str9, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/rss/channel/item" + "'", str10, "/rss/channel/item");
    }

    @Test
    public void test1251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1251");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.lang.String str3 = cDMetadata0.getAlbum();
        java.util.List<java.lang.Integer> intList4 = cDMetadata0.getTracks();
        int int5 = cDMetadata0.getYear();
        java.util.List<java.lang.String> strList6 = cDMetadata0.getArtistNames();
        cDMetadata0.setDisc((int) (short) 100);
        net.sourceforge.atunes.model.CDMetadata cDMetadata9 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata9.setAlbumArtist("");
        java.lang.String str12 = cDMetadata9.getGenre();
        java.lang.String[] strArray14 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        cDMetadata9.setTrackNames((java.util.List<java.lang.String>) strList15);
        cDMetadata0.setArtistNames((java.util.List<java.lang.String>) strList15);
        java.util.List<java.lang.String> strList19 = cDMetadata0.getArtistNames();
        java.util.List<java.lang.String> strList20 = cDMetadata0.getTrackNames();
        java.lang.String str22 = cDMetadata0.getArtist((int) (byte) 100);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(intList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNull(strList20);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test1252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1252");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList3 = cDMetadata0.getTracks();
        cDMetadata0.setAlbumArtist("/rss/channel/title");
        java.util.List<java.lang.String> strList6 = cDMetadata0.getTrackNames();
        java.lang.String str7 = cDMetadata0.getAlbumArtist();
        cDMetadata0.setYear((-1));
        java.util.List<java.lang.String> strList10 = cDMetadata0.getTrackNames();
        java.lang.String str11 = cDMetadata0.getAlbum();
        net.sourceforge.atunes.model.CDMetadata cDMetadata12 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata12.setAlbumArtist("");
        java.lang.String str15 = cDMetadata12.getGenre();
        java.util.List<java.lang.String> strList16 = cDMetadata12.getTrackNames();
        java.util.List<java.lang.String> strList17 = cDMetadata12.getTrackNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata18 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str19 = cDMetadata18.getGenre();
        java.lang.String str20 = cDMetadata18.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata21 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str22 = cDMetadata21.getGenre();
        java.util.List<java.lang.String> strList23 = cDMetadata21.getComposerNames();
        java.lang.String str24 = cDMetadata21.getAlbum();
        java.util.List<java.lang.Integer> intList25 = cDMetadata21.getTracks();
        int int26 = cDMetadata21.getYear();
        net.sourceforge.atunes.model.CDMetadata cDMetadata27 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str28 = cDMetadata27.getGenre();
        java.util.List<java.lang.String> strList29 = cDMetadata27.getComposerNames();
        java.lang.String str30 = cDMetadata27.getAlbum();
        java.util.List<java.lang.Integer> intList31 = cDMetadata27.getTracks();
        net.sourceforge.atunes.model.CDMetadata cDMetadata32 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata32.setAlbumArtist("");
        java.lang.String str36 = cDMetadata32.getTitle((int) (byte) -1);
        java.lang.String[] strArray38 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        cDMetadata32.setTrackNames((java.util.List<java.lang.String>) strList39);
        cDMetadata27.setTrackNames((java.util.List<java.lang.String>) strList39);
        cDMetadata27.setYear((int) (short) 1);
        int int45 = cDMetadata27.getYear();
        java.lang.String str46 = cDMetadata27.getGenre();
        cDMetadata27.setYear((int) (short) 10);
        net.sourceforge.atunes.model.CDMetadata cDMetadata49 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata49.setAlbumArtist("");
        java.lang.String str52 = cDMetadata49.getGenre();
        java.lang.String[] strArray54 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList55 = new java.util.ArrayList<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList55, strArray54);
        cDMetadata49.setTrackNames((java.util.List<java.lang.String>) strList55);
        cDMetadata27.setTrackNames((java.util.List<java.lang.String>) strList55);
        cDMetadata21.setComposerNames((java.util.List<java.lang.String>) strList55);
        cDMetadata18.setArtistNames((java.util.List<java.lang.String>) strList55);
        cDMetadata12.setTrackNames((java.util.List<java.lang.String>) strList55);
        cDMetadata0.setComposerNames((java.util.List<java.lang.String>) strList55);
        java.util.List<java.lang.String> strList63 = cDMetadata0.getComposerNames();
        org.junit.Assert.assertNull(intList3);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/rss/channel/title" + "'", str7, "/rss/channel/title");
        org.junit.Assert.assertNull(strList10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(strList16);
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(strList23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(intList25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(intList31);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(strList63);
    }

    @Test
    public void test1253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1253");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList2 = throwableRankList0.getNFirstElements((int) (short) 10);
        throwableRankList0.clear();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList4 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable5 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException6 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable5);
        java.lang.Throwable[] throwableArray7 = searchQuerySyntaxException6.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException8 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException6);
        java.lang.Throwable throwable9 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException10 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable9);
        java.lang.Throwable[] throwableArray11 = searchQuerySyntaxException10.getSuppressed();
        throwableRankList4.replaceItem((java.lang.Throwable) searchQuerySyntaxException6, (java.lang.Throwable) searchQuerySyntaxException10);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList13 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable14 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException15 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable14);
        java.lang.Throwable[] throwableArray16 = searchQuerySyntaxException15.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException17 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException15);
        java.lang.Throwable throwable18 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException19 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable18);
        java.lang.Throwable[] throwableArray20 = searchQuerySyntaxException19.getSuppressed();
        throwableRankList13.replaceItem((java.lang.Throwable) searchQuerySyntaxException15, (java.lang.Throwable) searchQuerySyntaxException19);
        java.lang.Integer int22 = throwableRankList4.getCount((java.lang.Throwable) searchQuerySyntaxException19);
        throwableRankList0.addItem((java.lang.Throwable) searchQuerySyntaxException19);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException24 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException19);
        org.junit.Assert.assertNotNull(throwableList2);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNull(int22);
    }

    @Test
    public void test1254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1254");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable1 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException2 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable1);
        java.lang.Throwable[] throwableArray3 = searchQuerySyntaxException2.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException4 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException2);
        java.lang.Throwable throwable5 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException6 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable5);
        java.lang.Throwable[] throwableArray7 = searchQuerySyntaxException6.getSuppressed();
        throwableRankList0.replaceItem((java.lang.Throwable) searchQuerySyntaxException2, (java.lang.Throwable) searchQuerySyntaxException6);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException9 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException6);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException10 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException9);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException11 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchIndexNotAvailableException10);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
    }

    @Test
    public void test1255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1255");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        int int12 = applicationVersion9.getMajorNumber();
        int int13 = applicationVersion9.getMinorNumber();
        java.lang.String str14 = applicationVersion9.getChanges();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType19 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion24 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType19, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str25 = applicationVersion24.getDate();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType26 = applicationVersion24.getVersionType();
        java.lang.String str27 = applicationVersion24.getDate();
        int int28 = applicationVersion9.compareTo(applicationVersion24);
        java.lang.String str29 = applicationVersion9.getDirectDownloadURL();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "./title" + "'", str14, "./title");
        org.junit.Assert.assertTrue("'" + versionType19 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType19.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "./title" + "'", str25, "./title");
        org.junit.Assert.assertTrue("'" + versionType26 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType26.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "./title" + "'", str27, "./title");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "./pubDate" + "'", str29, "./pubDate");
    }

    @Test
    public void test1256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1256");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType8 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion13 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType8, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str14 = applicationVersion13.getDate();
        java.lang.String str15 = applicationVersion13.toShortString();
        int int16 = applicationVersion13.getMajorNumber();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType17 = applicationVersion13.getVersionType();
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion22 = new net.sourceforge.atunes.model.ApplicationVersion("hi!", (int) (byte) 10, 97, 0, versionType17, "mp3", "./enclosure/@url", "SOCKS_PROXY", "mp4");
        org.junit.Assert.assertTrue("'" + versionType8 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType8.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "./title" + "'", str14, "./title");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1.0.0 " + "'", str15, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + versionType17 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType17.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
    }

    @Test
    public void test1257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1257");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.lang.String str4 = cDMetadata0.getTitle((int) (byte) -1);
        net.sourceforge.atunes.model.CDMetadata cDMetadata5 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata5.setAlbumArtist("");
        java.lang.String str8 = cDMetadata5.getGenre();
        int int9 = cDMetadata5.getYear();
        int int10 = cDMetadata5.getYear();
        net.sourceforge.atunes.model.CDMetadata cDMetadata11 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str12 = cDMetadata11.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata13 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata13.setAlbumArtist("");
        java.lang.String str16 = cDMetadata13.getGenre();
        java.lang.String[] strArray18 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        cDMetadata13.setTrackNames((java.util.List<java.lang.String>) strList19);
        cDMetadata11.setComposerNames((java.util.List<java.lang.String>) strList19);
        cDMetadata5.setTrackNames((java.util.List<java.lang.String>) strList19);
        net.sourceforge.atunes.model.CDMetadata cDMetadata24 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str25 = cDMetadata24.getGenre();
        java.util.List<java.lang.String> strList26 = cDMetadata24.getComposerNames();
        java.lang.String str27 = cDMetadata24.getAlbum();
        java.util.List<java.lang.Integer> intList28 = cDMetadata24.getTracks();
        int int29 = cDMetadata24.getDisc();
        java.lang.String[] strArray37 = new java.lang.String[] { "net.sourceforge.atunes.model.InconsistentRepositoryException", "./title", "1.0.0 ", "./title", "./duration", "mpc", "net.sourceforge.atunes.model.InconsistentRepositoryException" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        cDMetadata24.setArtistNames((java.util.List<java.lang.String>) strList38);
        cDMetadata5.setArtistNames((java.util.List<java.lang.String>) strList38);
        cDMetadata0.setComposerNames((java.util.List<java.lang.String>) strList38);
        int int43 = cDMetadata0.getYear();
        int int44 = cDMetadata0.getDisc();
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(intList28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    @Test
    public void test1258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1258");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata1 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata1.setAlbumArtist("");
        boolean boolean4 = fontSettings0.equals((java.lang.Object) cDMetadata1);
        fontSettings0.setUseFontSmoothing(true);
        net.sourceforge.atunes.model.IFontBean iFontBean7 = fontSettings0.getFont();
        boolean boolean9 = fontSettings0.equals((java.lang.Object) 150);
        boolean boolean10 = fontSettings0.isUseFontSmoothing();
        boolean boolean11 = fontSettings0.isUseFontSmoothingSettingsFromOs();
        net.sourceforge.atunes.model.CDMetadata cDMetadata12 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str13 = cDMetadata12.getGenre();
        java.util.List<java.lang.String> strList14 = cDMetadata12.getComposerNames();
        java.lang.String str15 = cDMetadata12.getAlbum();
        java.util.List<java.lang.Integer> intList16 = cDMetadata12.getTracks();
        net.sourceforge.atunes.model.CDMetadata cDMetadata17 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata17.setAlbumArtist("");
        java.lang.String str21 = cDMetadata17.getTitle((int) (byte) -1);
        java.lang.String[] strArray23 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        cDMetadata17.setTrackNames((java.util.List<java.lang.String>) strList24);
        cDMetadata12.setTrackNames((java.util.List<java.lang.String>) strList24);
        cDMetadata12.setYear((int) (short) 1);
        int int30 = cDMetadata12.getYear();
        java.lang.String str31 = cDMetadata12.getGenre();
        cDMetadata12.setYear((int) (short) 10);
        boolean boolean34 = fontSettings0.equals((java.lang.Object) cDMetadata12);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(iFontBean7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(intList16);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test1259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1259");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata1 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata1.setAlbumArtist("");
        boolean boolean4 = fontSettings0.equals((java.lang.Object) cDMetadata1);
        fontSettings0.setUseFontSmoothingSettingsFromOs(false);
        boolean boolean7 = fontSettings0.isUseFontSmoothing();
        net.sourceforge.atunes.model.PlaybackState playbackState8 = net.sourceforge.atunes.model.PlaybackState.PLAY_FINISHED;
        boolean boolean9 = fontSettings0.equals((java.lang.Object) playbackState8);
        net.sourceforge.atunes.model.IFontBean iFontBean10 = fontSettings0.getFont();
        net.sourceforge.atunes.model.CDMetadata cDMetadata11 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata11.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList14 = cDMetadata11.getTracks();
        cDMetadata11.setAlbumArtist("/rss/channel/title");
        java.util.List<java.lang.String> strList17 = cDMetadata11.getTrackNames();
        java.lang.String str18 = cDMetadata11.getAlbumArtist();
        cDMetadata11.setYear((-1));
        java.util.List<java.lang.String> strList21 = cDMetadata11.getTrackNames();
        int int22 = cDMetadata11.getYear();
        net.sourceforge.atunes.model.CDMetadata cDMetadata23 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str24 = cDMetadata23.getGenre();
        java.util.List<java.lang.String> strList25 = cDMetadata23.getComposerNames();
        java.lang.String str26 = cDMetadata23.getAlbum();
        java.util.List<java.lang.Integer> intList27 = cDMetadata23.getTracks();
        int int28 = cDMetadata23.getDisc();
        net.sourceforge.atunes.model.CDMetadata cDMetadata29 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str30 = cDMetadata29.getGenre();
        java.util.List<java.lang.String> strList31 = cDMetadata29.getComposerNames();
        java.lang.String str32 = cDMetadata29.getAlbum();
        net.sourceforge.atunes.model.CDMetadata cDMetadata33 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata33.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList36 = cDMetadata33.getTracks();
        cDMetadata33.setAlbumArtist("/rss/channel/title");
        java.util.List<java.lang.String> strList39 = cDMetadata33.getTrackNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata40 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata40.setAlbumArtist("");
        java.lang.String str43 = cDMetadata40.getGenre();
        java.lang.String[] strArray45 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        cDMetadata40.setTrackNames((java.util.List<java.lang.String>) strList46);
        cDMetadata33.setTrackNames((java.util.List<java.lang.String>) strList46);
        cDMetadata29.setTrackNames((java.util.List<java.lang.String>) strList46);
        java.util.List<java.lang.String> strList51 = cDMetadata29.getTrackNames();
        cDMetadata23.setComposerNames(strList51);
        net.sourceforge.atunes.model.CDMetadata cDMetadata53 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata53.setAlbumArtist("");
        java.lang.String str56 = cDMetadata53.getGenre();
        int int57 = cDMetadata53.getYear();
        int int58 = cDMetadata53.getYear();
        net.sourceforge.atunes.model.CDMetadata cDMetadata59 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str60 = cDMetadata59.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata61 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata61.setAlbumArtist("");
        java.lang.String str64 = cDMetadata61.getGenre();
        java.lang.String[] strArray66 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        cDMetadata61.setTrackNames((java.util.List<java.lang.String>) strList67);
        cDMetadata59.setComposerNames((java.util.List<java.lang.String>) strList67);
        cDMetadata53.setTrackNames((java.util.List<java.lang.String>) strList67);
        cDMetadata23.setTrackNames((java.util.List<java.lang.String>) strList67);
        cDMetadata11.setTrackNames((java.util.List<java.lang.String>) strList67);
        boolean boolean74 = fontSettings0.equals((java.lang.Object) cDMetadata11);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + playbackState8 + "' != '" + net.sourceforge.atunes.model.PlaybackState.PLAY_FINISHED + "'", playbackState8.equals(net.sourceforge.atunes.model.PlaybackState.PLAY_FINISHED));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(iFontBean10);
        org.junit.Assert.assertNull(intList14);
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "/rss/channel/title" + "'", str18, "/rss/channel/title");
        org.junit.Assert.assertNull(strList21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(strList25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(intList27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(strList31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(intList36);
        org.junit.Assert.assertNull(strList39);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test1260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1260");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.lang.String str3 = cDMetadata0.getAlbum();
        java.util.List<java.lang.Integer> intList4 = cDMetadata0.getTracks();
        int int5 = cDMetadata0.getYear();
        java.util.List<java.lang.String> strList6 = cDMetadata0.getArtistNames();
        cDMetadata0.setDisc((int) (short) 100);
        net.sourceforge.atunes.model.CDMetadata cDMetadata9 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata9.setAlbumArtist("");
        java.lang.String str12 = cDMetadata9.getGenre();
        java.lang.String[] strArray14 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        cDMetadata9.setTrackNames((java.util.List<java.lang.String>) strList15);
        cDMetadata0.setArtistNames((java.util.List<java.lang.String>) strList15);
        java.util.List<java.lang.String> strList19 = cDMetadata0.getArtistNames();
        java.util.List<java.lang.String> strList20 = cDMetadata0.getTrackNames();
        java.util.List<java.lang.String> strList21 = cDMetadata0.getArtistNames();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str23 = cDMetadata0.getArtist(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index -1 out of bounds for length 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(intList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNull(strList20);
        org.junit.Assert.assertNotNull(strList21);
    }

    @Test
    public void test1261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1261");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        int int1 = cDMetadata0.getYear();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.util.List<java.lang.Integer> intList3 = cDMetadata0.getTracks();
        cDMetadata0.setDisc((int) (short) 0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(intList3);
    }

    @Test
    public void test1262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1262");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        columnBean0.setVisible(false);
        net.sourceforge.atunes.model.ColumnSort columnSort6 = columnBean0.getSort();
        net.sourceforge.atunes.model.ColumnSort columnSort7 = columnBean0.getSort();
        columnBean0.setOrder((int) (byte) -1);
        int int10 = columnBean0.getWidth();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(columnSort6);
        org.junit.Assert.assertNull(columnSort7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test1263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1263");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList3 = cDMetadata0.getTracks();
        cDMetadata0.setAlbumArtist("/rss/channel/title");
        java.util.List<java.lang.String> strList6 = cDMetadata0.getTrackNames();
        cDMetadata0.setGenre("");
        cDMetadata0.setYear((int) ' ');
        java.lang.String str11 = cDMetadata0.getAlbum();
        java.util.List<java.lang.String> strList12 = cDMetadata0.getComposerNames();
        java.lang.String str13 = cDMetadata0.getAlbumArtist();
        org.junit.Assert.assertNull(intList3);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(strList12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "/rss/channel/title" + "'", str13, "/rss/channel/title");
    }

    @Test
    public void test1264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1264");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str1 = feedType0.getEntryXPath();
        java.lang.String str2 = feedType0.getAuthorXPath();
        java.lang.String str3 = feedType0.getTitleXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "/rss/channel/item" + "'", str1, "/rss/channel/item");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "./author" + "'", str2, "./author");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "./title" + "'", str3, "./title");
    }

    @Test
    public void test1265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1265");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList2 = throwableRankList0.getNFirstElements((int) (short) 10);
        throwableRankList0.clear();
        java.util.List<java.lang.Integer> intList5 = throwableRankList0.getNFirstElementCounts(0);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList6 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList8 = throwableRankList6.getNFirstElements((int) (short) 10);
        int int9 = throwableRankList6.size();
        int int10 = throwableRankList6.size();
        java.lang.Throwable throwable11 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException12 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable11);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList13 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable14 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException15 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable14);
        java.lang.Throwable[] throwableArray16 = searchQuerySyntaxException15.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException17 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException15);
        java.lang.Throwable throwable18 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException19 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable18);
        java.lang.Throwable[] throwableArray20 = searchQuerySyntaxException19.getSuppressed();
        throwableRankList13.replaceItem((java.lang.Throwable) searchQuerySyntaxException15, (java.lang.Throwable) searchQuerySyntaxException19);
        searchQuerySyntaxException12.addSuppressed((java.lang.Throwable) searchQuerySyntaxException19);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException23 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException12);
        java.lang.Integer int24 = throwableRankList6.getCount((java.lang.Throwable) searchQuerySyntaxException12);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList25 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList27 = throwableRankList25.getNFirstElements((int) (short) 100);
        java.lang.Throwable throwable28 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException29 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable28);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList30 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable31 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException32 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable31);
        java.lang.Throwable[] throwableArray33 = searchQuerySyntaxException32.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException34 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException32);
        java.lang.Throwable throwable35 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException36 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable35);
        java.lang.Throwable[] throwableArray37 = searchQuerySyntaxException36.getSuppressed();
        throwableRankList30.replaceItem((java.lang.Throwable) searchQuerySyntaxException32, (java.lang.Throwable) searchQuerySyntaxException36);
        searchQuerySyntaxException29.addSuppressed((java.lang.Throwable) searchQuerySyntaxException36);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException40 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException29);
        java.lang.Throwable throwable41 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException42 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable41);
        java.lang.Throwable[] throwableArray43 = searchQuerySyntaxException42.getSuppressed();
        searchQuerySyntaxException29.addSuppressed((java.lang.Throwable) searchQuerySyntaxException42);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException45 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException29);
        java.lang.Throwable throwable46 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException47 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable46);
        java.lang.Throwable[] throwableArray48 = searchQuerySyntaxException47.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException49 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException47);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException50 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException47);
        throwableRankList25.replaceItem((java.lang.Throwable) searchQuerySyntaxException29, (java.lang.Throwable) searchQuerySyntaxException50);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList52 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        net.sourceforge.atunes.model.InconsistentRepositoryException inconsistentRepositoryException53 = new net.sourceforge.atunes.model.InconsistentRepositoryException();
        net.sourceforge.atunes.model.InconsistentRepositoryException inconsistentRepositoryException54 = new net.sourceforge.atunes.model.InconsistentRepositoryException();
        throwableRankList52.replaceItem((java.lang.Throwable) inconsistentRepositoryException53, (java.lang.Throwable) inconsistentRepositoryException54);
        java.lang.Throwable throwable56 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException57 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable56);
        java.lang.Throwable[] throwableArray58 = searchQuerySyntaxException57.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException59 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException57);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException60 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException57);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList61 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable62 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException63 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable62);
        java.lang.Throwable[] throwableArray64 = searchQuerySyntaxException63.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException65 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException63);
        java.lang.Throwable throwable66 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException67 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable66);
        java.lang.Throwable[] throwableArray68 = searchQuerySyntaxException67.getSuppressed();
        throwableRankList61.replaceItem((java.lang.Throwable) searchQuerySyntaxException63, (java.lang.Throwable) searchQuerySyntaxException67);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException70 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException67);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException71 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException70);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException72 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchIndexNotAvailableException71);
        searchQuerySyntaxException60.addSuppressed((java.lang.Throwable) searchIndexNotAvailableException72);
        throwableRankList52.addItem((java.lang.Throwable) searchQuerySyntaxException60);
        throwableRankList6.replaceItem((java.lang.Throwable) searchQuerySyntaxException50, (java.lang.Throwable) searchQuerySyntaxException60);
        throwableRankList0.addItem((java.lang.Throwable) searchQuerySyntaxException50);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException77 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException50);
        org.junit.Assert.assertNotNull(throwableList2);
        org.junit.Assert.assertNotNull(intList5);
        org.junit.Assert.assertNotNull(throwableList8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNotNull(throwableList27);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray68);
    }

    @Test
    public void test1266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1266");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        fontSettings0.setUseFontSmoothing(false);
        fontSettings0.setUseFontSmoothing(false);
        net.sourceforge.atunes.model.IFontBean iFontBean5 = null;
        fontSettings0.setFont(iFontBean5);
        net.sourceforge.atunes.model.IFontBean iFontBean7 = fontSettings0.getFont();
        boolean boolean8 = fontSettings0.isUseFontSmoothingSettingsFromOs();
        net.sourceforge.atunes.model.CDMetadata cDMetadata9 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata9.setAlbumArtist("");
        java.lang.String str12 = cDMetadata9.getGenre();
        int int13 = cDMetadata9.getYear();
        int int14 = cDMetadata9.getYear();
        cDMetadata9.setGenre("./enclosure/@url");
        net.sourceforge.atunes.model.CDMetadata cDMetadata17 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata17.setAlbumArtist("");
        java.lang.String str20 = cDMetadata17.getGenre();
        int int21 = cDMetadata17.getYear();
        int int22 = cDMetadata17.getYear();
        net.sourceforge.atunes.model.CDMetadata cDMetadata23 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str24 = cDMetadata23.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata25 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata25.setAlbumArtist("");
        java.lang.String str28 = cDMetadata25.getGenre();
        java.lang.String[] strArray30 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        cDMetadata25.setTrackNames((java.util.List<java.lang.String>) strList31);
        cDMetadata23.setComposerNames((java.util.List<java.lang.String>) strList31);
        cDMetadata17.setTrackNames((java.util.List<java.lang.String>) strList31);
        net.sourceforge.atunes.model.CDMetadata cDMetadata36 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str37 = cDMetadata36.getGenre();
        java.util.List<java.lang.String> strList38 = cDMetadata36.getComposerNames();
        java.lang.String str39 = cDMetadata36.getAlbum();
        java.util.List<java.lang.Integer> intList40 = cDMetadata36.getTracks();
        int int41 = cDMetadata36.getDisc();
        java.lang.String[] strArray49 = new java.lang.String[] { "net.sourceforge.atunes.model.InconsistentRepositoryException", "./title", "1.0.0 ", "./title", "./duration", "mpc", "net.sourceforge.atunes.model.InconsistentRepositoryException" };
        java.util.ArrayList<java.lang.String> strList50 = new java.util.ArrayList<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList50, strArray49);
        cDMetadata36.setArtistNames((java.util.List<java.lang.String>) strList50);
        cDMetadata17.setArtistNames((java.util.List<java.lang.String>) strList50);
        net.sourceforge.atunes.model.CDMetadata cDMetadata54 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata54.setAlbumArtist("");
        java.lang.String str57 = cDMetadata54.getGenre();
        java.lang.String[] strArray59 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList60 = new java.util.ArrayList<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList60, strArray59);
        cDMetadata54.setTrackNames((java.util.List<java.lang.String>) strList60);
        cDMetadata17.setTrackNames((java.util.List<java.lang.String>) strList60);
        cDMetadata9.setComposerNames((java.util.List<java.lang.String>) strList60);
        net.sourceforge.atunes.model.CDMetadata cDMetadata65 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str66 = cDMetadata65.getGenre();
        java.util.List<java.lang.String> strList67 = cDMetadata65.getComposerNames();
        java.lang.String str68 = cDMetadata65.getAlbum();
        java.util.List<java.lang.Integer> intList69 = cDMetadata65.getTracks();
        int int70 = cDMetadata65.getYear();
        java.util.List<java.lang.String> strList71 = cDMetadata65.getArtistNames();
        cDMetadata65.setDisc((int) (short) 100);
        net.sourceforge.atunes.model.CDMetadata cDMetadata74 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata74.setAlbumArtist("");
        java.lang.String str77 = cDMetadata74.getGenre();
        java.lang.String[] strArray79 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList80 = new java.util.ArrayList<java.lang.String>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList80, strArray79);
        cDMetadata74.setTrackNames((java.util.List<java.lang.String>) strList80);
        cDMetadata65.setArtistNames((java.util.List<java.lang.String>) strList80);
        cDMetadata9.setComposerNames((java.util.List<java.lang.String>) strList80);
        boolean boolean85 = fontSettings0.equals((java.lang.Object) cDMetadata9);
        java.util.List<java.lang.String> strList86 = cDMetadata9.getComposerNames();
        java.lang.String str88 = cDMetadata9.getComposer(100);
        org.junit.Assert.assertNull(iFontBean7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(strList38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(intList40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNull(strList67);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNull(intList69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNull(strList71);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(strList86);
        org.junit.Assert.assertNull(str88);
    }

    @Test
    public void test1267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1267");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata1 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata1.setAlbumArtist("");
        boolean boolean4 = fontSettings0.equals((java.lang.Object) cDMetadata1);
        fontSettings0.setUseFontSmoothing(true);
        net.sourceforge.atunes.model.IFontBean iFontBean7 = fontSettings0.getFont();
        fontSettings0.setUseFontSmoothing(false);
        fontSettings0.setUseFontSmoothingSettingsFromOs(true);
        boolean boolean12 = fontSettings0.isUseFontSmoothing();
        boolean boolean13 = fontSettings0.isUseFontSmoothing();
        boolean boolean14 = fontSettings0.isUseFontSmoothing();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(iFontBean7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1268");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.lang.String str3 = cDMetadata0.getAlbum();
        java.util.List<java.lang.Integer> intList4 = cDMetadata0.getTracks();
        net.sourceforge.atunes.model.CDMetadata cDMetadata5 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata5.setAlbumArtist("");
        java.lang.String str9 = cDMetadata5.getTitle((int) (byte) -1);
        java.lang.String[] strArray11 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        cDMetadata5.setTrackNames((java.util.List<java.lang.String>) strList12);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList12);
        cDMetadata0.setYear((int) (short) 1);
        int int18 = cDMetadata0.getYear();
        java.lang.String str19 = cDMetadata0.getAlbum();
        java.lang.String str20 = cDMetadata0.getAlbumArtist();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(intList4);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test1269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1269");
        net.sourceforge.atunes.model.LookAndFeelBean lookAndFeelBean0 = new net.sourceforge.atunes.model.LookAndFeelBean();
        lookAndFeelBean0.setName("HTTP_PROXY");
        java.lang.String str3 = lookAndFeelBean0.getName();
        lookAndFeelBean0.setSkin("net.sourceforge.atunes.model.SearchIndexNotAvailableException: net.sourceforge.atunes.model.SearchQuerySyntaxException: net.sourceforge.atunes.model.SearchQuerySyntaxException");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "HTTP_PROXY" + "'", str3, "HTTP_PROXY");
    }

    @Test
    public void test1270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1270");
        net.sourceforge.atunes.model.LookAndFeelBean lookAndFeelBean0 = new net.sourceforge.atunes.model.LookAndFeelBean();
        lookAndFeelBean0.setName("./summary");
        lookAndFeelBean0.setName("net.sourceforge.atunes.model.SearchQuerySyntaxException");
        lookAndFeelBean0.setSkin("net.sourceforge.atunes.model.SearchQuerySyntaxException: net.sourceforge.atunes.model.SearchQuerySyntaxException");
        java.lang.String str7 = lookAndFeelBean0.getName();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "net.sourceforge.atunes.model.SearchQuerySyntaxException" + "'", str7, "net.sourceforge.atunes.model.SearchQuerySyntaxException");
    }

    @Test
    public void test1271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1271");
        net.sourceforge.atunes.model.ColumnBean columnBean4 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean5 = columnBean4.isVisible();
        columnBean4.setOrder((int) (byte) -1);
        columnBean4.setVisible(false);
        columnBean4.setWidth(0);
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType16 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion21 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType16, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str22 = applicationVersion21.getDate();
        java.lang.String str23 = applicationVersion21.toShortString();
        java.lang.String str24 = applicationVersion21.getChanges();
        boolean boolean25 = columnBean4.equals((java.lang.Object) applicationVersion21);
        java.lang.String str26 = applicationVersion21.getDownloadURL();
        java.lang.String str27 = applicationVersion21.getChanges();
        java.lang.String str28 = applicationVersion21.getDownloadURL();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType29 = applicationVersion21.getVersionType();
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion34 = new net.sourceforge.atunes.model.ApplicationVersion("/rss/channel/item", (int) (short) 10, 1, (int) (byte) 1, versionType29, "./updated", "mp4", "1.0.0 mpc ", "rm");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType39 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion44 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType39, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str45 = applicationVersion44.getDate();
        java.lang.String str46 = applicationVersion44.toShortString();
        java.lang.String str47 = applicationVersion44.toShortString();
        java.lang.String str48 = applicationVersion44.getDownloadURL();
        int int49 = applicationVersion44.getMinorNumber();
        java.lang.String str50 = applicationVersion44.getDate();
        int int51 = applicationVersion34.compareTo(applicationVersion44);
        int int52 = applicationVersion44.getRevisionNumber();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + versionType16 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType16.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "./title" + "'", str22, "./title");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1.0.0 " + "'", str23, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "./title" + "'", str24, "./title");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "./description" + "'", str26, "./description");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "./title" + "'", str27, "./title");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "./description" + "'", str28, "./description");
        org.junit.Assert.assertTrue("'" + versionType29 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType29.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertTrue("'" + versionType39 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType39.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "./title" + "'", str45, "./title");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1.0.0 " + "'", str46, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1.0.0 " + "'", str47, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "./description" + "'", str48, "./description");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "./title" + "'", str50, "./title");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
    }

    @Test
    public void test1272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1272");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList3 = cDMetadata0.getTracks();
        cDMetadata0.setAlbumArtist("/rss/channel/title");
        java.util.List<java.lang.String> strList6 = cDMetadata0.getTrackNames();
        java.util.List<java.lang.String> strList7 = null;
        cDMetadata0.setComposerNames(strList7);
        java.lang.String str10 = cDMetadata0.getTitle(150);
        org.junit.Assert.assertNull(intList3);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test1273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1273");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType10 = applicationVersion9.getVersionType();
        java.lang.String str11 = applicationVersion9.getName();
        java.lang.String str12 = applicationVersion9.toShortString();
        java.lang.String str13 = applicationVersion9.getDownloadURL();
        int int14 = applicationVersion9.getMajorNumber();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertTrue("'" + versionType10 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType10.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mpc" + "'", str11, "mpc");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1.0.0 " + "'", str12, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "./description" + "'", str13, "./description");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test1274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1274");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.lang.String str3 = cDMetadata0.getGenre();
        java.lang.String[] strArray5 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList6);
        java.lang.String str10 = cDMetadata0.getTitle((int) (byte) 100);
        cDMetadata0.setYear((int) '4');
        java.util.List<java.lang.String> strList13 = cDMetadata0.getComposerNames();
        int int14 = cDMetadata0.getDisc();
        java.util.List<java.lang.String> strList15 = cDMetadata0.getTrackNames();
        java.util.List<java.lang.String> strList16 = cDMetadata0.getArtistNames();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(strList13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNull(strList16);
    }

    @Test
    public void test1275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1275");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        columnBean0.setVisible(false);
        net.sourceforge.atunes.model.ColumnSort columnSort6 = columnBean0.getSort();
        int int7 = columnBean0.getWidth();
        boolean boolean8 = columnBean0.isVisible();
        boolean boolean9 = columnBean0.isVisible();
        net.sourceforge.atunes.model.ColumnSort columnSort10 = null;
        columnBean0.setSort(columnSort10);
        columnBean0.setOrder((int) (short) 100);
        columnBean0.setWidth((int) (short) 100);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(columnSort6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1276");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable1 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException2 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable1);
        java.lang.Throwable[] throwableArray3 = searchQuerySyntaxException2.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException4 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException2);
        java.lang.Throwable throwable5 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException6 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable5);
        java.lang.Throwable[] throwableArray7 = searchQuerySyntaxException6.getSuppressed();
        throwableRankList0.replaceItem((java.lang.Throwable) searchQuerySyntaxException2, (java.lang.Throwable) searchQuerySyntaxException6);
        throwableRankList0.clear();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList10 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        net.sourceforge.atunes.model.InconsistentRepositoryException inconsistentRepositoryException11 = new net.sourceforge.atunes.model.InconsistentRepositoryException();
        net.sourceforge.atunes.model.InconsistentRepositoryException inconsistentRepositoryException12 = new net.sourceforge.atunes.model.InconsistentRepositoryException();
        throwableRankList10.replaceItem((java.lang.Throwable) inconsistentRepositoryException11, (java.lang.Throwable) inconsistentRepositoryException12);
        int int14 = throwableRankList10.size();
        java.lang.Throwable throwable15 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException16 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable15);
        java.lang.Throwable[] throwableArray17 = searchQuerySyntaxException16.getSuppressed();
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException18 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException16);
        throwableRankList10.addItem((java.lang.Throwable) searchQuerySyntaxException16);
        java.lang.Throwable throwable20 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException21 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable20);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList22 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable23 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException24 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable23);
        java.lang.Throwable[] throwableArray25 = searchQuerySyntaxException24.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException26 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException24);
        java.lang.Throwable throwable27 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException28 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable27);
        java.lang.Throwable[] throwableArray29 = searchQuerySyntaxException28.getSuppressed();
        throwableRankList22.replaceItem((java.lang.Throwable) searchQuerySyntaxException24, (java.lang.Throwable) searchQuerySyntaxException28);
        searchQuerySyntaxException21.addSuppressed((java.lang.Throwable) searchQuerySyntaxException28);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException32 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException21);
        java.lang.Throwable throwable33 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException34 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable33);
        java.lang.Throwable[] throwableArray35 = searchQuerySyntaxException34.getSuppressed();
        searchQuerySyntaxException21.addSuppressed((java.lang.Throwable) searchQuerySyntaxException34);
        java.lang.Integer int37 = throwableRankList10.getCount((java.lang.Throwable) searchQuerySyntaxException21);
        throwableRankList0.addItem((java.lang.Throwable) searchQuerySyntaxException21);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNull(int37);
    }

    @Test
    public void test1277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1277");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata2 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata2.setAlbumArtist("");
        java.lang.String str5 = cDMetadata2.getGenre();
        java.lang.String[] strArray7 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        cDMetadata2.setTrackNames((java.util.List<java.lang.String>) strList8);
        cDMetadata0.setComposerNames((java.util.List<java.lang.String>) strList8);
        java.lang.String str12 = cDMetadata0.getAlbum();
        cDMetadata0.setAlbum("./duration");
        java.lang.String str16 = cDMetadata0.getTitle(10);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList17 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable18 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException19 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable18);
        java.lang.Throwable[] throwableArray20 = searchQuerySyntaxException19.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException21 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException19);
        java.lang.Throwable throwable22 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException23 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable22);
        java.lang.Throwable[] throwableArray24 = searchQuerySyntaxException23.getSuppressed();
        throwableRankList17.replaceItem((java.lang.Throwable) searchQuerySyntaxException19, (java.lang.Throwable) searchQuerySyntaxException23);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList26 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable27 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException28 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable27);
        java.lang.Throwable[] throwableArray29 = searchQuerySyntaxException28.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException30 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException28);
        java.lang.Throwable throwable31 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException32 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable31);
        java.lang.Throwable[] throwableArray33 = searchQuerySyntaxException32.getSuppressed();
        throwableRankList26.replaceItem((java.lang.Throwable) searchQuerySyntaxException28, (java.lang.Throwable) searchQuerySyntaxException32);
        java.lang.Integer int35 = throwableRankList17.getCount((java.lang.Throwable) searchQuerySyntaxException32);
        java.lang.Throwable throwable36 = null;
        java.lang.Throwable throwable37 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException38 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable37);
        throwableRankList17.replaceItem(throwable36, (java.lang.Throwable) searchQuerySyntaxException38);
        java.util.List<java.lang.Integer> intList41 = throwableRankList17.getNFirstElementCounts((int) (byte) 1);
        int int42 = throwableRankList17.size();
        java.util.List<java.lang.Integer> intList44 = throwableRankList17.getNFirstElementCounts((int) (short) 10);
        cDMetadata0.setTracks(intList44);
        java.lang.String str47 = cDMetadata0.getComposer(2);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNull(int35);
        org.junit.Assert.assertNotNull(intList41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intList44);
        org.junit.Assert.assertNull(str47);
    }

    @Test
    public void test1278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1278");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        java.lang.String str12 = applicationVersion9.toShortString();
        java.lang.String str13 = applicationVersion9.getDownloadURL();
        int int14 = applicationVersion9.getMajorNumber();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType19 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion24 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType19, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str25 = applicationVersion24.getDate();
        java.lang.String str26 = applicationVersion24.toShortString();
        java.lang.String str27 = applicationVersion24.getChanges();
        int int28 = applicationVersion24.getMinorNumber();
        int int29 = applicationVersion24.getRevisionNumber();
        int int30 = applicationVersion24.getRevisionNumber();
        net.sourceforge.atunes.model.FontSettings fontSettings31 = new net.sourceforge.atunes.model.FontSettings();
        fontSettings31.setUseFontSmoothing(false);
        net.sourceforge.atunes.model.IFontBean iFontBean34 = fontSettings31.getFont();
        boolean boolean35 = fontSettings31.isUseFontSmoothing();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList36 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList38 = throwableRankList36.getNFirstElements((int) (short) 10);
        int int39 = throwableRankList36.size();
        java.util.List<java.lang.Integer> intList41 = throwableRankList36.getNFirstElementCounts((int) (short) 100);
        boolean boolean42 = fontSettings31.equals((java.lang.Object) intList41);
        boolean boolean43 = fontSettings31.isUseFontSmoothing();
        boolean boolean44 = applicationVersion24.equals((java.lang.Object) fontSettings31);
        int int45 = applicationVersion9.compareTo(applicationVersion24);
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1.0.0 " + "'", str12, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "./description" + "'", str13, "./description");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + versionType19 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType19.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "./title" + "'", str25, "./title");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1.0.0 " + "'", str26, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "./title" + "'", str27, "./title");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNull(iFontBean34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(throwableList38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intList41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test1279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1279");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        int int12 = applicationVersion9.getMajorNumber();
        int int13 = applicationVersion9.getMinorNumber();
        java.lang.String str14 = applicationVersion9.getName();
        java.lang.String str15 = applicationVersion9.toShortString();
        java.lang.String str16 = applicationVersion9.getDirectDownloadURL();
        java.lang.String str17 = applicationVersion9.toShortString();
        java.lang.String str18 = applicationVersion9.getName();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType23 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion28 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType23, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str29 = applicationVersion28.getDate();
        java.lang.String str30 = applicationVersion28.toShortString();
        int int31 = applicationVersion28.getMajorNumber();
        java.lang.String str32 = applicationVersion28.toShortString();
        net.sourceforge.atunes.model.ArtistViewMode artistViewMode33 = net.sourceforge.atunes.model.ArtistViewMode.BOTH;
        boolean boolean34 = applicationVersion28.equals((java.lang.Object) artistViewMode33);
        int int35 = applicationVersion28.getMajorNumber();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType40 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion45 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType40, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str46 = applicationVersion45.getDate();
        java.lang.String str47 = applicationVersion45.toShortString();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType48 = applicationVersion45.getVersionType();
        int int49 = applicationVersion45.getMinorNumber();
        int int50 = applicationVersion28.compareTo(applicationVersion45);
        int int51 = applicationVersion9.compareTo(applicationVersion45);
        net.sourceforge.atunes.model.ColumnBean columnBean52 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean53 = columnBean52.isVisible();
        net.sourceforge.atunes.model.ColumnBean columnBean54 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean55 = columnBean54.isVisible();
        columnBean54.setOrder((int) (byte) -1);
        net.sourceforge.atunes.model.ColumnSort columnSort58 = net.sourceforge.atunes.model.ColumnSort.DESCENDING;
        columnBean54.setSort(columnSort58);
        net.sourceforge.atunes.model.ColumnBean columnBean60 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean61 = columnBean60.isVisible();
        net.sourceforge.atunes.model.SubmissionState submissionState62 = net.sourceforge.atunes.model.SubmissionState.PENDING;
        boolean boolean63 = columnBean60.equals((java.lang.Object) submissionState62);
        columnBean60.setVisible(false);
        net.sourceforge.atunes.model.ColumnSort columnSort66 = net.sourceforge.atunes.model.ColumnSort.ASCENDING;
        columnBean60.setSort(columnSort66);
        columnBean54.setSort(columnSort66);
        columnBean52.setSort(columnSort66);
        columnBean52.setWidth((-1));
        boolean boolean72 = applicationVersion45.equals((java.lang.Object) (-1));
        net.sourceforge.atunes.model.FontSettings fontSettings73 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata74 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata74.setAlbumArtist("");
        boolean boolean77 = fontSettings73.equals((java.lang.Object) cDMetadata74);
        java.lang.String str78 = cDMetadata74.getAlbum();
        boolean boolean79 = applicationVersion45.equals((java.lang.Object) cDMetadata74);
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "mpc" + "'", str14, "mpc");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1.0.0 " + "'", str15, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "./pubDate" + "'", str16, "./pubDate");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1.0.0 " + "'", str17, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "mpc" + "'", str18, "mpc");
        org.junit.Assert.assertTrue("'" + versionType23 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType23.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "./title" + "'", str29, "./title");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1.0.0 " + "'", str30, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1.0.0 " + "'", str32, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + artistViewMode33 + "' != '" + net.sourceforge.atunes.model.ArtistViewMode.BOTH + "'", artistViewMode33.equals(net.sourceforge.atunes.model.ArtistViewMode.BOTH));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + versionType40 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType40.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "./title" + "'", str46, "./title");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1.0.0 " + "'", str47, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + versionType48 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType48.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + columnSort58 + "' != '" + net.sourceforge.atunes.model.ColumnSort.DESCENDING + "'", columnSort58.equals(net.sourceforge.atunes.model.ColumnSort.DESCENDING));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + submissionState62 + "' != '" + net.sourceforge.atunes.model.SubmissionState.PENDING + "'", submissionState62.equals(net.sourceforge.atunes.model.SubmissionState.PENDING));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + columnSort66 + "' != '" + net.sourceforge.atunes.model.ColumnSort.ASCENDING + "'", columnSort66.equals(net.sourceforge.atunes.model.ColumnSort.ASCENDING));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test1280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1280");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata1 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata1.setAlbumArtist("");
        boolean boolean4 = fontSettings0.equals((java.lang.Object) cDMetadata1);
        java.lang.String str5 = cDMetadata1.getGenre();
        cDMetadata1.setAlbum("net.sourceforge.atunes.model.SearchQuerySyntaxException");
        java.lang.String str9 = cDMetadata1.getTitle((int) (short) 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test1281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1281");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str1 = feedType0.getUrlXPath();
        java.lang.String str2 = feedType0.getDescriptionXPath();
        java.lang.String str3 = feedType0.getTypeXPath();
        java.lang.String str4 = feedType0.getAuthorXPath();
        java.lang.String str5 = feedType0.getDateXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "./enclosure/@url" + "'", str1, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "./description" + "'", str2, "./description");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "./enclosure/@type" + "'", str3, "./enclosure/@type");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "./author" + "'", str4, "./author");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "./pubDate" + "'", str5, "./pubDate");
    }

    @Test
    public void test1282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1282");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata1 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata1.setAlbumArtist("");
        boolean boolean4 = fontSettings0.equals((java.lang.Object) cDMetadata1);
        net.sourceforge.atunes.model.FeedType feedType5 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str6 = feedType5.getUrlXPath();
        java.lang.String str7 = feedType5.getNameXPath();
        java.lang.String str8 = feedType5.getDescriptionXPath();
        boolean boolean9 = fontSettings0.equals((java.lang.Object) str8);
        boolean boolean10 = fontSettings0.isUseFontSmoothing();
        net.sourceforge.atunes.model.IFontBean iFontBean11 = fontSettings0.getFont();
        fontSettings0.setUseFontSmoothing(true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + feedType5 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType5.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "./enclosure/@url" + "'", str6, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/rss/channel/title" + "'", str7, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "./description" + "'", str8, "./description");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(iFontBean11);
    }

    @Test
    public void test1283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1283");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.lang.String str3 = cDMetadata0.getAlbum();
        cDMetadata0.setAlbumArtist("./description");
        cDMetadata0.setAlbumArtist("./description");
        java.util.List<java.lang.String> strList8 = cDMetadata0.getTrackNames();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(strList8);
    }

    @Test
    public void test1284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1284");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str1 = feedType0.getDescriptionXPath();
        java.lang.String str2 = feedType0.getNameXPath();
        java.lang.String str3 = feedType0.getAuthorXPath();
        java.lang.String str4 = feedType0.getUrlXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "./description" + "'", str1, "./description");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "/rss/channel/title" + "'", str2, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "./author" + "'", str3, "./author");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "./enclosure/@url" + "'", str4, "./enclosure/@url");
    }

    @Test
    public void test1285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1285");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType11 = applicationVersion9.getVersionType();
        java.lang.String str12 = applicationVersion9.getChanges();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType17 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion22 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType17, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str23 = applicationVersion22.getDate();
        java.lang.String str24 = applicationVersion22.toShortString();
        int int25 = applicationVersion22.getMajorNumber();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType26 = applicationVersion22.getVersionType();
        java.lang.String str27 = applicationVersion22.toShortString();
        boolean boolean28 = applicationVersion9.equals((java.lang.Object) applicationVersion22);
        net.sourceforge.atunes.model.ColumnBean columnBean33 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean34 = columnBean33.isVisible();
        columnBean33.setOrder((int) (byte) -1);
        columnBean33.setVisible(false);
        columnBean33.setWidth(0);
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType45 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion50 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType45, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str51 = applicationVersion50.getDate();
        java.lang.String str52 = applicationVersion50.toShortString();
        java.lang.String str53 = applicationVersion50.getChanges();
        boolean boolean54 = columnBean33.equals((java.lang.Object) applicationVersion50);
        java.lang.String str55 = applicationVersion50.getDownloadURL();
        java.lang.String str56 = applicationVersion50.getChanges();
        java.lang.String str57 = applicationVersion50.getDownloadURL();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType58 = applicationVersion50.getVersionType();
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion63 = new net.sourceforge.atunes.model.ApplicationVersion("/rss/channel/item", (int) (short) 10, 1, (int) (byte) 1, versionType58, "./updated", "mp4", "1.0.0 mpc ", "rm");
        java.lang.String str64 = applicationVersion63.toShortString();
        net.sourceforge.atunes.model.ColumnBean columnBean65 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean66 = columnBean65.isVisible();
        columnBean65.setOrder((int) (byte) -1);
        columnBean65.setVisible(false);
        columnBean65.setWidth(0);
        net.sourceforge.atunes.model.ColumnSort columnSort73 = columnBean65.getSort();
        net.sourceforge.atunes.model.ColumnSort columnSort74 = columnBean65.getSort();
        columnBean65.setOrder((int) (short) 100);
        columnBean65.setOrder((int) (byte) -1);
        boolean boolean79 = columnBean65.isVisible();
        boolean boolean80 = columnBean65.isVisible();
        net.sourceforge.atunes.model.ColumnSort columnSort81 = columnBean65.getSort();
        int int82 = columnBean65.getWidth();
        boolean boolean83 = applicationVersion63.equals((java.lang.Object) int82);
        int int84 = applicationVersion9.compareTo(applicationVersion63);
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertTrue("'" + versionType11 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType11.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "./title" + "'", str12, "./title");
        org.junit.Assert.assertTrue("'" + versionType17 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType17.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "./title" + "'", str23, "./title");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1.0.0 " + "'", str24, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + versionType26 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType26.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1.0.0 " + "'", str27, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + versionType45 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType45.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "./title" + "'", str51, "./title");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "1.0.0 " + "'", str52, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "./title" + "'", str53, "./title");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "./description" + "'", str55, "./description");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "./title" + "'", str56, "./title");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "./description" + "'", str57, "./description");
        org.junit.Assert.assertTrue("'" + versionType58 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType58.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "10.1.1 " + "'", str64, "10.1.1 ");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(columnSort73);
        org.junit.Assert.assertNull(columnSort74);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(columnSort81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
    }

    @Test
    public void test1286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1286");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.lang.String str4 = cDMetadata0.getTitle((int) (byte) -1);
        net.sourceforge.atunes.model.CDMetadata cDMetadata5 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata5.setAlbumArtist("");
        java.lang.String str8 = cDMetadata5.getGenre();
        int int9 = cDMetadata5.getYear();
        int int10 = cDMetadata5.getYear();
        net.sourceforge.atunes.model.CDMetadata cDMetadata11 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str12 = cDMetadata11.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata13 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata13.setAlbumArtist("");
        java.lang.String str16 = cDMetadata13.getGenre();
        java.lang.String[] strArray18 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        cDMetadata13.setTrackNames((java.util.List<java.lang.String>) strList19);
        cDMetadata11.setComposerNames((java.util.List<java.lang.String>) strList19);
        cDMetadata5.setTrackNames((java.util.List<java.lang.String>) strList19);
        net.sourceforge.atunes.model.CDMetadata cDMetadata24 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str25 = cDMetadata24.getGenre();
        java.util.List<java.lang.String> strList26 = cDMetadata24.getComposerNames();
        java.lang.String str27 = cDMetadata24.getAlbum();
        java.util.List<java.lang.Integer> intList28 = cDMetadata24.getTracks();
        int int29 = cDMetadata24.getDisc();
        java.lang.String[] strArray37 = new java.lang.String[] { "net.sourceforge.atunes.model.InconsistentRepositoryException", "./title", "1.0.0 ", "./title", "./duration", "mpc", "net.sourceforge.atunes.model.InconsistentRepositoryException" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        cDMetadata24.setArtistNames((java.util.List<java.lang.String>) strList38);
        cDMetadata5.setArtistNames((java.util.List<java.lang.String>) strList38);
        cDMetadata0.setComposerNames((java.util.List<java.lang.String>) strList38);
        cDMetadata0.setDisc((int) (byte) 1);
        net.sourceforge.atunes.model.CDMetadata cDMetadata45 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str46 = cDMetadata45.getGenre();
        java.util.List<java.lang.String> strList47 = cDMetadata45.getComposerNames();
        java.lang.String str48 = cDMetadata45.getAlbum();
        java.util.List<java.lang.Integer> intList49 = cDMetadata45.getTracks();
        net.sourceforge.atunes.model.CDMetadata cDMetadata50 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata50.setAlbumArtist("");
        java.lang.String str54 = cDMetadata50.getTitle((int) (byte) -1);
        java.lang.String[] strArray56 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        cDMetadata50.setTrackNames((java.util.List<java.lang.String>) strList57);
        cDMetadata45.setTrackNames((java.util.List<java.lang.String>) strList57);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList57);
        cDMetadata0.setAlbumArtist("./title");
        java.util.List<java.lang.String> strList64 = cDMetadata0.getComposerNames();
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(intList28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(strList47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(intList49);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(strList64);
    }

    @Test
    public void test1287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1287");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata1 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata1.setAlbumArtist("");
        boolean boolean4 = fontSettings0.equals((java.lang.Object) cDMetadata1);
        fontSettings0.setUseFontSmoothing(true);
        net.sourceforge.atunes.model.IFontBean iFontBean7 = fontSettings0.getFont();
        boolean boolean9 = fontSettings0.equals((java.lang.Object) 150);
        fontSettings0.setUseFontSmoothing(false);
        net.sourceforge.atunes.model.CDMetadata cDMetadata12 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str13 = cDMetadata12.getGenre();
        java.util.List<java.lang.String> strList14 = cDMetadata12.getComposerNames();
        java.lang.String str15 = cDMetadata12.getAlbum();
        java.util.List<java.lang.Integer> intList16 = cDMetadata12.getTracks();
        net.sourceforge.atunes.model.CDMetadata cDMetadata17 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata17.setAlbumArtist("");
        java.lang.String str21 = cDMetadata17.getTitle((int) (byte) -1);
        java.lang.String[] strArray23 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        cDMetadata17.setTrackNames((java.util.List<java.lang.String>) strList24);
        cDMetadata12.setTrackNames((java.util.List<java.lang.String>) strList24);
        cDMetadata12.setYear((int) (short) 1);
        int int30 = cDMetadata12.getDisc();
        cDMetadata12.setAlbumArtist("10.52.35  ");
        cDMetadata12.setYear((int) ' ');
        boolean boolean35 = fontSettings0.equals((java.lang.Object) cDMetadata12);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(iFontBean7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(intList16);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test1288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1288");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str1 = feedType0.getUrlXPath();
        java.lang.String str2 = feedType0.getDurationXPath();
        java.lang.String str3 = feedType0.getTitleXPath();
        java.lang.String str4 = feedType0.getDateXPath();
        java.lang.String str5 = feedType0.getUrlXPath();
        java.lang.Class<?> wildcardClass6 = feedType0.getClass();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "./enclosure/@url" + "'", str1, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "./duration" + "'", str2, "./duration");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "./title" + "'", str3, "./title");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "./pubDate" + "'", str4, "./pubDate");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "./enclosure/@url" + "'", str5, "./enclosure/@url");
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1289");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType8 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion13 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType8, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str14 = applicationVersion13.getDate();
        java.lang.String str15 = applicationVersion13.toShortString();
        java.lang.String str16 = applicationVersion13.toShortString();
        java.lang.String str17 = applicationVersion13.getDownloadURL();
        java.lang.String str18 = applicationVersion13.getDirectDownloadURL();
        java.lang.String str19 = applicationVersion13.toShortString();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType20 = applicationVersion13.getVersionType();
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion25 = new net.sourceforge.atunes.model.ApplicationVersion("1.0.0 ", (int) (short) 0, 150, (int) (short) 0, versionType20, "net.sourceforge.atunes.model.SearchQuerySyntaxException", "./summary", "/rss/channel/title", "flv");
        org.junit.Assert.assertTrue("'" + versionType8 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType8.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "./title" + "'", str14, "./title");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1.0.0 " + "'", str15, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1.0.0 " + "'", str16, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "./description" + "'", str17, "./description");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "./pubDate" + "'", str18, "./pubDate");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1.0.0 " + "'", str19, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + versionType20 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType20.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
    }

    @Test
    public void test1290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1290");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        columnBean0.setVisible(false);
        columnBean0.setWidth(0);
        net.sourceforge.atunes.model.ColumnSort columnSort8 = columnBean0.getSort();
        net.sourceforge.atunes.model.ColumnSort columnSort9 = columnBean0.getSort();
        columnBean0.setOrder((int) (short) 100);
        columnBean0.setOrder((int) (byte) -1);
        net.sourceforge.atunes.model.ColumnSort columnSort14 = columnBean0.getSort();
        columnBean0.setVisible(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(columnSort8);
        org.junit.Assert.assertNull(columnSort9);
        org.junit.Assert.assertNull(columnSort14);
    }

    @Test
    public void test1291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1291");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        java.lang.String str12 = applicationVersion9.getChanges();
        int int13 = applicationVersion9.getMinorNumber();
        java.lang.String str14 = applicationVersion9.getChanges();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType19 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion24 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType19, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str25 = applicationVersion24.getDate();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType26 = applicationVersion24.getVersionType();
        java.lang.String str27 = applicationVersion24.getDownloadURL();
        java.lang.String str28 = applicationVersion24.getDirectDownloadURL();
        int int29 = applicationVersion9.compareTo(applicationVersion24);
        int int30 = applicationVersion9.getMajorNumber();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "./title" + "'", str12, "./title");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "./title" + "'", str14, "./title");
        org.junit.Assert.assertTrue("'" + versionType19 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType19.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "./title" + "'", str25, "./title");
        org.junit.Assert.assertTrue("'" + versionType26 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType26.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "./description" + "'", str27, "./description");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "./pubDate" + "'", str28, "./pubDate");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
    }

    @Test
    public void test1292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1292");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        java.lang.String str12 = applicationVersion9.toShortString();
        java.lang.String str13 = applicationVersion9.getName();
        java.lang.String str14 = applicationVersion9.getDirectDownloadURL();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1.0.0 " + "'", str12, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "mpc" + "'", str13, "mpc");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "./pubDate" + "'", str14, "./pubDate");
    }

    @Test
    public void test1293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1293");
        net.sourceforge.atunes.model.LookAndFeelBean lookAndFeelBean0 = new net.sourceforge.atunes.model.LookAndFeelBean();
        java.lang.String str1 = lookAndFeelBean0.getSkin();
        lookAndFeelBean0.setName("net.sourceforge.atunes.model.SearchQuerySyntaxException");
        lookAndFeelBean0.setSkin("");
        lookAndFeelBean0.setSkin("hi!");
        java.lang.String str8 = lookAndFeelBean0.getSkin();
        java.lang.String str9 = lookAndFeelBean0.getName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "net.sourceforge.atunes.model.SearchQuerySyntaxException" + "'", str9, "net.sourceforge.atunes.model.SearchQuerySyntaxException");
    }

    @Test
    public void test1294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1294");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList3 = cDMetadata0.getTracks();
        cDMetadata0.setAlbumArtist("/rss/channel/title");
        java.util.List<java.lang.String> strList6 = cDMetadata0.getTrackNames();
        java.lang.String str7 = cDMetadata0.getAlbumArtist();
        cDMetadata0.setYear((-1));
        cDMetadata0.setGenre("./link[@rel='enclosure']/@type");
        java.lang.String str12 = cDMetadata0.getAlbumArtist();
        java.util.List<java.lang.Integer> intList13 = cDMetadata0.getTracks();
        java.lang.String str14 = cDMetadata0.getGenre();
        org.junit.Assert.assertNull(intList3);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/rss/channel/title" + "'", str7, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "/rss/channel/title" + "'", str12, "/rss/channel/title");
        org.junit.Assert.assertNull(intList13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "./link[@rel='enclosure']/@type" + "'", str14, "./link[@rel='enclosure']/@type");
    }

    @Test
    public void test1295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1295");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        net.sourceforge.atunes.model.CDMetadata cDMetadata1 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata1.setAlbumArtist("");
        java.lang.String str4 = cDMetadata1.getGenre();
        int int5 = cDMetadata1.getYear();
        int int6 = cDMetadata1.getYear();
        cDMetadata1.setGenre("./enclosure/@url");
        java.util.List<java.lang.String> strList9 = null;
        cDMetadata1.setTrackNames(strList9);
        cDMetadata1.setAlbumArtist("");
        net.sourceforge.atunes.model.CDMetadata cDMetadata13 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str14 = cDMetadata13.getGenre();
        java.util.List<java.lang.String> strList15 = cDMetadata13.getComposerNames();
        java.lang.String str16 = cDMetadata13.getAlbum();
        java.util.List<java.lang.Integer> intList17 = cDMetadata13.getTracks();
        net.sourceforge.atunes.model.CDMetadata cDMetadata18 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata18.setAlbumArtist("");
        java.lang.String str22 = cDMetadata18.getTitle((int) (byte) -1);
        java.lang.String[] strArray24 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        cDMetadata18.setTrackNames((java.util.List<java.lang.String>) strList25);
        cDMetadata13.setTrackNames((java.util.List<java.lang.String>) strList25);
        cDMetadata13.setYear((int) (short) 1);
        int int31 = cDMetadata13.getYear();
        java.lang.String str32 = cDMetadata13.getGenre();
        cDMetadata13.setAlbum("/rss/channel/title");
        java.util.List<java.lang.String> strList35 = cDMetadata13.getTrackNames();
        cDMetadata1.setComposerNames(strList35);
        cDMetadata0.setTrackNames(strList35);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList38 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable39 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException40 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable39);
        java.lang.Throwable[] throwableArray41 = searchQuerySyntaxException40.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException42 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException40);
        java.lang.Throwable throwable43 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException44 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable43);
        java.lang.Throwable[] throwableArray45 = searchQuerySyntaxException44.getSuppressed();
        throwableRankList38.replaceItem((java.lang.Throwable) searchQuerySyntaxException40, (java.lang.Throwable) searchQuerySyntaxException44);
        java.util.List<java.lang.Throwable> throwableList47 = throwableRankList38.getOrder();
        java.lang.Throwable throwable48 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException49 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable48);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList50 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable51 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException52 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable51);
        java.lang.Throwable[] throwableArray53 = searchQuerySyntaxException52.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException54 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException52);
        java.lang.Throwable throwable55 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException56 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable55);
        java.lang.Throwable[] throwableArray57 = searchQuerySyntaxException56.getSuppressed();
        throwableRankList50.replaceItem((java.lang.Throwable) searchQuerySyntaxException52, (java.lang.Throwable) searchQuerySyntaxException56);
        searchQuerySyntaxException49.addSuppressed((java.lang.Throwable) searchQuerySyntaxException56);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException60 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException49);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException61 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException49);
        java.lang.Integer int62 = throwableRankList38.getCount((java.lang.Throwable) searchIndexNotAvailableException61);
        java.util.List<java.lang.Integer> intList64 = throwableRankList38.getNFirstElementCounts((int) '#');
        java.util.List<java.lang.Integer> intList66 = throwableRankList38.getNFirstElementCounts((int) (short) 100);
        cDMetadata0.setTracks(intList66);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(strList15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(intList17);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableList47);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNull(int62);
        org.junit.Assert.assertNotNull(intList64);
        org.junit.Assert.assertNotNull(intList66);
    }

    @Test
    public void test1296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1296");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata1 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata1.setAlbumArtist("");
        boolean boolean4 = fontSettings0.equals((java.lang.Object) cDMetadata1);
        fontSettings0.setUseFontSmoothingSettingsFromOs(true);
        boolean boolean7 = fontSettings0.isUseFontSmoothingSettingsFromOs();
        boolean boolean8 = fontSettings0.isUseFontSmoothing();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1297");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList3 = cDMetadata0.getTracks();
        cDMetadata0.setAlbumArtist("/rss/channel/title");
        int int6 = cDMetadata0.getDisc();
        java.util.List<java.lang.Integer> intList7 = cDMetadata0.getTracks();
        org.junit.Assert.assertNull(intList3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(intList7);
    }

    @Test
    public void test1298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1298");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType12 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion17 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType12, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str18 = applicationVersion17.getDate();
        java.lang.String str19 = applicationVersion17.toShortString();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType20 = applicationVersion17.getVersionType();
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion25 = new net.sourceforge.atunes.model.ApplicationVersion("1.0.0 ", (int) (short) 10, (int) '4', (int) '#', versionType20, "", "./enclosure/@url", "SOCKS_PROXY", "./enclosure/@url");
        java.lang.String str26 = applicationVersion25.getName();
        java.lang.String str27 = applicationVersion25.toString();
        net.sourceforge.atunes.model.FeedType feedType28 = net.sourceforge.atunes.model.FeedType.ATOM;
        java.lang.String str29 = feedType28.getTypeXPath();
        java.lang.String str30 = feedType28.getUrlXPath();
        boolean boolean31 = applicationVersion25.equals((java.lang.Object) feedType28);
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType32 = applicationVersion25.getVersionType();
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion37 = new net.sourceforge.atunes.model.ApplicationVersion("HTTP_PROXY", 0, 120, (int) (byte) 1, versionType32, "", "mp4", "./description", "net.sourceforge.atunes.model.SearchIndexNotAvailableException: net.sourceforge.atunes.model.SearchQuerySyntaxException");
        java.lang.String str38 = applicationVersion37.getDirectDownloadURL();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType43 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion48 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType43, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str49 = applicationVersion48.getDate();
        java.lang.String str50 = applicationVersion48.toShortString();
        int int51 = applicationVersion48.getMajorNumber();
        java.lang.String str52 = applicationVersion48.toShortString();
        int int53 = applicationVersion48.getRevisionNumber();
        int int54 = applicationVersion37.compareTo(applicationVersion48);
        org.junit.Assert.assertTrue("'" + versionType12 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType12.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "./title" + "'", str18, "./title");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1.0.0 " + "'", str19, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + versionType20 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType20.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "10.52.35  " + "'", str27, "10.52.35  ");
        org.junit.Assert.assertTrue("'" + feedType28 + "' != '" + net.sourceforge.atunes.model.FeedType.ATOM + "'", feedType28.equals(net.sourceforge.atunes.model.FeedType.ATOM));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "./link[@rel='enclosure']/@type" + "'", str29, "./link[@rel='enclosure']/@type");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + versionType32 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType32.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "./description" + "'", str38, "./description");
        org.junit.Assert.assertTrue("'" + versionType43 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType43.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "./title" + "'", str49, "./title");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "1.0.0 " + "'", str50, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "1.0.0 " + "'", str52, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
    }

    @Test
    public void test1299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1299");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        columnBean0.setVisible(false);
        columnBean0.setWidth(0);
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType12 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion17 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType12, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str18 = applicationVersion17.getDate();
        java.lang.String str19 = applicationVersion17.toShortString();
        java.lang.String str20 = applicationVersion17.getChanges();
        boolean boolean21 = columnBean0.equals((java.lang.Object) applicationVersion17);
        net.sourceforge.atunes.model.ColumnBean columnBean22 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean23 = columnBean22.isVisible();
        net.sourceforge.atunes.model.SubmissionState submissionState24 = net.sourceforge.atunes.model.SubmissionState.PENDING;
        boolean boolean25 = columnBean22.equals((java.lang.Object) submissionState24);
        columnBean22.setVisible(false);
        net.sourceforge.atunes.model.ColumnSort columnSort28 = net.sourceforge.atunes.model.ColumnSort.ASCENDING;
        columnBean22.setSort(columnSort28);
        columnBean0.setSort(columnSort28);
        net.sourceforge.atunes.model.FontSettings fontSettings31 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata32 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata32.setAlbumArtist("");
        boolean boolean35 = fontSettings31.equals((java.lang.Object) cDMetadata32);
        net.sourceforge.atunes.model.FeedType feedType36 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str37 = feedType36.getUrlXPath();
        java.lang.String str38 = feedType36.getNameXPath();
        java.lang.String str39 = feedType36.getDescriptionXPath();
        boolean boolean40 = fontSettings31.equals((java.lang.Object) str39);
        boolean boolean41 = fontSettings31.isUseFontSmoothing();
        boolean boolean42 = columnBean0.equals((java.lang.Object) boolean41);
        boolean boolean43 = columnBean0.isVisible();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + versionType12 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType12.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "./title" + "'", str18, "./title");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1.0.0 " + "'", str19, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "./title" + "'", str20, "./title");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + submissionState24 + "' != '" + net.sourceforge.atunes.model.SubmissionState.PENDING + "'", submissionState24.equals(net.sourceforge.atunes.model.SubmissionState.PENDING));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + columnSort28 + "' != '" + net.sourceforge.atunes.model.ColumnSort.ASCENDING + "'", columnSort28.equals(net.sourceforge.atunes.model.ColumnSort.ASCENDING));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + feedType36 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType36.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "./enclosure/@url" + "'", str37, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "/rss/channel/title" + "'", str38, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "./description" + "'", str39, "./description");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test1300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1300");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        columnBean0.setVisible(false);
        columnBean0.setWidth(0);
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType12 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion17 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType12, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str18 = applicationVersion17.getDate();
        java.lang.String str19 = applicationVersion17.toShortString();
        java.lang.String str20 = applicationVersion17.getChanges();
        boolean boolean21 = columnBean0.equals((java.lang.Object) applicationVersion17);
        java.lang.String str22 = applicationVersion17.getDownloadURL();
        java.lang.String str23 = applicationVersion17.getDate();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + versionType12 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType12.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "./title" + "'", str18, "./title");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1.0.0 " + "'", str19, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "./title" + "'", str20, "./title");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "./description" + "'", str22, "./description");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "./title" + "'", str23, "./title");
    }

    @Test
    public void test1301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1301");
        net.sourceforge.atunes.model.ViewMode viewMode0 = net.sourceforge.atunes.model.ViewMode.YEAR;
        net.sourceforge.atunes.model.IRepository iRepository1 = null;
        java.util.Map<java.lang.String, ?> strMap2 = viewMode0.getDataForView(iRepository1);
        net.sourceforge.atunes.model.IRepository iRepository3 = null;
        java.util.Map<java.lang.String, ?> strMap4 = viewMode0.getDataForView(iRepository3);
        net.sourceforge.atunes.model.IRepository iRepository5 = null;
        java.util.Map<java.lang.String, ?> strMap6 = viewMode0.getDataForView(iRepository5);
        net.sourceforge.atunes.model.IRepository iRepository7 = null;
        java.util.Map<java.lang.String, ?> strMap8 = viewMode0.getDataForView(iRepository7);
        org.junit.Assert.assertTrue("'" + viewMode0 + "' != '" + net.sourceforge.atunes.model.ViewMode.YEAR + "'", viewMode0.equals(net.sourceforge.atunes.model.ViewMode.YEAR));
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(strMap8);
    }

    @Test
    public void test1302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1302");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        net.sourceforge.atunes.model.CDMetadata cDMetadata1 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata1.setAlbumArtist("");
        java.lang.String str4 = cDMetadata1.getGenre();
        int int5 = cDMetadata1.getYear();
        int int6 = cDMetadata1.getYear();
        cDMetadata1.setGenre("./enclosure/@url");
        java.util.List<java.lang.String> strList9 = null;
        cDMetadata1.setTrackNames(strList9);
        cDMetadata1.setAlbumArtist("");
        net.sourceforge.atunes.model.CDMetadata cDMetadata13 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str14 = cDMetadata13.getGenre();
        java.util.List<java.lang.String> strList15 = cDMetadata13.getComposerNames();
        java.lang.String str16 = cDMetadata13.getAlbum();
        java.util.List<java.lang.Integer> intList17 = cDMetadata13.getTracks();
        net.sourceforge.atunes.model.CDMetadata cDMetadata18 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata18.setAlbumArtist("");
        java.lang.String str22 = cDMetadata18.getTitle((int) (byte) -1);
        java.lang.String[] strArray24 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        cDMetadata18.setTrackNames((java.util.List<java.lang.String>) strList25);
        cDMetadata13.setTrackNames((java.util.List<java.lang.String>) strList25);
        cDMetadata13.setYear((int) (short) 1);
        int int31 = cDMetadata13.getYear();
        java.lang.String str32 = cDMetadata13.getGenre();
        cDMetadata13.setAlbum("/rss/channel/title");
        java.util.List<java.lang.String> strList35 = cDMetadata13.getTrackNames();
        cDMetadata1.setComposerNames(strList35);
        cDMetadata0.setTrackNames(strList35);
        java.lang.String str38 = cDMetadata0.getAlbumArtist();
        cDMetadata0.setDisc((int) '#');
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(strList15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(intList17);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertNull(str38);
    }

    @Test
    public void test1303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1303");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str1 = feedType0.getUrlXPath();
        java.lang.String str2 = feedType0.getNameXPath();
        java.lang.String str3 = feedType0.getDescriptionXPath();
        java.lang.String str4 = feedType0.getNameXPath();
        java.lang.String str5 = feedType0.getEntryXPath();
        java.lang.String str6 = feedType0.getEntryXPath();
        java.lang.String str7 = feedType0.getNameXPath();
        java.lang.String str8 = feedType0.getUrlXPath();
        java.lang.String str9 = feedType0.getNameXPath();
        java.lang.String str10 = feedType0.getNameXPath();
        java.lang.String str11 = feedType0.getDescriptionXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "./enclosure/@url" + "'", str1, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "/rss/channel/title" + "'", str2, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "./description" + "'", str3, "./description");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "/rss/channel/title" + "'", str4, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/rss/channel/item" + "'", str5, "/rss/channel/item");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "/rss/channel/item" + "'", str6, "/rss/channel/item");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/rss/channel/title" + "'", str7, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "./enclosure/@url" + "'", str8, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/rss/channel/title" + "'", str9, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/rss/channel/title" + "'", str10, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "./description" + "'", str11, "./description");
    }

    @Test
    public void test1304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1304");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.lang.String str3 = cDMetadata0.getAlbum();
        java.util.List<java.lang.Integer> intList4 = cDMetadata0.getTracks();
        int int5 = cDMetadata0.getYear();
        cDMetadata0.setAlbumArtist("mpc");
        java.lang.String str9 = cDMetadata0.getTitle((-1));
        java.lang.Class<?> wildcardClass10 = cDMetadata0.getClass();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(intList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1305");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable1 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException2 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable1);
        java.lang.Throwable[] throwableArray3 = searchQuerySyntaxException2.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException4 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException2);
        java.lang.Throwable throwable5 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException6 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable5);
        java.lang.Throwable[] throwableArray7 = searchQuerySyntaxException6.getSuppressed();
        throwableRankList0.replaceItem((java.lang.Throwable) searchQuerySyntaxException2, (java.lang.Throwable) searchQuerySyntaxException6);
        java.util.List<java.lang.Throwable> throwableList9 = throwableRankList0.getOrder();
        java.util.List<java.lang.Throwable> throwableList10 = throwableRankList0.getOrder();
        java.util.List<java.lang.Throwable> throwableList12 = throwableRankList0.getNFirstElements((int) (byte) 100);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList13 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList15 = throwableRankList13.getNFirstElements((int) (short) 10);
        throwableRankList13.clear();
        java.util.List<java.lang.Integer> intList18 = throwableRankList13.getNFirstElementCounts(0);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList19 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList21 = throwableRankList19.getNFirstElements((int) (short) 10);
        int int22 = throwableRankList19.size();
        int int23 = throwableRankList19.size();
        java.lang.Throwable throwable24 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException25 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable24);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList26 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable27 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException28 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable27);
        java.lang.Throwable[] throwableArray29 = searchQuerySyntaxException28.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException30 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException28);
        java.lang.Throwable throwable31 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException32 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable31);
        java.lang.Throwable[] throwableArray33 = searchQuerySyntaxException32.getSuppressed();
        throwableRankList26.replaceItem((java.lang.Throwable) searchQuerySyntaxException28, (java.lang.Throwable) searchQuerySyntaxException32);
        searchQuerySyntaxException25.addSuppressed((java.lang.Throwable) searchQuerySyntaxException32);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException36 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException25);
        java.lang.Integer int37 = throwableRankList19.getCount((java.lang.Throwable) searchQuerySyntaxException25);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList38 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList40 = throwableRankList38.getNFirstElements((int) (short) 100);
        java.lang.Throwable throwable41 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException42 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable41);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList43 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable44 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException45 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable44);
        java.lang.Throwable[] throwableArray46 = searchQuerySyntaxException45.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException47 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException45);
        java.lang.Throwable throwable48 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException49 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable48);
        java.lang.Throwable[] throwableArray50 = searchQuerySyntaxException49.getSuppressed();
        throwableRankList43.replaceItem((java.lang.Throwable) searchQuerySyntaxException45, (java.lang.Throwable) searchQuerySyntaxException49);
        searchQuerySyntaxException42.addSuppressed((java.lang.Throwable) searchQuerySyntaxException49);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException53 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException42);
        java.lang.Throwable throwable54 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException55 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable54);
        java.lang.Throwable[] throwableArray56 = searchQuerySyntaxException55.getSuppressed();
        searchQuerySyntaxException42.addSuppressed((java.lang.Throwable) searchQuerySyntaxException55);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException58 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException42);
        java.lang.Throwable throwable59 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException60 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable59);
        java.lang.Throwable[] throwableArray61 = searchQuerySyntaxException60.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException62 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException60);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException63 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException60);
        throwableRankList38.replaceItem((java.lang.Throwable) searchQuerySyntaxException42, (java.lang.Throwable) searchQuerySyntaxException63);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList65 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        net.sourceforge.atunes.model.InconsistentRepositoryException inconsistentRepositoryException66 = new net.sourceforge.atunes.model.InconsistentRepositoryException();
        net.sourceforge.atunes.model.InconsistentRepositoryException inconsistentRepositoryException67 = new net.sourceforge.atunes.model.InconsistentRepositoryException();
        throwableRankList65.replaceItem((java.lang.Throwable) inconsistentRepositoryException66, (java.lang.Throwable) inconsistentRepositoryException67);
        java.lang.Throwable throwable69 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException70 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable69);
        java.lang.Throwable[] throwableArray71 = searchQuerySyntaxException70.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException72 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException70);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException73 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException70);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList74 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable75 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException76 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable75);
        java.lang.Throwable[] throwableArray77 = searchQuerySyntaxException76.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException78 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException76);
        java.lang.Throwable throwable79 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException80 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable79);
        java.lang.Throwable[] throwableArray81 = searchQuerySyntaxException80.getSuppressed();
        throwableRankList74.replaceItem((java.lang.Throwable) searchQuerySyntaxException76, (java.lang.Throwable) searchQuerySyntaxException80);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException83 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException80);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException84 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException83);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException85 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchIndexNotAvailableException84);
        searchQuerySyntaxException73.addSuppressed((java.lang.Throwable) searchIndexNotAvailableException85);
        throwableRankList65.addItem((java.lang.Throwable) searchQuerySyntaxException73);
        throwableRankList19.replaceItem((java.lang.Throwable) searchQuerySyntaxException63, (java.lang.Throwable) searchQuerySyntaxException73);
        throwableRankList13.addItem((java.lang.Throwable) searchQuerySyntaxException63);
        throwableRankList0.addItem((java.lang.Throwable) searchQuerySyntaxException63);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableList9);
        org.junit.Assert.assertNotNull(throwableList10);
        org.junit.Assert.assertNotNull(throwableList12);
        org.junit.Assert.assertNotNull(throwableList15);
        org.junit.Assert.assertNotNull(intList18);
        org.junit.Assert.assertNotNull(throwableList21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNull(int37);
        org.junit.Assert.assertNotNull(throwableList40);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray81);
    }

    @Test
    public void test1306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1306");
        java.lang.Throwable throwable0 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException1 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable0);
        java.lang.Throwable[] throwableArray2 = searchQuerySyntaxException1.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException3 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException1);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException4 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException1);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList5 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable6 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException7 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable6);
        java.lang.Throwable[] throwableArray8 = searchQuerySyntaxException7.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException9 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException7);
        java.lang.Throwable throwable10 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException11 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable10);
        java.lang.Throwable[] throwableArray12 = searchQuerySyntaxException11.getSuppressed();
        throwableRankList5.replaceItem((java.lang.Throwable) searchQuerySyntaxException7, (java.lang.Throwable) searchQuerySyntaxException11);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException14 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException11);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException15 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException14);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException16 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchIndexNotAvailableException15);
        searchQuerySyntaxException4.addSuppressed((java.lang.Throwable) searchIndexNotAvailableException16);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException18 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException4);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException19 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchIndexNotAvailableException18);
        java.lang.String str20 = searchIndexNotAvailableException18.toString();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "net.sourceforge.atunes.model.SearchIndexNotAvailableException: net.sourceforge.atunes.model.SearchQuerySyntaxException: net.sourceforge.atunes.model.SearchQuerySyntaxException" + "'", str20, "net.sourceforge.atunes.model.SearchIndexNotAvailableException: net.sourceforge.atunes.model.SearchQuerySyntaxException: net.sourceforge.atunes.model.SearchQuerySyntaxException");
    }

    @Test
    public void test1307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1307");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        columnBean0.setVisible(false);
        columnBean0.setWidth(0);
        columnBean0.setOrder((int) (short) 10);
        columnBean0.setWidth((int) (short) 0);
        columnBean0.setOrder((int) '4');
        columnBean0.setVisible(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test1308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1308");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList2 = throwableRankList0.getNFirstElements((int) (short) 10);
        throwableRankList0.clear();
        java.util.List<java.lang.Integer> intList5 = throwableRankList0.getNFirstElementCounts(150);
        java.util.List<java.lang.Integer> intList7 = throwableRankList0.getNFirstElementCounts(35);
        org.junit.Assert.assertNotNull(throwableList2);
        org.junit.Assert.assertNotNull(intList5);
        org.junit.Assert.assertNotNull(intList7);
    }

    @Test
    public void test1309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1309");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        net.sourceforge.atunes.model.SubmissionState submissionState2 = net.sourceforge.atunes.model.SubmissionState.PENDING;
        boolean boolean3 = columnBean0.equals((java.lang.Object) submissionState2);
        net.sourceforge.atunes.model.ColumnSort columnSort4 = columnBean0.getSort();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + submissionState2 + "' != '" + net.sourceforge.atunes.model.SubmissionState.PENDING + "'", submissionState2.equals(net.sourceforge.atunes.model.SubmissionState.PENDING));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(columnSort4);
    }

    @Test
    public void test1310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1310");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList2 = throwableRankList0.getNFirstElements((int) (short) 10);
        throwableRankList0.clear();
        java.util.List<java.lang.Integer> intList5 = throwableRankList0.getNFirstElementCounts(150);
        java.util.List<java.lang.Throwable> throwableList6 = throwableRankList0.getOrder();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList7 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable8 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException9 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable8);
        java.lang.Throwable[] throwableArray10 = searchQuerySyntaxException9.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException11 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException9);
        java.lang.Throwable throwable12 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException13 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable12);
        java.lang.Throwable[] throwableArray14 = searchQuerySyntaxException13.getSuppressed();
        throwableRankList7.replaceItem((java.lang.Throwable) searchQuerySyntaxException9, (java.lang.Throwable) searchQuerySyntaxException13);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException16 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException13);
        java.lang.Throwable[] throwableArray17 = searchQuerySyntaxException16.getSuppressed();
        throwableRankList0.addItem((java.lang.Throwable) searchQuerySyntaxException16);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException19 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException16);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException20 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException16);
        org.junit.Assert.assertNotNull(throwableList2);
        org.junit.Assert.assertNotNull(intList5);
        org.junit.Assert.assertNotNull(throwableList6);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray17);
    }

    @Test
    public void test1311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1311");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList2 = throwableRankList0.getNFirstElements((int) (short) 10);
        int int3 = throwableRankList0.size();
        java.util.List<java.lang.Integer> intList5 = throwableRankList0.getNFirstElementCounts((int) (short) 100);
        throwableRankList0.clear();
        org.junit.Assert.assertNotNull(throwableList2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intList5);
    }

    @Test
    public void test1312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1312");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType11 = applicationVersion9.getVersionType();
        java.lang.String str12 = applicationVersion9.getDownloadURL();
        java.lang.String str13 = applicationVersion9.getDirectDownloadURL();
        java.lang.String str14 = applicationVersion9.toString();
        java.lang.String str15 = applicationVersion9.toShortString();
        java.lang.String str16 = applicationVersion9.toShortString();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType21 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.BETA;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion26 = new net.sourceforge.atunes.model.ApplicationVersion("mpc", (int) (short) 0, 150, (int) (byte) -1, versionType21, "flac", "/rss/channel/item", "hi!", "./pubDate");
        java.lang.String str27 = applicationVersion26.getDate();
        net.sourceforge.atunes.model.ColumnBean columnBean32 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean33 = columnBean32.isVisible();
        columnBean32.setOrder((int) (byte) -1);
        columnBean32.setVisible(false);
        columnBean32.setWidth(0);
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType44 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion49 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType44, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str50 = applicationVersion49.getDate();
        java.lang.String str51 = applicationVersion49.toShortString();
        java.lang.String str52 = applicationVersion49.getChanges();
        boolean boolean53 = columnBean32.equals((java.lang.Object) applicationVersion49);
        java.lang.String str54 = applicationVersion49.getDownloadURL();
        java.lang.String str55 = applicationVersion49.getChanges();
        java.lang.String str56 = applicationVersion49.getDownloadURL();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType57 = applicationVersion49.getVersionType();
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion62 = new net.sourceforge.atunes.model.ApplicationVersion("/rss/channel/item", (int) (short) 10, 1, (int) (byte) 1, versionType57, "./updated", "mp4", "1.0.0 mpc ", "rm");
        java.lang.String str63 = applicationVersion62.toShortString();
        net.sourceforge.atunes.model.ColumnBean columnBean64 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean65 = columnBean64.isVisible();
        columnBean64.setOrder((int) (byte) -1);
        columnBean64.setVisible(false);
        columnBean64.setWidth(0);
        net.sourceforge.atunes.model.ColumnSort columnSort72 = columnBean64.getSort();
        net.sourceforge.atunes.model.ColumnSort columnSort73 = columnBean64.getSort();
        columnBean64.setOrder((int) (short) 100);
        columnBean64.setOrder((int) (byte) -1);
        boolean boolean78 = columnBean64.isVisible();
        boolean boolean79 = columnBean64.isVisible();
        net.sourceforge.atunes.model.ColumnSort columnSort80 = columnBean64.getSort();
        int int81 = columnBean64.getWidth();
        boolean boolean82 = applicationVersion62.equals((java.lang.Object) int81);
        boolean boolean83 = applicationVersion26.equals((java.lang.Object) applicationVersion62);
        boolean boolean84 = applicationVersion9.equals((java.lang.Object) applicationVersion62);
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertTrue("'" + versionType11 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType11.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "./description" + "'", str12, "./description");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "./pubDate" + "'", str13, "./pubDate");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1.0.0 mpc " + "'", str14, "1.0.0 mpc ");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1.0.0 " + "'", str15, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1.0.0 " + "'", str16, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + versionType21 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.BETA + "'", versionType21.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.BETA));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "mpc" + "'", str27, "mpc");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + versionType44 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType44.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "./title" + "'", str50, "./title");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "1.0.0 " + "'", str51, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "./title" + "'", str52, "./title");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "./description" + "'", str54, "./description");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "./title" + "'", str55, "./title");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "./description" + "'", str56, "./description");
        org.junit.Assert.assertTrue("'" + versionType57 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType57.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "10.1.1 " + "'", str63, "10.1.1 ");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(columnSort72);
        org.junit.Assert.assertNull(columnSort73);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(columnSort80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test1313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1313");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        int int12 = applicationVersion9.getMajorNumber();
        java.lang.String str13 = applicationVersion9.toShortString();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType18 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion23 = new net.sourceforge.atunes.model.ApplicationVersion("/feed/title", 150, 100, 35, versionType18, "/rss/channel/item", "hi!", "mp4", "0.150.-1 flac BETA");
        int int24 = applicationVersion9.compareTo(applicationVersion23);
        java.lang.String str25 = applicationVersion23.getChanges();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1.0.0 " + "'", str13, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + versionType18 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType18.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0.150.-1 flac BETA" + "'", str25, "0.150.-1 flac BETA");
    }

    @Test
    public void test1314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1314");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        columnBean0.setVisible(false);
        columnBean0.setWidth(0);
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType12 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion17 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType12, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str18 = applicationVersion17.getDate();
        java.lang.String str19 = applicationVersion17.toShortString();
        java.lang.String str20 = applicationVersion17.getChanges();
        boolean boolean21 = columnBean0.equals((java.lang.Object) applicationVersion17);
        java.lang.String str22 = applicationVersion17.getDirectDownloadURL();
        java.lang.String str23 = applicationVersion17.toString();
        java.lang.String str24 = applicationVersion17.toString();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + versionType12 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType12.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "./title" + "'", str18, "./title");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1.0.0 " + "'", str19, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "./title" + "'", str20, "./title");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "./pubDate" + "'", str22, "./pubDate");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1.0.0 mpc " + "'", str23, "1.0.0 mpc ");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1.0.0 mpc " + "'", str24, "1.0.0 mpc ");
    }

    @Test
    public void test1315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1315");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata1 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata1.setAlbumArtist("");
        boolean boolean4 = fontSettings0.equals((java.lang.Object) cDMetadata1);
        java.lang.String str5 = cDMetadata1.getAlbum();
        java.lang.String str6 = cDMetadata1.getAlbum();
        net.sourceforge.atunes.model.CDMetadata cDMetadata7 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str8 = cDMetadata7.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata9 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata9.setAlbumArtist("");
        java.lang.String str12 = cDMetadata9.getGenre();
        java.lang.String[] strArray14 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        cDMetadata9.setTrackNames((java.util.List<java.lang.String>) strList15);
        cDMetadata7.setComposerNames((java.util.List<java.lang.String>) strList15);
        cDMetadata1.setTrackNames((java.util.List<java.lang.String>) strList15);
        cDMetadata1.setAlbum("net.sourceforge.atunes.model.SearchQuerySyntaxException: net.sourceforge.atunes.model.SearchIndexNotAvailableException: net.sourceforge.atunes.model.SearchQuerySyntaxException: net.sourceforge.atunes.model.SearchQuerySyntaxException");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test1316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1316");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType8 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion13 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType8, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str14 = applicationVersion13.getDate();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType15 = applicationVersion13.getVersionType();
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion20 = new net.sourceforge.atunes.model.ApplicationVersion("./summary", (int) (short) 1, 120, 35, versionType15, "hi!", "./author/name", "hi!", "10.1.1 ");
        int int21 = applicationVersion20.getMinorNumber();
        java.lang.String str22 = applicationVersion20.getDirectDownloadURL();
        org.junit.Assert.assertTrue("'" + versionType8 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType8.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "./title" + "'", str14, "./title");
        org.junit.Assert.assertTrue("'" + versionType15 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType15.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 120 + "'", int21 == 120);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
    }

    @Test
    public void test1317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1317");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        int int1 = cDMetadata0.getYear();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.lang.String str3 = cDMetadata0.getAlbumArtist();
        cDMetadata0.setGenre("net.sourceforge.atunes.model.InconsistentRepositoryException");
        java.lang.String str6 = cDMetadata0.getAlbum();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test1318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1318");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.lang.String str3 = cDMetadata0.getGenre();
        java.lang.String[] strArray5 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList6);
        cDMetadata0.setYear((int) (short) 10);
        cDMetadata0.setDisc(0);
        java.lang.String str13 = cDMetadata0.getAlbum();
        cDMetadata0.setAlbumArtist("flv");
        net.sourceforge.atunes.model.CDMetadata cDMetadata16 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata16.setAlbumArtist("");
        java.lang.String str19 = cDMetadata16.getGenre();
        int int20 = cDMetadata16.getYear();
        int int21 = cDMetadata16.getYear();
        cDMetadata16.setGenre("./enclosure/@url");
        java.util.List<java.lang.String> strList24 = null;
        cDMetadata16.setTrackNames(strList24);
        cDMetadata16.setAlbumArtist("./link[@rel='enclosure']/@type");
        net.sourceforge.atunes.model.CDMetadata cDMetadata28 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str29 = cDMetadata28.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata30 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata30.setAlbumArtist("");
        java.lang.String str33 = cDMetadata30.getGenre();
        java.lang.String[] strArray35 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        cDMetadata30.setTrackNames((java.util.List<java.lang.String>) strList36);
        cDMetadata28.setComposerNames((java.util.List<java.lang.String>) strList36);
        java.lang.String str40 = cDMetadata28.getAlbum();
        cDMetadata28.setAlbum("./duration");
        java.lang.String str44 = cDMetadata28.getTitle(10);
        java.util.List<java.lang.String> strList45 = cDMetadata28.getTrackNames();
        java.util.List<java.lang.String> strList46 = cDMetadata28.getComposerNames();
        cDMetadata16.setTrackNames(strList46);
        cDMetadata0.setArtistNames(strList46);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(strList45);
        org.junit.Assert.assertNotNull(strList46);
    }

    @Test
    public void test1319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1319");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.lang.String str3 = cDMetadata0.getAlbum();
        java.util.List<java.lang.Integer> intList4 = cDMetadata0.getTracks();
        net.sourceforge.atunes.model.CDMetadata cDMetadata5 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata5.setAlbumArtist("");
        java.lang.String str9 = cDMetadata5.getTitle((int) (byte) -1);
        java.lang.String[] strArray11 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        cDMetadata5.setTrackNames((java.util.List<java.lang.String>) strList12);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList12);
        cDMetadata0.setYear((int) (short) 1);
        java.util.List<java.lang.String> strList18 = cDMetadata0.getArtistNames();
        cDMetadata0.setAlbumArtist("net.sourceforge.atunes.model.SearchQuerySyntaxException");
        java.util.List<java.lang.Integer> intList21 = cDMetadata0.getTracks();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(intList4);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNull(intList21);
    }

    @Test
    public void test1320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1320");
        net.sourceforge.atunes.model.ImageSize imageSize0 = net.sourceforge.atunes.model.ImageSize.SIZE_150;
        int int1 = imageSize0.getSize();
        int int2 = imageSize0.getSize();
        int int3 = imageSize0.getSize();
        org.junit.Assert.assertTrue("'" + imageSize0 + "' != '" + net.sourceforge.atunes.model.ImageSize.SIZE_150 + "'", imageSize0.equals(net.sourceforge.atunes.model.ImageSize.SIZE_150));
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 150 + "'", int1 == 150);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 150 + "'", int2 == 150);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 150 + "'", int3 == 150);
    }

    @Test
    public void test1321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1321");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        columnBean0.setVisible(false);
        net.sourceforge.atunes.model.ColumnSort columnSort6 = columnBean0.getSort();
        net.sourceforge.atunes.model.TextTagAttribute textTagAttribute7 = net.sourceforge.atunes.model.TextTagAttribute.COMPOSER;
        boolean boolean8 = columnBean0.equals((java.lang.Object) textTagAttribute7);
        columnBean0.setOrder(10);
        int int11 = columnBean0.getWidth();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(columnSort6);
        org.junit.Assert.assertTrue("'" + textTagAttribute7 + "' != '" + net.sourceforge.atunes.model.TextTagAttribute.COMPOSER + "'", textTagAttribute7.equals(net.sourceforge.atunes.model.TextTagAttribute.COMPOSER));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test1322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1322");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.lang.String str3 = cDMetadata0.getAlbum();
        java.util.List<java.lang.Integer> intList4 = cDMetadata0.getTracks();
        int int5 = cDMetadata0.getYear();
        java.util.List<java.lang.String> strList6 = cDMetadata0.getArtistNames();
        cDMetadata0.setDisc((int) (short) 100);
        net.sourceforge.atunes.model.CDMetadata cDMetadata9 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata9.setAlbumArtist("");
        java.lang.String str12 = cDMetadata9.getGenre();
        java.lang.String[] strArray14 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        cDMetadata9.setTrackNames((java.util.List<java.lang.String>) strList15);
        cDMetadata0.setArtistNames((java.util.List<java.lang.String>) strList15);
        java.util.List<java.lang.String> strList19 = cDMetadata0.getTrackNames();
        java.lang.String str20 = cDMetadata0.getAlbum();
        cDMetadata0.setDisc(35);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(intList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(strList19);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test1323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1323");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList3 = cDMetadata0.getTracks();
        cDMetadata0.setAlbumArtist("/rss/channel/title");
        java.util.List<java.lang.String> strList6 = cDMetadata0.getTrackNames();
        java.util.List<java.lang.String> strList7 = null;
        cDMetadata0.setComposerNames(strList7);
        java.lang.String str9 = cDMetadata0.getAlbum();
        cDMetadata0.setDisc(100);
        org.junit.Assert.assertNull(intList3);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test1324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1324");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        net.sourceforge.atunes.model.SubmissionState submissionState2 = net.sourceforge.atunes.model.SubmissionState.PENDING;
        boolean boolean3 = columnBean0.equals((java.lang.Object) submissionState2);
        columnBean0.setVisible(false);
        net.sourceforge.atunes.model.ColumnSort columnSort6 = columnBean0.getSort();
        net.sourceforge.atunes.model.ColumnSort columnSort7 = net.sourceforge.atunes.model.ColumnSort.ASCENDING;
        columnBean0.setSort(columnSort7);
        columnBean0.setOrder(0);
        columnBean0.setVisible(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + submissionState2 + "' != '" + net.sourceforge.atunes.model.SubmissionState.PENDING + "'", submissionState2.equals(net.sourceforge.atunes.model.SubmissionState.PENDING));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(columnSort6);
        org.junit.Assert.assertTrue("'" + columnSort7 + "' != '" + net.sourceforge.atunes.model.ColumnSort.ASCENDING + "'", columnSort7.equals(net.sourceforge.atunes.model.ColumnSort.ASCENDING));
    }

    @Test
    public void test1325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1325");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.lang.String str3 = cDMetadata0.getAlbum();
        java.util.List<java.lang.Integer> intList4 = cDMetadata0.getTracks();
        net.sourceforge.atunes.model.CDMetadata cDMetadata5 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata5.setAlbumArtist("");
        java.lang.String str9 = cDMetadata5.getTitle((int) (byte) -1);
        java.lang.String[] strArray11 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        cDMetadata5.setTrackNames((java.util.List<java.lang.String>) strList12);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList12);
        cDMetadata0.setYear((int) (short) -1);
        net.sourceforge.atunes.model.CDMetadata cDMetadata18 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata18.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList21 = cDMetadata18.getTracks();
        cDMetadata18.setAlbumArtist("/rss/channel/title");
        java.lang.String str25 = cDMetadata18.getTitle((int) (short) 10);
        net.sourceforge.atunes.model.CDMetadata cDMetadata26 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str27 = cDMetadata26.getGenre();
        java.util.List<java.lang.String> strList28 = cDMetadata26.getComposerNames();
        java.lang.String str29 = cDMetadata26.getAlbum();
        java.util.List<java.lang.Integer> intList30 = cDMetadata26.getTracks();
        int int31 = cDMetadata26.getDisc();
        java.lang.String[] strArray39 = new java.lang.String[] { "net.sourceforge.atunes.model.InconsistentRepositoryException", "./title", "1.0.0 ", "./title", "./duration", "mpc", "net.sourceforge.atunes.model.InconsistentRepositoryException" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        cDMetadata26.setArtistNames((java.util.List<java.lang.String>) strList40);
        cDMetadata18.setComposerNames((java.util.List<java.lang.String>) strList40);
        cDMetadata0.setArtistNames((java.util.List<java.lang.String>) strList40);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(intList4);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(intList21);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(strList28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(intList30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test1326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1326");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata1 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata1.setAlbumArtist("");
        boolean boolean4 = fontSettings0.equals((java.lang.Object) cDMetadata1);
        fontSettings0.setUseFontSmoothingSettingsFromOs(false);
        net.sourceforge.atunes.model.IFontBean iFontBean7 = fontSettings0.getFont();
        net.sourceforge.atunes.model.IFontBean iFontBean8 = null;
        fontSettings0.setFont(iFontBean8);
        fontSettings0.setUseFontSmoothingSettingsFromOs(false);
        boolean boolean12 = fontSettings0.isUseFontSmoothingSettingsFromOs();
        boolean boolean13 = fontSettings0.isUseFontSmoothingSettingsFromOs();
        fontSettings0.setUseFontSmoothing(false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(iFontBean7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1327");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.lang.String str3 = cDMetadata0.getGenre();
        int int4 = cDMetadata0.getYear();
        java.util.List<java.lang.Integer> intList5 = cDMetadata0.getTracks();
        java.lang.String str6 = cDMetadata0.getAlbum();
        java.lang.String str7 = cDMetadata0.getGenre();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(intList5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test1328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1328");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        fontSettings0.setUseFontSmoothing(false);
        net.sourceforge.atunes.model.IFontBean iFontBean3 = fontSettings0.getFont();
        boolean boolean4 = fontSettings0.isUseFontSmoothing();
        fontSettings0.setUseFontSmoothing(true);
        boolean boolean7 = fontSettings0.isUseFontSmoothing();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType12 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion17 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType12, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str18 = applicationVersion17.getDate();
        java.lang.String str19 = applicationVersion17.toShortString();
        java.lang.String str20 = applicationVersion17.getChanges();
        int int21 = applicationVersion17.getMinorNumber();
        java.lang.String str22 = applicationVersion17.getChanges();
        int int23 = applicationVersion17.getRevisionNumber();
        net.sourceforge.atunes.model.ColumnBean columnBean24 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean25 = columnBean24.isVisible();
        columnBean24.setOrder((int) (byte) -1);
        columnBean24.setVisible(false);
        columnBean24.setWidth(0);
        net.sourceforge.atunes.model.ColumnSort columnSort32 = columnBean24.getSort();
        net.sourceforge.atunes.model.ColumnSort columnSort33 = columnBean24.getSort();
        columnBean24.setOrder((int) (short) 100);
        columnBean24.setOrder((int) (byte) -1);
        columnBean24.setOrder((int) (short) -1);
        boolean boolean40 = applicationVersion17.equals((java.lang.Object) columnBean24);
        boolean boolean41 = fontSettings0.equals((java.lang.Object) applicationVersion17);
        org.junit.Assert.assertNull(iFontBean3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + versionType12 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType12.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "./title" + "'", str18, "./title");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1.0.0 " + "'", str19, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "./title" + "'", str20, "./title");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "./title" + "'", str22, "./title");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(columnSort32);
        org.junit.Assert.assertNull(columnSort33);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test1329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1329");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        net.sourceforge.atunes.model.AudioObjectProperty audioObjectProperty1 = net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY;
        boolean boolean2 = columnBean0.equals((java.lang.Object) audioObjectProperty1);
        int int3 = columnBean0.getOrder();
        int int4 = columnBean0.getWidth();
        boolean boolean5 = columnBean0.isVisible();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList6 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable7 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException8 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable7);
        java.lang.Throwable[] throwableArray9 = searchQuerySyntaxException8.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException10 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException8);
        java.lang.Throwable throwable11 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException12 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable11);
        java.lang.Throwable[] throwableArray13 = searchQuerySyntaxException12.getSuppressed();
        throwableRankList6.replaceItem((java.lang.Throwable) searchQuerySyntaxException8, (java.lang.Throwable) searchQuerySyntaxException12);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList15 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable16 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException17 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable16);
        java.lang.Throwable[] throwableArray18 = searchQuerySyntaxException17.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException19 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException17);
        java.lang.Throwable throwable20 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException21 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable20);
        java.lang.Throwable[] throwableArray22 = searchQuerySyntaxException21.getSuppressed();
        throwableRankList15.replaceItem((java.lang.Throwable) searchQuerySyntaxException17, (java.lang.Throwable) searchQuerySyntaxException21);
        java.lang.Integer int24 = throwableRankList6.getCount((java.lang.Throwable) searchQuerySyntaxException21);
        java.util.List<java.lang.Throwable> throwableList26 = throwableRankList6.getNFirstElements((int) (byte) -1);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList27 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable28 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException29 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable28);
        java.lang.Throwable[] throwableArray30 = searchQuerySyntaxException29.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException31 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException29);
        java.lang.Throwable throwable32 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException33 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable32);
        java.lang.Throwable[] throwableArray34 = searchQuerySyntaxException33.getSuppressed();
        throwableRankList27.replaceItem((java.lang.Throwable) searchQuerySyntaxException29, (java.lang.Throwable) searchQuerySyntaxException33);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList36 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable37 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException38 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable37);
        java.lang.Throwable[] throwableArray39 = searchQuerySyntaxException38.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException40 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException38);
        java.lang.Throwable throwable41 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException42 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable41);
        java.lang.Throwable[] throwableArray43 = searchQuerySyntaxException42.getSuppressed();
        throwableRankList36.replaceItem((java.lang.Throwable) searchQuerySyntaxException38, (java.lang.Throwable) searchQuerySyntaxException42);
        java.lang.Integer int45 = throwableRankList27.getCount((java.lang.Throwable) searchQuerySyntaxException42);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList46 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList48 = throwableRankList46.getNFirstElements((int) (short) 10);
        throwableRankList46.clear();
        int int50 = throwableRankList46.size();
        java.lang.Throwable throwable51 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException52 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable51);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList53 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable54 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException55 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable54);
        java.lang.Throwable[] throwableArray56 = searchQuerySyntaxException55.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException57 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException55);
        java.lang.Throwable throwable58 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException59 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable58);
        java.lang.Throwable[] throwableArray60 = searchQuerySyntaxException59.getSuppressed();
        throwableRankList53.replaceItem((java.lang.Throwable) searchQuerySyntaxException55, (java.lang.Throwable) searchQuerySyntaxException59);
        searchQuerySyntaxException52.addSuppressed((java.lang.Throwable) searchQuerySyntaxException59);
        java.lang.Integer int63 = throwableRankList46.getCount((java.lang.Throwable) searchQuerySyntaxException59);
        searchQuerySyntaxException42.addSuppressed((java.lang.Throwable) searchQuerySyntaxException59);
        java.lang.Throwable throwable65 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException66 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable65);
        java.lang.Throwable[] throwableArray67 = searchQuerySyntaxException66.getSuppressed();
        searchQuerySyntaxException59.addSuppressed((java.lang.Throwable) searchQuerySyntaxException66);
        java.lang.Integer int69 = throwableRankList6.getCount((java.lang.Throwable) searchQuerySyntaxException66);
        java.util.List<java.lang.Throwable> throwableList71 = throwableRankList6.getNFirstElements(0);
        java.util.List<java.lang.Throwable> throwableList73 = throwableRankList6.getNFirstElements(100);
        boolean boolean74 = columnBean0.equals((java.lang.Object) throwableRankList6);
        org.junit.Assert.assertTrue("'" + audioObjectProperty1 + "' != '" + net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY + "'", audioObjectProperty1.equals(net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNotNull(throwableList26);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNull(int45);
        org.junit.Assert.assertNotNull(throwableList48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNull(int63);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNull(int69);
        org.junit.Assert.assertNotNull(throwableList71);
        org.junit.Assert.assertNotNull(throwableList73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test1330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1330");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType20 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion25 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType20, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str26 = applicationVersion25.getDate();
        java.lang.String str27 = applicationVersion25.toShortString();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType28 = applicationVersion25.getVersionType();
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion33 = new net.sourceforge.atunes.model.ApplicationVersion("1.0.0 ", (int) (short) 10, (int) '4', (int) '#', versionType28, "", "./enclosure/@url", "SOCKS_PROXY", "./enclosure/@url");
        java.lang.String str34 = applicationVersion33.getName();
        java.lang.String str35 = applicationVersion33.toString();
        net.sourceforge.atunes.model.FeedType feedType36 = net.sourceforge.atunes.model.FeedType.ATOM;
        java.lang.String str37 = feedType36.getTypeXPath();
        java.lang.String str38 = feedType36.getUrlXPath();
        boolean boolean39 = applicationVersion33.equals((java.lang.Object) feedType36);
        int int40 = applicationVersion9.compareTo(applicationVersion33);
        net.sourceforge.atunes.model.FontSettings fontSettings41 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata42 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata42.setAlbumArtist("");
        boolean boolean45 = fontSettings41.equals((java.lang.Object) cDMetadata42);
        java.lang.String str46 = cDMetadata42.getAlbum();
        java.lang.String str47 = cDMetadata42.getAlbum();
        java.util.List<java.lang.Integer> intList48 = cDMetadata42.getTracks();
        boolean boolean49 = applicationVersion33.equals((java.lang.Object) cDMetadata42);
        int int50 = applicationVersion33.getMajorNumber();
        java.lang.String str51 = applicationVersion33.toShortString();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + versionType20 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType20.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "./title" + "'", str26, "./title");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1.0.0 " + "'", str27, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + versionType28 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType28.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "10.52.35  " + "'", str35, "10.52.35  ");
        org.junit.Assert.assertTrue("'" + feedType36 + "' != '" + net.sourceforge.atunes.model.FeedType.ATOM + "'", feedType36.equals(net.sourceforge.atunes.model.FeedType.ATOM));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "./link[@rel='enclosure']/@type" + "'", str37, "./link[@rel='enclosure']/@type");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(intList48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "10.52.35 " + "'", str51, "10.52.35 ");
    }

    @Test
    public void test1331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1331");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.lang.String str3 = cDMetadata0.getAlbum();
        java.util.List<java.lang.Integer> intList4 = cDMetadata0.getTracks();
        net.sourceforge.atunes.model.CDMetadata cDMetadata5 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata5.setAlbumArtist("");
        java.lang.String str9 = cDMetadata5.getTitle((int) (byte) -1);
        java.lang.String[] strArray11 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        cDMetadata5.setTrackNames((java.util.List<java.lang.String>) strList12);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList12);
        cDMetadata0.setYear((int) (short) 1);
        int int18 = cDMetadata0.getYear();
        java.util.List<java.lang.String> strList19 = cDMetadata0.getTrackNames();
        java.lang.String str20 = cDMetadata0.getAlbumArtist();
        cDMetadata0.setAlbumArtist("/rss/channel/item");
        cDMetadata0.setYear(10);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(intList4);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test1332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1332");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str1 = feedType0.getUrlXPath();
        java.lang.String str2 = feedType0.getUrlXPath();
        java.lang.String str3 = feedType0.getAuthorXPath();
        java.lang.String str4 = feedType0.getDurationXPath();
        java.lang.String str5 = feedType0.getAuthorXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "./enclosure/@url" + "'", str1, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "./enclosure/@url" + "'", str2, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "./author" + "'", str3, "./author");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "./duration" + "'", str4, "./duration");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "./author" + "'", str5, "./author");
    }

    @Test
    public void test1333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1333");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType16 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion21 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType16, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str22 = applicationVersion21.getDate();
        java.lang.String str23 = applicationVersion21.toShortString();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType24 = applicationVersion21.getVersionType();
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion29 = new net.sourceforge.atunes.model.ApplicationVersion("1.0.0 ", (int) (short) 10, (int) '4', (int) '#', versionType24, "", "./enclosure/@url", "SOCKS_PROXY", "./enclosure/@url");
        java.lang.String str30 = applicationVersion29.getName();
        java.lang.String str31 = applicationVersion29.toString();
        net.sourceforge.atunes.model.FeedType feedType32 = net.sourceforge.atunes.model.FeedType.ATOM;
        java.lang.String str33 = feedType32.getTypeXPath();
        java.lang.String str34 = feedType32.getUrlXPath();
        boolean boolean35 = applicationVersion29.equals((java.lang.Object) feedType32);
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType36 = applicationVersion29.getVersionType();
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion41 = new net.sourceforge.atunes.model.ApplicationVersion("HTTP_PROXY", 0, 120, (int) (byte) 1, versionType36, "", "mp4", "./description", "net.sourceforge.atunes.model.SearchIndexNotAvailableException: net.sourceforge.atunes.model.SearchQuerySyntaxException");
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion46 = new net.sourceforge.atunes.model.ApplicationVersion("SOCKS_PROXY", (int) 'a', (int) (short) -1, 52, versionType36, "mp4", "./updated", "flac", "10.52.35  ");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType47 = applicationVersion46.getVersionType();
        org.junit.Assert.assertTrue("'" + versionType16 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType16.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "./title" + "'", str22, "./title");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1.0.0 " + "'", str23, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + versionType24 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType24.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "10.52.35  " + "'", str31, "10.52.35  ");
        org.junit.Assert.assertTrue("'" + feedType32 + "' != '" + net.sourceforge.atunes.model.FeedType.ATOM + "'", feedType32.equals(net.sourceforge.atunes.model.FeedType.ATOM));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "./link[@rel='enclosure']/@type" + "'", str33, "./link[@rel='enclosure']/@type");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + versionType36 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType36.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertTrue("'" + versionType47 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType47.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
    }

    @Test
    public void test1334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1334");
        net.sourceforge.atunes.model.InconsistentRepositoryException inconsistentRepositoryException0 = new net.sourceforge.atunes.model.InconsistentRepositoryException();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList1 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable2 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException3 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable2);
        java.lang.Throwable[] throwableArray4 = searchQuerySyntaxException3.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException5 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException3);
        java.lang.Throwable throwable6 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException7 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable6);
        java.lang.Throwable[] throwableArray8 = searchQuerySyntaxException7.getSuppressed();
        throwableRankList1.replaceItem((java.lang.Throwable) searchQuerySyntaxException3, (java.lang.Throwable) searchQuerySyntaxException7);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException10 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException7);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException11 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException10);
        inconsistentRepositoryException0.addSuppressed((java.lang.Throwable) searchIndexNotAvailableException11);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList13 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable14 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException15 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable14);
        java.lang.Throwable[] throwableArray16 = searchQuerySyntaxException15.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException17 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException15);
        java.lang.Throwable throwable18 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException19 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable18);
        java.lang.Throwable[] throwableArray20 = searchQuerySyntaxException19.getSuppressed();
        throwableRankList13.replaceItem((java.lang.Throwable) searchQuerySyntaxException15, (java.lang.Throwable) searchQuerySyntaxException19);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList22 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable23 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException24 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable23);
        java.lang.Throwable[] throwableArray25 = searchQuerySyntaxException24.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException26 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException24);
        java.lang.Throwable throwable27 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException28 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable27);
        java.lang.Throwable[] throwableArray29 = searchQuerySyntaxException28.getSuppressed();
        throwableRankList22.replaceItem((java.lang.Throwable) searchQuerySyntaxException24, (java.lang.Throwable) searchQuerySyntaxException28);
        java.lang.Integer int31 = throwableRankList13.getCount((java.lang.Throwable) searchQuerySyntaxException28);
        searchIndexNotAvailableException11.addSuppressed((java.lang.Throwable) searchQuerySyntaxException28);
        java.lang.String str33 = searchIndexNotAvailableException11.toString();
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNull(int31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "net.sourceforge.atunes.model.SearchIndexNotAvailableException: net.sourceforge.atunes.model.SearchQuerySyntaxException: net.sourceforge.atunes.model.SearchQuerySyntaxException" + "'", str33, "net.sourceforge.atunes.model.SearchIndexNotAvailableException: net.sourceforge.atunes.model.SearchQuerySyntaxException: net.sourceforge.atunes.model.SearchQuerySyntaxException");
    }

    @Test
    public void test1335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1335");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.lang.String str3 = cDMetadata0.getAlbum();
        cDMetadata0.setAlbumArtist("./description");
        cDMetadata0.setAlbumArtist("./description");
        java.lang.String str8 = cDMetadata0.getAlbumArtist();
        java.lang.String str10 = cDMetadata0.getTitle((int) (short) 0);
        cDMetadata0.setYear((int) (short) 100);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "./description" + "'", str8, "./description");
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test1336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1336");
        net.sourceforge.atunes.model.LocalAudioObjectFormat localAudioObjectFormat0 = net.sourceforge.atunes.model.LocalAudioObjectFormat.MP3;
        java.lang.String str1 = localAudioObjectFormat0.getExtension();
        java.lang.String str2 = localAudioObjectFormat0.getExtension();
        org.junit.Assert.assertTrue("'" + localAudioObjectFormat0 + "' != '" + net.sourceforge.atunes.model.LocalAudioObjectFormat.MP3 + "'", localAudioObjectFormat0.equals(net.sourceforge.atunes.model.LocalAudioObjectFormat.MP3));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "mp3" + "'", str1, "mp3");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mp3" + "'", str2, "mp3");
    }

    @Test
    public void test1337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1337");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.lang.String str4 = cDMetadata0.getTitle((int) (byte) -1);
        net.sourceforge.atunes.model.CDMetadata cDMetadata5 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata5.setAlbumArtist("");
        java.lang.String str8 = cDMetadata5.getGenre();
        int int9 = cDMetadata5.getYear();
        int int10 = cDMetadata5.getYear();
        net.sourceforge.atunes.model.CDMetadata cDMetadata11 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str12 = cDMetadata11.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata13 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata13.setAlbumArtist("");
        java.lang.String str16 = cDMetadata13.getGenre();
        java.lang.String[] strArray18 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        cDMetadata13.setTrackNames((java.util.List<java.lang.String>) strList19);
        cDMetadata11.setComposerNames((java.util.List<java.lang.String>) strList19);
        cDMetadata5.setTrackNames((java.util.List<java.lang.String>) strList19);
        net.sourceforge.atunes.model.CDMetadata cDMetadata24 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str25 = cDMetadata24.getGenre();
        java.util.List<java.lang.String> strList26 = cDMetadata24.getComposerNames();
        java.lang.String str27 = cDMetadata24.getAlbum();
        java.util.List<java.lang.Integer> intList28 = cDMetadata24.getTracks();
        int int29 = cDMetadata24.getDisc();
        java.lang.String[] strArray37 = new java.lang.String[] { "net.sourceforge.atunes.model.InconsistentRepositoryException", "./title", "1.0.0 ", "./title", "./duration", "mpc", "net.sourceforge.atunes.model.InconsistentRepositoryException" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        cDMetadata24.setArtistNames((java.util.List<java.lang.String>) strList38);
        cDMetadata5.setArtistNames((java.util.List<java.lang.String>) strList38);
        cDMetadata0.setComposerNames((java.util.List<java.lang.String>) strList38);
        cDMetadata0.setDisc((int) (byte) 1);
        net.sourceforge.atunes.model.CDMetadata cDMetadata45 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str46 = cDMetadata45.getGenre();
        java.util.List<java.lang.String> strList47 = cDMetadata45.getComposerNames();
        java.lang.String str48 = cDMetadata45.getAlbum();
        java.util.List<java.lang.Integer> intList49 = cDMetadata45.getTracks();
        net.sourceforge.atunes.model.CDMetadata cDMetadata50 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata50.setAlbumArtist("");
        java.lang.String str54 = cDMetadata50.getTitle((int) (byte) -1);
        java.lang.String[] strArray56 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        cDMetadata50.setTrackNames((java.util.List<java.lang.String>) strList57);
        cDMetadata45.setTrackNames((java.util.List<java.lang.String>) strList57);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList57);
        cDMetadata0.setGenre("./updated");
        java.util.List<java.lang.String> strList64 = cDMetadata0.getArtistNames();
        int int65 = cDMetadata0.getDisc();
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(intList28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(strList47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(intList49);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNull(strList64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
    }

    @Test
    public void test1338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1338");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList3 = cDMetadata0.getTracks();
        cDMetadata0.setAlbumArtist("/rss/channel/title");
        java.util.List<java.lang.String> strList6 = cDMetadata0.getTrackNames();
        cDMetadata0.setAlbum("/rss/channel/item");
        java.util.List<java.lang.String> strList9 = cDMetadata0.getArtistNames();
        int int10 = cDMetadata0.getYear();
        cDMetadata0.setAlbumArtist("./description");
        java.lang.String str14 = cDMetadata0.getTitle((int) (byte) 0);
        org.junit.Assert.assertNull(intList3);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertNull(strList9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test1339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1339");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType8 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion13 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType8, "mpc", "./description", "./pubDate", "./title");
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion18 = new net.sourceforge.atunes.model.ApplicationVersion("1.0.0 ", (int) (byte) 10, 100, 150, versionType8, "./description", "/rss/channel/item", "/rss/channel/item", "./enclosure/@url");
        java.lang.String str19 = applicationVersion18.getDirectDownloadURL();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType24 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.BETA;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion29 = new net.sourceforge.atunes.model.ApplicationVersion("mpc", (int) (short) 0, 150, (int) (byte) -1, versionType24, "flac", "/rss/channel/item", "hi!", "./pubDate");
        java.lang.String str30 = applicationVersion29.getDate();
        int int31 = applicationVersion18.compareTo(applicationVersion29);
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType32 = applicationVersion29.getVersionType();
        java.lang.String str33 = applicationVersion29.toString();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType34 = applicationVersion29.getVersionType();
        org.junit.Assert.assertTrue("'" + versionType8 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType8.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "/rss/channel/item" + "'", str19, "/rss/channel/item");
        org.junit.Assert.assertTrue("'" + versionType24 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.BETA + "'", versionType24.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.BETA));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "mpc" + "'", str30, "mpc");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + versionType32 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.BETA + "'", versionType32.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.BETA));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "0.150.-1 flac BETA" + "'", str33, "0.150.-1 flac BETA");
        org.junit.Assert.assertTrue("'" + versionType34 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.BETA + "'", versionType34.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.BETA));
    }

    @Test
    public void test1340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1340");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        net.sourceforge.atunes.model.AudioObjectProperty audioObjectProperty1 = net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY;
        boolean boolean2 = columnBean0.equals((java.lang.Object) audioObjectProperty1);
        net.sourceforge.atunes.model.TextTagAttribute textTagAttribute3 = net.sourceforge.atunes.model.TextTagAttribute.LYRICS;
        boolean boolean4 = columnBean0.equals((java.lang.Object) textTagAttribute3);
        net.sourceforge.atunes.model.ColumnSort columnSort5 = columnBean0.getSort();
        columnBean0.setWidth((int) ' ');
        boolean boolean8 = columnBean0.isVisible();
        org.junit.Assert.assertTrue("'" + audioObjectProperty1 + "' != '" + net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY + "'", audioObjectProperty1.equals(net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + textTagAttribute3 + "' != '" + net.sourceforge.atunes.model.TextTagAttribute.LYRICS + "'", textTagAttribute3.equals(net.sourceforge.atunes.model.TextTagAttribute.LYRICS));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(columnSort5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1341");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.lang.String str3 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList4 = cDMetadata0.getTrackNames();
        java.util.List<java.lang.String> strList5 = cDMetadata0.getTrackNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata6 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata6.setAlbumArtist("");
        java.lang.String str10 = cDMetadata6.getTitle((int) (byte) -1);
        net.sourceforge.atunes.model.CDMetadata cDMetadata11 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata11.setAlbumArtist("");
        java.lang.String str14 = cDMetadata11.getGenre();
        int int15 = cDMetadata11.getYear();
        int int16 = cDMetadata11.getYear();
        net.sourceforge.atunes.model.CDMetadata cDMetadata17 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str18 = cDMetadata17.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata19 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata19.setAlbumArtist("");
        java.lang.String str22 = cDMetadata19.getGenre();
        java.lang.String[] strArray24 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        cDMetadata19.setTrackNames((java.util.List<java.lang.String>) strList25);
        cDMetadata17.setComposerNames((java.util.List<java.lang.String>) strList25);
        cDMetadata11.setTrackNames((java.util.List<java.lang.String>) strList25);
        net.sourceforge.atunes.model.CDMetadata cDMetadata30 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str31 = cDMetadata30.getGenre();
        java.util.List<java.lang.String> strList32 = cDMetadata30.getComposerNames();
        java.lang.String str33 = cDMetadata30.getAlbum();
        java.util.List<java.lang.Integer> intList34 = cDMetadata30.getTracks();
        int int35 = cDMetadata30.getDisc();
        java.lang.String[] strArray43 = new java.lang.String[] { "net.sourceforge.atunes.model.InconsistentRepositoryException", "./title", "1.0.0 ", "./title", "./duration", "mpc", "net.sourceforge.atunes.model.InconsistentRepositoryException" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        cDMetadata30.setArtistNames((java.util.List<java.lang.String>) strList44);
        cDMetadata11.setArtistNames((java.util.List<java.lang.String>) strList44);
        cDMetadata6.setComposerNames((java.util.List<java.lang.String>) strList44);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList44);
        int int50 = cDMetadata0.getDisc();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(strList32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(intList34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
    }

    @Test
    public void test1342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1342");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.lang.String str4 = cDMetadata0.getTitle((int) (byte) -1);
        net.sourceforge.atunes.model.CDMetadata cDMetadata5 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata5.setAlbumArtist("");
        java.lang.String str8 = cDMetadata5.getGenre();
        int int9 = cDMetadata5.getYear();
        int int10 = cDMetadata5.getYear();
        net.sourceforge.atunes.model.CDMetadata cDMetadata11 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str12 = cDMetadata11.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata13 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata13.setAlbumArtist("");
        java.lang.String str16 = cDMetadata13.getGenre();
        java.lang.String[] strArray18 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        cDMetadata13.setTrackNames((java.util.List<java.lang.String>) strList19);
        cDMetadata11.setComposerNames((java.util.List<java.lang.String>) strList19);
        cDMetadata5.setTrackNames((java.util.List<java.lang.String>) strList19);
        net.sourceforge.atunes.model.CDMetadata cDMetadata24 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str25 = cDMetadata24.getGenre();
        java.util.List<java.lang.String> strList26 = cDMetadata24.getComposerNames();
        java.lang.String str27 = cDMetadata24.getAlbum();
        java.util.List<java.lang.Integer> intList28 = cDMetadata24.getTracks();
        int int29 = cDMetadata24.getDisc();
        java.lang.String[] strArray37 = new java.lang.String[] { "net.sourceforge.atunes.model.InconsistentRepositoryException", "./title", "1.0.0 ", "./title", "./duration", "mpc", "net.sourceforge.atunes.model.InconsistentRepositoryException" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        cDMetadata24.setArtistNames((java.util.List<java.lang.String>) strList38);
        cDMetadata5.setArtistNames((java.util.List<java.lang.String>) strList38);
        cDMetadata0.setComposerNames((java.util.List<java.lang.String>) strList38);
        cDMetadata0.setDisc((int) (byte) 1);
        net.sourceforge.atunes.model.CDMetadata cDMetadata45 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str46 = cDMetadata45.getGenre();
        java.util.List<java.lang.String> strList47 = cDMetadata45.getComposerNames();
        java.lang.String str48 = cDMetadata45.getAlbum();
        java.util.List<java.lang.Integer> intList49 = cDMetadata45.getTracks();
        net.sourceforge.atunes.model.CDMetadata cDMetadata50 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata50.setAlbumArtist("");
        java.lang.String str54 = cDMetadata50.getTitle((int) (byte) -1);
        java.lang.String[] strArray56 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        cDMetadata50.setTrackNames((java.util.List<java.lang.String>) strList57);
        cDMetadata45.setTrackNames((java.util.List<java.lang.String>) strList57);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList57);
        cDMetadata0.setAlbumArtist("./title");
        cDMetadata0.setYear(32);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(intList28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(strList47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(intList49);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
    }

    @Test
    public void test1343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1343");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList2 = throwableRankList0.getNFirstElements((int) (short) 10);
        throwableRankList0.clear();
        java.util.List<java.lang.Integer> intList5 = throwableRankList0.getNFirstElementCounts(150);
        java.util.List<java.lang.Throwable> throwableList7 = throwableRankList0.getNFirstElements((int) (short) 100);
        java.util.List<java.lang.Throwable> throwableList9 = throwableRankList0.getNFirstElements((int) (byte) 1);
        java.lang.Throwable throwable10 = null;
        throwableRankList0.addItem(throwable10);
        java.util.List<java.lang.Throwable> throwableList13 = throwableRankList0.getNFirstElements((int) (short) 100);
        throwableRankList0.clear();
        org.junit.Assert.assertNotNull(throwableList2);
        org.junit.Assert.assertNotNull(intList5);
        org.junit.Assert.assertNotNull(throwableList7);
        org.junit.Assert.assertNotNull(throwableList9);
        org.junit.Assert.assertNotNull(throwableList13);
    }

    @Test
    public void test1344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1344");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        columnBean0.setVisible(false);
        columnBean0.setWidth(0);
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType12 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion17 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType12, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str18 = applicationVersion17.getDate();
        java.lang.String str19 = applicationVersion17.toShortString();
        java.lang.String str20 = applicationVersion17.getChanges();
        boolean boolean21 = columnBean0.equals((java.lang.Object) applicationVersion17);
        net.sourceforge.atunes.model.ColumnBean columnBean22 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean23 = columnBean22.isVisible();
        net.sourceforge.atunes.model.SubmissionState submissionState24 = net.sourceforge.atunes.model.SubmissionState.PENDING;
        boolean boolean25 = columnBean22.equals((java.lang.Object) submissionState24);
        columnBean22.setVisible(false);
        net.sourceforge.atunes.model.ColumnSort columnSort28 = net.sourceforge.atunes.model.ColumnSort.ASCENDING;
        columnBean22.setSort(columnSort28);
        columnBean0.setSort(columnSort28);
        net.sourceforge.atunes.model.ColumnSort columnSort31 = columnBean0.getSort();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + versionType12 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType12.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "./title" + "'", str18, "./title");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1.0.0 " + "'", str19, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "./title" + "'", str20, "./title");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + submissionState24 + "' != '" + net.sourceforge.atunes.model.SubmissionState.PENDING + "'", submissionState24.equals(net.sourceforge.atunes.model.SubmissionState.PENDING));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + columnSort28 + "' != '" + net.sourceforge.atunes.model.ColumnSort.ASCENDING + "'", columnSort28.equals(net.sourceforge.atunes.model.ColumnSort.ASCENDING));
        org.junit.Assert.assertTrue("'" + columnSort31 + "' != '" + net.sourceforge.atunes.model.ColumnSort.ASCENDING + "'", columnSort31.equals(net.sourceforge.atunes.model.ColumnSort.ASCENDING));
    }

    @Test
    public void test1345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1345");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        fontSettings0.setUseFontSmoothing(false);
        fontSettings0.setUseFontSmoothing(false);
        net.sourceforge.atunes.model.IFontBean iFontBean5 = null;
        fontSettings0.setFont(iFontBean5);
        net.sourceforge.atunes.model.IFontBean iFontBean7 = fontSettings0.getFont();
        fontSettings0.setUseFontSmoothing(false);
        net.sourceforge.atunes.model.IFontBean iFontBean10 = null;
        fontSettings0.setFont(iFontBean10);
        net.sourceforge.atunes.model.FeedType feedType12 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str13 = feedType12.getEntryXPath();
        java.lang.String str14 = feedType12.getTypeXPath();
        java.lang.String str15 = feedType12.getTypeXPath();
        java.lang.String str16 = feedType12.getDescriptionXPath();
        java.lang.String str17 = feedType12.getNameXPath();
        boolean boolean18 = fontSettings0.equals((java.lang.Object) str17);
        fontSettings0.setUseFontSmoothing(true);
        net.sourceforge.atunes.model.IFontBean iFontBean21 = null;
        fontSettings0.setFont(iFontBean21);
        net.sourceforge.atunes.model.IFontBean iFontBean23 = null;
        fontSettings0.setFont(iFontBean23);
        org.junit.Assert.assertNull(iFontBean7);
        org.junit.Assert.assertTrue("'" + feedType12 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType12.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "/rss/channel/item" + "'", str13, "/rss/channel/item");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "./enclosure/@type" + "'", str14, "./enclosure/@type");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "./enclosure/@type" + "'", str15, "./enclosure/@type");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "./description" + "'", str16, "./description");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "/rss/channel/title" + "'", str17, "/rss/channel/title");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1346");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.lang.String str2 = cDMetadata0.getGenre();
        cDMetadata0.setAlbum("./duration");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test1347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1347");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        cDMetadata0.setDisc(150);
        cDMetadata0.setDisc((int) (byte) -1);
        cDMetadata0.setGenre("net.sourceforge.atunes.model.SearchIndexNotAvailableException: net.sourceforge.atunes.model.SearchQuerySyntaxException: net.sourceforge.atunes.model.SearchQuerySyntaxException");
    }

    @Test
    public void test1348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1348");
        net.sourceforge.atunes.model.IFontBean iFontBean0 = null;
        net.sourceforge.atunes.model.FontSettings fontSettings3 = new net.sourceforge.atunes.model.FontSettings(iFontBean0, true, true);
        fontSettings3.setUseFontSmoothing(true);
        fontSettings3.setUseFontSmoothingSettingsFromOs(true);
        net.sourceforge.atunes.model.IFontBean iFontBean8 = null;
        fontSettings3.setFont(iFontBean8);
        boolean boolean10 = fontSettings3.isUseFontSmoothingSettingsFromOs();
        boolean boolean11 = fontSettings3.isUseFontSmoothingSettingsFromOs();
        net.sourceforge.atunes.model.IFontBean iFontBean12 = null;
        fontSettings3.setFont(iFontBean12);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test1349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1349");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable1 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException2 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable1);
        java.lang.Throwable[] throwableArray3 = searchQuerySyntaxException2.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException4 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException2);
        java.lang.Throwable throwable5 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException6 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable5);
        java.lang.Throwable[] throwableArray7 = searchQuerySyntaxException6.getSuppressed();
        throwableRankList0.replaceItem((java.lang.Throwable) searchQuerySyntaxException2, (java.lang.Throwable) searchQuerySyntaxException6);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList9 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable10 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException11 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable10);
        java.lang.Throwable[] throwableArray12 = searchQuerySyntaxException11.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException13 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException11);
        java.lang.Throwable throwable14 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException15 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable14);
        java.lang.Throwable[] throwableArray16 = searchQuerySyntaxException15.getSuppressed();
        throwableRankList9.replaceItem((java.lang.Throwable) searchQuerySyntaxException11, (java.lang.Throwable) searchQuerySyntaxException15);
        java.lang.Integer int18 = throwableRankList0.getCount((java.lang.Throwable) searchQuerySyntaxException15);
        java.util.List<java.lang.Throwable> throwableList19 = throwableRankList0.getOrder();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList20 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList22 = throwableRankList20.getNFirstElements((int) (short) 10);
        int int23 = throwableRankList20.size();
        int int24 = throwableRankList20.size();
        java.util.List<java.lang.Throwable> throwableList25 = throwableRankList20.getOrder();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList26 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable27 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException28 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable27);
        java.lang.Throwable[] throwableArray29 = searchQuerySyntaxException28.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException30 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException28);
        java.lang.Throwable throwable31 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException32 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable31);
        java.lang.Throwable[] throwableArray33 = searchQuerySyntaxException32.getSuppressed();
        throwableRankList26.replaceItem((java.lang.Throwable) searchQuerySyntaxException28, (java.lang.Throwable) searchQuerySyntaxException32);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList35 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable36 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException37 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable36);
        java.lang.Throwable[] throwableArray38 = searchQuerySyntaxException37.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException39 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException37);
        java.lang.Throwable throwable40 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException41 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable40);
        java.lang.Throwable[] throwableArray42 = searchQuerySyntaxException41.getSuppressed();
        throwableRankList35.replaceItem((java.lang.Throwable) searchQuerySyntaxException37, (java.lang.Throwable) searchQuerySyntaxException41);
        java.lang.Integer int44 = throwableRankList26.getCount((java.lang.Throwable) searchQuerySyntaxException41);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList45 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable46 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException47 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable46);
        java.lang.Throwable[] throwableArray48 = searchQuerySyntaxException47.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException49 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException47);
        java.lang.Throwable throwable50 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException51 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable50);
        java.lang.Throwable[] throwableArray52 = searchQuerySyntaxException51.getSuppressed();
        throwableRankList45.replaceItem((java.lang.Throwable) searchQuerySyntaxException47, (java.lang.Throwable) searchQuerySyntaxException51);
        java.util.List<java.lang.Throwable> throwableList54 = throwableRankList45.getOrder();
        java.lang.Throwable throwable55 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException56 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable55);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList57 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable58 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException59 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable58);
        java.lang.Throwable[] throwableArray60 = searchQuerySyntaxException59.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException61 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException59);
        java.lang.Throwable throwable62 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException63 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable62);
        java.lang.Throwable[] throwableArray64 = searchQuerySyntaxException63.getSuppressed();
        throwableRankList57.replaceItem((java.lang.Throwable) searchQuerySyntaxException59, (java.lang.Throwable) searchQuerySyntaxException63);
        searchQuerySyntaxException56.addSuppressed((java.lang.Throwable) searchQuerySyntaxException63);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException67 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException56);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException68 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException56);
        java.lang.Integer int69 = throwableRankList45.getCount((java.lang.Throwable) searchIndexNotAvailableException68);
        java.lang.Integer int70 = throwableRankList26.getCount((java.lang.Throwable) searchIndexNotAvailableException68);
        throwableRankList20.addItem((java.lang.Throwable) searchIndexNotAvailableException68);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList72 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable73 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException74 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable73);
        java.lang.Throwable[] throwableArray75 = searchQuerySyntaxException74.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException76 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException74);
        java.lang.Throwable throwable77 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException78 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable77);
        java.lang.Throwable[] throwableArray79 = searchQuerySyntaxException78.getSuppressed();
        throwableRankList72.replaceItem((java.lang.Throwable) searchQuerySyntaxException74, (java.lang.Throwable) searchQuerySyntaxException78);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException81 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException78);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException82 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException78);
        throwableRankList0.replaceItem((java.lang.Throwable) searchIndexNotAvailableException68, (java.lang.Throwable) searchQuerySyntaxException78);
        throwableRankList0.clear();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(throwableList19);
        org.junit.Assert.assertNotNull(throwableList22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(throwableList25);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNull(int44);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableList54);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNull(int69);
        org.junit.Assert.assertNull(int70);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray79);
    }

    @Test
    public void test1350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1350");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        int int12 = applicationVersion9.getMajorNumber();
        int int13 = applicationVersion9.getMinorNumber();
        java.lang.String str14 = applicationVersion9.getName();
        java.lang.String str15 = applicationVersion9.toShortString();
        java.lang.String str16 = applicationVersion9.getDirectDownloadURL();
        java.lang.String str17 = applicationVersion9.toShortString();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType22 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion27 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType22, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str28 = applicationVersion27.getDate();
        java.lang.String str29 = applicationVersion27.toShortString();
        int int30 = applicationVersion27.getMajorNumber();
        int int31 = applicationVersion27.getMinorNumber();
        java.lang.String str32 = applicationVersion27.getName();
        int int33 = applicationVersion27.getMinorNumber();
        java.lang.String str34 = applicationVersion27.getChanges();
        int int35 = applicationVersion9.compareTo(applicationVersion27);
        java.lang.String str36 = applicationVersion9.getName();
        java.lang.String str37 = applicationVersion9.getDirectDownloadURL();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "mpc" + "'", str14, "mpc");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1.0.0 " + "'", str15, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "./pubDate" + "'", str16, "./pubDate");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1.0.0 " + "'", str17, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + versionType22 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType22.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "./title" + "'", str28, "./title");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1.0.0 " + "'", str29, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "mpc" + "'", str32, "mpc");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "./title" + "'", str34, "./title");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "mpc" + "'", str36, "mpc");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "./pubDate" + "'", str37, "./pubDate");
    }

    @Test
    public void test1351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1351");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        net.sourceforge.atunes.model.AudioObjectProperty audioObjectProperty1 = net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY;
        boolean boolean2 = columnBean0.equals((java.lang.Object) audioObjectProperty1);
        int int3 = columnBean0.getWidth();
        int int4 = columnBean0.getOrder();
        net.sourceforge.atunes.model.CDMetadata cDMetadata5 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata5.setAlbumArtist("");
        java.lang.String str8 = cDMetadata5.getGenre();
        int int9 = cDMetadata5.getYear();
        int int10 = cDMetadata5.getYear();
        cDMetadata5.setGenre("./enclosure/@url");
        java.util.List<java.lang.String> strList13 = null;
        cDMetadata5.setTrackNames(strList13);
        cDMetadata5.setAlbumArtist("./link[@rel='enclosure']/@type");
        boolean boolean17 = columnBean0.equals((java.lang.Object) "./link[@rel='enclosure']/@type");
        net.sourceforge.atunes.model.CDMetadata cDMetadata18 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str19 = cDMetadata18.getGenre();
        java.util.List<java.lang.String> strList20 = cDMetadata18.getComposerNames();
        java.lang.String str21 = cDMetadata18.getAlbum();
        net.sourceforge.atunes.model.CDMetadata cDMetadata22 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata22.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList25 = cDMetadata22.getTracks();
        cDMetadata22.setAlbumArtist("/rss/channel/title");
        java.util.List<java.lang.String> strList28 = cDMetadata22.getTrackNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata29 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata29.setAlbumArtist("");
        java.lang.String str32 = cDMetadata29.getGenre();
        java.lang.String[] strArray34 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        cDMetadata29.setTrackNames((java.util.List<java.lang.String>) strList35);
        cDMetadata22.setTrackNames((java.util.List<java.lang.String>) strList35);
        cDMetadata18.setTrackNames((java.util.List<java.lang.String>) strList35);
        java.util.List<java.lang.String> strList40 = cDMetadata18.getTrackNames();
        boolean boolean41 = columnBean0.equals((java.lang.Object) cDMetadata18);
        boolean boolean42 = columnBean0.isVisible();
        int int43 = columnBean0.getOrder();
        org.junit.Assert.assertTrue("'" + audioObjectProperty1 + "' != '" + net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY + "'", audioObjectProperty1.equals(net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(strList20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(intList25);
        org.junit.Assert.assertNull(strList28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test1352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1352");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        java.lang.String str12 = applicationVersion9.getChanges();
        int int13 = applicationVersion9.getMinorNumber();
        java.lang.String str14 = applicationVersion9.getChanges();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType15 = applicationVersion9.getVersionType();
        int int16 = applicationVersion9.getMinorNumber();
        net.sourceforge.atunes.model.LocalAudioObjectFormat localAudioObjectFormat17 = net.sourceforge.atunes.model.LocalAudioObjectFormat.MP4_2;
        java.lang.String str18 = localAudioObjectFormat17.getExtension();
        boolean boolean19 = applicationVersion9.equals((java.lang.Object) localAudioObjectFormat17);
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "./title" + "'", str12, "./title");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "./title" + "'", str14, "./title");
        org.junit.Assert.assertTrue("'" + versionType15 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType15.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + localAudioObjectFormat17 + "' != '" + net.sourceforge.atunes.model.LocalAudioObjectFormat.MP4_2 + "'", localAudioObjectFormat17.equals(net.sourceforge.atunes.model.LocalAudioObjectFormat.MP4_2));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "mp4" + "'", str18, "mp4");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1353");
        net.sourceforge.atunes.model.LookAndFeelBean lookAndFeelBean0 = new net.sourceforge.atunes.model.LookAndFeelBean();
        lookAndFeelBean0.setName("./summary");
        lookAndFeelBean0.setSkin("./enclosure/@url");
        java.lang.String str5 = lookAndFeelBean0.getSkin();
        java.lang.String str6 = lookAndFeelBean0.getSkin();
        lookAndFeelBean0.setSkin("./description");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "./enclosure/@url" + "'", str5, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "./enclosure/@url" + "'", str6, "./enclosure/@url");
    }

    @Test
    public void test1354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1354");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str1 = feedType0.getUrlXPath();
        java.lang.String str2 = feedType0.getNameXPath();
        java.lang.String str3 = feedType0.getDescriptionXPath();
        java.lang.String str4 = feedType0.getTypeXPath();
        java.lang.String str5 = feedType0.getDescriptionXPath();
        java.lang.String str6 = feedType0.getEntryXPath();
        java.lang.String str7 = feedType0.getNameXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "./enclosure/@url" + "'", str1, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "/rss/channel/title" + "'", str2, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "./description" + "'", str3, "./description");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "./enclosure/@type" + "'", str4, "./enclosure/@type");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "./description" + "'", str5, "./description");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "/rss/channel/item" + "'", str6, "/rss/channel/item");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/rss/channel/title" + "'", str7, "/rss/channel/title");
    }

    @Test
    public void test1355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1355");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        int int12 = applicationVersion9.getMajorNumber();
        int int13 = applicationVersion9.getMinorNumber();
        java.lang.String str14 = applicationVersion9.getDate();
        java.lang.String str15 = applicationVersion9.getChanges();
        java.lang.String str16 = applicationVersion9.getDirectDownloadURL();
        int int17 = applicationVersion9.getMajorNumber();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "./title" + "'", str14, "./title");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "./title" + "'", str15, "./title");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "./pubDate" + "'", str16, "./pubDate");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test1356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1356");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.lang.String str3 = cDMetadata0.getGenre();
        java.lang.String[] strArray5 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList6);
        int int9 = cDMetadata0.getYear();
        net.sourceforge.atunes.model.CDMetadata cDMetadata10 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str11 = cDMetadata10.getGenre();
        java.lang.String str12 = cDMetadata10.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata13 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str14 = cDMetadata13.getGenre();
        java.util.List<java.lang.String> strList15 = cDMetadata13.getComposerNames();
        java.lang.String str16 = cDMetadata13.getAlbum();
        java.util.List<java.lang.Integer> intList17 = cDMetadata13.getTracks();
        int int18 = cDMetadata13.getYear();
        net.sourceforge.atunes.model.CDMetadata cDMetadata19 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str20 = cDMetadata19.getGenre();
        java.util.List<java.lang.String> strList21 = cDMetadata19.getComposerNames();
        java.lang.String str22 = cDMetadata19.getAlbum();
        java.util.List<java.lang.Integer> intList23 = cDMetadata19.getTracks();
        net.sourceforge.atunes.model.CDMetadata cDMetadata24 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata24.setAlbumArtist("");
        java.lang.String str28 = cDMetadata24.getTitle((int) (byte) -1);
        java.lang.String[] strArray30 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        cDMetadata24.setTrackNames((java.util.List<java.lang.String>) strList31);
        cDMetadata19.setTrackNames((java.util.List<java.lang.String>) strList31);
        cDMetadata19.setYear((int) (short) 1);
        int int37 = cDMetadata19.getYear();
        java.lang.String str38 = cDMetadata19.getGenre();
        cDMetadata19.setYear((int) (short) 10);
        net.sourceforge.atunes.model.CDMetadata cDMetadata41 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata41.setAlbumArtist("");
        java.lang.String str44 = cDMetadata41.getGenre();
        java.lang.String[] strArray46 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        cDMetadata41.setTrackNames((java.util.List<java.lang.String>) strList47);
        cDMetadata19.setTrackNames((java.util.List<java.lang.String>) strList47);
        cDMetadata13.setComposerNames((java.util.List<java.lang.String>) strList47);
        cDMetadata10.setArtistNames((java.util.List<java.lang.String>) strList47);
        cDMetadata0.setArtistNames((java.util.List<java.lang.String>) strList47);
        net.sourceforge.atunes.model.CDMetadata cDMetadata54 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata54.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList57 = cDMetadata54.getTracks();
        net.sourceforge.atunes.model.CDMetadata cDMetadata58 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str59 = cDMetadata58.getGenre();
        java.util.List<java.lang.String> strList60 = cDMetadata58.getComposerNames();
        java.lang.String str61 = cDMetadata58.getAlbum();
        net.sourceforge.atunes.model.CDMetadata cDMetadata62 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata62.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList65 = cDMetadata62.getTracks();
        cDMetadata62.setAlbumArtist("/rss/channel/title");
        java.util.List<java.lang.String> strList68 = cDMetadata62.getTrackNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata69 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata69.setAlbumArtist("");
        java.lang.String str72 = cDMetadata69.getGenre();
        java.lang.String[] strArray74 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList75 = new java.util.ArrayList<java.lang.String>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList75, strArray74);
        cDMetadata69.setTrackNames((java.util.List<java.lang.String>) strList75);
        cDMetadata62.setTrackNames((java.util.List<java.lang.String>) strList75);
        cDMetadata58.setTrackNames((java.util.List<java.lang.String>) strList75);
        net.sourceforge.atunes.model.FontSettings fontSettings80 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata81 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata81.setAlbumArtist("");
        boolean boolean84 = fontSettings80.equals((java.lang.Object) cDMetadata81);
        java.lang.String str85 = cDMetadata81.getAlbum();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList86 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList88 = throwableRankList86.getNFirstElements((int) (short) 10);
        throwableRankList86.clear();
        java.util.List<java.lang.Integer> intList91 = throwableRankList86.getNFirstElementCounts(150);
        cDMetadata81.setTracks(intList91);
        cDMetadata58.setTracks(intList91);
        cDMetadata54.setTracks(intList91);
        cDMetadata0.setTracks(intList91);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(strList15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(intList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(strList21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(intList23);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNull(intList57);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNull(strList60);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNull(intList65);
        org.junit.Assert.assertNull(strList68);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertNotNull(throwableList88);
        org.junit.Assert.assertNotNull(intList91);
    }

    @Test
    public void test1357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1357");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        int int12 = applicationVersion9.getMajorNumber();
        java.lang.String str13 = applicationVersion9.toShortString();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType18 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion23 = new net.sourceforge.atunes.model.ApplicationVersion("/feed/title", 150, 100, 35, versionType18, "/rss/channel/item", "hi!", "mp4", "0.150.-1 flac BETA");
        int int24 = applicationVersion9.compareTo(applicationVersion23);
        java.lang.String str25 = applicationVersion23.getDownloadURL();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList26 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        net.sourceforge.atunes.model.InconsistentRepositoryException inconsistentRepositoryException27 = new net.sourceforge.atunes.model.InconsistentRepositoryException();
        net.sourceforge.atunes.model.InconsistentRepositoryException inconsistentRepositoryException28 = new net.sourceforge.atunes.model.InconsistentRepositoryException();
        throwableRankList26.replaceItem((java.lang.Throwable) inconsistentRepositoryException27, (java.lang.Throwable) inconsistentRepositoryException28);
        boolean boolean30 = applicationVersion23.equals((java.lang.Object) throwableRankList26);
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1.0.0 " + "'", str13, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + versionType18 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType18.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test1358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1358");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        int int3 = cDMetadata0.getDisc();
        int int4 = cDMetadata0.getYear();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test1359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1359");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType8 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion13 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType8, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str14 = applicationVersion13.getDate();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType15 = applicationVersion13.getVersionType();
        java.lang.String str16 = applicationVersion13.getDownloadURL();
        int int17 = applicationVersion13.getMinorNumber();
        int int18 = applicationVersion13.getMajorNumber();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType19 = applicationVersion13.getVersionType();
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion24 = new net.sourceforge.atunes.model.ApplicationVersion("net.sourceforge.atunes.model.InconsistentRepositoryException", 10, (int) (short) 1, 120, versionType19, "mp+", "net.sourceforge.atunes.model.SearchIndexNotAvailableException: net.sourceforge.atunes.model.SearchIndexNotAvailableException: net.sourceforge.atunes.model.SearchQuerySyntaxException: net.sourceforge.atunes.model.SearchQuerySyntaxException", "net.sourceforge.atunes.model.SearchQuerySyntaxException: net.sourceforge.atunes.model.SearchIndexNotAvailableException: net.sourceforge.atunes.model.SearchQuerySyntaxException", "/feed/entry");
        org.junit.Assert.assertTrue("'" + versionType8 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType8.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "./title" + "'", str14, "./title");
        org.junit.Assert.assertTrue("'" + versionType15 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType15.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "./description" + "'", str16, "./description");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + versionType19 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType19.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
    }

    @Test
    public void test1360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1360");
        java.lang.Throwable throwable0 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException1 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable0);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList2 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable3 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException4 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable3);
        java.lang.Throwable[] throwableArray5 = searchQuerySyntaxException4.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException6 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException4);
        java.lang.Throwable throwable7 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException8 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable7);
        java.lang.Throwable[] throwableArray9 = searchQuerySyntaxException8.getSuppressed();
        throwableRankList2.replaceItem((java.lang.Throwable) searchQuerySyntaxException4, (java.lang.Throwable) searchQuerySyntaxException8);
        searchQuerySyntaxException1.addSuppressed((java.lang.Throwable) searchQuerySyntaxException8);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException12 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException1);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException13 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException1);
        java.lang.Throwable throwable14 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException15 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable14);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList16 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable17 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException18 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable17);
        java.lang.Throwable[] throwableArray19 = searchQuerySyntaxException18.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException20 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException18);
        java.lang.Throwable throwable21 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException22 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable21);
        java.lang.Throwable[] throwableArray23 = searchQuerySyntaxException22.getSuppressed();
        throwableRankList16.replaceItem((java.lang.Throwable) searchQuerySyntaxException18, (java.lang.Throwable) searchQuerySyntaxException22);
        searchQuerySyntaxException15.addSuppressed((java.lang.Throwable) searchQuerySyntaxException22);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException26 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException15);
        java.lang.Throwable throwable27 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException28 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable27);
        java.lang.Throwable[] throwableArray29 = searchQuerySyntaxException28.getSuppressed();
        searchQuerySyntaxException15.addSuppressed((java.lang.Throwable) searchQuerySyntaxException28);
        searchIndexNotAvailableException13.addSuppressed((java.lang.Throwable) searchQuerySyntaxException28);
        java.lang.Throwable throwable32 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException33 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable32);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList34 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable35 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException36 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable35);
        java.lang.Throwable[] throwableArray37 = searchQuerySyntaxException36.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException38 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException36);
        java.lang.Throwable throwable39 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException40 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable39);
        java.lang.Throwable[] throwableArray41 = searchQuerySyntaxException40.getSuppressed();
        throwableRankList34.replaceItem((java.lang.Throwable) searchQuerySyntaxException36, (java.lang.Throwable) searchQuerySyntaxException40);
        searchQuerySyntaxException33.addSuppressed((java.lang.Throwable) searchQuerySyntaxException40);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException44 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException33);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException45 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException33);
        searchQuerySyntaxException28.addSuppressed((java.lang.Throwable) searchQuerySyntaxException33);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException47 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException28);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray41);
    }

    @Test
    public void test1361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1361");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.lang.String str4 = cDMetadata0.getTitle((int) (byte) -1);
        net.sourceforge.atunes.model.CDMetadata cDMetadata5 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata5.setAlbumArtist("");
        java.lang.String str8 = cDMetadata5.getGenre();
        int int9 = cDMetadata5.getYear();
        int int10 = cDMetadata5.getYear();
        net.sourceforge.atunes.model.CDMetadata cDMetadata11 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str12 = cDMetadata11.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata13 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata13.setAlbumArtist("");
        java.lang.String str16 = cDMetadata13.getGenre();
        java.lang.String[] strArray18 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        cDMetadata13.setTrackNames((java.util.List<java.lang.String>) strList19);
        cDMetadata11.setComposerNames((java.util.List<java.lang.String>) strList19);
        cDMetadata5.setTrackNames((java.util.List<java.lang.String>) strList19);
        net.sourceforge.atunes.model.CDMetadata cDMetadata24 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str25 = cDMetadata24.getGenre();
        java.util.List<java.lang.String> strList26 = cDMetadata24.getComposerNames();
        java.lang.String str27 = cDMetadata24.getAlbum();
        java.util.List<java.lang.Integer> intList28 = cDMetadata24.getTracks();
        int int29 = cDMetadata24.getDisc();
        java.lang.String[] strArray37 = new java.lang.String[] { "net.sourceforge.atunes.model.InconsistentRepositoryException", "./title", "1.0.0 ", "./title", "./duration", "mpc", "net.sourceforge.atunes.model.InconsistentRepositoryException" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        cDMetadata24.setArtistNames((java.util.List<java.lang.String>) strList38);
        cDMetadata5.setArtistNames((java.util.List<java.lang.String>) strList38);
        cDMetadata0.setComposerNames((java.util.List<java.lang.String>) strList38);
        cDMetadata0.setAlbumArtist("./description");
        int int45 = cDMetadata0.getDisc();
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(intList28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test1362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1362");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList2 = throwableRankList0.getNFirstElements((int) (short) 10);
        throwableRankList0.clear();
        java.util.List<java.lang.Integer> intList5 = throwableRankList0.getNFirstElementCounts(0);
        int int6 = throwableRankList0.size();
        throwableRankList0.clear();
        org.junit.Assert.assertNotNull(throwableList2);
        org.junit.Assert.assertNotNull(intList5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test1363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1363");
        net.sourceforge.atunes.model.ColumnBean columnBean4 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean5 = columnBean4.isVisible();
        net.sourceforge.atunes.model.SubmissionState submissionState6 = net.sourceforge.atunes.model.SubmissionState.PENDING;
        boolean boolean7 = columnBean4.equals((java.lang.Object) submissionState6);
        columnBean4.setVisible(false);
        net.sourceforge.atunes.model.ColumnSort columnSort10 = columnBean4.getSort();
        net.sourceforge.atunes.model.CDMetadata cDMetadata11 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata11.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList14 = cDMetadata11.getTracks();
        cDMetadata11.setAlbumArtist("/rss/channel/title");
        java.util.List<java.lang.String> strList17 = cDMetadata11.getTrackNames();
        cDMetadata11.setAlbum("/rss/channel/item");
        java.util.List<java.lang.String> strList20 = cDMetadata11.getArtistNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata21 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str22 = cDMetadata21.getGenre();
        java.util.List<java.lang.String> strList23 = cDMetadata21.getComposerNames();
        java.lang.String str24 = cDMetadata21.getAlbum();
        java.util.List<java.lang.Integer> intList25 = cDMetadata21.getTracks();
        net.sourceforge.atunes.model.CDMetadata cDMetadata26 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata26.setAlbumArtist("");
        java.lang.String str30 = cDMetadata26.getTitle((int) (byte) -1);
        java.lang.String[] strArray32 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        cDMetadata26.setTrackNames((java.util.List<java.lang.String>) strList33);
        cDMetadata21.setTrackNames((java.util.List<java.lang.String>) strList33);
        cDMetadata21.setYear((int) (short) 1);
        int int39 = cDMetadata21.getYear();
        java.lang.String str40 = cDMetadata21.getGenre();
        cDMetadata21.setYear((int) (short) 10);
        net.sourceforge.atunes.model.CDMetadata cDMetadata43 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata43.setAlbumArtist("");
        java.lang.String str46 = cDMetadata43.getGenre();
        java.lang.String[] strArray48 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        cDMetadata43.setTrackNames((java.util.List<java.lang.String>) strList49);
        cDMetadata21.setTrackNames((java.util.List<java.lang.String>) strList49);
        cDMetadata11.setArtistNames((java.util.List<java.lang.String>) strList49);
        boolean boolean54 = columnBean4.equals((java.lang.Object) strList49);
        net.sourceforge.atunes.model.ColumnSort columnSort55 = columnBean4.getSort();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType56 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.RELEASE_CANDIDATE;
        boolean boolean57 = columnBean4.equals((java.lang.Object) versionType56);
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion62 = new net.sourceforge.atunes.model.ApplicationVersion("0.150.-1 flac BETA", (int) (byte) 10, (int) (byte) 0, 3, versionType56, "10.1.1 ", "/rss/channel/title", "./title", "flv");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + submissionState6 + "' != '" + net.sourceforge.atunes.model.SubmissionState.PENDING + "'", submissionState6.equals(net.sourceforge.atunes.model.SubmissionState.PENDING));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(columnSort10);
        org.junit.Assert.assertNull(intList14);
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertNull(strList20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(strList23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(intList25);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(columnSort55);
        org.junit.Assert.assertTrue("'" + versionType56 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.RELEASE_CANDIDATE + "'", versionType56.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.RELEASE_CANDIDATE));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test1364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1364");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.ATOM;
        java.lang.String str1 = feedType0.getTypeXPath();
        java.lang.String str2 = feedType0.getDurationXPath();
        java.lang.String str3 = feedType0.getTypeXPath();
        java.lang.String str4 = feedType0.getTitleXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.ATOM + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.ATOM));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "./link[@rel='enclosure']/@type" + "'", str1, "./link[@rel='enclosure']/@type");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "./link[@rel='enclosure']/@type" + "'", str3, "./link[@rel='enclosure']/@type");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "./title" + "'", str4, "./title");
    }

    @Test
    public void test1365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1365");
        net.sourceforge.atunes.model.ColumnBean columnBean4 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean5 = columnBean4.isVisible();
        columnBean4.setOrder((int) (byte) -1);
        columnBean4.setVisible(false);
        columnBean4.setWidth(0);
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType16 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion21 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType16, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str22 = applicationVersion21.getDate();
        java.lang.String str23 = applicationVersion21.toShortString();
        java.lang.String str24 = applicationVersion21.getChanges();
        boolean boolean25 = columnBean4.equals((java.lang.Object) applicationVersion21);
        java.lang.String str26 = applicationVersion21.getDownloadURL();
        java.lang.String str27 = applicationVersion21.getChanges();
        java.lang.String str28 = applicationVersion21.getDownloadURL();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType29 = applicationVersion21.getVersionType();
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion34 = new net.sourceforge.atunes.model.ApplicationVersion("/rss/channel/item", (int) (short) 10, 1, (int) (byte) 1, versionType29, "./updated", "mp4", "1.0.0 mpc ", "rm");
        java.lang.String str35 = applicationVersion34.toShortString();
        java.lang.String str36 = applicationVersion34.getChanges();
        java.lang.String str37 = applicationVersion34.getChanges();
        java.lang.String str38 = applicationVersion34.getDirectDownloadURL();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + versionType16 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType16.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "./title" + "'", str22, "./title");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1.0.0 " + "'", str23, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "./title" + "'", str24, "./title");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "./description" + "'", str26, "./description");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "./title" + "'", str27, "./title");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "./description" + "'", str28, "./description");
        org.junit.Assert.assertTrue("'" + versionType29 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType29.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "10.1.1 " + "'", str35, "10.1.1 ");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "rm" + "'", str36, "rm");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "rm" + "'", str37, "rm");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1.0.0 mpc " + "'", str38, "1.0.0 mpc ");
    }

    @Test
    public void test1366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1366");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        int int12 = applicationVersion9.getMajorNumber();
        java.lang.String str13 = applicationVersion9.toShortString();
        net.sourceforge.atunes.model.ArtistViewMode artistViewMode14 = net.sourceforge.atunes.model.ArtistViewMode.BOTH;
        boolean boolean15 = applicationVersion9.equals((java.lang.Object) artistViewMode14);
        int int16 = applicationVersion9.getMajorNumber();
        int int17 = applicationVersion9.getRevisionNumber();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType22 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion27 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType22, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str28 = applicationVersion27.getDate();
        java.lang.String str29 = applicationVersion27.toShortString();
        java.lang.String str30 = applicationVersion27.toShortString();
        java.lang.String str31 = applicationVersion27.getDownloadURL();
        int int32 = applicationVersion27.getMajorNumber();
        int int33 = applicationVersion27.getRevisionNumber();
        int int34 = applicationVersion9.compareTo(applicationVersion27);
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType39 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion44 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType39, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str45 = applicationVersion44.getDate();
        java.lang.String str46 = applicationVersion44.toShortString();
        int int47 = applicationVersion44.getMajorNumber();
        int int48 = applicationVersion44.getMinorNumber();
        java.lang.String str49 = applicationVersion44.getName();
        java.lang.String str50 = applicationVersion44.toShortString();
        java.lang.String str51 = applicationVersion44.getDirectDownloadURL();
        java.lang.String str52 = applicationVersion44.toShortString();
        java.lang.String str53 = applicationVersion44.getDownloadURL();
        int int54 = applicationVersion44.getMinorNumber();
        boolean boolean55 = applicationVersion27.equals((java.lang.Object) applicationVersion44);
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1.0.0 " + "'", str13, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + artistViewMode14 + "' != '" + net.sourceforge.atunes.model.ArtistViewMode.BOTH + "'", artistViewMode14.equals(net.sourceforge.atunes.model.ArtistViewMode.BOTH));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + versionType22 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType22.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "./title" + "'", str28, "./title");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1.0.0 " + "'", str29, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1.0.0 " + "'", str30, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "./description" + "'", str31, "./description");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + versionType39 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType39.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "./title" + "'", str45, "./title");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1.0.0 " + "'", str46, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "mpc" + "'", str49, "mpc");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "1.0.0 " + "'", str50, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "./pubDate" + "'", str51, "./pubDate");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "1.0.0 " + "'", str52, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "./description" + "'", str53, "./description");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test1367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1367");
        net.sourceforge.atunes.model.LookAndFeelBean lookAndFeelBean0 = new net.sourceforge.atunes.model.LookAndFeelBean();
        java.lang.String str1 = lookAndFeelBean0.getSkin();
        lookAndFeelBean0.setName("net.sourceforge.atunes.model.SearchQuerySyntaxException");
        lookAndFeelBean0.setSkin("");
        java.lang.String str6 = lookAndFeelBean0.getSkin();
        lookAndFeelBean0.setSkin("mpc");
        java.lang.String str9 = lookAndFeelBean0.getSkin();
        java.lang.String str10 = lookAndFeelBean0.getName();
        lookAndFeelBean0.setSkin("net.sourceforge.atunes.model.SearchQuerySyntaxException: net.sourceforge.atunes.model.SearchQuerySyntaxException");
        lookAndFeelBean0.setName("flv");
        lookAndFeelBean0.setName("flac");
        java.lang.String str17 = lookAndFeelBean0.getName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "mpc" + "'", str9, "mpc");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "net.sourceforge.atunes.model.SearchQuerySyntaxException" + "'", str10, "net.sourceforge.atunes.model.SearchQuerySyntaxException");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "flac" + "'", str17, "flac");
    }

    @Test
    public void test1368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1368");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        net.sourceforge.atunes.model.AudioObjectProperty audioObjectProperty1 = net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY;
        boolean boolean2 = columnBean0.equals((java.lang.Object) audioObjectProperty1);
        int int3 = columnBean0.getWidth();
        boolean boolean4 = columnBean0.isVisible();
        columnBean0.setVisible(false);
        org.junit.Assert.assertTrue("'" + audioObjectProperty1 + "' != '" + net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY + "'", audioObjectProperty1.equals(net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1369");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType8 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion13 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType8, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str14 = applicationVersion13.getDate();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType15 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.BETA;
        boolean boolean16 = applicationVersion13.equals((java.lang.Object) versionType15);
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion21 = new net.sourceforge.atunes.model.ApplicationVersion("net.sourceforge.atunes.model.SearchQuerySyntaxException: net.sourceforge.atunes.model.SearchQuerySyntaxException", 1, (int) (byte) 10, (int) (byte) 100, versionType15, "10.52.35  ", "/rss/channel/item", "./pubDate", "flv");
        java.lang.String str22 = applicationVersion21.toString();
        org.junit.Assert.assertTrue("'" + versionType8 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType8.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "./title" + "'", str14, "./title");
        org.junit.Assert.assertTrue("'" + versionType15 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.BETA + "'", versionType15.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.BETA));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1.10.100 10.52.35   BETA" + "'", str22, "1.10.100 10.52.35   BETA");
    }

    @Test
    public void test1370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1370");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.BETA;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("mpc", (int) (short) 0, 150, (int) (byte) -1, versionType4, "flac", "/rss/channel/item", "hi!", "./pubDate");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.getChanges();
        java.lang.String str12 = applicationVersion9.getDirectDownloadURL();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.BETA + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.BETA));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "mpc" + "'", str10, "mpc");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "./pubDate" + "'", str11, "./pubDate");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
    }

    @Test
    public void test1371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1371");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType11 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.BETA;
        boolean boolean12 = applicationVersion9.equals((java.lang.Object) versionType11);
        int int13 = applicationVersion9.getMajorNumber();
        int int14 = applicationVersion9.getRevisionNumber();
        java.lang.String str15 = applicationVersion9.toString();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertTrue("'" + versionType11 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.BETA + "'", versionType11.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.BETA));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1.0.0 mpc " + "'", str15, "1.0.0 mpc ");
    }

    @Test
    public void test1372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1372");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType8 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion13 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType8, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str14 = applicationVersion13.getDate();
        java.lang.String str15 = applicationVersion13.toShortString();
        java.lang.String str16 = applicationVersion13.getChanges();
        int int17 = applicationVersion13.getMinorNumber();
        java.lang.String str18 = applicationVersion13.getChanges();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType19 = applicationVersion13.getVersionType();
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion24 = new net.sourceforge.atunes.model.ApplicationVersion("SOCKS_PROXY", (-1), (int) ' ', 0, versionType19, "/feed/title", "mp4", "./updated", "SOCKS_PROXY");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList25 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        net.sourceforge.atunes.model.InconsistentRepositoryException inconsistentRepositoryException26 = new net.sourceforge.atunes.model.InconsistentRepositoryException();
        net.sourceforge.atunes.model.InconsistentRepositoryException inconsistentRepositoryException27 = new net.sourceforge.atunes.model.InconsistentRepositoryException();
        throwableRankList25.replaceItem((java.lang.Throwable) inconsistentRepositoryException26, (java.lang.Throwable) inconsistentRepositoryException27);
        int int29 = throwableRankList25.size();
        java.lang.Throwable throwable30 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException31 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable30);
        java.lang.Throwable[] throwableArray32 = searchQuerySyntaxException31.getSuppressed();
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException33 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException31);
        throwableRankList25.addItem((java.lang.Throwable) searchQuerySyntaxException31);
        boolean boolean35 = applicationVersion24.equals((java.lang.Object) searchQuerySyntaxException31);
        org.junit.Assert.assertTrue("'" + versionType8 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType8.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "./title" + "'", str14, "./title");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1.0.0 " + "'", str15, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "./title" + "'", str16, "./title");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "./title" + "'", str18, "./title");
        org.junit.Assert.assertTrue("'" + versionType19 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType19.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test1373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1373");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        fontSettings0.setUseFontSmoothing(false);
        fontSettings0.setUseFontSmoothingSettingsFromOs(false);
        net.sourceforge.atunes.model.IFontBean iFontBean5 = null;
        fontSettings0.setFont(iFontBean5);
        boolean boolean7 = fontSettings0.isUseFontSmoothingSettingsFromOs();
        boolean boolean8 = fontSettings0.isUseFontSmoothing();
        net.sourceforge.atunes.model.IFontBean iFontBean9 = fontSettings0.getFont();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(iFontBean9);
    }

    @Test
    public void test1374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1374");
        net.sourceforge.atunes.model.LookAndFeelBean lookAndFeelBean0 = new net.sourceforge.atunes.model.LookAndFeelBean();
        lookAndFeelBean0.setName("./summary");
        lookAndFeelBean0.setSkin("./enclosure/@url");
        java.lang.String str5 = lookAndFeelBean0.getSkin();
        lookAndFeelBean0.setSkin("net.sourceforge.atunes.model.SearchQuerySyntaxException: net.sourceforge.atunes.model.SearchIndexNotAvailableException: net.sourceforge.atunes.model.SearchQuerySyntaxException");
        lookAndFeelBean0.setSkin("10.1.1 ");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "./enclosure/@url" + "'", str5, "./enclosure/@url");
    }

    @Test
    public void test1375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1375");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        java.lang.String str12 = applicationVersion9.getChanges();
        int int13 = applicationVersion9.getMinorNumber();
        int int14 = applicationVersion9.getMinorNumber();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType19 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion24 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType19, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str25 = applicationVersion24.getDate();
        java.lang.String str26 = applicationVersion24.toShortString();
        int int27 = applicationVersion24.getMajorNumber();
        java.lang.String str28 = applicationVersion24.toShortString();
        net.sourceforge.atunes.model.ArtistViewMode artistViewMode29 = net.sourceforge.atunes.model.ArtistViewMode.BOTH;
        boolean boolean30 = applicationVersion24.equals((java.lang.Object) artistViewMode29);
        int int31 = applicationVersion24.getMajorNumber();
        java.lang.String str32 = applicationVersion24.getDirectDownloadURL();
        java.lang.String str33 = applicationVersion24.getDownloadURL();
        int int34 = applicationVersion9.compareTo(applicationVersion24);
        java.lang.String str35 = applicationVersion9.getDownloadURL();
        java.lang.String str36 = applicationVersion9.getDirectDownloadURL();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "./title" + "'", str12, "./title");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + versionType19 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType19.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "./title" + "'", str25, "./title");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1.0.0 " + "'", str26, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1.0.0 " + "'", str28, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + artistViewMode29 + "' != '" + net.sourceforge.atunes.model.ArtistViewMode.BOTH + "'", artistViewMode29.equals(net.sourceforge.atunes.model.ArtistViewMode.BOTH));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "./pubDate" + "'", str32, "./pubDate");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "./description" + "'", str33, "./description");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "./description" + "'", str35, "./description");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "./pubDate" + "'", str36, "./pubDate");
    }

    @Test
    public void test1376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1376");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        fontSettings0.setUseFontSmoothing(false);
        fontSettings0.setUseFontSmoothing(false);
        boolean boolean6 = fontSettings0.equals((java.lang.Object) 10L);
        fontSettings0.setUseFontSmoothing(true);
        fontSettings0.setUseFontSmoothingSettingsFromOs(false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1377");
        net.sourceforge.atunes.model.LookAndFeelBean lookAndFeelBean0 = new net.sourceforge.atunes.model.LookAndFeelBean();
        java.lang.String str1 = lookAndFeelBean0.getSkin();
        lookAndFeelBean0.setName("net.sourceforge.atunes.model.SearchQuerySyntaxException");
        java.lang.String str4 = lookAndFeelBean0.getName();
        lookAndFeelBean0.setSkin("/rss/channel/item");
        java.lang.String str7 = lookAndFeelBean0.getName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "net.sourceforge.atunes.model.SearchQuerySyntaxException" + "'", str4, "net.sourceforge.atunes.model.SearchQuerySyntaxException");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "net.sourceforge.atunes.model.SearchQuerySyntaxException" + "'", str7, "net.sourceforge.atunes.model.SearchQuerySyntaxException");
    }

    @Test
    public void test1378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1378");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        columnBean0.setVisible(false);
        columnBean0.setWidth(0);
        net.sourceforge.atunes.model.ColumnSort columnSort8 = columnBean0.getSort();
        net.sourceforge.atunes.model.ColumnSort columnSort9 = columnBean0.getSort();
        columnBean0.setOrder((int) (short) 100);
        columnBean0.setOrder((int) (byte) -1);
        columnBean0.setOrder((int) (short) -1);
        net.sourceforge.atunes.model.ColumnSort columnSort16 = columnBean0.getSort();
        net.sourceforge.atunes.model.ColumnSort columnSort17 = null;
        columnBean0.setSort(columnSort17);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(columnSort8);
        org.junit.Assert.assertNull(columnSort9);
        org.junit.Assert.assertNull(columnSort16);
    }

    @Test
    public void test1379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1379");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList2 = throwableRankList0.getNFirstElements((int) (short) 10);
        int int3 = throwableRankList0.size();
        int int4 = throwableRankList0.size();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList5 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        net.sourceforge.atunes.model.InconsistentRepositoryException inconsistentRepositoryException6 = new net.sourceforge.atunes.model.InconsistentRepositoryException();
        net.sourceforge.atunes.model.InconsistentRepositoryException inconsistentRepositoryException7 = new net.sourceforge.atunes.model.InconsistentRepositoryException();
        throwableRankList5.replaceItem((java.lang.Throwable) inconsistentRepositoryException6, (java.lang.Throwable) inconsistentRepositoryException7);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException9 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) inconsistentRepositoryException7);
        java.lang.Integer int10 = throwableRankList0.getCount((java.lang.Throwable) searchIndexNotAvailableException9);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList11 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable12 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException13 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable12);
        java.lang.Throwable[] throwableArray14 = searchQuerySyntaxException13.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException15 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException13);
        java.lang.Throwable throwable16 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException17 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable16);
        java.lang.Throwable[] throwableArray18 = searchQuerySyntaxException17.getSuppressed();
        throwableRankList11.replaceItem((java.lang.Throwable) searchQuerySyntaxException13, (java.lang.Throwable) searchQuerySyntaxException17);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException20 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException17);
        java.lang.Integer int21 = throwableRankList0.getCount((java.lang.Throwable) searchQuerySyntaxException17);
        org.junit.Assert.assertNotNull(throwableList2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNull(int21);
    }

    @Test
    public void test1380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1380");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList3 = cDMetadata0.getTracks();
        cDMetadata0.setAlbumArtist("/rss/channel/title");
        java.util.List<java.lang.String> strList6 = cDMetadata0.getTrackNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata7 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata7.setAlbumArtist("");
        java.lang.String str10 = cDMetadata7.getGenre();
        java.lang.String[] strArray12 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        cDMetadata7.setTrackNames((java.util.List<java.lang.String>) strList13);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList13);
        java.util.List<java.lang.String> strList17 = cDMetadata0.getTrackNames();
        java.lang.String str18 = cDMetadata0.getGenre();
        org.junit.Assert.assertNull(intList3);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test1381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1381");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        net.sourceforge.atunes.model.ColumnSort columnSort4 = net.sourceforge.atunes.model.ColumnSort.DESCENDING;
        columnBean0.setSort(columnSort4);
        int int6 = columnBean0.getOrder();
        net.sourceforge.atunes.model.CDMetadata cDMetadata7 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str8 = cDMetadata7.getGenre();
        java.util.List<java.lang.String> strList9 = cDMetadata7.getComposerNames();
        java.lang.String str10 = cDMetadata7.getAlbum();
        java.util.List<java.lang.Integer> intList11 = cDMetadata7.getTracks();
        net.sourceforge.atunes.model.CDMetadata cDMetadata12 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata12.setAlbumArtist("");
        java.lang.String str16 = cDMetadata12.getTitle((int) (byte) -1);
        java.lang.String[] strArray18 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        cDMetadata12.setTrackNames((java.util.List<java.lang.String>) strList19);
        cDMetadata7.setTrackNames((java.util.List<java.lang.String>) strList19);
        java.util.List<java.lang.Integer> intList23 = null;
        cDMetadata7.setTracks(intList23);
        cDMetadata7.setDisc((int) (short) 100);
        boolean boolean27 = columnBean0.equals((java.lang.Object) cDMetadata7);
        int int28 = cDMetadata7.getDisc();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + columnSort4 + "' != '" + net.sourceforge.atunes.model.ColumnSort.DESCENDING + "'", columnSort4.equals(net.sourceforge.atunes.model.ColumnSort.DESCENDING));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(strList9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(intList11);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
    }

    @Test
    public void test1382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1382");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable1 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException2 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable1);
        java.lang.Throwable[] throwableArray3 = searchQuerySyntaxException2.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException4 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException2);
        java.lang.Throwable throwable5 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException6 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable5);
        java.lang.Throwable[] throwableArray7 = searchQuerySyntaxException6.getSuppressed();
        throwableRankList0.replaceItem((java.lang.Throwable) searchQuerySyntaxException2, (java.lang.Throwable) searchQuerySyntaxException6);
        java.util.List<java.lang.Throwable> throwableList9 = throwableRankList0.getOrder();
        java.lang.Throwable throwable10 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException11 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable10);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList12 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable13 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException14 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable13);
        java.lang.Throwable[] throwableArray15 = searchQuerySyntaxException14.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException16 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException14);
        java.lang.Throwable throwable17 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException18 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable17);
        java.lang.Throwable[] throwableArray19 = searchQuerySyntaxException18.getSuppressed();
        throwableRankList12.replaceItem((java.lang.Throwable) searchQuerySyntaxException14, (java.lang.Throwable) searchQuerySyntaxException18);
        searchQuerySyntaxException11.addSuppressed((java.lang.Throwable) searchQuerySyntaxException18);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException22 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException11);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException23 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException11);
        java.lang.Integer int24 = throwableRankList0.getCount((java.lang.Throwable) searchIndexNotAvailableException23);
        java.lang.Throwable throwable25 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException26 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable25);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList27 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable28 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException29 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable28);
        java.lang.Throwable[] throwableArray30 = searchQuerySyntaxException29.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException31 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException29);
        java.lang.Throwable throwable32 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException33 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable32);
        java.lang.Throwable[] throwableArray34 = searchQuerySyntaxException33.getSuppressed();
        throwableRankList27.replaceItem((java.lang.Throwable) searchQuerySyntaxException29, (java.lang.Throwable) searchQuerySyntaxException33);
        searchQuerySyntaxException26.addSuppressed((java.lang.Throwable) searchQuerySyntaxException33);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException37 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException26);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException38 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException26);
        java.lang.Throwable throwable39 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException40 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable39);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList41 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable42 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException43 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable42);
        java.lang.Throwable[] throwableArray44 = searchQuerySyntaxException43.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException45 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException43);
        java.lang.Throwable throwable46 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException47 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable46);
        java.lang.Throwable[] throwableArray48 = searchQuerySyntaxException47.getSuppressed();
        throwableRankList41.replaceItem((java.lang.Throwable) searchQuerySyntaxException43, (java.lang.Throwable) searchQuerySyntaxException47);
        searchQuerySyntaxException40.addSuppressed((java.lang.Throwable) searchQuerySyntaxException47);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException51 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException40);
        java.lang.Throwable throwable52 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException53 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable52);
        java.lang.Throwable[] throwableArray54 = searchQuerySyntaxException53.getSuppressed();
        searchQuerySyntaxException40.addSuppressed((java.lang.Throwable) searchQuerySyntaxException53);
        searchIndexNotAvailableException38.addSuppressed((java.lang.Throwable) searchQuerySyntaxException53);
        java.lang.Throwable throwable57 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException58 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable57);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList59 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable60 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException61 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable60);
        java.lang.Throwable[] throwableArray62 = searchQuerySyntaxException61.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException63 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException61);
        java.lang.Throwable throwable64 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException65 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable64);
        java.lang.Throwable[] throwableArray66 = searchQuerySyntaxException65.getSuppressed();
        throwableRankList59.replaceItem((java.lang.Throwable) searchQuerySyntaxException61, (java.lang.Throwable) searchQuerySyntaxException65);
        searchQuerySyntaxException58.addSuppressed((java.lang.Throwable) searchQuerySyntaxException65);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException69 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException58);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException70 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException58);
        searchQuerySyntaxException53.addSuppressed((java.lang.Throwable) searchQuerySyntaxException58);
        java.lang.Integer int72 = throwableRankList0.getCount((java.lang.Throwable) searchQuerySyntaxException58);
        throwableRankList0.clear();
        java.util.List<java.lang.Throwable> throwableList75 = throwableRankList0.getNFirstElements(0);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableList9);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNull(int72);
        org.junit.Assert.assertNotNull(throwableList75);
    }

    @Test
    public void test1383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1383");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata1 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata1.setAlbumArtist("");
        boolean boolean4 = fontSettings0.equals((java.lang.Object) cDMetadata1);
        net.sourceforge.atunes.model.IFontBean iFontBean5 = null;
        fontSettings0.setFont(iFontBean5);
        fontSettings0.setUseFontSmoothing(true);
        net.sourceforge.atunes.model.IFontBean iFontBean9 = fontSettings0.getFont();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(iFontBean9);
    }

    @Test
    public void test1384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1384");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType12 = applicationVersion9.getVersionType();
        int int13 = applicationVersion9.getMinorNumber();
        java.lang.String str14 = applicationVersion9.getDirectDownloadURL();
        int int15 = applicationVersion9.getMajorNumber();
        int int16 = applicationVersion9.getMinorNumber();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + versionType12 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType12.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "./pubDate" + "'", str14, "./pubDate");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test1385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1385");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.lang.String str3 = cDMetadata0.getAlbum();
        java.util.List<java.lang.Integer> intList4 = cDMetadata0.getTracks();
        cDMetadata0.setAlbumArtist("mpc");
        net.sourceforge.atunes.model.CDMetadata cDMetadata7 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata7.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList10 = cDMetadata7.getTracks();
        cDMetadata7.setAlbumArtist("/rss/channel/title");
        java.util.List<java.lang.String> strList13 = cDMetadata7.getTrackNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata14 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata14.setAlbumArtist("");
        java.lang.String str17 = cDMetadata14.getGenre();
        java.lang.String[] strArray19 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        cDMetadata14.setTrackNames((java.util.List<java.lang.String>) strList20);
        cDMetadata7.setTrackNames((java.util.List<java.lang.String>) strList20);
        cDMetadata0.setArtistNames((java.util.List<java.lang.String>) strList20);
        java.lang.String str25 = cDMetadata0.getGenre();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(intList4);
        org.junit.Assert.assertNull(intList10);
        org.junit.Assert.assertNull(strList13);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test1386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1386");
        net.sourceforge.atunes.model.LookAndFeelBean lookAndFeelBean0 = new net.sourceforge.atunes.model.LookAndFeelBean();
        java.lang.String str1 = lookAndFeelBean0.getSkin();
        lookAndFeelBean0.setSkin("./enclosure/@url");
        lookAndFeelBean0.setName("net.sourceforge.atunes.model.SearchQuerySyntaxException: net.sourceforge.atunes.model.SearchIndexNotAvailableException: net.sourceforge.atunes.model.SearchQuerySyntaxException");
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test1387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1387");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        java.lang.String str12 = applicationVersion9.getChanges();
        int int13 = applicationVersion9.getRevisionNumber();
        int int14 = applicationVersion9.getRevisionNumber();
        java.lang.String str15 = applicationVersion9.toString();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "./title" + "'", str12, "./title");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1.0.0 mpc " + "'", str15, "1.0.0 mpc ");
    }

    @Test
    public void test1388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1388");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType12 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion17 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType12, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str18 = applicationVersion17.getDate();
        java.lang.String str19 = applicationVersion17.toShortString();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType20 = applicationVersion17.getVersionType();
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion25 = new net.sourceforge.atunes.model.ApplicationVersion("1.0.0 ", (int) (short) 10, (int) '4', (int) '#', versionType20, "", "./enclosure/@url", "SOCKS_PROXY", "./enclosure/@url");
        java.lang.String str26 = applicationVersion25.getName();
        java.lang.String str27 = applicationVersion25.toString();
        net.sourceforge.atunes.model.FeedType feedType28 = net.sourceforge.atunes.model.FeedType.ATOM;
        java.lang.String str29 = feedType28.getTypeXPath();
        java.lang.String str30 = feedType28.getUrlXPath();
        boolean boolean31 = applicationVersion25.equals((java.lang.Object) feedType28);
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType32 = applicationVersion25.getVersionType();
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion37 = new net.sourceforge.atunes.model.ApplicationVersion("HTTP_PROXY", 0, 120, (int) (byte) 1, versionType32, "", "mp4", "./description", "net.sourceforge.atunes.model.SearchIndexNotAvailableException: net.sourceforge.atunes.model.SearchQuerySyntaxException");
        java.lang.Class<?> wildcardClass38 = applicationVersion37.getClass();
        org.junit.Assert.assertTrue("'" + versionType12 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType12.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "./title" + "'", str18, "./title");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1.0.0 " + "'", str19, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + versionType20 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType20.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "10.52.35  " + "'", str27, "10.52.35  ");
        org.junit.Assert.assertTrue("'" + feedType28 + "' != '" + net.sourceforge.atunes.model.FeedType.ATOM + "'", feedType28.equals(net.sourceforge.atunes.model.FeedType.ATOM));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "./link[@rel='enclosure']/@type" + "'", str29, "./link[@rel='enclosure']/@type");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + versionType32 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType32.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test1389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1389");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.BETA;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("mpc", (int) (short) 0, 150, (int) (byte) -1, versionType4, "flac", "/rss/channel/item", "hi!", "./pubDate");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType10 = applicationVersion9.getVersionType();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType15 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion20 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType15, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str21 = applicationVersion20.getDate();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType22 = applicationVersion20.getVersionType();
        java.lang.String str23 = applicationVersion20.getDownloadURL();
        int int24 = applicationVersion20.getMinorNumber();
        boolean boolean25 = applicationVersion9.equals((java.lang.Object) int24);
        java.lang.String str26 = applicationVersion9.getDate();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.BETA + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.BETA));
        org.junit.Assert.assertTrue("'" + versionType10 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.BETA + "'", versionType10.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.BETA));
        org.junit.Assert.assertTrue("'" + versionType15 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType15.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "./title" + "'", str21, "./title");
        org.junit.Assert.assertTrue("'" + versionType22 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType22.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "./description" + "'", str23, "./description");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "mpc" + "'", str26, "mpc");
    }

    @Test
    public void test1390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1390");
        net.sourceforge.atunes.model.LookAndFeelBean lookAndFeelBean0 = new net.sourceforge.atunes.model.LookAndFeelBean();
        lookAndFeelBean0.setName("./summary");
        lookAndFeelBean0.setSkin("./enclosure/@url");
        java.lang.String str5 = lookAndFeelBean0.getSkin();
        lookAndFeelBean0.setSkin("rm");
        java.lang.String str8 = lookAndFeelBean0.getName();
        lookAndFeelBean0.setName("./updated");
        lookAndFeelBean0.setSkin("./author");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "./enclosure/@url" + "'", str5, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "./summary" + "'", str8, "./summary");
    }

    @Test
    public void test1391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1391");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        columnBean0.setVisible(false);
        columnBean0.setWidth(0);
        net.sourceforge.atunes.model.ColumnSort columnSort8 = columnBean0.getSort();
        net.sourceforge.atunes.model.ColumnSort columnSort9 = columnBean0.getSort();
        columnBean0.setOrder((int) (short) 100);
        columnBean0.setOrder((int) (byte) -1);
        boolean boolean14 = columnBean0.isVisible();
        columnBean0.setVisible(true);
        boolean boolean18 = columnBean0.equals((java.lang.Object) 100L);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(columnSort8);
        org.junit.Assert.assertNull(columnSort9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1392");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList2 = throwableRankList0.getNFirstElements((int) (short) 10);
        throwableRankList0.clear();
        java.util.List<java.lang.Integer> intList5 = throwableRankList0.getNFirstElementCounts(150);
        int int6 = throwableRankList0.size();
        org.junit.Assert.assertNotNull(throwableList2);
        org.junit.Assert.assertNotNull(intList5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test1393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1393");
        net.sourceforge.atunes.model.LookAndFeelBean lookAndFeelBean0 = new net.sourceforge.atunes.model.LookAndFeelBean();
        java.lang.String str1 = lookAndFeelBean0.getSkin();
        lookAndFeelBean0.setName("net.sourceforge.atunes.model.SearchQuerySyntaxException");
        lookAndFeelBean0.setSkin("");
        java.lang.String str6 = lookAndFeelBean0.getSkin();
        lookAndFeelBean0.setSkin("mpc");
        java.lang.String str9 = lookAndFeelBean0.getSkin();
        java.lang.String str10 = lookAndFeelBean0.getName();
        lookAndFeelBean0.setSkin("");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "mpc" + "'", str9, "mpc");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "net.sourceforge.atunes.model.SearchQuerySyntaxException" + "'", str10, "net.sourceforge.atunes.model.SearchQuerySyntaxException");
    }

    @Test
    public void test1394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1394");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList2 = throwableRankList0.getNFirstElements((int) (short) 10);
        throwableRankList0.clear();
        java.util.List<java.lang.Integer> intList5 = throwableRankList0.getNFirstElementCounts((int) (short) 0);
        java.util.List<java.lang.Throwable> throwableList7 = throwableRankList0.getNFirstElements((int) (short) 1);
        java.util.List<java.lang.Integer> intList9 = throwableRankList0.getNFirstElementCounts(0);
        org.junit.Assert.assertNotNull(throwableList2);
        org.junit.Assert.assertNotNull(intList5);
        org.junit.Assert.assertNotNull(throwableList7);
        org.junit.Assert.assertNotNull(intList9);
    }

    @Test
    public void test1395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1395");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        net.sourceforge.atunes.model.InconsistentRepositoryException inconsistentRepositoryException1 = new net.sourceforge.atunes.model.InconsistentRepositoryException();
        net.sourceforge.atunes.model.InconsistentRepositoryException inconsistentRepositoryException2 = new net.sourceforge.atunes.model.InconsistentRepositoryException();
        throwableRankList0.replaceItem((java.lang.Throwable) inconsistentRepositoryException1, (java.lang.Throwable) inconsistentRepositoryException2);
        int int4 = throwableRankList0.size();
        java.lang.Throwable throwable5 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException6 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable5);
        java.lang.Throwable[] throwableArray7 = searchQuerySyntaxException6.getSuppressed();
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException8 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException6);
        throwableRankList0.addItem((java.lang.Throwable) searchQuerySyntaxException6);
        java.lang.Throwable throwable10 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException11 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable10);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList12 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable13 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException14 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable13);
        java.lang.Throwable[] throwableArray15 = searchQuerySyntaxException14.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException16 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException14);
        java.lang.Throwable throwable17 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException18 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable17);
        java.lang.Throwable[] throwableArray19 = searchQuerySyntaxException18.getSuppressed();
        throwableRankList12.replaceItem((java.lang.Throwable) searchQuerySyntaxException14, (java.lang.Throwable) searchQuerySyntaxException18);
        searchQuerySyntaxException11.addSuppressed((java.lang.Throwable) searchQuerySyntaxException18);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException22 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException11);
        java.lang.Throwable throwable23 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException24 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable23);
        java.lang.Throwable[] throwableArray25 = searchQuerySyntaxException24.getSuppressed();
        searchQuerySyntaxException11.addSuppressed((java.lang.Throwable) searchQuerySyntaxException24);
        java.lang.Integer int27 = throwableRankList0.getCount((java.lang.Throwable) searchQuerySyntaxException11);
        java.lang.Throwable throwable28 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException29 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable28);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList30 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable31 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException32 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable31);
        java.lang.Throwable[] throwableArray33 = searchQuerySyntaxException32.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException34 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException32);
        java.lang.Throwable throwable35 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException36 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable35);
        java.lang.Throwable[] throwableArray37 = searchQuerySyntaxException36.getSuppressed();
        throwableRankList30.replaceItem((java.lang.Throwable) searchQuerySyntaxException32, (java.lang.Throwable) searchQuerySyntaxException36);
        searchQuerySyntaxException29.addSuppressed((java.lang.Throwable) searchQuerySyntaxException36);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException40 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException29);
        java.lang.Throwable throwable41 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException42 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable41);
        java.lang.Throwable[] throwableArray43 = searchQuerySyntaxException42.getSuppressed();
        searchQuerySyntaxException29.addSuppressed((java.lang.Throwable) searchQuerySyntaxException42);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException45 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException29);
        java.lang.Integer int46 = throwableRankList0.getCount((java.lang.Throwable) searchQuerySyntaxException29);
        java.lang.Throwable throwable47 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException48 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable47);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList49 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable50 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException51 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable50);
        java.lang.Throwable[] throwableArray52 = searchQuerySyntaxException51.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException53 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException51);
        java.lang.Throwable throwable54 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException55 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable54);
        java.lang.Throwable[] throwableArray56 = searchQuerySyntaxException55.getSuppressed();
        throwableRankList49.replaceItem((java.lang.Throwable) searchQuerySyntaxException51, (java.lang.Throwable) searchQuerySyntaxException55);
        searchQuerySyntaxException48.addSuppressed((java.lang.Throwable) searchQuerySyntaxException55);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException59 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException48);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException60 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException59);
        java.lang.Integer int61 = throwableRankList0.getCount((java.lang.Throwable) searchQuerySyntaxException60);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException62 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException60);
        java.lang.String str63 = searchQuerySyntaxException60.toString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNull(int27);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNull(int46);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNull(int61);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "net.sourceforge.atunes.model.SearchQuerySyntaxException: net.sourceforge.atunes.model.SearchQuerySyntaxException: net.sourceforge.atunes.model.SearchQuerySyntaxException" + "'", str63, "net.sourceforge.atunes.model.SearchQuerySyntaxException: net.sourceforge.atunes.model.SearchQuerySyntaxException: net.sourceforge.atunes.model.SearchQuerySyntaxException");
    }

    @Test
    public void test1396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1396");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata1 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata1.setAlbumArtist("");
        boolean boolean4 = fontSettings0.equals((java.lang.Object) cDMetadata1);
        fontSettings0.setUseFontSmoothing(true);
        net.sourceforge.atunes.model.IFontBean iFontBean7 = fontSettings0.getFont();
        boolean boolean9 = fontSettings0.equals((java.lang.Object) 150);
        boolean boolean10 = fontSettings0.isUseFontSmoothing();
        boolean boolean11 = fontSettings0.isUseFontSmoothingSettingsFromOs();
        net.sourceforge.atunes.model.IFontBean iFontBean12 = fontSettings0.getFont();
        fontSettings0.setUseFontSmoothing(false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(iFontBean7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(iFontBean12);
    }

    @Test
    public void test1397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1397");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        net.sourceforge.atunes.model.AudioObjectProperty audioObjectProperty1 = net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY;
        boolean boolean2 = columnBean0.equals((java.lang.Object) audioObjectProperty1);
        boolean boolean3 = columnBean0.isVisible();
        net.sourceforge.atunes.model.ColumnBean columnBean4 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean5 = columnBean4.isVisible();
        net.sourceforge.atunes.model.SubmissionState submissionState6 = net.sourceforge.atunes.model.SubmissionState.PENDING;
        boolean boolean7 = columnBean4.equals((java.lang.Object) submissionState6);
        columnBean4.setOrder((int) (byte) 100);
        net.sourceforge.atunes.model.ColumnBean columnBean10 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean11 = columnBean10.isVisible();
        columnBean10.setOrder((int) (byte) -1);
        columnBean10.setVisible(false);
        columnBean10.setWidth(0);
        net.sourceforge.atunes.model.ColumnSort columnSort18 = columnBean10.getSort();
        columnBean10.setWidth((int) (byte) 10);
        columnBean10.setVisible(true);
        net.sourceforge.atunes.model.ColumnBean columnBean23 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean24 = columnBean23.isVisible();
        columnBean23.setOrder((int) (byte) -1);
        columnBean23.setVisible(false);
        columnBean23.setWidth(0);
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType35 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion40 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType35, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str41 = applicationVersion40.getDate();
        java.lang.String str42 = applicationVersion40.toShortString();
        java.lang.String str43 = applicationVersion40.getChanges();
        boolean boolean44 = columnBean23.equals((java.lang.Object) applicationVersion40);
        net.sourceforge.atunes.model.ColumnBean columnBean45 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean46 = columnBean45.isVisible();
        net.sourceforge.atunes.model.SubmissionState submissionState47 = net.sourceforge.atunes.model.SubmissionState.PENDING;
        boolean boolean48 = columnBean45.equals((java.lang.Object) submissionState47);
        columnBean45.setVisible(false);
        net.sourceforge.atunes.model.ColumnSort columnSort51 = net.sourceforge.atunes.model.ColumnSort.ASCENDING;
        columnBean45.setSort(columnSort51);
        columnBean23.setSort(columnSort51);
        columnBean10.setSort(columnSort51);
        columnBean4.setSort(columnSort51);
        net.sourceforge.atunes.model.ColumnSort columnSort56 = columnBean4.getSort();
        columnBean0.setSort(columnSort56);
        org.junit.Assert.assertTrue("'" + audioObjectProperty1 + "' != '" + net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY + "'", audioObjectProperty1.equals(net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + submissionState6 + "' != '" + net.sourceforge.atunes.model.SubmissionState.PENDING + "'", submissionState6.equals(net.sourceforge.atunes.model.SubmissionState.PENDING));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(columnSort18);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + versionType35 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType35.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "./title" + "'", str41, "./title");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1.0.0 " + "'", str42, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "./title" + "'", str43, "./title");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + submissionState47 + "' != '" + net.sourceforge.atunes.model.SubmissionState.PENDING + "'", submissionState47.equals(net.sourceforge.atunes.model.SubmissionState.PENDING));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + columnSort51 + "' != '" + net.sourceforge.atunes.model.ColumnSort.ASCENDING + "'", columnSort51.equals(net.sourceforge.atunes.model.ColumnSort.ASCENDING));
        org.junit.Assert.assertTrue("'" + columnSort56 + "' != '" + net.sourceforge.atunes.model.ColumnSort.ASCENDING + "'", columnSort56.equals(net.sourceforge.atunes.model.ColumnSort.ASCENDING));
    }

    @Test
    public void test1398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1398");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.lang.String str3 = cDMetadata0.getAlbum();
        java.util.List<java.lang.Integer> intList4 = cDMetadata0.getTracks();
        net.sourceforge.atunes.model.CDMetadata cDMetadata5 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata5.setAlbumArtist("");
        java.lang.String str9 = cDMetadata5.getTitle((int) (byte) -1);
        java.lang.String[] strArray11 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        cDMetadata5.setTrackNames((java.util.List<java.lang.String>) strList12);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList12);
        cDMetadata0.setYear((int) (short) 1);
        int int18 = cDMetadata0.getYear();
        cDMetadata0.setAlbumArtist("net.sourceforge.atunes.model.InconsistentRepositoryException");
        cDMetadata0.setYear((int) (short) 10);
        net.sourceforge.atunes.model.CDMetadata cDMetadata23 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str24 = cDMetadata23.getGenre();
        java.util.List<java.lang.String> strList25 = cDMetadata23.getComposerNames();
        java.lang.String str26 = cDMetadata23.getAlbum();
        java.util.List<java.lang.Integer> intList27 = cDMetadata23.getTracks();
        int int28 = cDMetadata23.getYear();
        java.util.List<java.lang.String> strList29 = cDMetadata23.getArtistNames();
        cDMetadata23.setDisc((int) (short) 100);
        net.sourceforge.atunes.model.CDMetadata cDMetadata32 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata32.setAlbumArtist("");
        java.lang.String str35 = cDMetadata32.getGenre();
        java.lang.String[] strArray37 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        cDMetadata32.setTrackNames((java.util.List<java.lang.String>) strList38);
        cDMetadata23.setArtistNames((java.util.List<java.lang.String>) strList38);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList38);
        net.sourceforge.atunes.model.CDMetadata cDMetadata43 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata43.setAlbumArtist("");
        java.lang.String str46 = cDMetadata43.getGenre();
        int int47 = cDMetadata43.getYear();
        int int48 = cDMetadata43.getYear();
        net.sourceforge.atunes.model.CDMetadata cDMetadata49 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str50 = cDMetadata49.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata51 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata51.setAlbumArtist("");
        java.lang.String str54 = cDMetadata51.getGenre();
        java.lang.String[] strArray56 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        cDMetadata51.setTrackNames((java.util.List<java.lang.String>) strList57);
        cDMetadata49.setComposerNames((java.util.List<java.lang.String>) strList57);
        cDMetadata43.setTrackNames((java.util.List<java.lang.String>) strList57);
        net.sourceforge.atunes.model.CDMetadata cDMetadata62 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str63 = cDMetadata62.getGenre();
        java.util.List<java.lang.String> strList64 = cDMetadata62.getComposerNames();
        java.lang.String str65 = cDMetadata62.getAlbum();
        java.util.List<java.lang.Integer> intList66 = cDMetadata62.getTracks();
        int int67 = cDMetadata62.getDisc();
        java.lang.String[] strArray75 = new java.lang.String[] { "net.sourceforge.atunes.model.InconsistentRepositoryException", "./title", "1.0.0 ", "./title", "./duration", "mpc", "net.sourceforge.atunes.model.InconsistentRepositoryException" };
        java.util.ArrayList<java.lang.String> strList76 = new java.util.ArrayList<java.lang.String>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList76, strArray75);
        cDMetadata62.setArtistNames((java.util.List<java.lang.String>) strList76);
        cDMetadata43.setArtistNames((java.util.List<java.lang.String>) strList76);
        java.lang.String[] strArray86 = new java.lang.String[] { "./description", "flac", "./author", "/rss/channel/item", "flac", "1.0.0 " };
        java.util.ArrayList<java.lang.String> strList87 = new java.util.ArrayList<java.lang.String>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList87, strArray86);
        cDMetadata43.setTrackNames((java.util.List<java.lang.String>) strList87);
        cDMetadata0.setComposerNames((java.util.List<java.lang.String>) strList87);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(intList4);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(strList25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(intList27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNull(strList64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNull(intList66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
    }

    @Test
    public void test1399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1399");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        cDMetadata0.setYear(100);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
    }

    @Test
    public void test1400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1400");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata1 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata1.setAlbumArtist("");
        boolean boolean4 = fontSettings0.equals((java.lang.Object) cDMetadata1);
        fontSettings0.setUseFontSmoothing(true);
        net.sourceforge.atunes.model.IFontBean iFontBean7 = fontSettings0.getFont();
        fontSettings0.setUseFontSmoothing(false);
        fontSettings0.setUseFontSmoothingSettingsFromOs(true);
        net.sourceforge.atunes.model.IFontBean iFontBean12 = null;
        fontSettings0.setFont(iFontBean12);
        net.sourceforge.atunes.model.IFontBean iFontBean14 = null;
        fontSettings0.setFont(iFontBean14);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(iFontBean7);
    }

    @Test
    public void test1401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1401");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        columnBean0.setVisible(false);
        net.sourceforge.atunes.model.ColumnSort columnSort6 = columnBean0.getSort();
        net.sourceforge.atunes.model.TextTagAttribute textTagAttribute7 = net.sourceforge.atunes.model.TextTagAttribute.COMPOSER;
        boolean boolean8 = columnBean0.equals((java.lang.Object) textTagAttribute7);
        columnBean0.setVisible(true);
        columnBean0.setOrder((int) (short) 100);
        columnBean0.setOrder(100);
        net.sourceforge.atunes.model.ColumnSort columnSort15 = columnBean0.getSort();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(columnSort6);
        org.junit.Assert.assertTrue("'" + textTagAttribute7 + "' != '" + net.sourceforge.atunes.model.TextTagAttribute.COMPOSER + "'", textTagAttribute7.equals(net.sourceforge.atunes.model.TextTagAttribute.COMPOSER));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(columnSort15);
    }

    @Test
    public void test1402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1402");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str1 = feedType0.getUrlXPath();
        java.lang.String str2 = feedType0.getDurationXPath();
        java.lang.String str3 = feedType0.getTitleXPath();
        java.lang.String str4 = feedType0.getEntryXPath();
        java.lang.String str5 = feedType0.getDateXPath();
        java.lang.String str6 = feedType0.getEntryXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "./enclosure/@url" + "'", str1, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "./duration" + "'", str2, "./duration");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "./title" + "'", str3, "./title");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "/rss/channel/item" + "'", str4, "/rss/channel/item");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "./pubDate" + "'", str5, "./pubDate");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "/rss/channel/item" + "'", str6, "/rss/channel/item");
    }

    @Test
    public void test1403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1403");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable1 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException2 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable1);
        java.lang.Throwable[] throwableArray3 = searchQuerySyntaxException2.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException4 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException2);
        java.lang.Throwable throwable5 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException6 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable5);
        java.lang.Throwable[] throwableArray7 = searchQuerySyntaxException6.getSuppressed();
        throwableRankList0.replaceItem((java.lang.Throwable) searchQuerySyntaxException2, (java.lang.Throwable) searchQuerySyntaxException6);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList9 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable10 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException11 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable10);
        java.lang.Throwable[] throwableArray12 = searchQuerySyntaxException11.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException13 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException11);
        java.lang.Throwable throwable14 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException15 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable14);
        java.lang.Throwable[] throwableArray16 = searchQuerySyntaxException15.getSuppressed();
        throwableRankList9.replaceItem((java.lang.Throwable) searchQuerySyntaxException11, (java.lang.Throwable) searchQuerySyntaxException15);
        java.lang.Integer int18 = throwableRankList0.getCount((java.lang.Throwable) searchQuerySyntaxException15);
        java.util.List<java.lang.Integer> intList20 = throwableRankList0.getNFirstElementCounts((int) (short) -1);
        java.lang.Throwable throwable21 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException22 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable21);
        java.lang.Throwable[] throwableArray23 = searchQuerySyntaxException22.getSuppressed();
        throwableRankList0.addItem((java.lang.Throwable) searchQuerySyntaxException22);
        java.lang.Throwable throwable25 = null;
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList26 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList28 = throwableRankList26.getNFirstElements((int) (short) 10);
        throwableRankList26.clear();
        java.util.List<java.lang.Integer> intList31 = throwableRankList26.getNFirstElementCounts(150);
        java.util.List<java.lang.Throwable> throwableList32 = throwableRankList26.getOrder();
        throwableRankList26.clear();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType38 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion43 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType38, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str44 = applicationVersion43.getDate();
        java.lang.String str45 = applicationVersion43.toShortString();
        int int46 = applicationVersion43.getMajorNumber();
        int int47 = applicationVersion43.getMinorNumber();
        java.lang.String str48 = applicationVersion43.getDate();
        java.lang.String str49 = applicationVersion43.getChanges();
        java.lang.String str50 = applicationVersion43.getDirectDownloadURL();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList51 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList53 = throwableRankList51.getNFirstElements((int) (short) 10);
        int int54 = throwableRankList51.size();
        int int55 = throwableRankList51.size();
        java.lang.Throwable throwable56 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException57 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable56);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList58 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable59 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException60 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable59);
        java.lang.Throwable[] throwableArray61 = searchQuerySyntaxException60.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException62 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException60);
        java.lang.Throwable throwable63 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException64 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable63);
        java.lang.Throwable[] throwableArray65 = searchQuerySyntaxException64.getSuppressed();
        throwableRankList58.replaceItem((java.lang.Throwable) searchQuerySyntaxException60, (java.lang.Throwable) searchQuerySyntaxException64);
        searchQuerySyntaxException57.addSuppressed((java.lang.Throwable) searchQuerySyntaxException64);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException68 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException57);
        java.lang.Integer int69 = throwableRankList51.getCount((java.lang.Throwable) searchQuerySyntaxException57);
        boolean boolean70 = applicationVersion43.equals((java.lang.Object) searchQuerySyntaxException57);
        throwableRankList26.addItem((java.lang.Throwable) searchQuerySyntaxException57);
        throwableRankList0.replaceItem(throwable25, (java.lang.Throwable) searchQuerySyntaxException57);
        java.util.List<java.lang.Throwable> throwableList73 = throwableRankList0.getOrder();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(intList20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableList28);
        org.junit.Assert.assertNotNull(intList31);
        org.junit.Assert.assertNotNull(throwableList32);
        org.junit.Assert.assertTrue("'" + versionType38 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType38.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "./title" + "'", str44, "./title");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1.0.0 " + "'", str45, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "./title" + "'", str48, "./title");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "./title" + "'", str49, "./title");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "./pubDate" + "'", str50, "./pubDate");
        org.junit.Assert.assertNotNull(throwableList53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNull(int69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(throwableList73);
    }

    @Test
    public void test1404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1404");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList2 = throwableRankList0.getNFirstElements((int) (short) 10);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList3 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable4 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException5 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable4);
        java.lang.Throwable[] throwableArray6 = searchQuerySyntaxException5.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException7 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException5);
        java.lang.Throwable throwable8 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException9 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable8);
        java.lang.Throwable[] throwableArray10 = searchQuerySyntaxException9.getSuppressed();
        throwableRankList3.replaceItem((java.lang.Throwable) searchQuerySyntaxException5, (java.lang.Throwable) searchQuerySyntaxException9);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList12 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable13 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException14 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable13);
        java.lang.Throwable[] throwableArray15 = searchQuerySyntaxException14.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException16 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException14);
        java.lang.Throwable throwable17 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException18 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable17);
        java.lang.Throwable[] throwableArray19 = searchQuerySyntaxException18.getSuppressed();
        throwableRankList12.replaceItem((java.lang.Throwable) searchQuerySyntaxException14, (java.lang.Throwable) searchQuerySyntaxException18);
        java.lang.Integer int21 = throwableRankList3.getCount((java.lang.Throwable) searchQuerySyntaxException18);
        java.lang.Throwable throwable22 = null;
        java.lang.Throwable throwable23 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException24 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable23);
        throwableRankList3.replaceItem(throwable22, (java.lang.Throwable) searchQuerySyntaxException24);
        throwableRankList0.addItem((java.lang.Throwable) searchQuerySyntaxException24);
        java.util.List<java.lang.Throwable> throwableList28 = throwableRankList0.getNFirstElements((int) '#');
        throwableRankList0.clear();
        org.junit.Assert.assertNotNull(throwableList2);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNull(int21);
        org.junit.Assert.assertNotNull(throwableList28);
    }

    @Test
    public void test1405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1405");
        net.sourceforge.atunes.model.IFontBean iFontBean0 = null;
        net.sourceforge.atunes.model.FontSettings fontSettings3 = new net.sourceforge.atunes.model.FontSettings(iFontBean0, true, true);
        fontSettings3.setUseFontSmoothing(true);
        boolean boolean6 = fontSettings3.isUseFontSmoothing();
        java.lang.Object obj7 = null;
        boolean boolean8 = fontSettings3.equals(obj7);
        boolean boolean9 = fontSettings3.isUseFontSmoothing();
        fontSettings3.setUseFontSmoothingSettingsFromOs(false);
        boolean boolean12 = fontSettings3.isUseFontSmoothingSettingsFromOs();
        java.lang.Class<?> wildcardClass13 = fontSettings3.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1406");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList2 = throwableRankList0.getNFirstElements((int) (short) 10);
        throwableRankList0.clear();
        java.util.List<java.lang.Integer> intList5 = throwableRankList0.getNFirstElementCounts(150);
        throwableRankList0.clear();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList7 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable8 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException9 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable8);
        java.lang.Throwable[] throwableArray10 = searchQuerySyntaxException9.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException11 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException9);
        java.lang.Throwable throwable12 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException13 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable12);
        java.lang.Throwable[] throwableArray14 = searchQuerySyntaxException13.getSuppressed();
        throwableRankList7.replaceItem((java.lang.Throwable) searchQuerySyntaxException9, (java.lang.Throwable) searchQuerySyntaxException13);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException16 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException13);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException17 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException13);
        java.lang.Throwable throwable18 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException19 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable18);
        java.lang.Throwable[] throwableArray20 = searchQuerySyntaxException19.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException21 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException19);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException22 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException19);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList23 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable24 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException25 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable24);
        java.lang.Throwable[] throwableArray26 = searchQuerySyntaxException25.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException27 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException25);
        java.lang.Throwable throwable28 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException29 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable28);
        java.lang.Throwable[] throwableArray30 = searchQuerySyntaxException29.getSuppressed();
        throwableRankList23.replaceItem((java.lang.Throwable) searchQuerySyntaxException25, (java.lang.Throwable) searchQuerySyntaxException29);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException32 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException29);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException33 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException32);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException34 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchIndexNotAvailableException33);
        searchQuerySyntaxException22.addSuppressed((java.lang.Throwable) searchIndexNotAvailableException34);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException36 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException22);
        throwableRankList0.replaceItem((java.lang.Throwable) searchIndexNotAvailableException17, (java.lang.Throwable) searchQuerySyntaxException36);
        throwableRankList0.clear();
        org.junit.Assert.assertNotNull(throwableList2);
        org.junit.Assert.assertNotNull(intList5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray30);
    }

    @Test
    public void test1407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1407");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.ATOM;
        java.lang.String str1 = feedType0.getUrlXPath();
        java.lang.String str2 = feedType0.getDescriptionXPath();
        java.lang.String str3 = feedType0.getNameXPath();
        java.lang.String str4 = feedType0.getAuthorXPath();
        java.lang.String str5 = feedType0.getTypeXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.ATOM + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.ATOM));
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "./summary" + "'", str2, "./summary");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "/feed/title" + "'", str3, "/feed/title");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "./author/name" + "'", str4, "./author/name");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "./link[@rel='enclosure']/@type" + "'", str5, "./link[@rel='enclosure']/@type");
    }

    @Test
    public void test1408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1408");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        net.sourceforge.atunes.model.AudioObjectProperty audioObjectProperty1 = net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY;
        boolean boolean2 = columnBean0.equals((java.lang.Object) audioObjectProperty1);
        net.sourceforge.atunes.model.TextTagAttribute textTagAttribute3 = net.sourceforge.atunes.model.TextTagAttribute.LYRICS;
        boolean boolean4 = columnBean0.equals((java.lang.Object) textTagAttribute3);
        net.sourceforge.atunes.model.ColumnSort columnSort5 = columnBean0.getSort();
        net.sourceforge.atunes.model.ColumnSort columnSort6 = null;
        columnBean0.setSort(columnSort6);
        int int8 = columnBean0.getWidth();
        columnBean0.setWidth(90);
        org.junit.Assert.assertTrue("'" + audioObjectProperty1 + "' != '" + net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY + "'", audioObjectProperty1.equals(net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + textTagAttribute3 + "' != '" + net.sourceforge.atunes.model.TextTagAttribute.LYRICS + "'", textTagAttribute3.equals(net.sourceforge.atunes.model.TextTagAttribute.LYRICS));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(columnSort5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test1409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1409");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType8 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion13 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType8, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str14 = applicationVersion13.getDate();
        java.lang.String str15 = applicationVersion13.toShortString();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType16 = applicationVersion13.getVersionType();
        int int17 = applicationVersion13.getMinorNumber();
        java.lang.String str18 = applicationVersion13.getDirectDownloadURL();
        java.lang.String str19 = applicationVersion13.getDirectDownloadURL();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType20 = applicationVersion13.getVersionType();
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion25 = new net.sourceforge.atunes.model.ApplicationVersion("SOCKS_PROXY", (int) (byte) 0, 100, (int) (byte) 0, versionType20, "./summary", "net.sourceforge.atunes.model.SearchQuerySyntaxException: net.sourceforge.atunes.model.SearchQuerySyntaxException", "10.100.150 ./description ", "");
        java.lang.Class<?> wildcardClass26 = applicationVersion25.getClass();
        org.junit.Assert.assertTrue("'" + versionType8 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType8.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "./title" + "'", str14, "./title");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1.0.0 " + "'", str15, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + versionType16 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType16.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "./pubDate" + "'", str18, "./pubDate");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "./pubDate" + "'", str19, "./pubDate");
        org.junit.Assert.assertTrue("'" + versionType20 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType20.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test1410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1410");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str1 = feedType0.getUrlXPath();
        java.lang.String str2 = feedType0.getDateXPath();
        java.lang.String str3 = feedType0.getNameXPath();
        java.lang.String str4 = feedType0.getDateXPath();
        java.lang.String str5 = feedType0.getTypeXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "./enclosure/@url" + "'", str1, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "./pubDate" + "'", str2, "./pubDate");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "/rss/channel/title" + "'", str3, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "./pubDate" + "'", str4, "./pubDate");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "./enclosure/@type" + "'", str5, "./enclosure/@type");
    }

    @Test
    public void test1411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1411");
        net.sourceforge.atunes.model.LocalAudioObjectFormat localAudioObjectFormat0 = net.sourceforge.atunes.model.LocalAudioObjectFormat.WMA;
        java.lang.String str1 = localAudioObjectFormat0.getExtension();
        org.junit.Assert.assertTrue("'" + localAudioObjectFormat0 + "' != '" + net.sourceforge.atunes.model.LocalAudioObjectFormat.WMA + "'", localAudioObjectFormat0.equals(net.sourceforge.atunes.model.LocalAudioObjectFormat.WMA));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "wma" + "'", str1, "wma");
    }

    @Test
    public void test1412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1412");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList3 = cDMetadata0.getTracks();
        cDMetadata0.setAlbumArtist("/rss/channel/title");
        java.util.List<java.lang.String> strList6 = cDMetadata0.getTrackNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata7 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata7.setAlbumArtist("");
        java.lang.String str10 = cDMetadata7.getGenre();
        java.lang.String[] strArray12 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        cDMetadata7.setTrackNames((java.util.List<java.lang.String>) strList13);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList13);
        cDMetadata0.setAlbumArtist("/rss/channel/title");
        org.junit.Assert.assertNull(intList3);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test1413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1413");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList2 = throwableRankList0.getNFirstElements((int) (short) 10);
        int int3 = throwableRankList0.size();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList4 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable5 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException6 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable5);
        java.lang.Throwable[] throwableArray7 = searchQuerySyntaxException6.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException8 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException6);
        java.lang.Throwable throwable9 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException10 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable9);
        java.lang.Throwable[] throwableArray11 = searchQuerySyntaxException10.getSuppressed();
        throwableRankList4.replaceItem((java.lang.Throwable) searchQuerySyntaxException6, (java.lang.Throwable) searchQuerySyntaxException10);
        java.lang.Throwable[] throwableArray13 = searchQuerySyntaxException6.getSuppressed();
        java.lang.Integer int14 = throwableRankList0.getCount((java.lang.Throwable) searchQuerySyntaxException6);
        int int15 = throwableRankList0.size();
        java.util.List<java.lang.Throwable> throwableList17 = throwableRankList0.getNFirstElements((int) (short) 1);
        java.util.List<java.lang.Integer> intList19 = throwableRankList0.getNFirstElementCounts((int) (short) -1);
        java.lang.Throwable throwable20 = null;
        throwableRankList0.addItem(throwable20);
        java.util.List<java.lang.Throwable> throwableList23 = throwableRankList0.getNFirstElements((int) (byte) 100);
        org.junit.Assert.assertNotNull(throwableList2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(throwableList17);
        org.junit.Assert.assertNotNull(intList19);
        org.junit.Assert.assertNotNull(throwableList23);
    }

    @Test
    public void test1414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1414");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str1 = feedType0.getEntryXPath();
        java.lang.String str2 = feedType0.getDurationXPath();
        java.lang.String str3 = feedType0.getTypeXPath();
        java.lang.String str4 = feedType0.getTitleXPath();
        java.lang.String str5 = feedType0.getTypeXPath();
        java.lang.String str6 = feedType0.getDurationXPath();
        java.lang.String str7 = feedType0.getDurationXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "/rss/channel/item" + "'", str1, "/rss/channel/item");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "./duration" + "'", str2, "./duration");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "./enclosure/@type" + "'", str3, "./enclosure/@type");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "./title" + "'", str4, "./title");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "./enclosure/@type" + "'", str5, "./enclosure/@type");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "./duration" + "'", str6, "./duration");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "./duration" + "'", str7, "./duration");
    }

    @Test
    public void test1415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1415");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.lang.String str3 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList4 = cDMetadata0.getTrackNames();
        java.lang.String str5 = cDMetadata0.getAlbum();
        java.util.List<java.lang.String> strList6 = cDMetadata0.getTrackNames();
        java.util.List<java.lang.String> strList7 = cDMetadata0.getTrackNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata8 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata8.setAlbumArtist("");
        java.lang.String str11 = cDMetadata8.getGenre();
        int int12 = cDMetadata8.getYear();
        int int13 = cDMetadata8.getYear();
        net.sourceforge.atunes.model.CDMetadata cDMetadata14 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str15 = cDMetadata14.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata16 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata16.setAlbumArtist("");
        java.lang.String str19 = cDMetadata16.getGenre();
        java.lang.String[] strArray21 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        cDMetadata16.setTrackNames((java.util.List<java.lang.String>) strList22);
        cDMetadata14.setComposerNames((java.util.List<java.lang.String>) strList22);
        cDMetadata8.setTrackNames((java.util.List<java.lang.String>) strList22);
        java.lang.String str27 = cDMetadata8.getAlbumArtist();
        cDMetadata8.setGenre("/feed/title");
        java.lang.String[] strArray48 = new java.lang.String[] { "1.0.0 mpc ", "1.0.0 ", "10.52.35 ", "SOCKS_PROXY", "SOCKS_PROXY", "mpc", "./duration", "./enclosure/@url", "./author", "flac", "1.0.0 mpc ", "net.sourceforge.atunes.model.SearchQuerySyntaxException", "10.52.35  ", "./enclosure/@type", "./updated", "net.sourceforge.atunes.model.SearchQuerySyntaxException", "./link[@rel='enclosure']/@type", "flac" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        cDMetadata8.setComposerNames((java.util.List<java.lang.String>) strList49);
        cDMetadata0.setComposerNames((java.util.List<java.lang.String>) strList49);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertNull(strList7);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    }

    @Test
    public void test1416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1416");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Integer> intList2 = throwableRankList0.getNFirstElementCounts(0);
        org.junit.Assert.assertNotNull(intList2);
    }

    @Test
    public void test1417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1417");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType8 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion13 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType8, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str14 = applicationVersion13.getDate();
        java.lang.String str15 = applicationVersion13.toShortString();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType16 = applicationVersion13.getVersionType();
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion21 = new net.sourceforge.atunes.model.ApplicationVersion("1.0.0 ", (int) (short) 10, (int) '4', (int) '#', versionType16, "", "./enclosure/@url", "SOCKS_PROXY", "./enclosure/@url");
        java.lang.String str22 = applicationVersion21.getName();
        int int23 = applicationVersion21.getMajorNumber();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType24 = applicationVersion21.getVersionType();
        int int25 = applicationVersion21.getRevisionNumber();
        int int26 = applicationVersion21.getMinorNumber();
        org.junit.Assert.assertTrue("'" + versionType8 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType8.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "./title" + "'", str14, "./title");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1.0.0 " + "'", str15, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + versionType16 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType16.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertTrue("'" + versionType24 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType24.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
    }

    @Test
    public void test1418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1418");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.lang.String str4 = cDMetadata0.getTitle((int) (byte) -1);
        cDMetadata0.setDisc(100);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList7 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList9 = throwableRankList7.getNFirstElements((int) (short) 10);
        throwableRankList7.clear();
        java.util.List<java.lang.Integer> intList12 = throwableRankList7.getNFirstElementCounts(150);
        cDMetadata0.setTracks(intList12);
        int int14 = cDMetadata0.getYear();
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(throwableList9);
        org.junit.Assert.assertNotNull(intList12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test1419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1419");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        java.lang.String str12 = applicationVersion9.toShortString();
        java.lang.String str13 = applicationVersion9.getDownloadURL();
        java.lang.String str14 = applicationVersion9.getDate();
        int int15 = applicationVersion9.getMajorNumber();
        java.lang.String str16 = applicationVersion9.getDate();
        int int17 = applicationVersion9.getMajorNumber();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1.0.0 " + "'", str12, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "./description" + "'", str13, "./description");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "./title" + "'", str14, "./title");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "./title" + "'", str16, "./title");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test1420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1420");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./summary", 0, (int) (byte) 0, (int) (byte) 0, versionType4, "./title", "/rss/channel/title", "net.sourceforge.atunes.model.SearchQuerySyntaxException", "./title");
        java.lang.String str10 = applicationVersion9.getChanges();
        java.lang.String str11 = applicationVersion9.toString();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "0.0.0 ./title " + "'", str11, "0.0.0 ./title ");
    }

    @Test
    public void test1421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1421");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        columnBean0.setVisible(false);
        columnBean0.setWidth(0);
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType12 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion17 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType12, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str18 = applicationVersion17.getDate();
        java.lang.String str19 = applicationVersion17.toShortString();
        java.lang.String str20 = applicationVersion17.getChanges();
        boolean boolean21 = columnBean0.equals((java.lang.Object) applicationVersion17);
        net.sourceforge.atunes.model.ColumnSort columnSort22 = columnBean0.getSort();
        int int23 = columnBean0.getWidth();
        net.sourceforge.atunes.model.ColumnSort columnSort24 = columnBean0.getSort();
        columnBean0.setWidth(97);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + versionType12 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType12.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "./title" + "'", str18, "./title");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1.0.0 " + "'", str19, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "./title" + "'", str20, "./title");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(columnSort22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNull(columnSort24);
    }

    @Test
    public void test1422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1422");
        net.sourceforge.atunes.model.LookAndFeelBean lookAndFeelBean0 = new net.sourceforge.atunes.model.LookAndFeelBean();
        java.lang.String str1 = lookAndFeelBean0.getSkin();
        lookAndFeelBean0.setName("net.sourceforge.atunes.model.SearchQuerySyntaxException");
        java.lang.String str4 = lookAndFeelBean0.getName();
        lookAndFeelBean0.setSkin("/rss/channel/item");
        lookAndFeelBean0.setSkin("./updated");
        lookAndFeelBean0.setName("./title");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "net.sourceforge.atunes.model.SearchQuerySyntaxException" + "'", str4, "net.sourceforge.atunes.model.SearchQuerySyntaxException");
    }

    @Test
    public void test1423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1423");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.lang.String str3 = cDMetadata0.getGenre();
        java.util.List<java.lang.Integer> intList4 = cDMetadata0.getTracks();
        java.util.List<java.lang.String> strList5 = cDMetadata0.getComposerNames();
        cDMetadata0.setDisc((int) (short) 100);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(intList4);
        org.junit.Assert.assertNull(strList5);
    }

    @Test
    public void test1424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1424");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str1 = feedType0.getUrlXPath();
        java.lang.String str2 = feedType0.getNameXPath();
        java.lang.String str3 = feedType0.getDescriptionXPath();
        java.lang.String str4 = feedType0.getNameXPath();
        java.lang.String str5 = feedType0.getNameXPath();
        java.lang.String str6 = feedType0.getTitleXPath();
        java.lang.String str7 = feedType0.getDateXPath();
        java.lang.String str8 = feedType0.getNameXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "./enclosure/@url" + "'", str1, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "/rss/channel/title" + "'", str2, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "./description" + "'", str3, "./description");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "/rss/channel/title" + "'", str4, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/rss/channel/title" + "'", str5, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "./title" + "'", str6, "./title");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "./pubDate" + "'", str7, "./pubDate");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "/rss/channel/title" + "'", str8, "/rss/channel/title");
    }

    @Test
    public void test1425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1425");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.lang.String str3 = cDMetadata0.getGenre();
        java.lang.String[] strArray5 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList6);
        cDMetadata0.setAlbumArtist("net.sourceforge.atunes.model.InconsistentRepositoryException");
        java.lang.String str11 = cDMetadata0.getAlbumArtist();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "net.sourceforge.atunes.model.InconsistentRepositoryException" + "'", str11, "net.sourceforge.atunes.model.InconsistentRepositoryException");
    }

    @Test
    public void test1426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1426");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.lang.String str3 = cDMetadata0.getGenre();
        java.lang.String[] strArray5 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList6);
        cDMetadata0.setYear((int) (short) 10);
        cDMetadata0.setDisc(0);
        java.lang.String str13 = cDMetadata0.getAlbum();
        cDMetadata0.setAlbumArtist("HTTP_PROXY");
        net.sourceforge.atunes.model.CDMetadata cDMetadata16 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str17 = cDMetadata16.getGenre();
        java.util.List<java.lang.String> strList18 = cDMetadata16.getComposerNames();
        int int19 = cDMetadata16.getYear();
        cDMetadata16.setYear(100);
        net.sourceforge.atunes.model.CDMetadata cDMetadata22 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata22.setAlbumArtist("");
        java.lang.String str25 = cDMetadata22.getGenre();
        java.util.List<java.lang.String> strList26 = cDMetadata22.getTrackNames();
        java.util.List<java.lang.String> strList27 = cDMetadata22.getTrackNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata28 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str29 = cDMetadata28.getGenre();
        java.lang.String str30 = cDMetadata28.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata31 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str32 = cDMetadata31.getGenre();
        java.util.List<java.lang.String> strList33 = cDMetadata31.getComposerNames();
        java.lang.String str34 = cDMetadata31.getAlbum();
        java.util.List<java.lang.Integer> intList35 = cDMetadata31.getTracks();
        int int36 = cDMetadata31.getYear();
        net.sourceforge.atunes.model.CDMetadata cDMetadata37 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str38 = cDMetadata37.getGenre();
        java.util.List<java.lang.String> strList39 = cDMetadata37.getComposerNames();
        java.lang.String str40 = cDMetadata37.getAlbum();
        java.util.List<java.lang.Integer> intList41 = cDMetadata37.getTracks();
        net.sourceforge.atunes.model.CDMetadata cDMetadata42 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata42.setAlbumArtist("");
        java.lang.String str46 = cDMetadata42.getTitle((int) (byte) -1);
        java.lang.String[] strArray48 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        cDMetadata42.setTrackNames((java.util.List<java.lang.String>) strList49);
        cDMetadata37.setTrackNames((java.util.List<java.lang.String>) strList49);
        cDMetadata37.setYear((int) (short) 1);
        int int55 = cDMetadata37.getYear();
        java.lang.String str56 = cDMetadata37.getGenre();
        cDMetadata37.setYear((int) (short) 10);
        net.sourceforge.atunes.model.CDMetadata cDMetadata59 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata59.setAlbumArtist("");
        java.lang.String str62 = cDMetadata59.getGenre();
        java.lang.String[] strArray64 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList65 = new java.util.ArrayList<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList65, strArray64);
        cDMetadata59.setTrackNames((java.util.List<java.lang.String>) strList65);
        cDMetadata37.setTrackNames((java.util.List<java.lang.String>) strList65);
        cDMetadata31.setComposerNames((java.util.List<java.lang.String>) strList65);
        cDMetadata28.setArtistNames((java.util.List<java.lang.String>) strList65);
        cDMetadata22.setTrackNames((java.util.List<java.lang.String>) strList65);
        cDMetadata16.setComposerNames((java.util.List<java.lang.String>) strList65);
        cDMetadata0.setArtistNames((java.util.List<java.lang.String>) strList65);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNull(strList27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(strList33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(intList35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(strList39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(intList41);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
    }

    @Test
    public void test1427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1427");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.lang.String str3 = cDMetadata0.getAlbum();
        java.util.List<java.lang.Integer> intList4 = cDMetadata0.getTracks();
        net.sourceforge.atunes.model.CDMetadata cDMetadata5 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata5.setAlbumArtist("");
        java.lang.String str9 = cDMetadata5.getTitle((int) (byte) -1);
        java.lang.String[] strArray11 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        cDMetadata5.setTrackNames((java.util.List<java.lang.String>) strList12);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList12);
        cDMetadata0.setYear((int) (short) 1);
        int int18 = cDMetadata0.getYear();
        java.lang.String str19 = cDMetadata0.getGenre();
        cDMetadata0.setYear((int) (short) 10);
        java.lang.String str22 = cDMetadata0.getAlbum();
        java.util.List<java.lang.Integer> intList23 = cDMetadata0.getTracks();
        cDMetadata0.setYear(32);
        java.lang.String str26 = cDMetadata0.getAlbumArtist();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(intList4);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(intList23);
        org.junit.Assert.assertNull(str26);
    }

    @Test
    public void test1428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1428");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        net.sourceforge.atunes.model.InconsistentRepositoryException inconsistentRepositoryException1 = new net.sourceforge.atunes.model.InconsistentRepositoryException();
        net.sourceforge.atunes.model.InconsistentRepositoryException inconsistentRepositoryException2 = new net.sourceforge.atunes.model.InconsistentRepositoryException();
        throwableRankList0.replaceItem((java.lang.Throwable) inconsistentRepositoryException1, (java.lang.Throwable) inconsistentRepositoryException2);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException4 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) inconsistentRepositoryException2);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException5 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) inconsistentRepositoryException2);
    }

    @Test
    public void test1429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1429");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        fontSettings0.setUseFontSmoothing(false);
        net.sourceforge.atunes.model.IFontBean iFontBean3 = fontSettings0.getFont();
        boolean boolean4 = fontSettings0.isUseFontSmoothing();
        fontSettings0.setUseFontSmoothing(true);
        boolean boolean7 = fontSettings0.isUseFontSmoothing();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType12 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion17 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType12, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str18 = applicationVersion17.getDate();
        java.lang.String str19 = applicationVersion17.toShortString();
        int int20 = applicationVersion17.getMajorNumber();
        java.lang.String str21 = applicationVersion17.toString();
        java.lang.String str22 = applicationVersion17.getChanges();
        int int23 = applicationVersion17.getRevisionNumber();
        boolean boolean24 = fontSettings0.equals((java.lang.Object) int23);
        fontSettings0.setUseFontSmoothingSettingsFromOs(true);
        boolean boolean27 = fontSettings0.isUseFontSmoothing();
        org.junit.Assert.assertNull(iFontBean3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + versionType12 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType12.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "./title" + "'", str18, "./title");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1.0.0 " + "'", str19, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1.0.0 mpc " + "'", str21, "1.0.0 mpc ");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "./title" + "'", str22, "./title");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test1430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1430");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        net.sourceforge.atunes.model.AudioObjectProperty audioObjectProperty1 = net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY;
        boolean boolean2 = columnBean0.equals((java.lang.Object) audioObjectProperty1);
        int int3 = columnBean0.getWidth();
        int int4 = columnBean0.getOrder();
        net.sourceforge.atunes.model.CDMetadata cDMetadata5 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata5.setAlbumArtist("");
        java.lang.String str8 = cDMetadata5.getGenre();
        int int9 = cDMetadata5.getYear();
        int int10 = cDMetadata5.getYear();
        cDMetadata5.setGenre("./enclosure/@url");
        java.util.List<java.lang.String> strList13 = null;
        cDMetadata5.setTrackNames(strList13);
        cDMetadata5.setAlbumArtist("./link[@rel='enclosure']/@type");
        boolean boolean17 = columnBean0.equals((java.lang.Object) "./link[@rel='enclosure']/@type");
        net.sourceforge.atunes.model.CDMetadata cDMetadata18 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str19 = cDMetadata18.getGenre();
        java.util.List<java.lang.String> strList20 = cDMetadata18.getComposerNames();
        java.lang.String str21 = cDMetadata18.getAlbum();
        net.sourceforge.atunes.model.CDMetadata cDMetadata22 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata22.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList25 = cDMetadata22.getTracks();
        cDMetadata22.setAlbumArtist("/rss/channel/title");
        java.util.List<java.lang.String> strList28 = cDMetadata22.getTrackNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata29 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata29.setAlbumArtist("");
        java.lang.String str32 = cDMetadata29.getGenre();
        java.lang.String[] strArray34 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        cDMetadata29.setTrackNames((java.util.List<java.lang.String>) strList35);
        cDMetadata22.setTrackNames((java.util.List<java.lang.String>) strList35);
        cDMetadata18.setTrackNames((java.util.List<java.lang.String>) strList35);
        java.util.List<java.lang.String> strList40 = cDMetadata18.getTrackNames();
        boolean boolean41 = columnBean0.equals((java.lang.Object) cDMetadata18);
        int int42 = cDMetadata18.getDisc();
        java.util.List<java.lang.String> strList43 = cDMetadata18.getComposerNames();
        org.junit.Assert.assertTrue("'" + audioObjectProperty1 + "' != '" + net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY + "'", audioObjectProperty1.equals(net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(strList20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(intList25);
        org.junit.Assert.assertNull(strList28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNull(strList43);
    }

    @Test
    public void test1431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1431");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable1 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException2 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable1);
        java.lang.Throwable[] throwableArray3 = searchQuerySyntaxException2.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException4 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException2);
        java.lang.Throwable throwable5 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException6 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable5);
        java.lang.Throwable[] throwableArray7 = searchQuerySyntaxException6.getSuppressed();
        throwableRankList0.replaceItem((java.lang.Throwable) searchQuerySyntaxException2, (java.lang.Throwable) searchQuerySyntaxException6);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList9 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable10 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException11 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable10);
        java.lang.Throwable[] throwableArray12 = searchQuerySyntaxException11.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException13 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException11);
        java.lang.Throwable throwable14 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException15 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable14);
        java.lang.Throwable[] throwableArray16 = searchQuerySyntaxException15.getSuppressed();
        throwableRankList9.replaceItem((java.lang.Throwable) searchQuerySyntaxException11, (java.lang.Throwable) searchQuerySyntaxException15);
        java.lang.Integer int18 = throwableRankList0.getCount((java.lang.Throwable) searchQuerySyntaxException15);
        java.lang.Throwable throwable19 = null;
        java.lang.Throwable throwable20 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException21 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable20);
        throwableRankList0.replaceItem(throwable19, (java.lang.Throwable) searchQuerySyntaxException21);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList23 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable24 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException25 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable24);
        java.lang.Throwable[] throwableArray26 = searchQuerySyntaxException25.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException27 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException25);
        java.lang.Throwable throwable28 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException29 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable28);
        java.lang.Throwable[] throwableArray30 = searchQuerySyntaxException29.getSuppressed();
        throwableRankList23.replaceItem((java.lang.Throwable) searchQuerySyntaxException25, (java.lang.Throwable) searchQuerySyntaxException29);
        java.util.List<java.lang.Throwable> throwableList32 = throwableRankList23.getOrder();
        java.lang.Throwable throwable33 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException34 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable33);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList35 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable36 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException37 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable36);
        java.lang.Throwable[] throwableArray38 = searchQuerySyntaxException37.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException39 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException37);
        java.lang.Throwable throwable40 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException41 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable40);
        java.lang.Throwable[] throwableArray42 = searchQuerySyntaxException41.getSuppressed();
        throwableRankList35.replaceItem((java.lang.Throwable) searchQuerySyntaxException37, (java.lang.Throwable) searchQuerySyntaxException41);
        searchQuerySyntaxException34.addSuppressed((java.lang.Throwable) searchQuerySyntaxException41);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException45 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException34);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException46 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException34);
        java.lang.Integer int47 = throwableRankList23.getCount((java.lang.Throwable) searchIndexNotAvailableException46);
        throwableRankList0.addItem((java.lang.Throwable) searchIndexNotAvailableException46);
        java.util.List<java.lang.Integer> intList50 = throwableRankList0.getNFirstElementCounts(90);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList51 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList53 = throwableRankList51.getNFirstElements((int) (short) 100);
        java.lang.Throwable throwable54 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException55 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable54);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList56 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable57 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException58 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable57);
        java.lang.Throwable[] throwableArray59 = searchQuerySyntaxException58.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException60 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException58);
        java.lang.Throwable throwable61 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException62 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable61);
        java.lang.Throwable[] throwableArray63 = searchQuerySyntaxException62.getSuppressed();
        throwableRankList56.replaceItem((java.lang.Throwable) searchQuerySyntaxException58, (java.lang.Throwable) searchQuerySyntaxException62);
        searchQuerySyntaxException55.addSuppressed((java.lang.Throwable) searchQuerySyntaxException62);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException66 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException55);
        java.lang.Throwable throwable67 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException68 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable67);
        java.lang.Throwable[] throwableArray69 = searchQuerySyntaxException68.getSuppressed();
        searchQuerySyntaxException55.addSuppressed((java.lang.Throwable) searchQuerySyntaxException68);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException71 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException55);
        java.lang.Throwable throwable72 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException73 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable72);
        java.lang.Throwable[] throwableArray74 = searchQuerySyntaxException73.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException75 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException73);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException76 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException73);
        throwableRankList51.replaceItem((java.lang.Throwable) searchQuerySyntaxException55, (java.lang.Throwable) searchQuerySyntaxException76);
        throwableRankList0.addItem((java.lang.Throwable) searchQuerySyntaxException55);
        java.util.List<java.lang.Throwable> throwableList80 = throwableRankList0.getNFirstElements(100);
        int int81 = throwableRankList0.size();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableList32);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNull(int47);
        org.junit.Assert.assertNotNull(intList50);
        org.junit.Assert.assertNotNull(throwableList53);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableList80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2 + "'", int81 == 2);
    }

    @Test
    public void test1432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1432");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        columnBean0.setVisible(false);
        net.sourceforge.atunes.model.ColumnSort columnSort6 = columnBean0.getSort();
        int int7 = columnBean0.getWidth();
        boolean boolean8 = columnBean0.isVisible();
        net.sourceforge.atunes.model.ColumnSort columnSort9 = columnBean0.getSort();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(columnSort6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(columnSort9);
    }

    @Test
    public void test1433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1433");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.lang.String str3 = cDMetadata0.getAlbum();
        java.util.List<java.lang.Integer> intList4 = cDMetadata0.getTracks();
        net.sourceforge.atunes.model.CDMetadata cDMetadata5 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata5.setAlbumArtist("");
        java.lang.String str9 = cDMetadata5.getTitle((int) (byte) -1);
        java.lang.String[] strArray11 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        cDMetadata5.setTrackNames((java.util.List<java.lang.String>) strList12);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList12);
        cDMetadata0.setYear((int) (short) 1);
        int int18 = cDMetadata0.getYear();
        java.lang.String str19 = cDMetadata0.getGenre();
        cDMetadata0.setYear((int) (short) 10);
        java.lang.String str22 = cDMetadata0.getAlbum();
        java.util.List<java.lang.Integer> intList23 = cDMetadata0.getTracks();
        cDMetadata0.setYear(32);
        java.util.List<java.lang.String> strList26 = cDMetadata0.getTrackNames();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(intList4);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(intList23);
        org.junit.Assert.assertNotNull(strList26);
    }

    @Test
    public void test1434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1434");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType8 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion13 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType8, "mpc", "./description", "./pubDate", "./title");
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion18 = new net.sourceforge.atunes.model.ApplicationVersion("1.0.0 ", (int) (byte) 10, 100, 150, versionType8, "./description", "/rss/channel/item", "/rss/channel/item", "./enclosure/@url");
        java.lang.String str19 = applicationVersion18.getDirectDownloadURL();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType24 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.BETA;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion29 = new net.sourceforge.atunes.model.ApplicationVersion("mpc", (int) (short) 0, 150, (int) (byte) -1, versionType24, "flac", "/rss/channel/item", "hi!", "./pubDate");
        java.lang.String str30 = applicationVersion29.getDate();
        int int31 = applicationVersion18.compareTo(applicationVersion29);
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType32 = applicationVersion29.getVersionType();
        java.lang.String str33 = applicationVersion29.toString();
        java.lang.String str34 = applicationVersion29.toString();
        org.junit.Assert.assertTrue("'" + versionType8 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType8.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "/rss/channel/item" + "'", str19, "/rss/channel/item");
        org.junit.Assert.assertTrue("'" + versionType24 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.BETA + "'", versionType24.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.BETA));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "mpc" + "'", str30, "mpc");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + versionType32 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.BETA + "'", versionType32.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.BETA));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "0.150.-1 flac BETA" + "'", str33, "0.150.-1 flac BETA");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "0.150.-1 flac BETA" + "'", str34, "0.150.-1 flac BETA");
    }

    @Test
    public void test1435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1435");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.ATOM;
        java.lang.String str1 = feedType0.getUrlXPath();
        java.lang.String str2 = feedType0.getTypeXPath();
        java.lang.String str3 = feedType0.getUrlXPath();
        java.lang.String str4 = feedType0.getTitleXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.ATOM + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.ATOM));
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "./link[@rel='enclosure']/@type" + "'", str2, "./link[@rel='enclosure']/@type");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "./title" + "'", str4, "./title");
    }

    @Test
    public void test1436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1436");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        columnBean0.setVisible(false);
        columnBean0.setWidth(0);
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType12 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion17 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType12, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str18 = applicationVersion17.getDate();
        java.lang.String str19 = applicationVersion17.toShortString();
        java.lang.String str20 = applicationVersion17.getChanges();
        boolean boolean21 = columnBean0.equals((java.lang.Object) applicationVersion17);
        net.sourceforge.atunes.model.ColumnBean columnBean22 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean23 = columnBean22.isVisible();
        net.sourceforge.atunes.model.SubmissionState submissionState24 = net.sourceforge.atunes.model.SubmissionState.PENDING;
        boolean boolean25 = columnBean22.equals((java.lang.Object) submissionState24);
        columnBean22.setVisible(false);
        net.sourceforge.atunes.model.ColumnSort columnSort28 = net.sourceforge.atunes.model.ColumnSort.ASCENDING;
        columnBean22.setSort(columnSort28);
        columnBean0.setSort(columnSort28);
        boolean boolean31 = columnBean0.isVisible();
        net.sourceforge.atunes.model.ColumnBean columnBean32 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean33 = columnBean32.isVisible();
        columnBean32.setOrder((int) (byte) -1);
        net.sourceforge.atunes.model.ColumnSort columnSort36 = net.sourceforge.atunes.model.ColumnSort.DESCENDING;
        columnBean32.setSort(columnSort36);
        int int38 = columnBean32.getOrder();
        net.sourceforge.atunes.model.ColumnSort columnSort39 = columnBean32.getSort();
        columnBean0.setSort(columnSort39);
        columnBean0.setVisible(true);
        columnBean0.setWidth((int) (short) -1);
        columnBean0.setVisible(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + versionType12 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType12.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "./title" + "'", str18, "./title");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1.0.0 " + "'", str19, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "./title" + "'", str20, "./title");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + submissionState24 + "' != '" + net.sourceforge.atunes.model.SubmissionState.PENDING + "'", submissionState24.equals(net.sourceforge.atunes.model.SubmissionState.PENDING));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + columnSort28 + "' != '" + net.sourceforge.atunes.model.ColumnSort.ASCENDING + "'", columnSort28.equals(net.sourceforge.atunes.model.ColumnSort.ASCENDING));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + columnSort36 + "' != '" + net.sourceforge.atunes.model.ColumnSort.DESCENDING + "'", columnSort36.equals(net.sourceforge.atunes.model.ColumnSort.DESCENDING));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + columnSort39 + "' != '" + net.sourceforge.atunes.model.ColumnSort.DESCENDING + "'", columnSort39.equals(net.sourceforge.atunes.model.ColumnSort.DESCENDING));
    }

    @Test
    public void test1437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1437");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        java.lang.String str12 = applicationVersion9.getChanges();
        int int13 = applicationVersion9.getMinorNumber();
        int int14 = applicationVersion9.getRevisionNumber();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType19 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion24 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType19, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str25 = applicationVersion24.getDate();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType26 = applicationVersion24.getVersionType();
        int int27 = applicationVersion24.getMajorNumber();
        int int28 = applicationVersion24.getRevisionNumber();
        java.lang.String str29 = applicationVersion24.getDirectDownloadURL();
        int int30 = applicationVersion9.compareTo(applicationVersion24);
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "./title" + "'", str12, "./title");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + versionType19 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType19.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "./title" + "'", str25, "./title");
        org.junit.Assert.assertTrue("'" + versionType26 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType26.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "./pubDate" + "'", str29, "./pubDate");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test1438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1438");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata1 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata1.setAlbumArtist("");
        boolean boolean4 = fontSettings0.equals((java.lang.Object) cDMetadata1);
        fontSettings0.setUseFontSmoothingSettingsFromOs(false);
        boolean boolean7 = fontSettings0.isUseFontSmoothing();
        fontSettings0.setUseFontSmoothingSettingsFromOs(false);
        net.sourceforge.atunes.model.IFontBean iFontBean10 = fontSettings0.getFont();
        net.sourceforge.atunes.model.CDMetadata cDMetadata11 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str12 = cDMetadata11.getGenre();
        java.util.List<java.lang.String> strList13 = cDMetadata11.getComposerNames();
        java.lang.String str14 = cDMetadata11.getAlbum();
        java.util.List<java.lang.Integer> intList15 = cDMetadata11.getTracks();
        int int16 = cDMetadata11.getYear();
        java.util.List<java.lang.String> strList17 = cDMetadata11.getArtistNames();
        cDMetadata11.setDisc((int) (short) 100);
        net.sourceforge.atunes.model.CDMetadata cDMetadata20 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str21 = cDMetadata20.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata22 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata22.setAlbumArtist("");
        java.lang.String str25 = cDMetadata22.getGenre();
        java.lang.String[] strArray27 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        cDMetadata22.setTrackNames((java.util.List<java.lang.String>) strList28);
        cDMetadata20.setComposerNames((java.util.List<java.lang.String>) strList28);
        net.sourceforge.atunes.model.CDMetadata cDMetadata32 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str33 = cDMetadata32.getGenre();
        java.util.List<java.lang.String> strList34 = cDMetadata32.getComposerNames();
        java.lang.String str35 = cDMetadata32.getAlbum();
        net.sourceforge.atunes.model.CDMetadata cDMetadata36 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata36.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList39 = cDMetadata36.getTracks();
        cDMetadata36.setAlbumArtist("/rss/channel/title");
        java.util.List<java.lang.String> strList42 = cDMetadata36.getTrackNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata43 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata43.setAlbumArtist("");
        java.lang.String str46 = cDMetadata43.getGenre();
        java.lang.String[] strArray48 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        cDMetadata43.setTrackNames((java.util.List<java.lang.String>) strList49);
        cDMetadata36.setTrackNames((java.util.List<java.lang.String>) strList49);
        cDMetadata32.setTrackNames((java.util.List<java.lang.String>) strList49);
        cDMetadata20.setTrackNames((java.util.List<java.lang.String>) strList49);
        cDMetadata11.setArtistNames((java.util.List<java.lang.String>) strList49);
        boolean boolean56 = fontSettings0.equals((java.lang.Object) strList49);
        net.sourceforge.atunes.model.FontSettings fontSettings57 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata58 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata58.setAlbumArtist("");
        boolean boolean61 = fontSettings57.equals((java.lang.Object) cDMetadata58);
        java.lang.String str62 = cDMetadata58.getAlbum();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList63 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList65 = throwableRankList63.getNFirstElements((int) (short) 10);
        throwableRankList63.clear();
        java.util.List<java.lang.Integer> intList68 = throwableRankList63.getNFirstElementCounts(150);
        cDMetadata58.setTracks(intList68);
        java.lang.String str70 = cDMetadata58.getAlbumArtist();
        cDMetadata58.setGenre("net.sourceforge.atunes.model.SearchIndexNotAvailableException: net.sourceforge.atunes.model.SearchQuerySyntaxException");
        boolean boolean73 = fontSettings0.equals((java.lang.Object) cDMetadata58);
        cDMetadata58.setDisc((int) (byte) 0);
        int int76 = cDMetadata58.getYear();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(iFontBean10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(strList13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(intList15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(strList34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(intList39);
        org.junit.Assert.assertNull(strList42);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(throwableList65);
        org.junit.Assert.assertNotNull(intList68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
    }

    @Test
    public void test1439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1439");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable1 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException2 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable1);
        java.lang.Throwable[] throwableArray3 = searchQuerySyntaxException2.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException4 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException2);
        java.lang.Throwable throwable5 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException6 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable5);
        java.lang.Throwable[] throwableArray7 = searchQuerySyntaxException6.getSuppressed();
        throwableRankList0.replaceItem((java.lang.Throwable) searchQuerySyntaxException2, (java.lang.Throwable) searchQuerySyntaxException6);
        java.util.List<java.lang.Throwable> throwableList9 = throwableRankList0.getOrder();
        java.lang.Throwable throwable10 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException11 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable10);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList12 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable13 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException14 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable13);
        java.lang.Throwable[] throwableArray15 = searchQuerySyntaxException14.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException16 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException14);
        java.lang.Throwable throwable17 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException18 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable17);
        java.lang.Throwable[] throwableArray19 = searchQuerySyntaxException18.getSuppressed();
        throwableRankList12.replaceItem((java.lang.Throwable) searchQuerySyntaxException14, (java.lang.Throwable) searchQuerySyntaxException18);
        searchQuerySyntaxException11.addSuppressed((java.lang.Throwable) searchQuerySyntaxException18);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException22 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException11);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException23 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException11);
        java.lang.Integer int24 = throwableRankList0.getCount((java.lang.Throwable) searchIndexNotAvailableException23);
        java.util.List<java.lang.Throwable> throwableList26 = throwableRankList0.getNFirstElements(90);
        java.util.List<java.lang.Throwable> throwableList28 = throwableRankList0.getNFirstElements(0);
        java.util.List<java.lang.Integer> intList30 = throwableRankList0.getNFirstElementCounts(90);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableList9);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNotNull(throwableList26);
        org.junit.Assert.assertNotNull(throwableList28);
        org.junit.Assert.assertNotNull(intList30);
    }

    @Test
    public void test1440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1440");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList2 = throwableRankList0.getNFirstElements((int) (short) 10);
        throwableRankList0.clear();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList4 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList6 = throwableRankList4.getNFirstElements((int) (short) 10);
        throwableRankList4.clear();
        java.util.List<java.lang.Integer> intList9 = throwableRankList4.getNFirstElementCounts(150);
        throwableRankList4.clear();
        java.util.List<java.lang.Throwable> throwableList12 = throwableRankList4.getNFirstElements(10);
        int int13 = throwableRankList4.size();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList14 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable15 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException16 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable15);
        java.lang.Throwable[] throwableArray17 = searchQuerySyntaxException16.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException18 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException16);
        java.lang.Throwable throwable19 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException20 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable19);
        java.lang.Throwable[] throwableArray21 = searchQuerySyntaxException20.getSuppressed();
        throwableRankList14.replaceItem((java.lang.Throwable) searchQuerySyntaxException16, (java.lang.Throwable) searchQuerySyntaxException20);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException23 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException20);
        throwableRankList4.addItem((java.lang.Throwable) searchQuerySyntaxException23);
        throwableRankList0.addItem((java.lang.Throwable) searchQuerySyntaxException23);
        org.junit.Assert.assertNotNull(throwableList2);
        org.junit.Assert.assertNotNull(throwableList6);
        org.junit.Assert.assertNotNull(intList9);
        org.junit.Assert.assertNotNull(throwableList12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
    }

    @Test
    public void test1441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1441");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable1 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException2 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable1);
        java.lang.Throwable[] throwableArray3 = searchQuerySyntaxException2.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException4 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException2);
        java.lang.Throwable throwable5 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException6 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable5);
        java.lang.Throwable[] throwableArray7 = searchQuerySyntaxException6.getSuppressed();
        throwableRankList0.replaceItem((java.lang.Throwable) searchQuerySyntaxException2, (java.lang.Throwable) searchQuerySyntaxException6);
        java.util.List<java.lang.Throwable> throwableList9 = throwableRankList0.getOrder();
        java.lang.Throwable throwable10 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException11 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable10);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList12 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable13 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException14 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable13);
        java.lang.Throwable[] throwableArray15 = searchQuerySyntaxException14.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException16 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException14);
        java.lang.Throwable throwable17 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException18 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable17);
        java.lang.Throwable[] throwableArray19 = searchQuerySyntaxException18.getSuppressed();
        throwableRankList12.replaceItem((java.lang.Throwable) searchQuerySyntaxException14, (java.lang.Throwable) searchQuerySyntaxException18);
        searchQuerySyntaxException11.addSuppressed((java.lang.Throwable) searchQuerySyntaxException18);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException22 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException11);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException23 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException11);
        java.lang.Integer int24 = throwableRankList0.getCount((java.lang.Throwable) searchIndexNotAvailableException23);
        java.util.List<java.lang.Throwable> throwableList26 = throwableRankList0.getNFirstElements(90);
        java.util.List<java.lang.Throwable> throwableList28 = throwableRankList0.getNFirstElements(0);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList29 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable30 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException31 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable30);
        java.lang.Throwable[] throwableArray32 = searchQuerySyntaxException31.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException33 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException31);
        java.lang.Throwable throwable34 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException35 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable34);
        java.lang.Throwable[] throwableArray36 = searchQuerySyntaxException35.getSuppressed();
        throwableRankList29.replaceItem((java.lang.Throwable) searchQuerySyntaxException31, (java.lang.Throwable) searchQuerySyntaxException35);
        java.lang.Integer int38 = throwableRankList0.getCount((java.lang.Throwable) searchQuerySyntaxException31);
        throwableRankList0.clear();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList40 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable41 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException42 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable41);
        java.lang.Throwable[] throwableArray43 = searchQuerySyntaxException42.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException44 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException42);
        java.lang.Throwable throwable45 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException46 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable45);
        java.lang.Throwable[] throwableArray47 = searchQuerySyntaxException46.getSuppressed();
        throwableRankList40.replaceItem((java.lang.Throwable) searchQuerySyntaxException42, (java.lang.Throwable) searchQuerySyntaxException46);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList49 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable50 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException51 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable50);
        java.lang.Throwable[] throwableArray52 = searchQuerySyntaxException51.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException53 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException51);
        java.lang.Throwable throwable54 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException55 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable54);
        java.lang.Throwable[] throwableArray56 = searchQuerySyntaxException55.getSuppressed();
        throwableRankList49.replaceItem((java.lang.Throwable) searchQuerySyntaxException51, (java.lang.Throwable) searchQuerySyntaxException55);
        java.lang.Integer int58 = throwableRankList40.getCount((java.lang.Throwable) searchQuerySyntaxException55);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList59 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable60 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException61 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable60);
        java.lang.Throwable[] throwableArray62 = searchQuerySyntaxException61.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException63 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException61);
        java.lang.Throwable throwable64 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException65 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable64);
        java.lang.Throwable[] throwableArray66 = searchQuerySyntaxException65.getSuppressed();
        throwableRankList59.replaceItem((java.lang.Throwable) searchQuerySyntaxException61, (java.lang.Throwable) searchQuerySyntaxException65);
        java.util.List<java.lang.Throwable> throwableList68 = throwableRankList59.getOrder();
        java.lang.Throwable throwable69 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException70 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable69);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList71 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable72 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException73 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable72);
        java.lang.Throwable[] throwableArray74 = searchQuerySyntaxException73.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException75 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException73);
        java.lang.Throwable throwable76 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException77 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable76);
        java.lang.Throwable[] throwableArray78 = searchQuerySyntaxException77.getSuppressed();
        throwableRankList71.replaceItem((java.lang.Throwable) searchQuerySyntaxException73, (java.lang.Throwable) searchQuerySyntaxException77);
        searchQuerySyntaxException70.addSuppressed((java.lang.Throwable) searchQuerySyntaxException77);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException81 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException70);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException82 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException70);
        java.lang.Integer int83 = throwableRankList59.getCount((java.lang.Throwable) searchIndexNotAvailableException82);
        java.lang.Integer int84 = throwableRankList40.getCount((java.lang.Throwable) searchIndexNotAvailableException82);
        java.lang.Throwable[] throwableArray85 = searchIndexNotAvailableException82.getSuppressed();
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException86 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchIndexNotAvailableException82);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList87 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable88 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException89 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable88);
        java.lang.Throwable[] throwableArray90 = searchQuerySyntaxException89.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException91 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException89);
        java.lang.Throwable throwable92 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException93 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable92);
        java.lang.Throwable[] throwableArray94 = searchQuerySyntaxException93.getSuppressed();
        throwableRankList87.replaceItem((java.lang.Throwable) searchQuerySyntaxException89, (java.lang.Throwable) searchQuerySyntaxException93);
        throwableRankList0.replaceItem((java.lang.Throwable) searchQuerySyntaxException86, (java.lang.Throwable) searchQuerySyntaxException93);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException97 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException93);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException98 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException97);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException99 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException98);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableList9);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNotNull(throwableList26);
        org.junit.Assert.assertNotNull(throwableList28);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNull(int38);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNull(int58);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableList68);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNull(int83);
        org.junit.Assert.assertNull(int84);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(throwableArray90);
        org.junit.Assert.assertNotNull(throwableArray94);
    }

    @Test
    public void test1442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1442");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable1 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException2 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable1);
        java.lang.Throwable[] throwableArray3 = searchQuerySyntaxException2.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException4 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException2);
        java.lang.Throwable throwable5 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException6 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable5);
        java.lang.Throwable[] throwableArray7 = searchQuerySyntaxException6.getSuppressed();
        throwableRankList0.replaceItem((java.lang.Throwable) searchQuerySyntaxException2, (java.lang.Throwable) searchQuerySyntaxException6);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList9 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable10 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException11 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable10);
        java.lang.Throwable[] throwableArray12 = searchQuerySyntaxException11.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException13 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException11);
        java.lang.Throwable throwable14 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException15 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable14);
        java.lang.Throwable[] throwableArray16 = searchQuerySyntaxException15.getSuppressed();
        throwableRankList9.replaceItem((java.lang.Throwable) searchQuerySyntaxException11, (java.lang.Throwable) searchQuerySyntaxException15);
        java.lang.Integer int18 = throwableRankList0.getCount((java.lang.Throwable) searchQuerySyntaxException15);
        java.lang.Throwable throwable19 = null;
        java.lang.Throwable throwable20 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException21 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable20);
        throwableRankList0.replaceItem(throwable19, (java.lang.Throwable) searchQuerySyntaxException21);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList23 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable24 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException25 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable24);
        java.lang.Throwable[] throwableArray26 = searchQuerySyntaxException25.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException27 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException25);
        java.lang.Throwable throwable28 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException29 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable28);
        java.lang.Throwable[] throwableArray30 = searchQuerySyntaxException29.getSuppressed();
        throwableRankList23.replaceItem((java.lang.Throwable) searchQuerySyntaxException25, (java.lang.Throwable) searchQuerySyntaxException29);
        java.util.List<java.lang.Throwable> throwableList32 = throwableRankList23.getOrder();
        java.lang.Throwable throwable33 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException34 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable33);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList35 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable36 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException37 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable36);
        java.lang.Throwable[] throwableArray38 = searchQuerySyntaxException37.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException39 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException37);
        java.lang.Throwable throwable40 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException41 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable40);
        java.lang.Throwable[] throwableArray42 = searchQuerySyntaxException41.getSuppressed();
        throwableRankList35.replaceItem((java.lang.Throwable) searchQuerySyntaxException37, (java.lang.Throwable) searchQuerySyntaxException41);
        searchQuerySyntaxException34.addSuppressed((java.lang.Throwable) searchQuerySyntaxException41);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException45 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException34);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException46 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException34);
        java.lang.Integer int47 = throwableRankList23.getCount((java.lang.Throwable) searchIndexNotAvailableException46);
        throwableRankList0.addItem((java.lang.Throwable) searchIndexNotAvailableException46);
        java.util.List<java.lang.Integer> intList50 = throwableRankList0.getNFirstElementCounts(90);
        throwableRankList0.clear();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableList32);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNull(int47);
        org.junit.Assert.assertNotNull(intList50);
    }

    @Test
    public void test1443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1443");
        net.sourceforge.atunes.model.LookAndFeelBean lookAndFeelBean0 = new net.sourceforge.atunes.model.LookAndFeelBean();
        lookAndFeelBean0.setName("./summary");
        java.lang.String str3 = lookAndFeelBean0.getSkin();
        java.lang.String str4 = lookAndFeelBean0.getSkin();
        lookAndFeelBean0.setSkin("net.sourceforge.atunes.model.SearchQuerySyntaxException: net.sourceforge.atunes.model.SearchQuerySyntaxException");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test1444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1444");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList2 = throwableRankList0.getNFirstElements((int) (short) 100);
        java.util.List<java.lang.Throwable> throwableList3 = throwableRankList0.getOrder();
        java.util.List<java.lang.Throwable> throwableList5 = throwableRankList0.getNFirstElements((int) 'a');
        java.lang.Throwable throwable6 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException7 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable6);
        java.lang.Throwable[] throwableArray8 = searchQuerySyntaxException7.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException9 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException7);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException10 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException7);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList11 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable12 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException13 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable12);
        java.lang.Throwable[] throwableArray14 = searchQuerySyntaxException13.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException15 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException13);
        java.lang.Throwable throwable16 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException17 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable16);
        java.lang.Throwable[] throwableArray18 = searchQuerySyntaxException17.getSuppressed();
        throwableRankList11.replaceItem((java.lang.Throwable) searchQuerySyntaxException13, (java.lang.Throwable) searchQuerySyntaxException17);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException20 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException17);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException21 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException20);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException22 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchIndexNotAvailableException21);
        searchQuerySyntaxException10.addSuppressed((java.lang.Throwable) searchIndexNotAvailableException22);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException24 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException10);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException25 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchIndexNotAvailableException24);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException26 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException25);
        throwableRankList0.addItem((java.lang.Throwable) searchQuerySyntaxException25);
        throwableRankList0.clear();
        org.junit.Assert.assertNotNull(throwableList2);
        org.junit.Assert.assertNotNull(throwableList3);
        org.junit.Assert.assertNotNull(throwableList5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray18);
    }

    @Test
    public void test1445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1445");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        columnBean0.setVisible(false);
        columnBean0.setWidth(0);
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType12 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion17 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType12, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str18 = applicationVersion17.getDate();
        java.lang.String str19 = applicationVersion17.toShortString();
        java.lang.String str20 = applicationVersion17.getChanges();
        boolean boolean21 = columnBean0.equals((java.lang.Object) applicationVersion17);
        java.lang.String str22 = applicationVersion17.getDownloadURL();
        java.lang.String str23 = applicationVersion17.getChanges();
        java.lang.String str24 = applicationVersion17.getDownloadURL();
        java.lang.String str25 = applicationVersion17.getDate();
        java.lang.String str26 = applicationVersion17.toString();
        java.lang.String str27 = applicationVersion17.getName();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + versionType12 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType12.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "./title" + "'", str18, "./title");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1.0.0 " + "'", str19, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "./title" + "'", str20, "./title");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "./description" + "'", str22, "./description");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "./title" + "'", str23, "./title");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "./description" + "'", str24, "./description");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "./title" + "'", str25, "./title");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1.0.0 mpc " + "'", str26, "1.0.0 mpc ");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "mpc" + "'", str27, "mpc");
    }

    @Test
    public void test1446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1446");
        java.lang.Throwable throwable0 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException1 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable0);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList2 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable3 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException4 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable3);
        java.lang.Throwable[] throwableArray5 = searchQuerySyntaxException4.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException6 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException4);
        java.lang.Throwable throwable7 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException8 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable7);
        java.lang.Throwable[] throwableArray9 = searchQuerySyntaxException8.getSuppressed();
        throwableRankList2.replaceItem((java.lang.Throwable) searchQuerySyntaxException4, (java.lang.Throwable) searchQuerySyntaxException8);
        searchQuerySyntaxException1.addSuppressed((java.lang.Throwable) searchQuerySyntaxException8);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException12 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException1);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException13 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException1);
        java.lang.Throwable throwable14 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException15 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable14);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList16 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable17 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException18 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable17);
        java.lang.Throwable[] throwableArray19 = searchQuerySyntaxException18.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException20 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException18);
        java.lang.Throwable throwable21 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException22 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable21);
        java.lang.Throwable[] throwableArray23 = searchQuerySyntaxException22.getSuppressed();
        throwableRankList16.replaceItem((java.lang.Throwable) searchQuerySyntaxException18, (java.lang.Throwable) searchQuerySyntaxException22);
        searchQuerySyntaxException15.addSuppressed((java.lang.Throwable) searchQuerySyntaxException22);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException26 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException15);
        java.lang.Throwable throwable27 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException28 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable27);
        java.lang.Throwable[] throwableArray29 = searchQuerySyntaxException28.getSuppressed();
        searchQuerySyntaxException15.addSuppressed((java.lang.Throwable) searchQuerySyntaxException28);
        searchIndexNotAvailableException13.addSuppressed((java.lang.Throwable) searchQuerySyntaxException28);
        java.lang.Throwable throwable32 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException33 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable32);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList34 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable35 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException36 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable35);
        java.lang.Throwable[] throwableArray37 = searchQuerySyntaxException36.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException38 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException36);
        java.lang.Throwable throwable39 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException40 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable39);
        java.lang.Throwable[] throwableArray41 = searchQuerySyntaxException40.getSuppressed();
        throwableRankList34.replaceItem((java.lang.Throwable) searchQuerySyntaxException36, (java.lang.Throwable) searchQuerySyntaxException40);
        searchQuerySyntaxException33.addSuppressed((java.lang.Throwable) searchQuerySyntaxException40);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException44 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException33);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException45 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException33);
        searchQuerySyntaxException28.addSuppressed((java.lang.Throwable) searchQuerySyntaxException33);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException47 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException33);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray41);
    }

    @Test
    public void test1447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1447");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.lang.String str3 = cDMetadata0.getGenre();
        int int4 = cDMetadata0.getYear();
        int int5 = cDMetadata0.getYear();
        cDMetadata0.setGenre("./enclosure/@url");
        net.sourceforge.atunes.model.CDMetadata cDMetadata8 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata8.setAlbumArtist("");
        java.lang.String str11 = cDMetadata8.getGenre();
        int int12 = cDMetadata8.getYear();
        int int13 = cDMetadata8.getYear();
        net.sourceforge.atunes.model.CDMetadata cDMetadata14 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str15 = cDMetadata14.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata16 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata16.setAlbumArtist("");
        java.lang.String str19 = cDMetadata16.getGenre();
        java.lang.String[] strArray21 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        cDMetadata16.setTrackNames((java.util.List<java.lang.String>) strList22);
        cDMetadata14.setComposerNames((java.util.List<java.lang.String>) strList22);
        cDMetadata8.setTrackNames((java.util.List<java.lang.String>) strList22);
        net.sourceforge.atunes.model.CDMetadata cDMetadata27 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str28 = cDMetadata27.getGenre();
        java.util.List<java.lang.String> strList29 = cDMetadata27.getComposerNames();
        java.lang.String str30 = cDMetadata27.getAlbum();
        java.util.List<java.lang.Integer> intList31 = cDMetadata27.getTracks();
        int int32 = cDMetadata27.getDisc();
        java.lang.String[] strArray40 = new java.lang.String[] { "net.sourceforge.atunes.model.InconsistentRepositoryException", "./title", "1.0.0 ", "./title", "./duration", "mpc", "net.sourceforge.atunes.model.InconsistentRepositoryException" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        cDMetadata27.setArtistNames((java.util.List<java.lang.String>) strList41);
        cDMetadata8.setArtistNames((java.util.List<java.lang.String>) strList41);
        net.sourceforge.atunes.model.CDMetadata cDMetadata45 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata45.setAlbumArtist("");
        java.lang.String str48 = cDMetadata45.getGenre();
        java.lang.String[] strArray50 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        cDMetadata45.setTrackNames((java.util.List<java.lang.String>) strList51);
        cDMetadata8.setTrackNames((java.util.List<java.lang.String>) strList51);
        cDMetadata0.setComposerNames((java.util.List<java.lang.String>) strList51);
        cDMetadata0.setYear(150);
        cDMetadata0.setYear((int) (short) 100);
        int int60 = cDMetadata0.getYear();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(intList31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 100 + "'", int60 == 100);
    }

    @Test
    public void test1448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1448");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.IFontBean iFontBean1 = fontSettings0.getFont();
        net.sourceforge.atunes.model.IFontBean iFontBean2 = fontSettings0.getFont();
        fontSettings0.setUseFontSmoothing(false);
        boolean boolean5 = fontSettings0.isUseFontSmoothingSettingsFromOs();
        org.junit.Assert.assertNull(iFontBean1);
        org.junit.Assert.assertNull(iFontBean2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1449");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList3 = cDMetadata0.getTracks();
        cDMetadata0.setAlbumArtist("/rss/channel/title");
        java.util.List<java.lang.String> strList6 = cDMetadata0.getTrackNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata7 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata7.setAlbumArtist("");
        java.lang.String str10 = cDMetadata7.getGenre();
        java.lang.String[] strArray12 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        cDMetadata7.setTrackNames((java.util.List<java.lang.String>) strList13);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList13);
        net.sourceforge.atunes.model.CDMetadata cDMetadata17 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str18 = cDMetadata17.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata19 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata19.setAlbumArtist("");
        java.lang.String str22 = cDMetadata19.getGenre();
        java.lang.String[] strArray24 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        cDMetadata19.setTrackNames((java.util.List<java.lang.String>) strList25);
        cDMetadata17.setComposerNames((java.util.List<java.lang.String>) strList25);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList25);
        int int30 = cDMetadata0.getDisc();
        net.sourceforge.atunes.model.CDMetadata cDMetadata31 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata31.setAlbumArtist("");
        java.lang.String str35 = cDMetadata31.getTitle((int) (byte) -1);
        java.lang.String[] strArray37 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        cDMetadata31.setTrackNames((java.util.List<java.lang.String>) strList38);
        cDMetadata31.setAlbumArtist("/rss/channel/item");
        net.sourceforge.atunes.model.CDMetadata cDMetadata43 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str44 = cDMetadata43.getGenre();
        java.util.List<java.lang.String> strList45 = cDMetadata43.getComposerNames();
        java.lang.String str46 = cDMetadata43.getAlbum();
        java.util.List<java.lang.Integer> intList47 = cDMetadata43.getTracks();
        net.sourceforge.atunes.model.CDMetadata cDMetadata48 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata48.setAlbumArtist("");
        java.lang.String str52 = cDMetadata48.getTitle((int) (byte) -1);
        java.lang.String[] strArray54 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList55 = new java.util.ArrayList<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList55, strArray54);
        cDMetadata48.setTrackNames((java.util.List<java.lang.String>) strList55);
        cDMetadata43.setTrackNames((java.util.List<java.lang.String>) strList55);
        cDMetadata31.setTrackNames((java.util.List<java.lang.String>) strList55);
        cDMetadata0.setArtistNames((java.util.List<java.lang.String>) strList55);
        cDMetadata0.setDisc((int) (short) 100);
        org.junit.Assert.assertNull(intList3);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(strList45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(intList47);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test1450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1450");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.lang.String str3 = cDMetadata0.getAlbum();
        java.util.List<java.lang.Integer> intList4 = cDMetadata0.getTracks();
        net.sourceforge.atunes.model.CDMetadata cDMetadata5 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata5.setAlbumArtist("");
        java.lang.String str9 = cDMetadata5.getTitle((int) (byte) -1);
        java.lang.String[] strArray11 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        cDMetadata5.setTrackNames((java.util.List<java.lang.String>) strList12);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList12);
        cDMetadata0.setYear((int) (short) 1);
        int int18 = cDMetadata0.getDisc();
        int int19 = cDMetadata0.getDisc();
        java.lang.String str20 = cDMetadata0.getGenre();
        cDMetadata0.setGenre("1.0.0 mpc ");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(intList4);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test1451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1451");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        int int1 = cDMetadata0.getYear();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.util.List<java.lang.String> strList3 = cDMetadata0.getArtistNames();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(strList3);
    }

    @Test
    public void test1452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1452");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str1 = feedType0.getUrlXPath();
        java.lang.String str2 = feedType0.getDurationXPath();
        java.lang.String str3 = feedType0.getDateXPath();
        java.lang.String str4 = feedType0.getNameXPath();
        java.lang.String str5 = feedType0.getDescriptionXPath();
        java.lang.String str6 = feedType0.getDateXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "./enclosure/@url" + "'", str1, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "./duration" + "'", str2, "./duration");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "./pubDate" + "'", str3, "./pubDate");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "/rss/channel/title" + "'", str4, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "./description" + "'", str5, "./description");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "./pubDate" + "'", str6, "./pubDate");
    }

    @Test
    public void test1453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1453");
        java.lang.Throwable throwable0 = null;
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException1 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException(throwable0);
    }

    @Test
    public void test1454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1454");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        net.sourceforge.atunes.model.InconsistentRepositoryException inconsistentRepositoryException1 = new net.sourceforge.atunes.model.InconsistentRepositoryException();
        net.sourceforge.atunes.model.InconsistentRepositoryException inconsistentRepositoryException2 = new net.sourceforge.atunes.model.InconsistentRepositoryException();
        throwableRankList0.replaceItem((java.lang.Throwable) inconsistentRepositoryException1, (java.lang.Throwable) inconsistentRepositoryException2);
        int int4 = throwableRankList0.size();
        java.lang.Throwable throwable5 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException6 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable5);
        java.lang.Throwable[] throwableArray7 = searchQuerySyntaxException6.getSuppressed();
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException8 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException6);
        throwableRankList0.addItem((java.lang.Throwable) searchQuerySyntaxException6);
        java.lang.Throwable throwable10 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException11 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable10);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList12 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable13 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException14 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable13);
        java.lang.Throwable[] throwableArray15 = searchQuerySyntaxException14.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException16 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException14);
        java.lang.Throwable throwable17 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException18 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable17);
        java.lang.Throwable[] throwableArray19 = searchQuerySyntaxException18.getSuppressed();
        throwableRankList12.replaceItem((java.lang.Throwable) searchQuerySyntaxException14, (java.lang.Throwable) searchQuerySyntaxException18);
        searchQuerySyntaxException11.addSuppressed((java.lang.Throwable) searchQuerySyntaxException18);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException22 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException11);
        throwableRankList0.addItem((java.lang.Throwable) searchIndexNotAvailableException22);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
    }

    @Test
    public void test1455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1455");
        net.sourceforge.atunes.model.LookAndFeelBean lookAndFeelBean0 = new net.sourceforge.atunes.model.LookAndFeelBean();
        lookAndFeelBean0.setName("./summary");
        java.lang.String str3 = lookAndFeelBean0.getSkin();
        lookAndFeelBean0.setSkin("./summary");
        lookAndFeelBean0.setName("rm");
        java.lang.String str8 = lookAndFeelBean0.getName();
        lookAndFeelBean0.setName("./enclosure/@type");
        lookAndFeelBean0.setName("./author");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "rm" + "'", str8, "rm");
    }

    @Test
    public void test1456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1456");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable1 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException2 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable1);
        java.lang.Throwable[] throwableArray3 = searchQuerySyntaxException2.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException4 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException2);
        java.lang.Throwable throwable5 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException6 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable5);
        java.lang.Throwable[] throwableArray7 = searchQuerySyntaxException6.getSuppressed();
        throwableRankList0.replaceItem((java.lang.Throwable) searchQuerySyntaxException2, (java.lang.Throwable) searchQuerySyntaxException6);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList9 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable10 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException11 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable10);
        java.lang.Throwable[] throwableArray12 = searchQuerySyntaxException11.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException13 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException11);
        java.lang.Throwable throwable14 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException15 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable14);
        java.lang.Throwable[] throwableArray16 = searchQuerySyntaxException15.getSuppressed();
        throwableRankList9.replaceItem((java.lang.Throwable) searchQuerySyntaxException11, (java.lang.Throwable) searchQuerySyntaxException15);
        java.lang.Integer int18 = throwableRankList0.getCount((java.lang.Throwable) searchQuerySyntaxException15);
        java.lang.Throwable throwable19 = null;
        java.lang.Throwable throwable20 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException21 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable20);
        throwableRankList0.replaceItem(throwable19, (java.lang.Throwable) searchQuerySyntaxException21);
        java.util.List<java.lang.Throwable> throwableList24 = throwableRankList0.getNFirstElements((int) (short) 1);
        int int25 = throwableRankList0.size();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(throwableList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test1457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1457");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.lang.String str3 = cDMetadata0.getGenre();
        java.util.List<java.lang.Integer> intList4 = cDMetadata0.getTracks();
        java.util.List<java.lang.String> strList5 = cDMetadata0.getComposerNames();
        cDMetadata0.setGenre("HTTP_PROXY");
        int int8 = cDMetadata0.getDisc();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(intList4);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test1458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1458");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str1 = feedType0.getEntryXPath();
        java.lang.String str2 = feedType0.getTypeXPath();
        java.lang.String str3 = feedType0.getNameXPath();
        java.lang.String str4 = feedType0.getAuthorXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "/rss/channel/item" + "'", str1, "/rss/channel/item");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "./enclosure/@type" + "'", str2, "./enclosure/@type");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "/rss/channel/title" + "'", str3, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "./author" + "'", str4, "./author");
    }

    @Test
    public void test1459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1459");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable1 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException2 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable1);
        java.lang.Throwable[] throwableArray3 = searchQuerySyntaxException2.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException4 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException2);
        java.lang.Throwable throwable5 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException6 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable5);
        java.lang.Throwable[] throwableArray7 = searchQuerySyntaxException6.getSuppressed();
        throwableRankList0.replaceItem((java.lang.Throwable) searchQuerySyntaxException2, (java.lang.Throwable) searchQuerySyntaxException6);
        java.util.List<java.lang.Throwable> throwableList9 = throwableRankList0.getOrder();
        java.lang.Throwable throwable10 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException11 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable10);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList12 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable13 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException14 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable13);
        java.lang.Throwable[] throwableArray15 = searchQuerySyntaxException14.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException16 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException14);
        java.lang.Throwable throwable17 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException18 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable17);
        java.lang.Throwable[] throwableArray19 = searchQuerySyntaxException18.getSuppressed();
        throwableRankList12.replaceItem((java.lang.Throwable) searchQuerySyntaxException14, (java.lang.Throwable) searchQuerySyntaxException18);
        searchQuerySyntaxException11.addSuppressed((java.lang.Throwable) searchQuerySyntaxException18);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException22 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException11);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException23 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException11);
        java.lang.Integer int24 = throwableRankList0.getCount((java.lang.Throwable) searchIndexNotAvailableException23);
        java.util.List<java.lang.Throwable> throwableList26 = throwableRankList0.getNFirstElements(90);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList27 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList29 = throwableRankList27.getNFirstElements((int) (short) 100);
        java.lang.Throwable throwable30 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException31 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable30);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList32 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable33 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException34 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable33);
        java.lang.Throwable[] throwableArray35 = searchQuerySyntaxException34.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException36 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException34);
        java.lang.Throwable throwable37 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException38 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable37);
        java.lang.Throwable[] throwableArray39 = searchQuerySyntaxException38.getSuppressed();
        throwableRankList32.replaceItem((java.lang.Throwable) searchQuerySyntaxException34, (java.lang.Throwable) searchQuerySyntaxException38);
        searchQuerySyntaxException31.addSuppressed((java.lang.Throwable) searchQuerySyntaxException38);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException42 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException31);
        java.lang.Throwable throwable43 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException44 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable43);
        java.lang.Throwable[] throwableArray45 = searchQuerySyntaxException44.getSuppressed();
        searchQuerySyntaxException31.addSuppressed((java.lang.Throwable) searchQuerySyntaxException44);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException47 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException31);
        java.lang.Throwable throwable48 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException49 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable48);
        java.lang.Throwable[] throwableArray50 = searchQuerySyntaxException49.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException51 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException49);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException52 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException49);
        throwableRankList27.replaceItem((java.lang.Throwable) searchQuerySyntaxException31, (java.lang.Throwable) searchQuerySyntaxException52);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException54 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException52);
        throwableRankList0.addItem((java.lang.Throwable) searchQuerySyntaxException52);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableList9);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNotNull(throwableList26);
        org.junit.Assert.assertNotNull(throwableList29);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray50);
    }

    @Test
    public void test1460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1460");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str1 = feedType0.getEntryXPath();
        java.lang.String str2 = feedType0.getAuthorXPath();
        java.lang.String str3 = feedType0.getDateXPath();
        java.lang.String str4 = feedType0.getEntryXPath();
        java.lang.String str5 = feedType0.getEntryXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "/rss/channel/item" + "'", str1, "/rss/channel/item");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "./author" + "'", str2, "./author");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "./pubDate" + "'", str3, "./pubDate");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "/rss/channel/item" + "'", str4, "/rss/channel/item");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/rss/channel/item" + "'", str5, "/rss/channel/item");
    }

    @Test
    public void test1461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1461");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata1 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata1.setAlbumArtist("");
        boolean boolean4 = fontSettings0.equals((java.lang.Object) cDMetadata1);
        fontSettings0.setUseFontSmoothing(true);
        net.sourceforge.atunes.model.IFontBean iFontBean7 = fontSettings0.getFont();
        net.sourceforge.atunes.model.CDMetadata cDMetadata8 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str9 = cDMetadata8.getGenre();
        java.util.List<java.lang.String> strList10 = cDMetadata8.getComposerNames();
        java.lang.String str11 = cDMetadata8.getAlbum();
        java.util.List<java.lang.Integer> intList12 = cDMetadata8.getTracks();
        cDMetadata8.setAlbumArtist("mpc");
        java.lang.String str15 = cDMetadata8.getAlbum();
        boolean boolean16 = fontSettings0.equals((java.lang.Object) cDMetadata8);
        java.lang.String[] strArray41 = new java.lang.String[] { "./link[@rel='enclosure']/@type", "SOCKS_PROXY", "/feed/title", "./pubDate", "1.0.0 mpc ", "net.sourceforge.atunes.model.InconsistentRepositoryException", "1.0.0 mpc ", "1.0.0 mpc ", "rm", "./enclosure/@type", "/rss/channel/item", "mpc", "./title", "1.0.0 ", "flv", "1.0.0 ", "./link[@rel='enclosure']/@type", "hi!", "./link[@rel='enclosure']/@type", "./updated", "10.52.35  ", "net.sourceforge.atunes.model.InconsistentRepositoryException", "./enclosure/@url", "SOCKS_PROXY" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        cDMetadata8.setTrackNames((java.util.List<java.lang.String>) strList42);
        cDMetadata8.setAlbumArtist("flac");
        java.lang.String str47 = cDMetadata8.getGenre();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(iFontBean7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(strList10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(intList12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNull(str47);
    }

    @Test
    public void test1462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1462");
        net.sourceforge.atunes.model.LocalAudioObjectFormat localAudioObjectFormat0 = net.sourceforge.atunes.model.LocalAudioObjectFormat.APE;
        java.lang.String str1 = localAudioObjectFormat0.getExtension();
        org.junit.Assert.assertTrue("'" + localAudioObjectFormat0 + "' != '" + net.sourceforge.atunes.model.LocalAudioObjectFormat.APE + "'", localAudioObjectFormat0.equals(net.sourceforge.atunes.model.LocalAudioObjectFormat.APE));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ape" + "'", str1, "ape");
    }

    @Test
    public void test1463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1463");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.lang.String str3 = cDMetadata0.getAlbum();
        java.util.List<java.lang.Integer> intList4 = cDMetadata0.getTracks();
        net.sourceforge.atunes.model.CDMetadata cDMetadata5 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata5.setAlbumArtist("");
        java.lang.String str9 = cDMetadata5.getTitle((int) (byte) -1);
        java.lang.String[] strArray11 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        cDMetadata5.setTrackNames((java.util.List<java.lang.String>) strList12);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList12);
        cDMetadata0.setYear((int) (short) 1);
        java.util.List<java.lang.String> strList18 = cDMetadata0.getArtistNames();
        cDMetadata0.setAlbumArtist("net.sourceforge.atunes.model.SearchQuerySyntaxException");
        java.lang.String str21 = cDMetadata0.getAlbumArtist();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(intList4);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "net.sourceforge.atunes.model.SearchQuerySyntaxException" + "'", str21, "net.sourceforge.atunes.model.SearchQuerySyntaxException");
    }

    @Test
    public void test1464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1464");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType8 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion13 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType8, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str14 = applicationVersion13.getDate();
        java.lang.String str15 = applicationVersion13.toShortString();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType16 = applicationVersion13.getVersionType();
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion21 = new net.sourceforge.atunes.model.ApplicationVersion("1.0.0 ", (int) (short) 10, (int) '4', (int) '#', versionType16, "", "./enclosure/@url", "SOCKS_PROXY", "./enclosure/@url");
        java.lang.String str22 = applicationVersion21.getName();
        java.lang.String str23 = applicationVersion21.toString();
        net.sourceforge.atunes.model.FeedType feedType24 = net.sourceforge.atunes.model.FeedType.ATOM;
        java.lang.String str25 = feedType24.getTypeXPath();
        java.lang.String str26 = feedType24.getUrlXPath();
        boolean boolean27 = applicationVersion21.equals((java.lang.Object) feedType24);
        java.lang.String str28 = applicationVersion21.getDate();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType29 = applicationVersion21.getVersionType();
        java.lang.String str30 = applicationVersion21.getChanges();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType43 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion48 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType43, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str49 = applicationVersion48.getDate();
        java.lang.String str50 = applicationVersion48.toShortString();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType51 = applicationVersion48.getVersionType();
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion56 = new net.sourceforge.atunes.model.ApplicationVersion("1.0.0 ", (int) (short) 10, (int) '4', (int) '#', versionType51, "", "./enclosure/@url", "SOCKS_PROXY", "./enclosure/@url");
        java.lang.String str57 = applicationVersion56.getName();
        java.lang.String str58 = applicationVersion56.toString();
        net.sourceforge.atunes.model.FeedType feedType59 = net.sourceforge.atunes.model.FeedType.ATOM;
        java.lang.String str60 = feedType59.getTypeXPath();
        java.lang.String str61 = feedType59.getUrlXPath();
        boolean boolean62 = applicationVersion56.equals((java.lang.Object) feedType59);
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType63 = applicationVersion56.getVersionType();
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion68 = new net.sourceforge.atunes.model.ApplicationVersion("HTTP_PROXY", 0, 120, (int) (byte) 1, versionType63, "", "mp4", "./description", "net.sourceforge.atunes.model.SearchIndexNotAvailableException: net.sourceforge.atunes.model.SearchQuerySyntaxException");
        java.lang.String str69 = applicationVersion68.getDirectDownloadURL();
        java.lang.String str70 = applicationVersion68.getDownloadURL();
        int int71 = applicationVersion21.compareTo(applicationVersion68);
        org.junit.Assert.assertTrue("'" + versionType8 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType8.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "./title" + "'", str14, "./title");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1.0.0 " + "'", str15, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + versionType16 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType16.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "10.52.35  " + "'", str23, "10.52.35  ");
        org.junit.Assert.assertTrue("'" + feedType24 + "' != '" + net.sourceforge.atunes.model.FeedType.ATOM + "'", feedType24.equals(net.sourceforge.atunes.model.FeedType.ATOM));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "./link[@rel='enclosure']/@type" + "'", str25, "./link[@rel='enclosure']/@type");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1.0.0 " + "'", str28, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + versionType29 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType29.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "./enclosure/@url" + "'", str30, "./enclosure/@url");
        org.junit.Assert.assertTrue("'" + versionType43 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType43.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "./title" + "'", str49, "./title");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "1.0.0 " + "'", str50, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + versionType51 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType51.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "10.52.35  " + "'", str58, "10.52.35  ");
        org.junit.Assert.assertTrue("'" + feedType59 + "' != '" + net.sourceforge.atunes.model.FeedType.ATOM + "'", feedType59.equals(net.sourceforge.atunes.model.FeedType.ATOM));
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "./link[@rel='enclosure']/@type" + "'", str60, "./link[@rel='enclosure']/@type");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + versionType63 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType63.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "./description" + "'", str69, "./description");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "mp4" + "'", str70, "mp4");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
    }

    @Test
    public void test1465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1465");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.lang.String str3 = cDMetadata0.getGenre();
        java.lang.String[] strArray5 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList6);
        cDMetadata0.setYear((int) (short) 10);
        cDMetadata0.setGenre("0.0.0 ./title ");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test1466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1466");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList3 = cDMetadata0.getTracks();
        cDMetadata0.setAlbumArtist("/rss/channel/title");
        java.util.List<java.lang.String> strList6 = cDMetadata0.getTrackNames();
        java.lang.String str7 = cDMetadata0.getAlbumArtist();
        cDMetadata0.setYear((-1));
        cDMetadata0.setGenre("./link[@rel='enclosure']/@type");
        java.lang.String str12 = cDMetadata0.getAlbumArtist();
        java.util.List<java.lang.Integer> intList13 = cDMetadata0.getTracks();
        net.sourceforge.atunes.model.FontSettings fontSettings14 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata15 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata15.setAlbumArtist("");
        boolean boolean18 = fontSettings14.equals((java.lang.Object) cDMetadata15);
        java.lang.String str19 = cDMetadata15.getAlbum();
        java.lang.String str20 = cDMetadata15.getAlbum();
        java.lang.String str22 = cDMetadata15.getTitle(1);
        java.util.List<java.lang.String> strList23 = cDMetadata15.getTrackNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata24 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str25 = cDMetadata24.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata26 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata26.setAlbumArtist("");
        java.lang.String str29 = cDMetadata26.getGenre();
        java.lang.String[] strArray31 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        cDMetadata26.setTrackNames((java.util.List<java.lang.String>) strList32);
        cDMetadata24.setComposerNames((java.util.List<java.lang.String>) strList32);
        cDMetadata15.setComposerNames((java.util.List<java.lang.String>) strList32);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList32);
        org.junit.Assert.assertNull(intList3);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/rss/channel/title" + "'", str7, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "/rss/channel/title" + "'", str12, "/rss/channel/title");
        org.junit.Assert.assertNull(intList13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(strList23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test1467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1467");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str1 = feedType0.getUrlXPath();
        java.lang.String str2 = feedType0.getDurationXPath();
        java.lang.String str3 = feedType0.getAuthorXPath();
        java.lang.String str4 = feedType0.getTitleXPath();
        java.lang.String str5 = feedType0.getDescriptionXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "./enclosure/@url" + "'", str1, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "./duration" + "'", str2, "./duration");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "./author" + "'", str3, "./author");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "./title" + "'", str4, "./title");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "./description" + "'", str5, "./description");
    }

    @Test
    public void test1468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1468");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata1 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata1.setAlbumArtist("");
        boolean boolean4 = fontSettings0.equals((java.lang.Object) cDMetadata1);
        java.lang.String str5 = cDMetadata1.getAlbum();
        java.lang.String str6 = cDMetadata1.getAlbum();
        java.util.List<java.lang.Integer> intList7 = cDMetadata1.getTracks();
        net.sourceforge.atunes.model.FontSettings fontSettings8 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata9 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata9.setAlbumArtist("");
        boolean boolean12 = fontSettings8.equals((java.lang.Object) cDMetadata9);
        fontSettings8.setUseFontSmoothing(true);
        net.sourceforge.atunes.model.IFontBean iFontBean15 = fontSettings8.getFont();
        net.sourceforge.atunes.model.CDMetadata cDMetadata16 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str17 = cDMetadata16.getGenre();
        java.util.List<java.lang.String> strList18 = cDMetadata16.getComposerNames();
        java.lang.String str19 = cDMetadata16.getAlbum();
        java.util.List<java.lang.Integer> intList20 = cDMetadata16.getTracks();
        cDMetadata16.setAlbumArtist("mpc");
        java.lang.String str23 = cDMetadata16.getAlbum();
        boolean boolean24 = fontSettings8.equals((java.lang.Object) cDMetadata16);
        java.lang.String[] strArray49 = new java.lang.String[] { "./link[@rel='enclosure']/@type", "SOCKS_PROXY", "/feed/title", "./pubDate", "1.0.0 mpc ", "net.sourceforge.atunes.model.InconsistentRepositoryException", "1.0.0 mpc ", "1.0.0 mpc ", "rm", "./enclosure/@type", "/rss/channel/item", "mpc", "./title", "1.0.0 ", "flv", "1.0.0 ", "./link[@rel='enclosure']/@type", "hi!", "./link[@rel='enclosure']/@type", "./updated", "10.52.35  ", "net.sourceforge.atunes.model.InconsistentRepositoryException", "./enclosure/@url", "SOCKS_PROXY" };
        java.util.ArrayList<java.lang.String> strList50 = new java.util.ArrayList<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList50, strArray49);
        cDMetadata16.setTrackNames((java.util.List<java.lang.String>) strList50);
        cDMetadata1.setTrackNames((java.util.List<java.lang.String>) strList50);
        net.sourceforge.atunes.model.ColumnBean columnBean54 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean55 = columnBean54.isVisible();
        net.sourceforge.atunes.model.SubmissionState submissionState56 = net.sourceforge.atunes.model.SubmissionState.PENDING;
        boolean boolean57 = columnBean54.equals((java.lang.Object) submissionState56);
        net.sourceforge.atunes.model.CDMetadata cDMetadata58 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata58.setAlbumArtist("");
        java.lang.String str62 = cDMetadata58.getTitle((int) (byte) -1);
        net.sourceforge.atunes.model.CDMetadata cDMetadata63 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata63.setAlbumArtist("");
        java.lang.String str67 = cDMetadata63.getTitle((int) (byte) -1);
        java.lang.String[] strArray69 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList70 = new java.util.ArrayList<java.lang.String>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList70, strArray69);
        cDMetadata63.setTrackNames((java.util.List<java.lang.String>) strList70);
        cDMetadata58.setArtistNames((java.util.List<java.lang.String>) strList70);
        boolean boolean74 = columnBean54.equals((java.lang.Object) strList70);
        cDMetadata1.setComposerNames((java.util.List<java.lang.String>) strList70);
        java.lang.String str77 = cDMetadata1.getTitle(3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(intList7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(iFontBean15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(intList20);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + submissionState56 + "' != '" + net.sourceforge.atunes.model.SubmissionState.PENDING + "'", submissionState56.equals(net.sourceforge.atunes.model.SubmissionState.PENDING));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "/feed/title" + "'", str77, "/feed/title");
    }

    @Test
    public void test1469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1469");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType12 = applicationVersion9.getVersionType();
        java.lang.String str13 = applicationVersion9.getDirectDownloadURL();
        int int14 = applicationVersion9.getRevisionNumber();
        java.lang.String str15 = applicationVersion9.getName();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + versionType12 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType12.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "./pubDate" + "'", str13, "./pubDate");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "mpc" + "'", str15, "mpc");
    }

    @Test
    public void test1470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1470");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.lang.String str3 = cDMetadata0.getGenre();
        java.lang.String[] strArray5 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList6);
        cDMetadata0.setYear((int) (short) 10);
        java.util.List<java.lang.String> strList11 = cDMetadata0.getComposerNames();
        cDMetadata0.setYear(10);
        net.sourceforge.atunes.model.CDMetadata cDMetadata14 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata14.setAlbumArtist("");
        java.lang.String str18 = cDMetadata14.getTitle((int) (byte) -1);
        java.lang.String[] strArray20 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        cDMetadata14.setTrackNames((java.util.List<java.lang.String>) strList21);
        cDMetadata14.setAlbumArtist("/rss/channel/item");
        java.util.List<java.lang.Integer> intList26 = cDMetadata14.getTracks();
        java.lang.String str28 = cDMetadata14.getTitle(100);
        net.sourceforge.atunes.model.ColumnBean columnBean29 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean30 = columnBean29.isVisible();
        net.sourceforge.atunes.model.SubmissionState submissionState31 = net.sourceforge.atunes.model.SubmissionState.PENDING;
        boolean boolean32 = columnBean29.equals((java.lang.Object) submissionState31);
        net.sourceforge.atunes.model.CDMetadata cDMetadata33 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata33.setAlbumArtist("");
        java.lang.String str37 = cDMetadata33.getTitle((int) (byte) -1);
        net.sourceforge.atunes.model.CDMetadata cDMetadata38 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata38.setAlbumArtist("");
        java.lang.String str42 = cDMetadata38.getTitle((int) (byte) -1);
        java.lang.String[] strArray44 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        cDMetadata38.setTrackNames((java.util.List<java.lang.String>) strList45);
        cDMetadata33.setArtistNames((java.util.List<java.lang.String>) strList45);
        boolean boolean49 = columnBean29.equals((java.lang.Object) strList45);
        cDMetadata14.setTrackNames((java.util.List<java.lang.String>) strList45);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList45);
        java.util.List<java.lang.Integer> intList52 = cDMetadata0.getTracks();
        cDMetadata0.setGenre("1.0.0 ");
        cDMetadata0.setAlbumArtist("");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(intList26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + submissionState31 + "' != '" + net.sourceforge.atunes.model.SubmissionState.PENDING + "'", submissionState31.equals(net.sourceforge.atunes.model.SubmissionState.PENDING));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(intList52);
    }

    @Test
    public void test1471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1471");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata1 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata1.setAlbumArtist("");
        boolean boolean4 = fontSettings0.equals((java.lang.Object) cDMetadata1);
        fontSettings0.setUseFontSmoothing(true);
        net.sourceforge.atunes.model.IFontBean iFontBean7 = fontSettings0.getFont();
        net.sourceforge.atunes.model.CDMetadata cDMetadata8 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str9 = cDMetadata8.getGenre();
        java.util.List<java.lang.String> strList10 = cDMetadata8.getComposerNames();
        java.lang.String str11 = cDMetadata8.getAlbum();
        java.util.List<java.lang.Integer> intList12 = cDMetadata8.getTracks();
        cDMetadata8.setAlbumArtist("mpc");
        java.lang.String str15 = cDMetadata8.getAlbum();
        boolean boolean16 = fontSettings0.equals((java.lang.Object) cDMetadata8);
        net.sourceforge.atunes.model.ColumnBean columnBean17 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean18 = columnBean17.isVisible();
        columnBean17.setOrder((int) (byte) -1);
        columnBean17.setVisible(false);
        net.sourceforge.atunes.model.ColumnSort columnSort23 = columnBean17.getSort();
        net.sourceforge.atunes.model.TextTagAttribute textTagAttribute24 = net.sourceforge.atunes.model.TextTagAttribute.COMPOSER;
        boolean boolean25 = columnBean17.equals((java.lang.Object) textTagAttribute24);
        columnBean17.setVisible(true);
        columnBean17.setOrder((int) (short) 100);
        boolean boolean30 = fontSettings0.equals((java.lang.Object) (short) 100);
        boolean boolean31 = fontSettings0.isUseFontSmoothingSettingsFromOs();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(iFontBean7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(strList10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(intList12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(columnSort23);
        org.junit.Assert.assertTrue("'" + textTagAttribute24 + "' != '" + net.sourceforge.atunes.model.TextTagAttribute.COMPOSER + "'", textTagAttribute24.equals(net.sourceforge.atunes.model.TextTagAttribute.COMPOSER));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test1472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1472");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        java.lang.String str12 = applicationVersion9.toShortString();
        java.lang.String str13 = applicationVersion9.getDownloadURL();
        int int14 = applicationVersion9.getMajorNumber();
        net.sourceforge.atunes.model.FeedType feedType15 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str16 = feedType15.getUrlXPath();
        boolean boolean17 = applicationVersion9.equals((java.lang.Object) feedType15);
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1.0.0 " + "'", str12, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "./description" + "'", str13, "./description");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + feedType15 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType15.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "./enclosure/@url" + "'", str16, "./enclosure/@url");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1473");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        java.lang.String str12 = applicationVersion9.toString();
        net.sourceforge.atunes.model.CDMetadata cDMetadata13 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata13.setAlbumArtist("");
        java.lang.String str16 = cDMetadata13.getGenre();
        int int17 = cDMetadata13.getYear();
        int int18 = cDMetadata13.getYear();
        net.sourceforge.atunes.model.CDMetadata cDMetadata19 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str20 = cDMetadata19.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata21 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata21.setAlbumArtist("");
        java.lang.String str24 = cDMetadata21.getGenre();
        java.lang.String[] strArray26 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        cDMetadata21.setTrackNames((java.util.List<java.lang.String>) strList27);
        cDMetadata19.setComposerNames((java.util.List<java.lang.String>) strList27);
        cDMetadata13.setTrackNames((java.util.List<java.lang.String>) strList27);
        net.sourceforge.atunes.model.CDMetadata cDMetadata32 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str33 = cDMetadata32.getGenre();
        java.util.List<java.lang.String> strList34 = cDMetadata32.getComposerNames();
        java.lang.String str35 = cDMetadata32.getAlbum();
        java.util.List<java.lang.Integer> intList36 = cDMetadata32.getTracks();
        int int37 = cDMetadata32.getDisc();
        java.lang.String[] strArray45 = new java.lang.String[] { "net.sourceforge.atunes.model.InconsistentRepositoryException", "./title", "1.0.0 ", "./title", "./duration", "mpc", "net.sourceforge.atunes.model.InconsistentRepositoryException" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        cDMetadata32.setArtistNames((java.util.List<java.lang.String>) strList46);
        cDMetadata13.setArtistNames((java.util.List<java.lang.String>) strList46);
        java.util.List<java.lang.String> strList50 = null;
        cDMetadata13.setArtistNames(strList50);
        boolean boolean52 = applicationVersion9.equals((java.lang.Object) cDMetadata13);
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1.0.0 mpc " + "'", str12, "1.0.0 mpc ");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(strList34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(intList36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test1474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1474");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.BETA;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("mpc", (int) (short) 0, 150, (int) (byte) -1, versionType4, "flac", "/rss/channel/item", "hi!", "./pubDate");
        java.lang.String str10 = applicationVersion9.getDate();
        net.sourceforge.atunes.model.ColumnBean columnBean15 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean16 = columnBean15.isVisible();
        columnBean15.setOrder((int) (byte) -1);
        columnBean15.setVisible(false);
        columnBean15.setWidth(0);
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType27 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion32 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType27, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str33 = applicationVersion32.getDate();
        java.lang.String str34 = applicationVersion32.toShortString();
        java.lang.String str35 = applicationVersion32.getChanges();
        boolean boolean36 = columnBean15.equals((java.lang.Object) applicationVersion32);
        java.lang.String str37 = applicationVersion32.getDownloadURL();
        java.lang.String str38 = applicationVersion32.getChanges();
        java.lang.String str39 = applicationVersion32.getDownloadURL();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType40 = applicationVersion32.getVersionType();
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion45 = new net.sourceforge.atunes.model.ApplicationVersion("/rss/channel/item", (int) (short) 10, 1, (int) (byte) 1, versionType40, "./updated", "mp4", "1.0.0 mpc ", "rm");
        java.lang.String str46 = applicationVersion45.toShortString();
        net.sourceforge.atunes.model.ColumnBean columnBean47 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean48 = columnBean47.isVisible();
        columnBean47.setOrder((int) (byte) -1);
        columnBean47.setVisible(false);
        columnBean47.setWidth(0);
        net.sourceforge.atunes.model.ColumnSort columnSort55 = columnBean47.getSort();
        net.sourceforge.atunes.model.ColumnSort columnSort56 = columnBean47.getSort();
        columnBean47.setOrder((int) (short) 100);
        columnBean47.setOrder((int) (byte) -1);
        boolean boolean61 = columnBean47.isVisible();
        boolean boolean62 = columnBean47.isVisible();
        net.sourceforge.atunes.model.ColumnSort columnSort63 = columnBean47.getSort();
        int int64 = columnBean47.getWidth();
        boolean boolean65 = applicationVersion45.equals((java.lang.Object) int64);
        boolean boolean66 = applicationVersion9.equals((java.lang.Object) applicationVersion45);
        int int67 = applicationVersion45.getRevisionNumber();
        java.lang.String str68 = applicationVersion45.getDate();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.BETA + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.BETA));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "mpc" + "'", str10, "mpc");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + versionType27 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType27.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "./title" + "'", str33, "./title");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1.0.0 " + "'", str34, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "./title" + "'", str35, "./title");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "./description" + "'", str37, "./description");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "./title" + "'", str38, "./title");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "./description" + "'", str39, "./description");
        org.junit.Assert.assertTrue("'" + versionType40 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType40.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "10.1.1 " + "'", str46, "10.1.1 ");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(columnSort55);
        org.junit.Assert.assertNull(columnSort56);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(columnSort63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "/rss/channel/item" + "'", str68, "/rss/channel/item");
    }

    @Test
    public void test1475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1475");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        net.sourceforge.atunes.model.AudioObjectProperty audioObjectProperty1 = net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY;
        boolean boolean2 = columnBean0.equals((java.lang.Object) audioObjectProperty1);
        int int3 = columnBean0.getWidth();
        int int4 = columnBean0.getOrder();
        net.sourceforge.atunes.model.CDMetadata cDMetadata5 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata5.setAlbumArtist("");
        java.lang.String str8 = cDMetadata5.getGenre();
        int int9 = cDMetadata5.getYear();
        int int10 = cDMetadata5.getYear();
        cDMetadata5.setGenre("./enclosure/@url");
        java.util.List<java.lang.String> strList13 = null;
        cDMetadata5.setTrackNames(strList13);
        cDMetadata5.setAlbumArtist("./link[@rel='enclosure']/@type");
        boolean boolean17 = columnBean0.equals((java.lang.Object) "./link[@rel='enclosure']/@type");
        net.sourceforge.atunes.model.CDMetadata cDMetadata18 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str19 = cDMetadata18.getGenre();
        java.util.List<java.lang.String> strList20 = cDMetadata18.getComposerNames();
        java.lang.String str21 = cDMetadata18.getAlbum();
        net.sourceforge.atunes.model.CDMetadata cDMetadata22 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata22.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList25 = cDMetadata22.getTracks();
        cDMetadata22.setAlbumArtist("/rss/channel/title");
        java.util.List<java.lang.String> strList28 = cDMetadata22.getTrackNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata29 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata29.setAlbumArtist("");
        java.lang.String str32 = cDMetadata29.getGenre();
        java.lang.String[] strArray34 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        cDMetadata29.setTrackNames((java.util.List<java.lang.String>) strList35);
        cDMetadata22.setTrackNames((java.util.List<java.lang.String>) strList35);
        cDMetadata18.setTrackNames((java.util.List<java.lang.String>) strList35);
        java.util.List<java.lang.String> strList40 = cDMetadata18.getTrackNames();
        boolean boolean41 = columnBean0.equals((java.lang.Object) cDMetadata18);
        int int42 = cDMetadata18.getDisc();
        int int43 = cDMetadata18.getYear();
        org.junit.Assert.assertTrue("'" + audioObjectProperty1 + "' != '" + net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY + "'", audioObjectProperty1.equals(net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(strList20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(intList25);
        org.junit.Assert.assertNull(strList28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test1476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1476");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.lang.String str3 = cDMetadata0.getGenre();
        int int4 = cDMetadata0.getYear();
        int int5 = cDMetadata0.getYear();
        cDMetadata0.setGenre("./enclosure/@url");
        java.util.List<java.lang.String> strList8 = null;
        cDMetadata0.setTrackNames(strList8);
        cDMetadata0.setAlbumArtist("");
        cDMetadata0.setAlbum("net.sourceforge.atunes.model.SearchQuerySyntaxException: net.sourceforge.atunes.model.SearchQuerySyntaxException: net.sourceforge.atunes.model.SearchQuerySyntaxException");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test1477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1477");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType12 = applicationVersion9.getVersionType();
        java.lang.String str13 = applicationVersion9.getName();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + versionType12 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType12.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "mpc" + "'", str13, "mpc");
    }

    @Test
    public void test1478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1478");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata1 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata1.setAlbumArtist("");
        boolean boolean4 = fontSettings0.equals((java.lang.Object) cDMetadata1);
        fontSettings0.setUseFontSmoothing(true);
        net.sourceforge.atunes.model.IFontBean iFontBean7 = fontSettings0.getFont();
        boolean boolean9 = fontSettings0.equals((java.lang.Object) 150);
        fontSettings0.setUseFontSmoothing(true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(iFontBean7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1479");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.ATOM;
        java.lang.String str1 = feedType0.getUrlXPath();
        java.lang.String str2 = feedType0.getDateXPath();
        java.lang.String str3 = feedType0.getNameXPath();
        java.lang.String str4 = feedType0.getDateXPath();
        java.lang.String str5 = feedType0.getNameXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.ATOM + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.ATOM));
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "./updated" + "'", str2, "./updated");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "/feed/title" + "'", str3, "/feed/title");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "./updated" + "'", str4, "./updated");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/feed/title" + "'", str5, "/feed/title");
    }

    @Test
    public void test1480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1480");
        net.sourceforge.atunes.model.ImageSize imageSize0 = net.sourceforge.atunes.model.ImageSize.SIZE_90;
        int int1 = imageSize0.getSize();
        int int2 = imageSize0.getSize();
        int int3 = imageSize0.getSize();
        int int4 = imageSize0.getSize();
        org.junit.Assert.assertTrue("'" + imageSize0 + "' != '" + net.sourceforge.atunes.model.ImageSize.SIZE_90 + "'", imageSize0.equals(net.sourceforge.atunes.model.ImageSize.SIZE_90));
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 90 + "'", int1 == 90);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 90 + "'", int2 == 90);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 90 + "'", int3 == 90);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 90 + "'", int4 == 90);
    }

    @Test
    public void test1481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1481");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.lang.String str4 = cDMetadata0.getTitle((int) (byte) -1);
        java.lang.String[] strArray6 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList7);
        cDMetadata0.setAlbumArtist("/rss/channel/item");
        java.util.List<java.lang.Integer> intList12 = cDMetadata0.getTracks();
        java.lang.String str14 = cDMetadata0.getTitle(100);
        java.lang.String str15 = cDMetadata0.getAlbum();
        cDMetadata0.setAlbum("mp3");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(intList12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test1482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1482");
        net.sourceforge.atunes.model.LookAndFeelBean lookAndFeelBean0 = new net.sourceforge.atunes.model.LookAndFeelBean();
        java.lang.String str1 = lookAndFeelBean0.getSkin();
        lookAndFeelBean0.setSkin("./enclosure/@url");
        lookAndFeelBean0.setSkin("./link[@rel='enclosure']/@type");
        java.lang.String str6 = lookAndFeelBean0.getSkin();
        lookAndFeelBean0.setSkin("./description");
        java.lang.String str9 = lookAndFeelBean0.getName();
        lookAndFeelBean0.setSkin("./pubDate");
        java.lang.String str12 = lookAndFeelBean0.getName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "./link[@rel='enclosure']/@type" + "'", str6, "./link[@rel='enclosure']/@type");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test1483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1483");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata1 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata1.setAlbumArtist("");
        boolean boolean4 = fontSettings0.equals((java.lang.Object) cDMetadata1);
        fontSettings0.setUseFontSmoothing(true);
        net.sourceforge.atunes.model.IFontBean iFontBean7 = fontSettings0.getFont();
        boolean boolean9 = fontSettings0.equals((java.lang.Object) 150);
        fontSettings0.setUseFontSmoothingSettingsFromOs(true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(iFontBean7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1484");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        java.lang.String str12 = applicationVersion9.getChanges();
        int int13 = applicationVersion9.getMinorNumber();
        int int14 = applicationVersion9.getRevisionNumber();
        java.lang.String str15 = applicationVersion9.getDownloadURL();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "./title" + "'", str12, "./title");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "./description" + "'", str15, "./description");
    }

    @Test
    public void test1485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1485");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        int int12 = applicationVersion9.getMajorNumber();
        int int13 = applicationVersion9.getMinorNumber();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType18 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion23 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType18, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str24 = applicationVersion23.getDate();
        java.lang.String str25 = applicationVersion23.toShortString();
        java.lang.String str26 = applicationVersion23.getChanges();
        int int27 = applicationVersion23.getMinorNumber();
        java.lang.String str28 = applicationVersion23.getChanges();
        int int29 = applicationVersion23.getRevisionNumber();
        int int30 = applicationVersion9.compareTo(applicationVersion23);
        int int31 = applicationVersion23.getMinorNumber();
        java.lang.String str32 = applicationVersion23.getDate();
        int int33 = applicationVersion23.getMinorNumber();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + versionType18 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType18.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "./title" + "'", str24, "./title");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1.0.0 " + "'", str25, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "./title" + "'", str26, "./title");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "./title" + "'", str28, "./title");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "./title" + "'", str32, "./title");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test1486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1486");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        columnBean0.setVisible(false);
        net.sourceforge.atunes.model.ColumnSort columnSort6 = columnBean0.getSort();
        net.sourceforge.atunes.model.TextTagAttribute textTagAttribute7 = net.sourceforge.atunes.model.TextTagAttribute.COMPOSER;
        boolean boolean8 = columnBean0.equals((java.lang.Object) textTagAttribute7);
        columnBean0.setVisible(true);
        columnBean0.setOrder((int) (short) 100);
        columnBean0.setOrder(100);
        int int15 = columnBean0.getOrder();
        net.sourceforge.atunes.model.ColumnBean columnBean16 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean17 = columnBean16.isVisible();
        net.sourceforge.atunes.model.ColumnBean columnBean18 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean19 = columnBean18.isVisible();
        columnBean18.setOrder((int) (byte) -1);
        net.sourceforge.atunes.model.ColumnSort columnSort22 = net.sourceforge.atunes.model.ColumnSort.DESCENDING;
        columnBean18.setSort(columnSort22);
        net.sourceforge.atunes.model.ColumnBean columnBean24 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean25 = columnBean24.isVisible();
        net.sourceforge.atunes.model.SubmissionState submissionState26 = net.sourceforge.atunes.model.SubmissionState.PENDING;
        boolean boolean27 = columnBean24.equals((java.lang.Object) submissionState26);
        columnBean24.setVisible(false);
        net.sourceforge.atunes.model.ColumnSort columnSort30 = net.sourceforge.atunes.model.ColumnSort.ASCENDING;
        columnBean24.setSort(columnSort30);
        columnBean18.setSort(columnSort30);
        columnBean16.setSort(columnSort30);
        columnBean16.setOrder(1);
        net.sourceforge.atunes.model.ColumnBean columnBean36 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean37 = columnBean36.isVisible();
        columnBean36.setOrder((int) (byte) -1);
        net.sourceforge.atunes.model.ColumnSort columnSort40 = net.sourceforge.atunes.model.ColumnSort.DESCENDING;
        columnBean36.setSort(columnSort40);
        net.sourceforge.atunes.model.ColumnBean columnBean42 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean43 = columnBean42.isVisible();
        net.sourceforge.atunes.model.SubmissionState submissionState44 = net.sourceforge.atunes.model.SubmissionState.PENDING;
        boolean boolean45 = columnBean42.equals((java.lang.Object) submissionState44);
        columnBean42.setVisible(false);
        net.sourceforge.atunes.model.ColumnSort columnSort48 = net.sourceforge.atunes.model.ColumnSort.ASCENDING;
        columnBean42.setSort(columnSort48);
        columnBean36.setSort(columnSort48);
        columnBean16.setSort(columnSort48);
        columnBean0.setSort(columnSort48);
        int int53 = columnBean0.getWidth();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(columnSort6);
        org.junit.Assert.assertTrue("'" + textTagAttribute7 + "' != '" + net.sourceforge.atunes.model.TextTagAttribute.COMPOSER + "'", textTagAttribute7.equals(net.sourceforge.atunes.model.TextTagAttribute.COMPOSER));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + columnSort22 + "' != '" + net.sourceforge.atunes.model.ColumnSort.DESCENDING + "'", columnSort22.equals(net.sourceforge.atunes.model.ColumnSort.DESCENDING));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + submissionState26 + "' != '" + net.sourceforge.atunes.model.SubmissionState.PENDING + "'", submissionState26.equals(net.sourceforge.atunes.model.SubmissionState.PENDING));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + columnSort30 + "' != '" + net.sourceforge.atunes.model.ColumnSort.ASCENDING + "'", columnSort30.equals(net.sourceforge.atunes.model.ColumnSort.ASCENDING));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + columnSort40 + "' != '" + net.sourceforge.atunes.model.ColumnSort.DESCENDING + "'", columnSort40.equals(net.sourceforge.atunes.model.ColumnSort.DESCENDING));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + submissionState44 + "' != '" + net.sourceforge.atunes.model.SubmissionState.PENDING + "'", submissionState44.equals(net.sourceforge.atunes.model.SubmissionState.PENDING));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + columnSort48 + "' != '" + net.sourceforge.atunes.model.ColumnSort.ASCENDING + "'", columnSort48.equals(net.sourceforge.atunes.model.ColumnSort.ASCENDING));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
    }

    @Test
    public void test1487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1487");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        fontSettings0.setUseFontSmoothing(false);
        fontSettings0.setUseFontSmoothing(false);
        net.sourceforge.atunes.model.IFontBean iFontBean5 = null;
        fontSettings0.setFont(iFontBean5);
        net.sourceforge.atunes.model.IFontBean iFontBean7 = fontSettings0.getFont();
        fontSettings0.setUseFontSmoothing(false);
        net.sourceforge.atunes.model.IFontBean iFontBean10 = null;
        fontSettings0.setFont(iFontBean10);
        net.sourceforge.atunes.model.FeedType feedType12 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str13 = feedType12.getEntryXPath();
        java.lang.String str14 = feedType12.getTypeXPath();
        java.lang.String str15 = feedType12.getTypeXPath();
        java.lang.String str16 = feedType12.getDescriptionXPath();
        java.lang.String str17 = feedType12.getNameXPath();
        boolean boolean18 = fontSettings0.equals((java.lang.Object) str17);
        fontSettings0.setUseFontSmoothing(true);
        net.sourceforge.atunes.model.IFontBean iFontBean21 = null;
        fontSettings0.setFont(iFontBean21);
        fontSettings0.setUseFontSmoothingSettingsFromOs(true);
        org.junit.Assert.assertNull(iFontBean7);
        org.junit.Assert.assertTrue("'" + feedType12 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType12.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "/rss/channel/item" + "'", str13, "/rss/channel/item");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "./enclosure/@type" + "'", str14, "./enclosure/@type");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "./enclosure/@type" + "'", str15, "./enclosure/@type");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "./description" + "'", str16, "./description");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "/rss/channel/title" + "'", str17, "/rss/channel/title");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1488");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType12 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion17 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType12, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str18 = applicationVersion17.getDate();
        java.lang.String str19 = applicationVersion17.toShortString();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType20 = applicationVersion17.getVersionType();
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion25 = new net.sourceforge.atunes.model.ApplicationVersion("1.0.0 ", (int) (short) 10, (int) '4', (int) '#', versionType20, "", "./enclosure/@url", "SOCKS_PROXY", "./enclosure/@url");
        java.lang.String str26 = applicationVersion25.getName();
        java.lang.String str27 = applicationVersion25.toString();
        net.sourceforge.atunes.model.FeedType feedType28 = net.sourceforge.atunes.model.FeedType.ATOM;
        java.lang.String str29 = feedType28.getTypeXPath();
        java.lang.String str30 = feedType28.getUrlXPath();
        boolean boolean31 = applicationVersion25.equals((java.lang.Object) feedType28);
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType32 = applicationVersion25.getVersionType();
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion37 = new net.sourceforge.atunes.model.ApplicationVersion("HTTP_PROXY", 0, 120, (int) (byte) 1, versionType32, "", "mp4", "./description", "net.sourceforge.atunes.model.SearchIndexNotAvailableException: net.sourceforge.atunes.model.SearchQuerySyntaxException");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType42 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion47 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType42, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str48 = applicationVersion47.getDate();
        java.lang.String str49 = applicationVersion47.toShortString();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType50 = applicationVersion47.getVersionType();
        int int51 = applicationVersion47.getMinorNumber();
        java.lang.String str52 = applicationVersion47.getDirectDownloadURL();
        java.lang.String str53 = applicationVersion47.getDirectDownloadURL();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType54 = applicationVersion47.getVersionType();
        java.lang.String str55 = applicationVersion47.toString();
        int int56 = applicationVersion37.compareTo(applicationVersion47);
        org.junit.Assert.assertTrue("'" + versionType12 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType12.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "./title" + "'", str18, "./title");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1.0.0 " + "'", str19, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + versionType20 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType20.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "10.52.35  " + "'", str27, "10.52.35  ");
        org.junit.Assert.assertTrue("'" + feedType28 + "' != '" + net.sourceforge.atunes.model.FeedType.ATOM + "'", feedType28.equals(net.sourceforge.atunes.model.FeedType.ATOM));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "./link[@rel='enclosure']/@type" + "'", str29, "./link[@rel='enclosure']/@type");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + versionType32 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType32.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertTrue("'" + versionType42 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType42.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "./title" + "'", str48, "./title");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1.0.0 " + "'", str49, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + versionType50 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType50.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "./pubDate" + "'", str52, "./pubDate");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "./pubDate" + "'", str53, "./pubDate");
        org.junit.Assert.assertTrue("'" + versionType54 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType54.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "1.0.0 mpc " + "'", str55, "1.0.0 mpc ");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
    }

    @Test
    public void test1489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1489");
        net.sourceforge.atunes.model.LookAndFeelBean lookAndFeelBean0 = new net.sourceforge.atunes.model.LookAndFeelBean();
        java.lang.String str1 = lookAndFeelBean0.getSkin();
        lookAndFeelBean0.setSkin("1.0.0 ");
        lookAndFeelBean0.setSkin("hi!");
        lookAndFeelBean0.setName("1.120.35 hi! ");
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test1490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1490");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.ATOM;
        java.lang.String str1 = feedType0.getUrlXPath();
        java.lang.String str2 = feedType0.getUrlXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.ATOM + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.ATOM));
    }

    @Test
    public void test1491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1491");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        fontSettings0.setUseFontSmoothing(false);
        fontSettings0.setUseFontSmoothing(false);
        boolean boolean6 = fontSettings0.equals((java.lang.Object) 10L);
        fontSettings0.setUseFontSmoothing(true);
        boolean boolean9 = fontSettings0.isUseFontSmoothing();
        fontSettings0.setUseFontSmoothing(false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test1492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1492");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.ATOM;
        java.lang.String str1 = feedType0.getUrlXPath();
        java.lang.String str2 = feedType0.getDateXPath();
        java.lang.String str3 = feedType0.getUrlXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.ATOM + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.ATOM));
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "./updated" + "'", str2, "./updated");
    }

    @Test
    public void test1493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1493");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType12 = applicationVersion9.getVersionType();
        int int13 = applicationVersion9.getMinorNumber();
        java.lang.String str14 = applicationVersion9.getDirectDownloadURL();
        java.lang.String str15 = applicationVersion9.getDirectDownloadURL();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType16 = applicationVersion9.getVersionType();
        java.lang.String str17 = applicationVersion9.toString();
        int int18 = applicationVersion9.getMinorNumber();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + versionType12 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType12.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "./pubDate" + "'", str14, "./pubDate");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "./pubDate" + "'", str15, "./pubDate");
        org.junit.Assert.assertTrue("'" + versionType16 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType16.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1.0.0 mpc " + "'", str17, "1.0.0 mpc ");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test1494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1494");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList2 = throwableRankList0.getNFirstElements((int) (short) 10);
        int int3 = throwableRankList0.size();
        int int4 = throwableRankList0.size();
        java.lang.Throwable throwable5 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException6 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable5);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList7 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable8 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException9 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable8);
        java.lang.Throwable[] throwableArray10 = searchQuerySyntaxException9.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException11 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException9);
        java.lang.Throwable throwable12 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException13 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable12);
        java.lang.Throwable[] throwableArray14 = searchQuerySyntaxException13.getSuppressed();
        throwableRankList7.replaceItem((java.lang.Throwable) searchQuerySyntaxException9, (java.lang.Throwable) searchQuerySyntaxException13);
        searchQuerySyntaxException6.addSuppressed((java.lang.Throwable) searchQuerySyntaxException13);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException17 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException6);
        java.lang.Integer int18 = throwableRankList0.getCount((java.lang.Throwable) searchQuerySyntaxException6);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException19 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException6);
        java.lang.String str20 = searchIndexNotAvailableException19.toString();
        org.junit.Assert.assertNotNull(throwableList2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "net.sourceforge.atunes.model.SearchIndexNotAvailableException: net.sourceforge.atunes.model.SearchQuerySyntaxException" + "'", str20, "net.sourceforge.atunes.model.SearchIndexNotAvailableException: net.sourceforge.atunes.model.SearchQuerySyntaxException");
    }

    @Test
    public void test1495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1495");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        int int1 = cDMetadata0.getYear();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata3 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata3.setAlbumArtist("");
        java.lang.String str6 = cDMetadata3.getGenre();
        int int7 = cDMetadata3.getYear();
        int int8 = cDMetadata3.getYear();
        cDMetadata3.setGenre("./enclosure/@url");
        net.sourceforge.atunes.model.CDMetadata cDMetadata11 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata11.setAlbumArtist("");
        java.lang.String str14 = cDMetadata11.getGenre();
        int int15 = cDMetadata11.getYear();
        int int16 = cDMetadata11.getYear();
        net.sourceforge.atunes.model.CDMetadata cDMetadata17 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str18 = cDMetadata17.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata19 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata19.setAlbumArtist("");
        java.lang.String str22 = cDMetadata19.getGenre();
        java.lang.String[] strArray24 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        cDMetadata19.setTrackNames((java.util.List<java.lang.String>) strList25);
        cDMetadata17.setComposerNames((java.util.List<java.lang.String>) strList25);
        cDMetadata11.setTrackNames((java.util.List<java.lang.String>) strList25);
        net.sourceforge.atunes.model.CDMetadata cDMetadata30 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str31 = cDMetadata30.getGenre();
        java.util.List<java.lang.String> strList32 = cDMetadata30.getComposerNames();
        java.lang.String str33 = cDMetadata30.getAlbum();
        java.util.List<java.lang.Integer> intList34 = cDMetadata30.getTracks();
        int int35 = cDMetadata30.getDisc();
        java.lang.String[] strArray43 = new java.lang.String[] { "net.sourceforge.atunes.model.InconsistentRepositoryException", "./title", "1.0.0 ", "./title", "./duration", "mpc", "net.sourceforge.atunes.model.InconsistentRepositoryException" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        cDMetadata30.setArtistNames((java.util.List<java.lang.String>) strList44);
        cDMetadata11.setArtistNames((java.util.List<java.lang.String>) strList44);
        net.sourceforge.atunes.model.CDMetadata cDMetadata48 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata48.setAlbumArtist("");
        java.lang.String str51 = cDMetadata48.getGenre();
        java.lang.String[] strArray53 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        cDMetadata48.setTrackNames((java.util.List<java.lang.String>) strList54);
        cDMetadata11.setTrackNames((java.util.List<java.lang.String>) strList54);
        cDMetadata3.setComposerNames((java.util.List<java.lang.String>) strList54);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList54);
        int int60 = cDMetadata0.getYear();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(strList32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(intList34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
    }

    @Test
    public void test1496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1496");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        net.sourceforge.atunes.model.AudioObjectProperty audioObjectProperty1 = net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY;
        boolean boolean2 = columnBean0.equals((java.lang.Object) audioObjectProperty1);
        net.sourceforge.atunes.model.TextTagAttribute textTagAttribute3 = net.sourceforge.atunes.model.TextTagAttribute.LYRICS;
        boolean boolean4 = columnBean0.equals((java.lang.Object) textTagAttribute3);
        net.sourceforge.atunes.model.ColumnSort columnSort5 = columnBean0.getSort();
        columnBean0.setWidth((int) ' ');
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList8 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable9 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException10 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable9);
        java.lang.Throwable[] throwableArray11 = searchQuerySyntaxException10.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException12 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException10);
        java.lang.Throwable throwable13 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException14 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable13);
        java.lang.Throwable[] throwableArray15 = searchQuerySyntaxException14.getSuppressed();
        throwableRankList8.replaceItem((java.lang.Throwable) searchQuerySyntaxException10, (java.lang.Throwable) searchQuerySyntaxException14);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException17 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException14);
        boolean boolean18 = columnBean0.equals((java.lang.Object) searchQuerySyntaxException17);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException19 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException17);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException20 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException19);
        java.lang.String str21 = searchQuerySyntaxException19.toString();
        org.junit.Assert.assertTrue("'" + audioObjectProperty1 + "' != '" + net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY + "'", audioObjectProperty1.equals(net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + textTagAttribute3 + "' != '" + net.sourceforge.atunes.model.TextTagAttribute.LYRICS + "'", textTagAttribute3.equals(net.sourceforge.atunes.model.TextTagAttribute.LYRICS));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(columnSort5);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "net.sourceforge.atunes.model.SearchQuerySyntaxException: net.sourceforge.atunes.model.SearchQuerySyntaxException: net.sourceforge.atunes.model.SearchQuerySyntaxException" + "'", str21, "net.sourceforge.atunes.model.SearchQuerySyntaxException: net.sourceforge.atunes.model.SearchQuerySyntaxException: net.sourceforge.atunes.model.SearchQuerySyntaxException");
    }

    @Test
    public void test1497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1497");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType12 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion17 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType12, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str18 = applicationVersion17.getDate();
        java.lang.String str19 = applicationVersion17.toShortString();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType20 = applicationVersion17.getVersionType();
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion25 = new net.sourceforge.atunes.model.ApplicationVersion("1.0.0 ", (int) (short) 10, (int) '4', (int) '#', versionType20, "", "./enclosure/@url", "SOCKS_PROXY", "./enclosure/@url");
        java.lang.String str26 = applicationVersion25.getName();
        java.lang.String str27 = applicationVersion25.toString();
        net.sourceforge.atunes.model.FeedType feedType28 = net.sourceforge.atunes.model.FeedType.ATOM;
        java.lang.String str29 = feedType28.getTypeXPath();
        java.lang.String str30 = feedType28.getUrlXPath();
        boolean boolean31 = applicationVersion25.equals((java.lang.Object) feedType28);
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType32 = applicationVersion25.getVersionType();
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion37 = new net.sourceforge.atunes.model.ApplicationVersion("HTTP_PROXY", 0, 120, (int) (byte) 1, versionType32, "", "mp4", "./description", "net.sourceforge.atunes.model.SearchIndexNotAvailableException: net.sourceforge.atunes.model.SearchQuerySyntaxException");
        java.lang.String str38 = applicationVersion37.toString();
        org.junit.Assert.assertTrue("'" + versionType12 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType12.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "./title" + "'", str18, "./title");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1.0.0 " + "'", str19, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + versionType20 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType20.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "10.52.35  " + "'", str27, "10.52.35  ");
        org.junit.Assert.assertTrue("'" + feedType28 + "' != '" + net.sourceforge.atunes.model.FeedType.ATOM + "'", feedType28.equals(net.sourceforge.atunes.model.FeedType.ATOM));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "./link[@rel='enclosure']/@type" + "'", str29, "./link[@rel='enclosure']/@type");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + versionType32 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType32.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0.120.1  " + "'", str38, "0.120.1  ");
    }

    @Test
    public void test1498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1498");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType8 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion13 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType8, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str14 = applicationVersion13.getDate();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType15 = applicationVersion13.getVersionType();
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion20 = new net.sourceforge.atunes.model.ApplicationVersion("./summary", (int) (short) 1, 120, 35, versionType15, "hi!", "./author/name", "hi!", "10.1.1 ");
        java.lang.String str21 = applicationVersion20.getDirectDownloadURL();
        int int22 = applicationVersion20.getMajorNumber();
        org.junit.Assert.assertTrue("'" + versionType8 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType8.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "./title" + "'", str14, "./title");
        org.junit.Assert.assertTrue("'" + versionType15 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType15.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test1499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1499");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata1 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata1.setAlbumArtist("");
        boolean boolean4 = fontSettings0.equals((java.lang.Object) cDMetadata1);
        fontSettings0.setUseFontSmoothing(true);
        net.sourceforge.atunes.model.IFontBean iFontBean7 = fontSettings0.getFont();
        net.sourceforge.atunes.model.IFontBean iFontBean8 = null;
        fontSettings0.setFont(iFontBean8);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(iFontBean7);
    }

    @Test
    public void test1500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1500");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        columnBean0.setOrder((int) (short) 0);
        int int3 = columnBean0.getWidth();
        net.sourceforge.atunes.model.CDMetadata cDMetadata4 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata4.setAlbumArtist("");
        java.lang.String str7 = cDMetadata4.getGenre();
        java.lang.String[] strArray9 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        cDMetadata4.setTrackNames((java.util.List<java.lang.String>) strList10);
        cDMetadata4.setYear((int) (short) 10);
        cDMetadata4.setDisc(0);
        cDMetadata4.setYear((-1));
        java.util.List<java.lang.Integer> intList19 = cDMetadata4.getTracks();
        java.lang.String str20 = cDMetadata4.getAlbumArtist();
        boolean boolean21 = columnBean0.equals((java.lang.Object) str20);
        columnBean0.setOrder(0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(intList19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }
}

