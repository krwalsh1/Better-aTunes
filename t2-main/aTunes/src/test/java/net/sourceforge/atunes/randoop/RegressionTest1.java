package net.sourceforge.atunes.randoop;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test0501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0501");
        net.sourceforge.atunes.model.LookAndFeelBean lookAndFeelBean0 = new net.sourceforge.atunes.model.LookAndFeelBean();
        lookAndFeelBean0.setName("./summary");
        java.lang.String str3 = lookAndFeelBean0.getSkin();
        lookAndFeelBean0.setName("./summary");
        lookAndFeelBean0.setSkin("10.52.35  ");
        lookAndFeelBean0.setName("/feed/title");
        java.lang.String str10 = lookAndFeelBean0.getName();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/feed/title" + "'", str10, "/feed/title");
    }

    @Test
    public void test0502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0502");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.lang.String str3 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList4 = cDMetadata0.getTrackNames();
        java.util.List<java.lang.String> strList5 = cDMetadata0.getTrackNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata6 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata6.setAlbumArtist("");
        java.lang.String str10 = cDMetadata6.getTitle((int) (byte) -1);
        net.sourceforge.atunes.model.CDMetadata cDMetadata11 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata11.setAlbumArtist("");
        java.lang.String str14 = cDMetadata11.getGenre();
        int int15 = cDMetadata11.getYear();
        int int16 = cDMetadata11.getYear();
        net.sourceforge.atunes.model.CDMetadata cDMetadata17 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str18 = cDMetadata17.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata19 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata19.setAlbumArtist("");
        java.lang.String str22 = cDMetadata19.getGenre();
        java.lang.String[] strArray24 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        cDMetadata19.setTrackNames((java.util.List<java.lang.String>) strList25);
        cDMetadata17.setComposerNames((java.util.List<java.lang.String>) strList25);
        cDMetadata11.setTrackNames((java.util.List<java.lang.String>) strList25);
        net.sourceforge.atunes.model.CDMetadata cDMetadata30 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str31 = cDMetadata30.getGenre();
        java.util.List<java.lang.String> strList32 = cDMetadata30.getComposerNames();
        java.lang.String str33 = cDMetadata30.getAlbum();
        java.util.List<java.lang.Integer> intList34 = cDMetadata30.getTracks();
        int int35 = cDMetadata30.getDisc();
        java.lang.String[] strArray43 = new java.lang.String[] { "net.sourceforge.atunes.model.InconsistentRepositoryException", "./title", "1.0.0 ", "./title", "./duration", "mpc", "net.sourceforge.atunes.model.InconsistentRepositoryException" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        cDMetadata30.setArtistNames((java.util.List<java.lang.String>) strList44);
        cDMetadata11.setArtistNames((java.util.List<java.lang.String>) strList44);
        cDMetadata6.setComposerNames((java.util.List<java.lang.String>) strList44);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList44);
        java.lang.String str50 = cDMetadata0.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata51 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata51.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList54 = cDMetadata51.getTracks();
        cDMetadata51.setAlbumArtist("/rss/channel/title");
        java.util.List<java.lang.String> strList57 = cDMetadata51.getTrackNames();
        cDMetadata51.setAlbum("/rss/channel/item");
        java.util.List<java.lang.String> strList60 = cDMetadata51.getArtistNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata61 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str62 = cDMetadata61.getGenre();
        java.util.List<java.lang.String> strList63 = cDMetadata61.getComposerNames();
        java.lang.String str64 = cDMetadata61.getAlbum();
        java.util.List<java.lang.Integer> intList65 = cDMetadata61.getTracks();
        net.sourceforge.atunes.model.CDMetadata cDMetadata66 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata66.setAlbumArtist("");
        java.lang.String str70 = cDMetadata66.getTitle((int) (byte) -1);
        java.lang.String[] strArray72 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList73 = new java.util.ArrayList<java.lang.String>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList73, strArray72);
        cDMetadata66.setTrackNames((java.util.List<java.lang.String>) strList73);
        cDMetadata61.setTrackNames((java.util.List<java.lang.String>) strList73);
        cDMetadata61.setYear((int) (short) 1);
        int int79 = cDMetadata61.getYear();
        java.lang.String str80 = cDMetadata61.getGenre();
        cDMetadata61.setYear((int) (short) 10);
        net.sourceforge.atunes.model.CDMetadata cDMetadata83 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata83.setAlbumArtist("");
        java.lang.String str86 = cDMetadata83.getGenre();
        java.lang.String[] strArray88 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList89 = new java.util.ArrayList<java.lang.String>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList89, strArray88);
        cDMetadata83.setTrackNames((java.util.List<java.lang.String>) strList89);
        cDMetadata61.setTrackNames((java.util.List<java.lang.String>) strList89);
        cDMetadata51.setArtistNames((java.util.List<java.lang.String>) strList89);
        cDMetadata0.setArtistNames((java.util.List<java.lang.String>) strList89);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(strList32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(intList34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(intList54);
        org.junit.Assert.assertNull(strList57);
        org.junit.Assert.assertNull(strList60);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNull(strList63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(intList65);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    public void test0503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0503");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str1 = feedType0.getUrlXPath();
        java.lang.String str2 = feedType0.getNameXPath();
        java.lang.String str3 = feedType0.getDescriptionXPath();
        java.lang.String str4 = feedType0.getTypeXPath();
        java.lang.String str5 = feedType0.getEntryXPath();
        java.lang.String str6 = feedType0.getDescriptionXPath();
        java.lang.String str7 = feedType0.getNameXPath();
        java.lang.String str8 = feedType0.getUrlXPath();
        java.lang.String str9 = feedType0.getNameXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "./enclosure/@url" + "'", str1, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "/rss/channel/title" + "'", str2, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "./description" + "'", str3, "./description");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "./enclosure/@type" + "'", str4, "./enclosure/@type");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/rss/channel/item" + "'", str5, "/rss/channel/item");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "./description" + "'", str6, "./description");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/rss/channel/title" + "'", str7, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "./enclosure/@url" + "'", str8, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/rss/channel/title" + "'", str9, "/rss/channel/title");
    }

    @Test
    public void test0504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0504");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        int int12 = applicationVersion9.getMajorNumber();
        int int13 = applicationVersion9.getMinorNumber();
        java.lang.String str14 = applicationVersion9.getName();
        java.lang.String str15 = applicationVersion9.toShortString();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType20 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion25 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType20, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str26 = applicationVersion25.getDate();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType27 = applicationVersion25.getVersionType();
        java.lang.String str28 = applicationVersion25.getDownloadURL();
        java.lang.String str29 = applicationVersion25.getDirectDownloadURL();
        java.lang.String str30 = applicationVersion25.getDownloadURL();
        int int31 = applicationVersion25.getRevisionNumber();
        int int32 = applicationVersion9.compareTo(applicationVersion25);
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "mpc" + "'", str14, "mpc");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1.0.0 " + "'", str15, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + versionType20 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType20.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "./title" + "'", str26, "./title");
        org.junit.Assert.assertTrue("'" + versionType27 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType27.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "./description" + "'", str28, "./description");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "./pubDate" + "'", str29, "./pubDate");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "./description" + "'", str30, "./description");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test0505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0505");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        columnBean0.setVisible(false);
        columnBean0.setWidth(0);
        net.sourceforge.atunes.model.ColumnSort columnSort8 = columnBean0.getSort();
        int int9 = columnBean0.getOrder();
        boolean boolean11 = columnBean0.equals((java.lang.Object) (byte) 10);
        boolean boolean12 = columnBean0.isVisible();
        columnBean0.setWidth((int) '#');
        int int15 = columnBean0.getWidth();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(columnSort8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
    }

    @Test
    public void test0506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0506");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList2 = throwableRankList0.getNFirstElements((int) (short) 100);
        java.lang.Throwable throwable3 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException4 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable3);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList5 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable6 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException7 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable6);
        java.lang.Throwable[] throwableArray8 = searchQuerySyntaxException7.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException9 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException7);
        java.lang.Throwable throwable10 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException11 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable10);
        java.lang.Throwable[] throwableArray12 = searchQuerySyntaxException11.getSuppressed();
        throwableRankList5.replaceItem((java.lang.Throwable) searchQuerySyntaxException7, (java.lang.Throwable) searchQuerySyntaxException11);
        searchQuerySyntaxException4.addSuppressed((java.lang.Throwable) searchQuerySyntaxException11);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException15 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException4);
        java.lang.Throwable throwable16 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException17 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable16);
        java.lang.Throwable[] throwableArray18 = searchQuerySyntaxException17.getSuppressed();
        searchQuerySyntaxException4.addSuppressed((java.lang.Throwable) searchQuerySyntaxException17);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException20 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException4);
        java.lang.Throwable throwable21 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException22 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable21);
        java.lang.Throwable[] throwableArray23 = searchQuerySyntaxException22.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException24 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException22);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException25 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException22);
        throwableRankList0.replaceItem((java.lang.Throwable) searchQuerySyntaxException4, (java.lang.Throwable) searchQuerySyntaxException25);
        java.lang.Throwable[] throwableArray27 = searchQuerySyntaxException4.getSuppressed();
        org.junit.Assert.assertNotNull(throwableList2);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray27);
    }

    @Test
    public void test0507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0507");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata2 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata2.setAlbumArtist("");
        java.lang.String str5 = cDMetadata2.getGenre();
        java.lang.String[] strArray7 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        cDMetadata2.setTrackNames((java.util.List<java.lang.String>) strList8);
        cDMetadata0.setComposerNames((java.util.List<java.lang.String>) strList8);
        java.lang.String str12 = cDMetadata0.getAlbum();
        cDMetadata0.setAlbum("./duration");
        java.util.List<java.lang.String> strList15 = cDMetadata0.getTrackNames();
        int int16 = cDMetadata0.getDisc();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(strList15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test0508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0508");
        java.lang.Throwable throwable0 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException1 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable0);
        java.lang.Throwable[] throwableArray2 = searchQuerySyntaxException1.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException3 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException1);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException4 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException1);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList5 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable6 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException7 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable6);
        java.lang.Throwable[] throwableArray8 = searchQuerySyntaxException7.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException9 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException7);
        java.lang.Throwable throwable10 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException11 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable10);
        java.lang.Throwable[] throwableArray12 = searchQuerySyntaxException11.getSuppressed();
        throwableRankList5.replaceItem((java.lang.Throwable) searchQuerySyntaxException7, (java.lang.Throwable) searchQuerySyntaxException11);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException14 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException11);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException15 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException14);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException16 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchIndexNotAvailableException15);
        searchQuerySyntaxException4.addSuppressed((java.lang.Throwable) searchIndexNotAvailableException16);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException18 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException4);
        java.lang.Throwable[] throwableArray19 = searchQuerySyntaxException18.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray19);
    }

    @Test
    public void test0509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0509");
        java.lang.Throwable throwable0 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException1 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable0);
        java.lang.Throwable[] throwableArray2 = searchQuerySyntaxException1.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException3 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException1);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException4 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException1);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList5 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable6 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException7 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable6);
        java.lang.Throwable[] throwableArray8 = searchQuerySyntaxException7.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException9 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException7);
        java.lang.Throwable throwable10 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException11 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable10);
        java.lang.Throwable[] throwableArray12 = searchQuerySyntaxException11.getSuppressed();
        throwableRankList5.replaceItem((java.lang.Throwable) searchQuerySyntaxException7, (java.lang.Throwable) searchQuerySyntaxException11);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException14 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException11);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException15 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException14);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException16 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchIndexNotAvailableException15);
        searchQuerySyntaxException4.addSuppressed((java.lang.Throwable) searchIndexNotAvailableException16);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException18 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchIndexNotAvailableException16);
        java.lang.String str19 = searchIndexNotAvailableException16.toString();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "net.sourceforge.atunes.model.SearchIndexNotAvailableException: net.sourceforge.atunes.model.SearchIndexNotAvailableException: net.sourceforge.atunes.model.SearchQuerySyntaxException: net.sourceforge.atunes.model.SearchQuerySyntaxException" + "'", str19, "net.sourceforge.atunes.model.SearchIndexNotAvailableException: net.sourceforge.atunes.model.SearchIndexNotAvailableException: net.sourceforge.atunes.model.SearchQuerySyntaxException: net.sourceforge.atunes.model.SearchQuerySyntaxException");
    }

    @Test
    public void test0510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0510");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str1 = feedType0.getEntryXPath();
        java.lang.String str2 = feedType0.getTypeXPath();
        java.lang.String str3 = feedType0.getTypeXPath();
        java.lang.String str4 = feedType0.getDescriptionXPath();
        java.lang.String str5 = feedType0.getDescriptionXPath();
        java.lang.String str6 = feedType0.getUrlXPath();
        java.lang.String str7 = feedType0.getDurationXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "/rss/channel/item" + "'", str1, "/rss/channel/item");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "./enclosure/@type" + "'", str2, "./enclosure/@type");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "./enclosure/@type" + "'", str3, "./enclosure/@type");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "./description" + "'", str4, "./description");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "./description" + "'", str5, "./description");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "./enclosure/@url" + "'", str6, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "./duration" + "'", str7, "./duration");
    }

    @Test
    public void test0511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0511");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.lang.String str3 = cDMetadata0.getAlbum();
        java.util.List<java.lang.Integer> intList4 = cDMetadata0.getTracks();
        net.sourceforge.atunes.model.CDMetadata cDMetadata5 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata5.setAlbumArtist("");
        java.lang.String str9 = cDMetadata5.getTitle((int) (byte) -1);
        java.lang.String[] strArray11 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        cDMetadata5.setTrackNames((java.util.List<java.lang.String>) strList12);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList12);
        cDMetadata0.setYear((int) (short) 1);
        int int18 = cDMetadata0.getYear();
        java.lang.String str19 = cDMetadata0.getGenre();
        cDMetadata0.setYear((int) (short) 10);
        net.sourceforge.atunes.model.CDMetadata cDMetadata22 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata22.setAlbumArtist("");
        java.lang.String str25 = cDMetadata22.getGenre();
        java.lang.String[] strArray27 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        cDMetadata22.setTrackNames((java.util.List<java.lang.String>) strList28);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList28);
        int int32 = cDMetadata0.getDisc();
        java.util.List<java.lang.String> strList33 = cDMetadata0.getComposerNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata34 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata34.setAlbumArtist("");
        java.lang.String str37 = cDMetadata34.getGenre();
        java.util.List<java.lang.String> strList38 = cDMetadata34.getTrackNames();
        java.util.List<java.lang.String> strList39 = cDMetadata34.getTrackNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata40 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata40.setAlbumArtist("");
        java.lang.String str44 = cDMetadata40.getTitle((int) (byte) -1);
        net.sourceforge.atunes.model.CDMetadata cDMetadata45 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata45.setAlbumArtist("");
        java.lang.String str48 = cDMetadata45.getGenre();
        int int49 = cDMetadata45.getYear();
        int int50 = cDMetadata45.getYear();
        net.sourceforge.atunes.model.CDMetadata cDMetadata51 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str52 = cDMetadata51.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata53 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata53.setAlbumArtist("");
        java.lang.String str56 = cDMetadata53.getGenre();
        java.lang.String[] strArray58 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList59 = new java.util.ArrayList<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList59, strArray58);
        cDMetadata53.setTrackNames((java.util.List<java.lang.String>) strList59);
        cDMetadata51.setComposerNames((java.util.List<java.lang.String>) strList59);
        cDMetadata45.setTrackNames((java.util.List<java.lang.String>) strList59);
        net.sourceforge.atunes.model.CDMetadata cDMetadata64 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str65 = cDMetadata64.getGenre();
        java.util.List<java.lang.String> strList66 = cDMetadata64.getComposerNames();
        java.lang.String str67 = cDMetadata64.getAlbum();
        java.util.List<java.lang.Integer> intList68 = cDMetadata64.getTracks();
        int int69 = cDMetadata64.getDisc();
        java.lang.String[] strArray77 = new java.lang.String[] { "net.sourceforge.atunes.model.InconsistentRepositoryException", "./title", "1.0.0 ", "./title", "./duration", "mpc", "net.sourceforge.atunes.model.InconsistentRepositoryException" };
        java.util.ArrayList<java.lang.String> strList78 = new java.util.ArrayList<java.lang.String>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList78, strArray77);
        cDMetadata64.setArtistNames((java.util.List<java.lang.String>) strList78);
        cDMetadata45.setArtistNames((java.util.List<java.lang.String>) strList78);
        cDMetadata40.setComposerNames((java.util.List<java.lang.String>) strList78);
        cDMetadata34.setTrackNames((java.util.List<java.lang.String>) strList78);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList78);
        java.util.List<java.lang.String> strList85 = cDMetadata0.getComposerNames();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(intList4);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNull(strList33);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(strList38);
        org.junit.Assert.assertNull(strList39);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNull(strList66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNull(intList68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNull(strList85);
    }

    @Test
    public void test0512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0512");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        int int12 = applicationVersion9.getMajorNumber();
        int int13 = applicationVersion9.getMinorNumber();
        java.lang.String str14 = applicationVersion9.getName();
        java.lang.String str15 = applicationVersion9.toShortString();
        java.lang.String str16 = applicationVersion9.getDirectDownloadURL();
        java.lang.String str17 = applicationVersion9.toShortString();
        java.lang.String str18 = applicationVersion9.getName();
        java.lang.String str19 = applicationVersion9.getName();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "mpc" + "'", str14, "mpc");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1.0.0 " + "'", str15, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "./pubDate" + "'", str16, "./pubDate");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1.0.0 " + "'", str17, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "mpc" + "'", str18, "mpc");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "mpc" + "'", str19, "mpc");
    }

    @Test
    public void test0513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0513");
        net.sourceforge.atunes.model.LookAndFeelBean lookAndFeelBean0 = new net.sourceforge.atunes.model.LookAndFeelBean();
        java.lang.String str1 = lookAndFeelBean0.getSkin();
        lookAndFeelBean0.setSkin("./enclosure/@url");
        lookAndFeelBean0.setName("./duration");
        java.lang.String str6 = lookAndFeelBean0.getSkin();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "./enclosure/@url" + "'", str6, "./enclosure/@url");
    }

    @Test
    public void test0514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0514");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.lang.String str3 = cDMetadata0.getAlbum();
        java.util.List<java.lang.Integer> intList4 = cDMetadata0.getTracks();
        net.sourceforge.atunes.model.CDMetadata cDMetadata5 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata5.setAlbumArtist("");
        java.lang.String str9 = cDMetadata5.getTitle((int) (byte) -1);
        java.lang.String[] strArray11 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        cDMetadata5.setTrackNames((java.util.List<java.lang.String>) strList12);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList12);
        cDMetadata0.setYear((int) (short) 1);
        int int18 = cDMetadata0.getDisc();
        java.lang.String str20 = cDMetadata0.getTitle((int) '#');
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(intList4);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test0515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0515");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        int int12 = applicationVersion9.getMajorNumber();
        int int13 = applicationVersion9.getMinorNumber();
        java.lang.String str14 = applicationVersion9.getName();
        java.lang.String str15 = applicationVersion9.toShortString();
        java.lang.String str16 = applicationVersion9.getDirectDownloadURL();
        java.lang.String str17 = applicationVersion9.toShortString();
        java.lang.String str18 = applicationVersion9.getName();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType23 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion28 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType23, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str29 = applicationVersion28.getDate();
        java.lang.String str30 = applicationVersion28.toShortString();
        int int31 = applicationVersion28.getMajorNumber();
        java.lang.String str32 = applicationVersion28.toShortString();
        net.sourceforge.atunes.model.ArtistViewMode artistViewMode33 = net.sourceforge.atunes.model.ArtistViewMode.BOTH;
        boolean boolean34 = applicationVersion28.equals((java.lang.Object) artistViewMode33);
        int int35 = applicationVersion28.getMajorNumber();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType40 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion45 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType40, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str46 = applicationVersion45.getDate();
        java.lang.String str47 = applicationVersion45.toShortString();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType48 = applicationVersion45.getVersionType();
        int int49 = applicationVersion45.getMinorNumber();
        int int50 = applicationVersion28.compareTo(applicationVersion45);
        int int51 = applicationVersion9.compareTo(applicationVersion45);
        java.lang.String str52 = applicationVersion9.getDate();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "mpc" + "'", str14, "mpc");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1.0.0 " + "'", str15, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "./pubDate" + "'", str16, "./pubDate");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1.0.0 " + "'", str17, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "mpc" + "'", str18, "mpc");
        org.junit.Assert.assertTrue("'" + versionType23 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType23.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "./title" + "'", str29, "./title");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1.0.0 " + "'", str30, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1.0.0 " + "'", str32, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + artistViewMode33 + "' != '" + net.sourceforge.atunes.model.ArtistViewMode.BOTH + "'", artistViewMode33.equals(net.sourceforge.atunes.model.ArtistViewMode.BOTH));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + versionType40 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType40.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "./title" + "'", str46, "./title");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1.0.0 " + "'", str47, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + versionType48 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType48.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "./title" + "'", str52, "./title");
    }

    @Test
    public void test0516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0516");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.ATOM;
        java.lang.String str1 = feedType0.getTypeXPath();
        java.lang.String str2 = feedType0.getDurationXPath();
        java.lang.String str3 = feedType0.getDurationXPath();
        java.lang.String str4 = feedType0.getNameXPath();
        java.lang.String str5 = feedType0.getEntryXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.ATOM + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.ATOM));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "./link[@rel='enclosure']/@type" + "'", str1, "./link[@rel='enclosure']/@type");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "/feed/title" + "'", str4, "/feed/title");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/feed/entry" + "'", str5, "/feed/entry");
    }

    @Test
    public void test0517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0517");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str1 = feedType0.getUrlXPath();
        java.lang.String str2 = feedType0.getNameXPath();
        java.lang.String str3 = feedType0.getNameXPath();
        java.lang.String str4 = feedType0.getNameXPath();
        java.lang.String str5 = feedType0.getDurationXPath();
        java.lang.String str6 = feedType0.getNameXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "./enclosure/@url" + "'", str1, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "/rss/channel/title" + "'", str2, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "/rss/channel/title" + "'", str3, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "/rss/channel/title" + "'", str4, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "./duration" + "'", str5, "./duration");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "/rss/channel/title" + "'", str6, "/rss/channel/title");
    }

    @Test
    public void test0518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0518");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList2 = throwableRankList0.getNFirstElements((int) (short) 10);
        throwableRankList0.clear();
        java.util.List<java.lang.Integer> intList5 = throwableRankList0.getNFirstElementCounts(0);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList6 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable7 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException8 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable7);
        java.lang.Throwable[] throwableArray9 = searchQuerySyntaxException8.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException10 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException8);
        java.lang.Throwable throwable11 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException12 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable11);
        java.lang.Throwable[] throwableArray13 = searchQuerySyntaxException12.getSuppressed();
        throwableRankList6.replaceItem((java.lang.Throwable) searchQuerySyntaxException8, (java.lang.Throwable) searchQuerySyntaxException12);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException15 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException12);
        java.lang.Integer int16 = throwableRankList0.getCount((java.lang.Throwable) searchQuerySyntaxException15);
        java.lang.Throwable throwable17 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException18 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable17);
        java.lang.Throwable[] throwableArray19 = searchQuerySyntaxException18.getSuppressed();
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException20 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException18);
        java.lang.Integer int21 = throwableRankList0.getCount((java.lang.Throwable) searchQuerySyntaxException20);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException22 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException20);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException23 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException20);
        org.junit.Assert.assertNotNull(throwableList2);
        org.junit.Assert.assertNotNull(intList5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNull(int21);
    }

    @Test
    public void test0519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0519");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.ATOM;
        java.lang.String str1 = feedType0.getTypeXPath();
        java.lang.String str2 = feedType0.getDurationXPath();
        java.lang.String str3 = feedType0.getDurationXPath();
        java.lang.String str4 = feedType0.getNameXPath();
        java.lang.String str5 = feedType0.getAuthorXPath();
        java.lang.String str6 = feedType0.getDateXPath();
        java.lang.String str7 = feedType0.getUrlXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.ATOM + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.ATOM));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "./link[@rel='enclosure']/@type" + "'", str1, "./link[@rel='enclosure']/@type");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "/feed/title" + "'", str4, "/feed/title");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "./author/name" + "'", str5, "./author/name");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "./updated" + "'", str6, "./updated");
    }

    @Test
    public void test0520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0520");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType11 = applicationVersion9.getVersionType();
        java.lang.String str12 = applicationVersion9.getDate();
        java.lang.String str13 = applicationVersion9.toShortString();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertTrue("'" + versionType11 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType11.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "./title" + "'", str12, "./title");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1.0.0 " + "'", str13, "1.0.0 ");
    }

    @Test
    public void test0521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0521");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        columnBean0.setVisible(false);
        columnBean0.setWidth(0);
        net.sourceforge.atunes.model.ColumnSort columnSort8 = columnBean0.getSort();
        columnBean0.setWidth((int) (byte) 10);
        net.sourceforge.atunes.model.ColumnBean columnBean11 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean12 = columnBean11.isVisible();
        columnBean11.setOrder((int) (byte) -1);
        columnBean11.setVisible(false);
        columnBean11.setWidth(0);
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType23 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion28 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType23, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str29 = applicationVersion28.getDate();
        java.lang.String str30 = applicationVersion28.toShortString();
        java.lang.String str31 = applicationVersion28.getChanges();
        boolean boolean32 = columnBean11.equals((java.lang.Object) applicationVersion28);
        net.sourceforge.atunes.model.ColumnBean columnBean33 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean34 = columnBean33.isVisible();
        net.sourceforge.atunes.model.SubmissionState submissionState35 = net.sourceforge.atunes.model.SubmissionState.PENDING;
        boolean boolean36 = columnBean33.equals((java.lang.Object) submissionState35);
        columnBean33.setVisible(false);
        net.sourceforge.atunes.model.ColumnSort columnSort39 = net.sourceforge.atunes.model.ColumnSort.ASCENDING;
        columnBean33.setSort(columnSort39);
        columnBean11.setSort(columnSort39);
        boolean boolean42 = columnBean11.isVisible();
        net.sourceforge.atunes.model.ColumnBean columnBean43 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean44 = columnBean43.isVisible();
        columnBean43.setOrder((int) (byte) -1);
        net.sourceforge.atunes.model.ColumnSort columnSort47 = net.sourceforge.atunes.model.ColumnSort.DESCENDING;
        columnBean43.setSort(columnSort47);
        int int49 = columnBean43.getOrder();
        net.sourceforge.atunes.model.ColumnSort columnSort50 = columnBean43.getSort();
        columnBean11.setSort(columnSort50);
        columnBean0.setSort(columnSort50);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(columnSort8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + versionType23 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType23.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "./title" + "'", str29, "./title");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1.0.0 " + "'", str30, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "./title" + "'", str31, "./title");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + submissionState35 + "' != '" + net.sourceforge.atunes.model.SubmissionState.PENDING + "'", submissionState35.equals(net.sourceforge.atunes.model.SubmissionState.PENDING));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + columnSort39 + "' != '" + net.sourceforge.atunes.model.ColumnSort.ASCENDING + "'", columnSort39.equals(net.sourceforge.atunes.model.ColumnSort.ASCENDING));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + columnSort47 + "' != '" + net.sourceforge.atunes.model.ColumnSort.DESCENDING + "'", columnSort47.equals(net.sourceforge.atunes.model.ColumnSort.DESCENDING));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + columnSort50 + "' != '" + net.sourceforge.atunes.model.ColumnSort.DESCENDING + "'", columnSort50.equals(net.sourceforge.atunes.model.ColumnSort.DESCENDING));
    }

    @Test
    public void test0522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0522");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        columnBean0.setVisible(false);
        net.sourceforge.atunes.model.ColumnSort columnSort6 = columnBean0.getSort();
        int int7 = columnBean0.getWidth();
        boolean boolean8 = columnBean0.isVisible();
        boolean boolean9 = columnBean0.isVisible();
        columnBean0.setVisible(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(columnSort6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0523");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.lang.String str3 = cDMetadata0.getAlbum();
        java.util.List<java.lang.Integer> intList4 = cDMetadata0.getTracks();
        net.sourceforge.atunes.model.CDMetadata cDMetadata5 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata5.setAlbumArtist("");
        java.lang.String str9 = cDMetadata5.getTitle((int) (byte) -1);
        java.lang.String[] strArray11 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        cDMetadata5.setTrackNames((java.util.List<java.lang.String>) strList12);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList12);
        cDMetadata0.setYear((int) (short) 1);
        int int18 = cDMetadata0.getYear();
        cDMetadata0.setAlbumArtist("net.sourceforge.atunes.model.InconsistentRepositoryException");
        cDMetadata0.setAlbum("./title");
        cDMetadata0.setGenre("/rss/channel/item");
        cDMetadata0.setYear(32);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(intList4);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test0524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0524");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str1 = feedType0.getUrlXPath();
        java.lang.String str2 = feedType0.getNameXPath();
        java.lang.String str3 = feedType0.getDescriptionXPath();
        java.lang.String str4 = feedType0.getNameXPath();
        java.lang.String str5 = feedType0.getDurationXPath();
        java.lang.String str6 = feedType0.getAuthorXPath();
        java.lang.String str7 = feedType0.getNameXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "./enclosure/@url" + "'", str1, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "/rss/channel/title" + "'", str2, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "./description" + "'", str3, "./description");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "/rss/channel/title" + "'", str4, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "./duration" + "'", str5, "./duration");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "./author" + "'", str6, "./author");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/rss/channel/title" + "'", str7, "/rss/channel/title");
    }

    @Test
    public void test0525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0525");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.lang.String str3 = cDMetadata0.getAlbum();
        cDMetadata0.setAlbumArtist("./description");
        cDMetadata0.setAlbumArtist("./description");
        java.lang.String str8 = cDMetadata0.getAlbumArtist();
        net.sourceforge.atunes.model.ColumnBean columnBean9 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean10 = columnBean9.isVisible();
        net.sourceforge.atunes.model.SubmissionState submissionState11 = net.sourceforge.atunes.model.SubmissionState.PENDING;
        boolean boolean12 = columnBean9.equals((java.lang.Object) submissionState11);
        net.sourceforge.atunes.model.CDMetadata cDMetadata13 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata13.setAlbumArtist("");
        java.lang.String str17 = cDMetadata13.getTitle((int) (byte) -1);
        net.sourceforge.atunes.model.CDMetadata cDMetadata18 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata18.setAlbumArtist("");
        java.lang.String str22 = cDMetadata18.getTitle((int) (byte) -1);
        java.lang.String[] strArray24 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        cDMetadata18.setTrackNames((java.util.List<java.lang.String>) strList25);
        cDMetadata13.setArtistNames((java.util.List<java.lang.String>) strList25);
        boolean boolean29 = columnBean9.equals((java.lang.Object) strList25);
        cDMetadata0.setComposerNames((java.util.List<java.lang.String>) strList25);
        cDMetadata0.setDisc(1);
        java.util.List<java.lang.Integer> intList33 = cDMetadata0.getTracks();
        java.lang.String str35 = cDMetadata0.getComposer(3);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "./description" + "'", str8, "./description");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + submissionState11 + "' != '" + net.sourceforge.atunes.model.SubmissionState.PENDING + "'", submissionState11.equals(net.sourceforge.atunes.model.SubmissionState.PENDING));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(intList33);
        org.junit.Assert.assertNull(str35);
    }

    @Test
    public void test0526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0526");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        net.sourceforge.atunes.model.AudioObjectProperty audioObjectProperty1 = net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY;
        boolean boolean2 = columnBean0.equals((java.lang.Object) audioObjectProperty1);
        int int3 = columnBean0.getWidth();
        int int4 = columnBean0.getOrder();
        net.sourceforge.atunes.model.CDMetadata cDMetadata5 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata5.setAlbumArtist("");
        java.lang.String str8 = cDMetadata5.getGenre();
        int int9 = cDMetadata5.getYear();
        int int10 = cDMetadata5.getYear();
        cDMetadata5.setGenre("./enclosure/@url");
        java.util.List<java.lang.String> strList13 = null;
        cDMetadata5.setTrackNames(strList13);
        cDMetadata5.setAlbumArtist("./link[@rel='enclosure']/@type");
        boolean boolean17 = columnBean0.equals((java.lang.Object) "./link[@rel='enclosure']/@type");
        columnBean0.setVisible(true);
        net.sourceforge.atunes.model.CDMetadata cDMetadata20 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str21 = cDMetadata20.getGenre();
        java.util.List<java.lang.String> strList22 = cDMetadata20.getComposerNames();
        java.lang.String str23 = cDMetadata20.getAlbum();
        java.util.List<java.lang.Integer> intList24 = cDMetadata20.getTracks();
        cDMetadata20.setAlbumArtist("mpc");
        cDMetadata20.setAlbum("./updated");
        boolean boolean29 = columnBean0.equals((java.lang.Object) "./updated");
        org.junit.Assert.assertTrue("'" + audioObjectProperty1 + "' != '" + net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY + "'", audioObjectProperty1.equals(net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(strList22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(intList24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test0527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0527");
        net.sourceforge.atunes.model.ViewMode viewMode0 = net.sourceforge.atunes.model.ViewMode.ALBUM;
        net.sourceforge.atunes.model.IRepository iRepository1 = null;
        java.util.Map<java.lang.String, ?> strMap2 = viewMode0.getDataForView(iRepository1);
        org.junit.Assert.assertTrue("'" + viewMode0 + "' != '" + net.sourceforge.atunes.model.ViewMode.ALBUM + "'", viewMode0.equals(net.sourceforge.atunes.model.ViewMode.ALBUM));
        org.junit.Assert.assertNotNull(strMap2);
    }

    @Test
    public void test0528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0528");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.lang.String str3 = cDMetadata0.getAlbum();
        java.util.List<java.lang.Integer> intList4 = cDMetadata0.getTracks();
        net.sourceforge.atunes.model.CDMetadata cDMetadata5 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata5.setAlbumArtist("");
        java.lang.String str9 = cDMetadata5.getTitle((int) (byte) -1);
        java.lang.String[] strArray11 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        cDMetadata5.setTrackNames((java.util.List<java.lang.String>) strList12);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList12);
        cDMetadata0.setYear((int) (short) 1);
        int int18 = cDMetadata0.getYear();
        java.lang.String str19 = cDMetadata0.getGenre();
        cDMetadata0.setYear((int) (short) 10);
        net.sourceforge.atunes.model.CDMetadata cDMetadata22 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata22.setAlbumArtist("");
        java.lang.String str25 = cDMetadata22.getGenre();
        java.lang.String[] strArray27 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        cDMetadata22.setTrackNames((java.util.List<java.lang.String>) strList28);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList28);
        cDMetadata0.setAlbum("flv");
        cDMetadata0.setYear((int) '#');
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(intList4);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test0529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0529");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        int int12 = applicationVersion9.getMajorNumber();
        int int13 = applicationVersion9.getMinorNumber();
        java.lang.String str14 = applicationVersion9.getName();
        int int15 = applicationVersion9.getMinorNumber();
        java.lang.Class<?> wildcardClass16 = applicationVersion9.getClass();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "mpc" + "'", str14, "mpc");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0530");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata1 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata1.setAlbumArtist("");
        boolean boolean4 = fontSettings0.equals((java.lang.Object) cDMetadata1);
        fontSettings0.setUseFontSmoothing(true);
        net.sourceforge.atunes.model.IFontBean iFontBean7 = fontSettings0.getFont();
        net.sourceforge.atunes.model.CDMetadata cDMetadata8 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str9 = cDMetadata8.getGenre();
        java.util.List<java.lang.String> strList10 = cDMetadata8.getComposerNames();
        java.lang.String str11 = cDMetadata8.getAlbum();
        java.util.List<java.lang.Integer> intList12 = cDMetadata8.getTracks();
        cDMetadata8.setAlbumArtist("mpc");
        java.lang.String str15 = cDMetadata8.getAlbum();
        boolean boolean16 = fontSettings0.equals((java.lang.Object) cDMetadata8);
        java.util.List<java.lang.String> strList17 = cDMetadata8.getComposerNames();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(iFontBean7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(strList10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(intList12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(strList17);
    }

    @Test
    public void test0531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0531");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType11 = applicationVersion9.getVersionType();
        java.lang.String str12 = applicationVersion9.getDownloadURL();
        java.lang.String str13 = applicationVersion9.getDirectDownloadURL();
        java.lang.String str14 = applicationVersion9.toString();
        int int15 = applicationVersion9.getMinorNumber();
        java.lang.String str16 = applicationVersion9.toString();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertTrue("'" + versionType11 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType11.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "./description" + "'", str12, "./description");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "./pubDate" + "'", str13, "./pubDate");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1.0.0 mpc " + "'", str14, "1.0.0 mpc ");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1.0.0 mpc " + "'", str16, "1.0.0 mpc ");
    }

    @Test
    public void test0532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0532");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        columnBean0.setVisible(false);
        columnBean0.setWidth(0);
        net.sourceforge.atunes.model.ColumnSort columnSort8 = columnBean0.getSort();
        net.sourceforge.atunes.model.ColumnSort columnSort9 = columnBean0.getSort();
        columnBean0.setOrder((int) (short) 100);
        columnBean0.setOrder((int) (byte) -1);
        net.sourceforge.atunes.model.ColumnBean columnBean14 = new net.sourceforge.atunes.model.ColumnBean();
        net.sourceforge.atunes.model.AudioObjectProperty audioObjectProperty15 = net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY;
        boolean boolean16 = columnBean14.equals((java.lang.Object) audioObjectProperty15);
        int int17 = columnBean14.getWidth();
        int int18 = columnBean14.getOrder();
        int int19 = columnBean14.getWidth();
        net.sourceforge.atunes.model.ColumnBean columnBean20 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean21 = columnBean20.isVisible();
        columnBean20.setOrder((int) (byte) -1);
        columnBean20.setVisible(false);
        columnBean20.setWidth(0);
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType32 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion37 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType32, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str38 = applicationVersion37.getDate();
        java.lang.String str39 = applicationVersion37.toShortString();
        java.lang.String str40 = applicationVersion37.getChanges();
        boolean boolean41 = columnBean20.equals((java.lang.Object) applicationVersion37);
        net.sourceforge.atunes.model.ColumnBean columnBean42 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean43 = columnBean42.isVisible();
        net.sourceforge.atunes.model.SubmissionState submissionState44 = net.sourceforge.atunes.model.SubmissionState.PENDING;
        boolean boolean45 = columnBean42.equals((java.lang.Object) submissionState44);
        columnBean42.setVisible(false);
        net.sourceforge.atunes.model.ColumnSort columnSort48 = net.sourceforge.atunes.model.ColumnSort.ASCENDING;
        columnBean42.setSort(columnSort48);
        columnBean20.setSort(columnSort48);
        boolean boolean51 = columnBean20.isVisible();
        net.sourceforge.atunes.model.ColumnSort columnSort52 = columnBean20.getSort();
        columnBean14.setSort(columnSort52);
        columnBean0.setSort(columnSort52);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(columnSort8);
        org.junit.Assert.assertNull(columnSort9);
        org.junit.Assert.assertTrue("'" + audioObjectProperty15 + "' != '" + net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY + "'", audioObjectProperty15.equals(net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + versionType32 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType32.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "./title" + "'", str38, "./title");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1.0.0 " + "'", str39, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "./title" + "'", str40, "./title");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + submissionState44 + "' != '" + net.sourceforge.atunes.model.SubmissionState.PENDING + "'", submissionState44.equals(net.sourceforge.atunes.model.SubmissionState.PENDING));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + columnSort48 + "' != '" + net.sourceforge.atunes.model.ColumnSort.ASCENDING + "'", columnSort48.equals(net.sourceforge.atunes.model.ColumnSort.ASCENDING));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + columnSort52 + "' != '" + net.sourceforge.atunes.model.ColumnSort.ASCENDING + "'", columnSort52.equals(net.sourceforge.atunes.model.ColumnSort.ASCENDING));
    }

    @Test
    public void test0533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0533");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata1 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata1.setAlbumArtist("");
        boolean boolean4 = fontSettings0.equals((java.lang.Object) cDMetadata1);
        java.lang.String str5 = cDMetadata1.getGenre();
        cDMetadata1.setAlbum("net.sourceforge.atunes.model.SearchQuerySyntaxException");
        java.util.List<java.lang.String> strList8 = cDMetadata1.getArtistNames();
        java.lang.String str10 = cDMetadata1.getTitle((int) (short) -1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test0534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0534");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.lang.String str3 = cDMetadata0.getAlbum();
        java.util.List<java.lang.Integer> intList4 = cDMetadata0.getTracks();
        java.util.List<java.lang.String> strList5 = cDMetadata0.getArtistNames();
        java.lang.String str6 = cDMetadata0.getAlbum();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(intList4);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test0535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0535");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        int int1 = throwableRankList0.size();
        java.util.List<java.lang.Throwable> throwableList2 = throwableRankList0.getOrder();
        java.lang.Throwable throwable3 = null;
        java.lang.Integer int4 = throwableRankList0.getCount(throwable3);
        java.util.List<java.lang.Integer> intList6 = throwableRankList0.getNFirstElementCounts(1);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList7 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable8 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException9 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable8);
        java.lang.Throwable[] throwableArray10 = searchQuerySyntaxException9.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException11 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException9);
        java.lang.Throwable throwable12 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException13 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable12);
        java.lang.Throwable[] throwableArray14 = searchQuerySyntaxException13.getSuppressed();
        throwableRankList7.replaceItem((java.lang.Throwable) searchQuerySyntaxException9, (java.lang.Throwable) searchQuerySyntaxException13);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException16 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException9);
        java.lang.Throwable throwable17 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException18 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable17);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList19 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable20 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException21 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable20);
        java.lang.Throwable[] throwableArray22 = searchQuerySyntaxException21.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException23 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException21);
        java.lang.Throwable throwable24 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException25 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable24);
        java.lang.Throwable[] throwableArray26 = searchQuerySyntaxException25.getSuppressed();
        throwableRankList19.replaceItem((java.lang.Throwable) searchQuerySyntaxException21, (java.lang.Throwable) searchQuerySyntaxException25);
        searchQuerySyntaxException18.addSuppressed((java.lang.Throwable) searchQuerySyntaxException25);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException29 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException18);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException30 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException18);
        java.lang.Throwable throwable31 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException32 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable31);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList33 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable34 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException35 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable34);
        java.lang.Throwable[] throwableArray36 = searchQuerySyntaxException35.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException37 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException35);
        java.lang.Throwable throwable38 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException39 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable38);
        java.lang.Throwable[] throwableArray40 = searchQuerySyntaxException39.getSuppressed();
        throwableRankList33.replaceItem((java.lang.Throwable) searchQuerySyntaxException35, (java.lang.Throwable) searchQuerySyntaxException39);
        searchQuerySyntaxException32.addSuppressed((java.lang.Throwable) searchQuerySyntaxException39);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException43 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException32);
        java.lang.Throwable throwable44 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException45 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable44);
        java.lang.Throwable[] throwableArray46 = searchQuerySyntaxException45.getSuppressed();
        searchQuerySyntaxException32.addSuppressed((java.lang.Throwable) searchQuerySyntaxException45);
        searchIndexNotAvailableException30.addSuppressed((java.lang.Throwable) searchQuerySyntaxException45);
        throwableRankList0.replaceItem((java.lang.Throwable) searchQuerySyntaxException16, (java.lang.Throwable) searchQuerySyntaxException45);
        throwableRankList0.clear();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(throwableList2);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNotNull(intList6);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray46);
    }

    @Test
    public void test0536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0536");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.lang.String str3 = cDMetadata0.getAlbum();
        java.util.List<java.lang.Integer> intList4 = cDMetadata0.getTracks();
        cDMetadata0.setAlbumArtist("mpc");
        net.sourceforge.atunes.model.CDMetadata cDMetadata7 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata7.setAlbumArtist("");
        java.lang.String str10 = cDMetadata7.getGenre();
        int int11 = cDMetadata7.getYear();
        int int12 = cDMetadata7.getYear();
        net.sourceforge.atunes.model.CDMetadata cDMetadata13 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str14 = cDMetadata13.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata15 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata15.setAlbumArtist("");
        java.lang.String str18 = cDMetadata15.getGenre();
        java.lang.String[] strArray20 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        cDMetadata15.setTrackNames((java.util.List<java.lang.String>) strList21);
        cDMetadata13.setComposerNames((java.util.List<java.lang.String>) strList21);
        cDMetadata7.setTrackNames((java.util.List<java.lang.String>) strList21);
        java.lang.String str26 = cDMetadata7.getAlbumArtist();
        cDMetadata7.setGenre("/feed/title");
        java.lang.String[] strArray47 = new java.lang.String[] { "1.0.0 mpc ", "1.0.0 ", "10.52.35 ", "SOCKS_PROXY", "SOCKS_PROXY", "mpc", "./duration", "./enclosure/@url", "./author", "flac", "1.0.0 mpc ", "net.sourceforge.atunes.model.SearchQuerySyntaxException", "10.52.35  ", "./enclosure/@type", "./updated", "net.sourceforge.atunes.model.SearchQuerySyntaxException", "./link[@rel='enclosure']/@type", "flac" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        cDMetadata7.setComposerNames((java.util.List<java.lang.String>) strList48);
        cDMetadata0.setArtistNames((java.util.List<java.lang.String>) strList48);
        java.util.List<java.lang.String> strList52 = cDMetadata0.getTrackNames();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(intList4);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNull(strList52);
    }

    @Test
    public void test0537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0537");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        java.lang.String str12 = applicationVersion9.getChanges();
        int int13 = applicationVersion9.getMinorNumber();
        java.lang.String str14 = applicationVersion9.getChanges();
        int int15 = applicationVersion9.getMajorNumber();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType20 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion25 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType20, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str26 = applicationVersion25.getDate();
        java.lang.String str27 = applicationVersion25.toShortString();
        java.lang.String str28 = applicationVersion25.getChanges();
        int int29 = applicationVersion25.getMinorNumber();
        java.lang.String str30 = applicationVersion25.getChanges();
        int int31 = applicationVersion9.compareTo(applicationVersion25);
        int int32 = applicationVersion9.getRevisionNumber();
        java.lang.String str33 = applicationVersion9.getDownloadURL();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "./title" + "'", str12, "./title");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "./title" + "'", str14, "./title");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + versionType20 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType20.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "./title" + "'", str26, "./title");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1.0.0 " + "'", str27, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "./title" + "'", str28, "./title");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "./title" + "'", str30, "./title");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "./description" + "'", str33, "./description");
    }

    @Test
    public void test0538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0538");
        net.sourceforge.atunes.model.RankList<net.sourceforge.atunes.model.SearchIndexNotAvailableException> searchIndexNotAvailableExceptionRankList0 = new net.sourceforge.atunes.model.RankList<net.sourceforge.atunes.model.SearchIndexNotAvailableException>();
    }

    @Test
    public void test0539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0539");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str1 = feedType0.getUrlXPath();
        java.lang.String str2 = feedType0.getNameXPath();
        java.lang.String str3 = feedType0.getDescriptionXPath();
        java.lang.String str4 = feedType0.getNameXPath();
        java.lang.String str5 = feedType0.getNameXPath();
        java.lang.String str6 = feedType0.getAuthorXPath();
        java.lang.String str7 = feedType0.getTypeXPath();
        java.lang.String str8 = feedType0.getTitleXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "./enclosure/@url" + "'", str1, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "/rss/channel/title" + "'", str2, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "./description" + "'", str3, "./description");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "/rss/channel/title" + "'", str4, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/rss/channel/title" + "'", str5, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "./author" + "'", str6, "./author");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "./enclosure/@type" + "'", str7, "./enclosure/@type");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "./title" + "'", str8, "./title");
    }

    @Test
    public void test0540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0540");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str1 = feedType0.getUrlXPath();
        java.lang.String str2 = feedType0.getNameXPath();
        java.lang.String str3 = feedType0.getDescriptionXPath();
        java.lang.String str4 = feedType0.getDurationXPath();
        java.lang.String str5 = feedType0.getNameXPath();
        java.lang.String str6 = feedType0.getDurationXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "./enclosure/@url" + "'", str1, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "/rss/channel/title" + "'", str2, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "./description" + "'", str3, "./description");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "./duration" + "'", str4, "./duration");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/rss/channel/title" + "'", str5, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "./duration" + "'", str6, "./duration");
    }

    @Test
    public void test0541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0541");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        columnBean0.setVisible(false);
        net.sourceforge.atunes.model.ColumnSort columnSort6 = columnBean0.getSort();
        net.sourceforge.atunes.model.TextTagAttribute textTagAttribute7 = net.sourceforge.atunes.model.TextTagAttribute.COMPOSER;
        boolean boolean8 = columnBean0.equals((java.lang.Object) textTagAttribute7);
        columnBean0.setVisible(true);
        columnBean0.setOrder((int) (short) 100);
        net.sourceforge.atunes.model.ColumnSort columnSort13 = columnBean0.getSort();
        int int14 = columnBean0.getOrder();
        columnBean0.setVisible(true);
        int int17 = columnBean0.getWidth();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(columnSort6);
        org.junit.Assert.assertTrue("'" + textTagAttribute7 + "' != '" + net.sourceforge.atunes.model.TextTagAttribute.COMPOSER + "'", textTagAttribute7.equals(net.sourceforge.atunes.model.TextTagAttribute.COMPOSER));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(columnSort13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test0542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0542");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList1 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList3 = throwableRankList1.getNFirstElements((int) (short) 10);
        throwableRankList1.clear();
        java.util.List<java.lang.Integer> intList6 = throwableRankList1.getNFirstElementCounts(150);
        throwableRankList1.clear();
        java.util.List<java.lang.Throwable> throwableList9 = throwableRankList1.getNFirstElements(10);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList10 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList12 = throwableRankList10.getNFirstElements((int) (short) 100);
        java.lang.Throwable throwable13 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException14 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable13);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList15 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable16 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException17 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable16);
        java.lang.Throwable[] throwableArray18 = searchQuerySyntaxException17.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException19 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException17);
        java.lang.Throwable throwable20 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException21 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable20);
        java.lang.Throwable[] throwableArray22 = searchQuerySyntaxException21.getSuppressed();
        throwableRankList15.replaceItem((java.lang.Throwable) searchQuerySyntaxException17, (java.lang.Throwable) searchQuerySyntaxException21);
        searchQuerySyntaxException14.addSuppressed((java.lang.Throwable) searchQuerySyntaxException21);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException25 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException14);
        java.lang.Throwable throwable26 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException27 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable26);
        java.lang.Throwable[] throwableArray28 = searchQuerySyntaxException27.getSuppressed();
        searchQuerySyntaxException14.addSuppressed((java.lang.Throwable) searchQuerySyntaxException27);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException30 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException14);
        java.lang.Throwable throwable31 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException32 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable31);
        java.lang.Throwable[] throwableArray33 = searchQuerySyntaxException32.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException34 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException32);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException35 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException32);
        throwableRankList10.replaceItem((java.lang.Throwable) searchQuerySyntaxException14, (java.lang.Throwable) searchQuerySyntaxException35);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException37 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException35);
        java.lang.Integer int38 = throwableRankList1.getCount((java.lang.Throwable) searchQuerySyntaxException35);
        java.lang.Integer int39 = throwableRankList0.getCount((java.lang.Throwable) searchQuerySyntaxException35);
        org.junit.Assert.assertNotNull(throwableList3);
        org.junit.Assert.assertNotNull(intList6);
        org.junit.Assert.assertNotNull(throwableList9);
        org.junit.Assert.assertNotNull(throwableList12);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNull(int38);
        org.junit.Assert.assertNull(int39);
    }

    @Test
    public void test0543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0543");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType11 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.BETA;
        boolean boolean12 = applicationVersion9.equals((java.lang.Object) versionType11);
        java.lang.String str13 = applicationVersion9.toShortString();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertTrue("'" + versionType11 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.BETA + "'", versionType11.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.BETA));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1.0.0 " + "'", str13, "1.0.0 ");
    }

    @Test
    public void test0544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0544");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.lang.String str3 = cDMetadata0.getGenre();
        java.lang.String[] strArray5 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList6);
        cDMetadata0.setAlbumArtist("net.sourceforge.atunes.model.InconsistentRepositoryException");
        cDMetadata0.setDisc((int) (short) -1);
        java.util.List<java.lang.String> strList13 = cDMetadata0.getArtistNames();
        net.sourceforge.atunes.model.FontSettings fontSettings14 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata15 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata15.setAlbumArtist("");
        boolean boolean18 = fontSettings14.equals((java.lang.Object) cDMetadata15);
        java.lang.String str19 = cDMetadata15.getAlbum();
        java.lang.String str20 = cDMetadata15.getAlbum();
        java.lang.String str22 = cDMetadata15.getTitle(1);
        java.util.List<java.lang.String> strList23 = cDMetadata15.getTrackNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata24 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str25 = cDMetadata24.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata26 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata26.setAlbumArtist("");
        java.lang.String str29 = cDMetadata26.getGenre();
        java.lang.String[] strArray31 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        cDMetadata26.setTrackNames((java.util.List<java.lang.String>) strList32);
        cDMetadata24.setComposerNames((java.util.List<java.lang.String>) strList32);
        cDMetadata15.setComposerNames((java.util.List<java.lang.String>) strList32);
        cDMetadata0.setArtistNames((java.util.List<java.lang.String>) strList32);
        java.util.List<java.lang.String> strList38 = cDMetadata0.getComposerNames();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(strList23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(strList38);
    }

    @Test
    public void test0545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0545");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.lang.String str3 = cDMetadata0.getAlbum();
        cDMetadata0.setAlbumArtist("./description");
        cDMetadata0.setAlbumArtist("./description");
        java.lang.String str8 = cDMetadata0.getAlbumArtist();
        java.util.List<java.lang.Integer> intList9 = cDMetadata0.getTracks();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "./description" + "'", str8, "./description");
        org.junit.Assert.assertNull(intList9);
    }

    @Test
    public void test0546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0546");
        net.sourceforge.atunes.model.ColumnBean columnBean4 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean5 = columnBean4.isVisible();
        columnBean4.setOrder((int) (byte) -1);
        columnBean4.setVisible(false);
        columnBean4.setWidth(0);
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType16 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion21 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType16, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str22 = applicationVersion21.getDate();
        java.lang.String str23 = applicationVersion21.toShortString();
        java.lang.String str24 = applicationVersion21.getChanges();
        boolean boolean25 = columnBean4.equals((java.lang.Object) applicationVersion21);
        java.lang.String str26 = applicationVersion21.getDownloadURL();
        java.lang.String str27 = applicationVersion21.getChanges();
        java.lang.String str28 = applicationVersion21.getDownloadURL();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType29 = applicationVersion21.getVersionType();
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion34 = new net.sourceforge.atunes.model.ApplicationVersion("/rss/channel/item", (int) (short) 10, 1, (int) (byte) 1, versionType29, "./updated", "mp4", "1.0.0 mpc ", "rm");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType35 = applicationVersion34.getVersionType();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + versionType16 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType16.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "./title" + "'", str22, "./title");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1.0.0 " + "'", str23, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "./title" + "'", str24, "./title");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "./description" + "'", str26, "./description");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "./title" + "'", str27, "./title");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "./description" + "'", str28, "./description");
        org.junit.Assert.assertTrue("'" + versionType29 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType29.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertTrue("'" + versionType35 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType35.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
    }

    @Test
    public void test0547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0547");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.ATOM;
        java.lang.String str1 = feedType0.getTypeXPath();
        java.lang.String str2 = feedType0.getUrlXPath();
        java.lang.String str3 = feedType0.getDescriptionXPath();
        java.lang.String str4 = feedType0.getAuthorXPath();
        java.lang.String str5 = feedType0.getEntryXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.ATOM + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.ATOM));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "./link[@rel='enclosure']/@type" + "'", str1, "./link[@rel='enclosure']/@type");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "./summary" + "'", str3, "./summary");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "./author/name" + "'", str4, "./author/name");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/feed/entry" + "'", str5, "/feed/entry");
    }

    @Test
    public void test0548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0548");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.lang.String str3 = cDMetadata0.getGenre();
        java.lang.String[] strArray5 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList6);
        cDMetadata0.setAlbumArtist("net.sourceforge.atunes.model.InconsistentRepositoryException");
        cDMetadata0.setDisc((int) (short) -1);
        java.lang.String str13 = cDMetadata0.getAlbumArtist();
        java.util.List<java.lang.String> strList14 = cDMetadata0.getArtistNames();
        java.lang.String str16 = cDMetadata0.getTitle(10);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "net.sourceforge.atunes.model.InconsistentRepositoryException" + "'", str13, "net.sourceforge.atunes.model.InconsistentRepositoryException");
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test0549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0549");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable1 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException2 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable1);
        java.lang.Throwable[] throwableArray3 = searchQuerySyntaxException2.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException4 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException2);
        java.lang.Throwable throwable5 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException6 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable5);
        java.lang.Throwable[] throwableArray7 = searchQuerySyntaxException6.getSuppressed();
        throwableRankList0.replaceItem((java.lang.Throwable) searchQuerySyntaxException2, (java.lang.Throwable) searchQuerySyntaxException6);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList9 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable10 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException11 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable10);
        java.lang.Throwable[] throwableArray12 = searchQuerySyntaxException11.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException13 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException11);
        java.lang.Throwable throwable14 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException15 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable14);
        java.lang.Throwable[] throwableArray16 = searchQuerySyntaxException15.getSuppressed();
        throwableRankList9.replaceItem((java.lang.Throwable) searchQuerySyntaxException11, (java.lang.Throwable) searchQuerySyntaxException15);
        java.lang.Integer int18 = throwableRankList0.getCount((java.lang.Throwable) searchQuerySyntaxException15);
        java.lang.Throwable throwable19 = null;
        java.lang.Throwable throwable20 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException21 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable20);
        throwableRankList0.replaceItem(throwable19, (java.lang.Throwable) searchQuerySyntaxException21);
        java.lang.Throwable throwable23 = null;
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList24 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable25 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException26 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable25);
        java.lang.Throwable[] throwableArray27 = searchQuerySyntaxException26.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException28 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException26);
        java.lang.Throwable throwable29 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException30 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable29);
        java.lang.Throwable[] throwableArray31 = searchQuerySyntaxException30.getSuppressed();
        throwableRankList24.replaceItem((java.lang.Throwable) searchQuerySyntaxException26, (java.lang.Throwable) searchQuerySyntaxException30);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList33 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable34 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException35 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable34);
        java.lang.Throwable[] throwableArray36 = searchQuerySyntaxException35.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException37 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException35);
        java.lang.Throwable throwable38 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException39 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable38);
        java.lang.Throwable[] throwableArray40 = searchQuerySyntaxException39.getSuppressed();
        throwableRankList33.replaceItem((java.lang.Throwable) searchQuerySyntaxException35, (java.lang.Throwable) searchQuerySyntaxException39);
        java.lang.Integer int42 = throwableRankList24.getCount((java.lang.Throwable) searchQuerySyntaxException39);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList43 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable44 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException45 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable44);
        java.lang.Throwable[] throwableArray46 = searchQuerySyntaxException45.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException47 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException45);
        java.lang.Throwable throwable48 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException49 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable48);
        java.lang.Throwable[] throwableArray50 = searchQuerySyntaxException49.getSuppressed();
        throwableRankList43.replaceItem((java.lang.Throwable) searchQuerySyntaxException45, (java.lang.Throwable) searchQuerySyntaxException49);
        java.util.List<java.lang.Throwable> throwableList52 = throwableRankList43.getOrder();
        java.lang.Throwable throwable53 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException54 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable53);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList55 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable56 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException57 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable56);
        java.lang.Throwable[] throwableArray58 = searchQuerySyntaxException57.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException59 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException57);
        java.lang.Throwable throwable60 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException61 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable60);
        java.lang.Throwable[] throwableArray62 = searchQuerySyntaxException61.getSuppressed();
        throwableRankList55.replaceItem((java.lang.Throwable) searchQuerySyntaxException57, (java.lang.Throwable) searchQuerySyntaxException61);
        searchQuerySyntaxException54.addSuppressed((java.lang.Throwable) searchQuerySyntaxException61);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException65 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException54);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException66 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException54);
        java.lang.Integer int67 = throwableRankList43.getCount((java.lang.Throwable) searchIndexNotAvailableException66);
        java.lang.Integer int68 = throwableRankList24.getCount((java.lang.Throwable) searchIndexNotAvailableException66);
        java.util.List<java.lang.Integer> intList70 = throwableRankList24.getNFirstElementCounts((int) (byte) 0);
        java.lang.Throwable throwable71 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException72 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable71);
        java.lang.Throwable[] throwableArray73 = searchQuerySyntaxException72.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException74 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException72);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException75 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException72);
        java.lang.Integer int76 = throwableRankList24.getCount((java.lang.Throwable) searchQuerySyntaxException75);
        throwableRankList0.replaceItem(throwable23, (java.lang.Throwable) searchQuerySyntaxException75);
        net.sourceforge.atunes.model.InconsistentRepositoryException inconsistentRepositoryException78 = new net.sourceforge.atunes.model.InconsistentRepositoryException();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList79 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable80 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException81 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable80);
        java.lang.Throwable[] throwableArray82 = searchQuerySyntaxException81.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException83 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException81);
        java.lang.Throwable throwable84 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException85 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable84);
        java.lang.Throwable[] throwableArray86 = searchQuerySyntaxException85.getSuppressed();
        throwableRankList79.replaceItem((java.lang.Throwable) searchQuerySyntaxException81, (java.lang.Throwable) searchQuerySyntaxException85);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException88 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException85);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException89 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException88);
        inconsistentRepositoryException78.addSuppressed((java.lang.Throwable) searchIndexNotAvailableException89);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException91 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchIndexNotAvailableException89);
        throwableRankList0.addItem((java.lang.Throwable) searchIndexNotAvailableException89);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNull(int42);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableList52);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNull(int67);
        org.junit.Assert.assertNull(int68);
        org.junit.Assert.assertNotNull(intList70);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNull(int76);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray86);
    }

    @Test
    public void test0550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0550");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        columnBean0.setVisible(false);
        net.sourceforge.atunes.model.ColumnSort columnSort6 = columnBean0.getSort();
        net.sourceforge.atunes.model.TextTagAttribute textTagAttribute7 = net.sourceforge.atunes.model.TextTagAttribute.COMPOSER;
        boolean boolean8 = columnBean0.equals((java.lang.Object) textTagAttribute7);
        columnBean0.setVisible(true);
        columnBean0.setOrder((int) (short) 100);
        net.sourceforge.atunes.model.ColumnSort columnSort13 = columnBean0.getSort();
        int int14 = columnBean0.getOrder();
        columnBean0.setVisible(false);
        int int17 = columnBean0.getWidth();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(columnSort6);
        org.junit.Assert.assertTrue("'" + textTagAttribute7 + "' != '" + net.sourceforge.atunes.model.TextTagAttribute.COMPOSER + "'", textTagAttribute7.equals(net.sourceforge.atunes.model.TextTagAttribute.COMPOSER));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(columnSort13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test0551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0551");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList2 = throwableRankList0.getNFirstElements((int) (short) 10);
        throwableRankList0.clear();
        java.util.List<java.lang.Integer> intList5 = throwableRankList0.getNFirstElementCounts((int) (short) 0);
        int int6 = throwableRankList0.size();
        java.lang.Throwable throwable7 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException8 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable7);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList9 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable10 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException11 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable10);
        java.lang.Throwable[] throwableArray12 = searchQuerySyntaxException11.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException13 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException11);
        java.lang.Throwable throwable14 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException15 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable14);
        java.lang.Throwable[] throwableArray16 = searchQuerySyntaxException15.getSuppressed();
        throwableRankList9.replaceItem((java.lang.Throwable) searchQuerySyntaxException11, (java.lang.Throwable) searchQuerySyntaxException15);
        searchQuerySyntaxException8.addSuppressed((java.lang.Throwable) searchQuerySyntaxException15);
        java.lang.Throwable[] throwableArray19 = searchQuerySyntaxException15.getSuppressed();
        java.lang.Integer int20 = throwableRankList0.getCount((java.lang.Throwable) searchQuerySyntaxException15);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList21 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList23 = throwableRankList21.getNFirstElements((int) (short) 10);
        throwableRankList21.clear();
        java.util.List<java.lang.Integer> intList26 = throwableRankList21.getNFirstElementCounts(0);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList27 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable28 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException29 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable28);
        java.lang.Throwable[] throwableArray30 = searchQuerySyntaxException29.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException31 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException29);
        java.lang.Throwable throwable32 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException33 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable32);
        java.lang.Throwable[] throwableArray34 = searchQuerySyntaxException33.getSuppressed();
        throwableRankList27.replaceItem((java.lang.Throwable) searchQuerySyntaxException29, (java.lang.Throwable) searchQuerySyntaxException33);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException36 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException33);
        java.lang.Integer int37 = throwableRankList21.getCount((java.lang.Throwable) searchQuerySyntaxException36);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList38 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable39 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException40 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable39);
        java.lang.Throwable[] throwableArray41 = searchQuerySyntaxException40.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException42 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException40);
        java.lang.Throwable throwable43 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException44 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable43);
        java.lang.Throwable[] throwableArray45 = searchQuerySyntaxException44.getSuppressed();
        throwableRankList38.replaceItem((java.lang.Throwable) searchQuerySyntaxException40, (java.lang.Throwable) searchQuerySyntaxException44);
        java.lang.Throwable[] throwableArray47 = searchQuerySyntaxException40.getSuppressed();
        java.lang.Throwable[] throwableArray48 = searchQuerySyntaxException40.getSuppressed();
        searchQuerySyntaxException36.addSuppressed((java.lang.Throwable) searchQuerySyntaxException40);
        searchQuerySyntaxException15.addSuppressed((java.lang.Throwable) searchQuerySyntaxException40);
        org.junit.Assert.assertNotNull(throwableList2);
        org.junit.Assert.assertNotNull(intList5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertNotNull(throwableList23);
        org.junit.Assert.assertNotNull(intList26);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNull(int37);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray48);
    }

    @Test
    public void test0552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0552");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList2 = throwableRankList0.getNFirstElements((int) (short) 10);
        throwableRankList0.clear();
        java.util.List<java.lang.Integer> intList5 = throwableRankList0.getNFirstElementCounts(150);
        java.util.List<java.lang.Throwable> throwableList6 = throwableRankList0.getOrder();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList7 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable8 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException9 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable8);
        java.lang.Throwable[] throwableArray10 = searchQuerySyntaxException9.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException11 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException9);
        java.lang.Throwable throwable12 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException13 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable12);
        java.lang.Throwable[] throwableArray14 = searchQuerySyntaxException13.getSuppressed();
        throwableRankList7.replaceItem((java.lang.Throwable) searchQuerySyntaxException9, (java.lang.Throwable) searchQuerySyntaxException13);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException16 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException13);
        java.lang.Throwable[] throwableArray17 = searchQuerySyntaxException16.getSuppressed();
        throwableRankList0.addItem((java.lang.Throwable) searchQuerySyntaxException16);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException19 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException16);
        java.lang.Throwable throwable20 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException21 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable20);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList22 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable23 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException24 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable23);
        java.lang.Throwable[] throwableArray25 = searchQuerySyntaxException24.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException26 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException24);
        java.lang.Throwable throwable27 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException28 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable27);
        java.lang.Throwable[] throwableArray29 = searchQuerySyntaxException28.getSuppressed();
        throwableRankList22.replaceItem((java.lang.Throwable) searchQuerySyntaxException24, (java.lang.Throwable) searchQuerySyntaxException28);
        searchQuerySyntaxException21.addSuppressed((java.lang.Throwable) searchQuerySyntaxException28);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException32 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException21);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException33 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException21);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException34 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchIndexNotAvailableException33);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException35 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchIndexNotAvailableException33);
        java.lang.Throwable throwable36 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException37 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable36);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList38 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable39 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException40 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable39);
        java.lang.Throwable[] throwableArray41 = searchQuerySyntaxException40.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException42 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException40);
        java.lang.Throwable throwable43 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException44 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable43);
        java.lang.Throwable[] throwableArray45 = searchQuerySyntaxException44.getSuppressed();
        throwableRankList38.replaceItem((java.lang.Throwable) searchQuerySyntaxException40, (java.lang.Throwable) searchQuerySyntaxException44);
        searchQuerySyntaxException37.addSuppressed((java.lang.Throwable) searchQuerySyntaxException44);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException48 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException37);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException49 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException37);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException50 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchIndexNotAvailableException49);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException51 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchIndexNotAvailableException49);
        searchIndexNotAvailableException35.addSuppressed((java.lang.Throwable) searchIndexNotAvailableException49);
        searchQuerySyntaxException19.addSuppressed((java.lang.Throwable) searchIndexNotAvailableException49);
        org.junit.Assert.assertNotNull(throwableList2);
        org.junit.Assert.assertNotNull(intList5);
        org.junit.Assert.assertNotNull(throwableList6);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray45);
    }

    @Test
    public void test0553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0553");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata1 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata1.setAlbumArtist("");
        boolean boolean4 = fontSettings0.equals((java.lang.Object) cDMetadata1);
        fontSettings0.setUseFontSmoothingSettingsFromOs(false);
        net.sourceforge.atunes.model.ViewMode viewMode7 = net.sourceforge.atunes.model.ViewMode.ALBUM;
        boolean boolean8 = fontSettings0.equals((java.lang.Object) viewMode7);
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType13 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion18 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType13, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str19 = applicationVersion18.getDate();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType20 = applicationVersion18.getVersionType();
        java.lang.String str21 = applicationVersion18.getDownloadURL();
        java.lang.String str22 = applicationVersion18.getDirectDownloadURL();
        boolean boolean23 = fontSettings0.equals((java.lang.Object) applicationVersion18);
        net.sourceforge.atunes.model.IFontBean iFontBean24 = fontSettings0.getFont();
        boolean boolean25 = fontSettings0.isUseFontSmoothing();
        boolean boolean26 = fontSettings0.isUseFontSmoothingSettingsFromOs();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + viewMode7 + "' != '" + net.sourceforge.atunes.model.ViewMode.ALBUM + "'", viewMode7.equals(net.sourceforge.atunes.model.ViewMode.ALBUM));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + versionType13 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType13.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "./title" + "'", str19, "./title");
        org.junit.Assert.assertTrue("'" + versionType20 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType20.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "./description" + "'", str21, "./description");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "./pubDate" + "'", str22, "./pubDate");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(iFontBean24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0554");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        fontSettings0.setUseFontSmoothing(false);
        net.sourceforge.atunes.model.IFontBean iFontBean3 = fontSettings0.getFont();
        net.sourceforge.atunes.model.IFontBean iFontBean4 = null;
        fontSettings0.setFont(iFontBean4);
        fontSettings0.setUseFontSmoothingSettingsFromOs(true);
        boolean boolean8 = fontSettings0.isUseFontSmoothingSettingsFromOs();
        org.junit.Assert.assertNull(iFontBean3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test0555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0555");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable1 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException2 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable1);
        java.lang.Throwable[] throwableArray3 = searchQuerySyntaxException2.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException4 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException2);
        java.lang.Throwable throwable5 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException6 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable5);
        java.lang.Throwable[] throwableArray7 = searchQuerySyntaxException6.getSuppressed();
        throwableRankList0.replaceItem((java.lang.Throwable) searchQuerySyntaxException2, (java.lang.Throwable) searchQuerySyntaxException6);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException9 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException2);
        java.lang.Throwable[] throwableArray10 = searchQuerySyntaxException9.getSuppressed();
        java.lang.Throwable[] throwableArray11 = searchQuerySyntaxException9.getSuppressed();
        java.lang.String str12 = searchQuerySyntaxException9.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "net.sourceforge.atunes.model.SearchQuerySyntaxException: net.sourceforge.atunes.model.SearchQuerySyntaxException" + "'", str12, "net.sourceforge.atunes.model.SearchQuerySyntaxException: net.sourceforge.atunes.model.SearchQuerySyntaxException");
    }

    @Test
    public void test0556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0556");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList2 = throwableRankList0.getNFirstElements((int) (short) 10);
        int int3 = throwableRankList0.size();
        int int4 = throwableRankList0.size();
        java.lang.Throwable throwable5 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException6 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable5);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList7 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable8 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException9 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable8);
        java.lang.Throwable[] throwableArray10 = searchQuerySyntaxException9.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException11 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException9);
        java.lang.Throwable throwable12 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException13 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable12);
        java.lang.Throwable[] throwableArray14 = searchQuerySyntaxException13.getSuppressed();
        throwableRankList7.replaceItem((java.lang.Throwable) searchQuerySyntaxException9, (java.lang.Throwable) searchQuerySyntaxException13);
        searchQuerySyntaxException6.addSuppressed((java.lang.Throwable) searchQuerySyntaxException13);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException17 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException6);
        java.lang.Integer int18 = throwableRankList0.getCount((java.lang.Throwable) searchQuerySyntaxException6);
        java.util.List<java.lang.Throwable> throwableList19 = throwableRankList0.getOrder();
        java.lang.Class<?> wildcardClass20 = throwableList19.getClass();
        org.junit.Assert.assertNotNull(throwableList2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(throwableList19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0557");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        int int3 = cDMetadata0.getYear();
        cDMetadata0.setYear(100);
        net.sourceforge.atunes.model.CDMetadata cDMetadata6 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata6.setAlbumArtist("");
        java.lang.String str9 = cDMetadata6.getGenre();
        java.util.List<java.lang.String> strList10 = cDMetadata6.getTrackNames();
        java.util.List<java.lang.String> strList11 = cDMetadata6.getTrackNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata12 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str13 = cDMetadata12.getGenre();
        java.lang.String str14 = cDMetadata12.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata15 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str16 = cDMetadata15.getGenre();
        java.util.List<java.lang.String> strList17 = cDMetadata15.getComposerNames();
        java.lang.String str18 = cDMetadata15.getAlbum();
        java.util.List<java.lang.Integer> intList19 = cDMetadata15.getTracks();
        int int20 = cDMetadata15.getYear();
        net.sourceforge.atunes.model.CDMetadata cDMetadata21 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str22 = cDMetadata21.getGenre();
        java.util.List<java.lang.String> strList23 = cDMetadata21.getComposerNames();
        java.lang.String str24 = cDMetadata21.getAlbum();
        java.util.List<java.lang.Integer> intList25 = cDMetadata21.getTracks();
        net.sourceforge.atunes.model.CDMetadata cDMetadata26 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata26.setAlbumArtist("");
        java.lang.String str30 = cDMetadata26.getTitle((int) (byte) -1);
        java.lang.String[] strArray32 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        cDMetadata26.setTrackNames((java.util.List<java.lang.String>) strList33);
        cDMetadata21.setTrackNames((java.util.List<java.lang.String>) strList33);
        cDMetadata21.setYear((int) (short) 1);
        int int39 = cDMetadata21.getYear();
        java.lang.String str40 = cDMetadata21.getGenre();
        cDMetadata21.setYear((int) (short) 10);
        net.sourceforge.atunes.model.CDMetadata cDMetadata43 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata43.setAlbumArtist("");
        java.lang.String str46 = cDMetadata43.getGenre();
        java.lang.String[] strArray48 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        cDMetadata43.setTrackNames((java.util.List<java.lang.String>) strList49);
        cDMetadata21.setTrackNames((java.util.List<java.lang.String>) strList49);
        cDMetadata15.setComposerNames((java.util.List<java.lang.String>) strList49);
        cDMetadata12.setArtistNames((java.util.List<java.lang.String>) strList49);
        cDMetadata6.setTrackNames((java.util.List<java.lang.String>) strList49);
        cDMetadata0.setComposerNames((java.util.List<java.lang.String>) strList49);
        cDMetadata0.setAlbum("10.52.35  ");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(strList10);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(intList19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(strList23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(intList25);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    }

    @Test
    public void test0558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0558");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.lang.String str3 = cDMetadata0.getGenre();
        java.lang.String[] strArray5 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList6);
        cDMetadata0.setAlbumArtist("net.sourceforge.atunes.model.InconsistentRepositoryException");
        int int11 = cDMetadata0.getYear();
        cDMetadata0.setGenre("");
        cDMetadata0.setAlbumArtist("HTTP_PROXY");
        java.util.List<java.lang.String> strList16 = cDMetadata0.getComposerNames();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(strList16);
    }

    @Test
    public void test0559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0559");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        net.sourceforge.atunes.model.ColumnSort columnSort4 = net.sourceforge.atunes.model.ColumnSort.DESCENDING;
        columnBean0.setSort(columnSort4);
        int int6 = columnBean0.getOrder();
        net.sourceforge.atunes.model.CDMetadata cDMetadata7 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str8 = cDMetadata7.getGenre();
        java.util.List<java.lang.String> strList9 = cDMetadata7.getComposerNames();
        java.lang.String str10 = cDMetadata7.getAlbum();
        java.util.List<java.lang.Integer> intList11 = cDMetadata7.getTracks();
        net.sourceforge.atunes.model.CDMetadata cDMetadata12 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata12.setAlbumArtist("");
        java.lang.String str16 = cDMetadata12.getTitle((int) (byte) -1);
        java.lang.String[] strArray18 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        cDMetadata12.setTrackNames((java.util.List<java.lang.String>) strList19);
        cDMetadata7.setTrackNames((java.util.List<java.lang.String>) strList19);
        java.util.List<java.lang.Integer> intList23 = null;
        cDMetadata7.setTracks(intList23);
        cDMetadata7.setDisc((int) (short) 100);
        boolean boolean27 = columnBean0.equals((java.lang.Object) cDMetadata7);
        net.sourceforge.atunes.model.ColumnSort columnSort28 = columnBean0.getSort();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + columnSort4 + "' != '" + net.sourceforge.atunes.model.ColumnSort.DESCENDING + "'", columnSort4.equals(net.sourceforge.atunes.model.ColumnSort.DESCENDING));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(strList9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(intList11);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + columnSort28 + "' != '" + net.sourceforge.atunes.model.ColumnSort.DESCENDING + "'", columnSort28.equals(net.sourceforge.atunes.model.ColumnSort.DESCENDING));
    }

    @Test
    public void test0560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0560");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str1 = feedType0.getEntryXPath();
        java.lang.String str2 = feedType0.getDurationXPath();
        java.lang.String str3 = feedType0.getTypeXPath();
        java.lang.String str4 = feedType0.getEntryXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "/rss/channel/item" + "'", str1, "/rss/channel/item");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "./duration" + "'", str2, "./duration");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "./enclosure/@type" + "'", str3, "./enclosure/@type");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "/rss/channel/item" + "'", str4, "/rss/channel/item");
    }

    @Test
    public void test0561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0561");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType20 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion25 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType20, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str26 = applicationVersion25.getDate();
        java.lang.String str27 = applicationVersion25.toShortString();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType28 = applicationVersion25.getVersionType();
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion33 = new net.sourceforge.atunes.model.ApplicationVersion("1.0.0 ", (int) (short) 10, (int) '4', (int) '#', versionType28, "", "./enclosure/@url", "SOCKS_PROXY", "./enclosure/@url");
        java.lang.String str34 = applicationVersion33.getName();
        java.lang.String str35 = applicationVersion33.toString();
        net.sourceforge.atunes.model.FeedType feedType36 = net.sourceforge.atunes.model.FeedType.ATOM;
        java.lang.String str37 = feedType36.getTypeXPath();
        java.lang.String str38 = feedType36.getUrlXPath();
        boolean boolean39 = applicationVersion33.equals((java.lang.Object) feedType36);
        int int40 = applicationVersion9.compareTo(applicationVersion33);
        net.sourceforge.atunes.model.FontSettings fontSettings41 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata42 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata42.setAlbumArtist("");
        boolean boolean45 = fontSettings41.equals((java.lang.Object) cDMetadata42);
        java.lang.String str46 = cDMetadata42.getAlbum();
        java.lang.String str47 = cDMetadata42.getAlbum();
        java.util.List<java.lang.Integer> intList48 = cDMetadata42.getTracks();
        boolean boolean49 = applicationVersion33.equals((java.lang.Object) cDMetadata42);
        java.util.List<java.lang.String> strList50 = cDMetadata42.getTrackNames();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + versionType20 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType20.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "./title" + "'", str26, "./title");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1.0.0 " + "'", str27, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + versionType28 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType28.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "10.52.35  " + "'", str35, "10.52.35  ");
        org.junit.Assert.assertTrue("'" + feedType36 + "' != '" + net.sourceforge.atunes.model.FeedType.ATOM + "'", feedType36.equals(net.sourceforge.atunes.model.FeedType.ATOM));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "./link[@rel='enclosure']/@type" + "'", str37, "./link[@rel='enclosure']/@type");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(intList48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(strList50);
    }

    @Test
    public void test0562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0562");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable1 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException2 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable1);
        java.lang.Throwable[] throwableArray3 = searchQuerySyntaxException2.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException4 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException2);
        java.lang.Throwable throwable5 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException6 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable5);
        java.lang.Throwable[] throwableArray7 = searchQuerySyntaxException6.getSuppressed();
        throwableRankList0.replaceItem((java.lang.Throwable) searchQuerySyntaxException2, (java.lang.Throwable) searchQuerySyntaxException6);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList9 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable10 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException11 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable10);
        java.lang.Throwable[] throwableArray12 = searchQuerySyntaxException11.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException13 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException11);
        java.lang.Throwable throwable14 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException15 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable14);
        java.lang.Throwable[] throwableArray16 = searchQuerySyntaxException15.getSuppressed();
        throwableRankList9.replaceItem((java.lang.Throwable) searchQuerySyntaxException11, (java.lang.Throwable) searchQuerySyntaxException15);
        java.lang.Integer int18 = throwableRankList0.getCount((java.lang.Throwable) searchQuerySyntaxException15);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList19 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable20 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException21 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable20);
        java.lang.Throwable[] throwableArray22 = searchQuerySyntaxException21.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException23 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException21);
        java.lang.Throwable throwable24 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException25 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable24);
        java.lang.Throwable[] throwableArray26 = searchQuerySyntaxException25.getSuppressed();
        throwableRankList19.replaceItem((java.lang.Throwable) searchQuerySyntaxException21, (java.lang.Throwable) searchQuerySyntaxException25);
        java.util.List<java.lang.Throwable> throwableList28 = throwableRankList19.getOrder();
        java.lang.Throwable throwable29 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException30 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable29);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList31 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable32 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException33 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable32);
        java.lang.Throwable[] throwableArray34 = searchQuerySyntaxException33.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException35 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException33);
        java.lang.Throwable throwable36 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException37 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable36);
        java.lang.Throwable[] throwableArray38 = searchQuerySyntaxException37.getSuppressed();
        throwableRankList31.replaceItem((java.lang.Throwable) searchQuerySyntaxException33, (java.lang.Throwable) searchQuerySyntaxException37);
        searchQuerySyntaxException30.addSuppressed((java.lang.Throwable) searchQuerySyntaxException37);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException41 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException30);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException42 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException30);
        java.lang.Integer int43 = throwableRankList19.getCount((java.lang.Throwable) searchIndexNotAvailableException42);
        java.lang.Integer int44 = throwableRankList0.getCount((java.lang.Throwable) searchIndexNotAvailableException42);
        throwableRankList0.clear();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableList28);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNull(int43);
        org.junit.Assert.assertNull(int44);
    }

    @Test
    public void test0563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0563");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList3 = cDMetadata0.getTracks();
        cDMetadata0.setAlbumArtist("/rss/channel/title");
        java.util.List<java.lang.String> strList6 = cDMetadata0.getTrackNames();
        java.lang.String str7 = cDMetadata0.getAlbumArtist();
        cDMetadata0.setYear((-1));
        java.util.List<java.lang.String> strList10 = cDMetadata0.getTrackNames();
        java.lang.String str11 = cDMetadata0.getAlbum();
        cDMetadata0.setDisc(10);
        org.junit.Assert.assertNull(intList3);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/rss/channel/title" + "'", str7, "/rss/channel/title");
        org.junit.Assert.assertNull(strList10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test0564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0564");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType8 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion13 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType8, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str14 = applicationVersion13.getDate();
        java.lang.String str15 = applicationVersion13.toShortString();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType16 = applicationVersion13.getVersionType();
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion21 = new net.sourceforge.atunes.model.ApplicationVersion("1.0.0 ", (int) (short) 10, (int) '4', (int) '#', versionType16, "", "./enclosure/@url", "SOCKS_PROXY", "./enclosure/@url");
        java.lang.String str22 = applicationVersion21.getName();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType27 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion32 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType27, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str33 = applicationVersion32.getDate();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType34 = applicationVersion32.getVersionType();
        java.lang.String str35 = applicationVersion32.getDownloadURL();
        int int36 = applicationVersion32.getMinorNumber();
        int int37 = applicationVersion21.compareTo(applicationVersion32);
        org.junit.Assert.assertTrue("'" + versionType8 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType8.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "./title" + "'", str14, "./title");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1.0.0 " + "'", str15, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + versionType16 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType16.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + versionType27 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType27.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "./title" + "'", str33, "./title");
        org.junit.Assert.assertTrue("'" + versionType34 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType34.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "./description" + "'", str35, "./description");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
    }

    @Test
    public void test0565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0565");
        net.sourceforge.atunes.model.ViewMode viewMode0 = net.sourceforge.atunes.model.ViewMode.FOLDER;
        net.sourceforge.atunes.model.IRepository iRepository1 = null;
        java.util.Map<java.lang.String, ?> strMap2 = viewMode0.getDataForView(iRepository1);
        net.sourceforge.atunes.model.IRepository iRepository3 = null;
        java.util.Map<java.lang.String, ?> strMap4 = viewMode0.getDataForView(iRepository3);
        net.sourceforge.atunes.model.IRepository iRepository5 = null;
        java.util.Map<java.lang.String, ?> strMap6 = viewMode0.getDataForView(iRepository5);
        org.junit.Assert.assertTrue("'" + viewMode0 + "' != '" + net.sourceforge.atunes.model.ViewMode.FOLDER + "'", viewMode0.equals(net.sourceforge.atunes.model.ViewMode.FOLDER));
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap6);
    }

    @Test
    public void test0566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0566");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList3 = cDMetadata0.getTracks();
        cDMetadata0.setAlbumArtist("/rss/channel/title");
        java.util.List<java.lang.String> strList6 = cDMetadata0.getTrackNames();
        java.lang.String str7 = cDMetadata0.getAlbumArtist();
        cDMetadata0.setYear((-1));
        java.util.List<java.lang.String> strList10 = cDMetadata0.getTrackNames();
        cDMetadata0.setAlbumArtist("1.0.0 ");
        org.junit.Assert.assertNull(intList3);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/rss/channel/title" + "'", str7, "/rss/channel/title");
        org.junit.Assert.assertNull(strList10);
    }

    @Test
    public void test0567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0567");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.lang.String str3 = cDMetadata0.getGenre();
        int int4 = cDMetadata0.getYear();
        int int5 = cDMetadata0.getYear();
        net.sourceforge.atunes.model.CDMetadata cDMetadata6 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str7 = cDMetadata6.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata8 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata8.setAlbumArtist("");
        java.lang.String str11 = cDMetadata8.getGenre();
        java.lang.String[] strArray13 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        cDMetadata8.setTrackNames((java.util.List<java.lang.String>) strList14);
        cDMetadata6.setComposerNames((java.util.List<java.lang.String>) strList14);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList14);
        net.sourceforge.atunes.model.CDMetadata cDMetadata19 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str20 = cDMetadata19.getGenre();
        java.util.List<java.lang.String> strList21 = cDMetadata19.getComposerNames();
        java.lang.String str22 = cDMetadata19.getAlbum();
        java.util.List<java.lang.Integer> intList23 = cDMetadata19.getTracks();
        int int24 = cDMetadata19.getDisc();
        java.lang.String[] strArray32 = new java.lang.String[] { "net.sourceforge.atunes.model.InconsistentRepositoryException", "./title", "1.0.0 ", "./title", "./duration", "mpc", "net.sourceforge.atunes.model.InconsistentRepositoryException" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        cDMetadata19.setArtistNames((java.util.List<java.lang.String>) strList33);
        cDMetadata0.setArtistNames((java.util.List<java.lang.String>) strList33);
        java.util.List<java.lang.String> strList37 = cDMetadata0.getTrackNames();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(strList21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(intList23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strList37);
    }

    @Test
    public void test0568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0568");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        cDMetadata0.setAlbumArtist("SOCKS_PROXY");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList5 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable6 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException7 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable6);
        java.lang.Throwable[] throwableArray8 = searchQuerySyntaxException7.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException9 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException7);
        java.lang.Throwable throwable10 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException11 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable10);
        java.lang.Throwable[] throwableArray12 = searchQuerySyntaxException11.getSuppressed();
        throwableRankList5.replaceItem((java.lang.Throwable) searchQuerySyntaxException7, (java.lang.Throwable) searchQuerySyntaxException11);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList14 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable15 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException16 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable15);
        java.lang.Throwable[] throwableArray17 = searchQuerySyntaxException16.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException18 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException16);
        java.lang.Throwable throwable19 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException20 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable19);
        java.lang.Throwable[] throwableArray21 = searchQuerySyntaxException20.getSuppressed();
        throwableRankList14.replaceItem((java.lang.Throwable) searchQuerySyntaxException16, (java.lang.Throwable) searchQuerySyntaxException20);
        java.lang.Integer int23 = throwableRankList5.getCount((java.lang.Throwable) searchQuerySyntaxException20);
        java.lang.Throwable throwable24 = null;
        java.lang.Throwable throwable25 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException26 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable25);
        throwableRankList5.replaceItem(throwable24, (java.lang.Throwable) searchQuerySyntaxException26);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList28 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable29 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException30 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable29);
        java.lang.Throwable[] throwableArray31 = searchQuerySyntaxException30.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException32 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException30);
        java.lang.Throwable throwable33 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException34 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable33);
        java.lang.Throwable[] throwableArray35 = searchQuerySyntaxException34.getSuppressed();
        throwableRankList28.replaceItem((java.lang.Throwable) searchQuerySyntaxException30, (java.lang.Throwable) searchQuerySyntaxException34);
        java.util.List<java.lang.Throwable> throwableList37 = throwableRankList28.getOrder();
        java.lang.Throwable throwable38 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException39 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable38);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList40 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable41 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException42 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable41);
        java.lang.Throwable[] throwableArray43 = searchQuerySyntaxException42.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException44 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException42);
        java.lang.Throwable throwable45 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException46 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable45);
        java.lang.Throwable[] throwableArray47 = searchQuerySyntaxException46.getSuppressed();
        throwableRankList40.replaceItem((java.lang.Throwable) searchQuerySyntaxException42, (java.lang.Throwable) searchQuerySyntaxException46);
        searchQuerySyntaxException39.addSuppressed((java.lang.Throwable) searchQuerySyntaxException46);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException50 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException39);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException51 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException39);
        java.lang.Integer int52 = throwableRankList28.getCount((java.lang.Throwable) searchIndexNotAvailableException51);
        throwableRankList5.addItem((java.lang.Throwable) searchIndexNotAvailableException51);
        java.util.List<java.lang.Integer> intList55 = throwableRankList5.getNFirstElementCounts(90);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList56 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList58 = throwableRankList56.getNFirstElements((int) (short) 100);
        java.lang.Throwable throwable59 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException60 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable59);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList61 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable62 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException63 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable62);
        java.lang.Throwable[] throwableArray64 = searchQuerySyntaxException63.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException65 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException63);
        java.lang.Throwable throwable66 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException67 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable66);
        java.lang.Throwable[] throwableArray68 = searchQuerySyntaxException67.getSuppressed();
        throwableRankList61.replaceItem((java.lang.Throwable) searchQuerySyntaxException63, (java.lang.Throwable) searchQuerySyntaxException67);
        searchQuerySyntaxException60.addSuppressed((java.lang.Throwable) searchQuerySyntaxException67);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException71 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException60);
        java.lang.Throwable throwable72 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException73 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable72);
        java.lang.Throwable[] throwableArray74 = searchQuerySyntaxException73.getSuppressed();
        searchQuerySyntaxException60.addSuppressed((java.lang.Throwable) searchQuerySyntaxException73);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException76 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException60);
        java.lang.Throwable throwable77 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException78 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable77);
        java.lang.Throwable[] throwableArray79 = searchQuerySyntaxException78.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException80 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException78);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException81 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException78);
        throwableRankList56.replaceItem((java.lang.Throwable) searchQuerySyntaxException60, (java.lang.Throwable) searchQuerySyntaxException81);
        throwableRankList5.addItem((java.lang.Throwable) searchQuerySyntaxException60);
        throwableRankList5.clear();
        java.util.List<java.lang.Integer> intList86 = throwableRankList5.getNFirstElementCounts(120);
        cDMetadata0.setTracks(intList86);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableList37);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNull(int52);
        org.junit.Assert.assertNotNull(intList55);
        org.junit.Assert.assertNotNull(throwableList58);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(intList86);
    }

    @Test
    public void test0569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0569");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str1 = feedType0.getEntryXPath();
        java.lang.String str2 = feedType0.getTypeXPath();
        java.lang.String str3 = feedType0.getDurationXPath();
        java.lang.String str4 = feedType0.getTypeXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "/rss/channel/item" + "'", str1, "/rss/channel/item");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "./enclosure/@type" + "'", str2, "./enclosure/@type");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "./duration" + "'", str3, "./duration");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "./enclosure/@type" + "'", str4, "./enclosure/@type");
    }

    @Test
    public void test0570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0570");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.lang.String str3 = cDMetadata0.getAlbum();
        java.util.List<java.lang.Integer> intList4 = cDMetadata0.getTracks();
        int int5 = cDMetadata0.getYear();
        java.util.List<java.lang.String> strList6 = cDMetadata0.getArtistNames();
        cDMetadata0.setDisc((int) (short) 100);
        net.sourceforge.atunes.model.CDMetadata cDMetadata9 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata9.setAlbumArtist("");
        java.lang.String str12 = cDMetadata9.getGenre();
        java.lang.String[] strArray14 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        cDMetadata9.setTrackNames((java.util.List<java.lang.String>) strList15);
        cDMetadata0.setArtistNames((java.util.List<java.lang.String>) strList15);
        java.util.List<java.lang.String> strList19 = cDMetadata0.getTrackNames();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass20 = strList19.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(intList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(strList19);
    }

    @Test
    public void test0571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0571");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        columnBean0.setVisible(false);
        columnBean0.setWidth(0);
        net.sourceforge.atunes.model.ColumnSort columnSort8 = columnBean0.getSort();
        net.sourceforge.atunes.model.ColumnSort columnSort9 = columnBean0.getSort();
        columnBean0.setOrder((int) (short) 100);
        columnBean0.setWidth((int) (short) 10);
        net.sourceforge.atunes.model.ColumnBean columnBean14 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean15 = columnBean14.isVisible();
        columnBean14.setOrder((int) (byte) -1);
        net.sourceforge.atunes.model.ColumnSort columnSort18 = net.sourceforge.atunes.model.ColumnSort.DESCENDING;
        columnBean14.setSort(columnSort18);
        int int20 = columnBean14.getOrder();
        net.sourceforge.atunes.model.ColumnSort columnSort21 = columnBean14.getSort();
        columnBean0.setSort(columnSort21);
        boolean boolean23 = columnBean0.isVisible();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(columnSort8);
        org.junit.Assert.assertNull(columnSort9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + columnSort18 + "' != '" + net.sourceforge.atunes.model.ColumnSort.DESCENDING + "'", columnSort18.equals(net.sourceforge.atunes.model.ColumnSort.DESCENDING));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + columnSort21 + "' != '" + net.sourceforge.atunes.model.ColumnSort.DESCENDING + "'", columnSort21.equals(net.sourceforge.atunes.model.ColumnSort.DESCENDING));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0572");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str1 = feedType0.getUrlXPath();
        java.lang.String str2 = feedType0.getNameXPath();
        java.lang.String str3 = feedType0.getDescriptionXPath();
        java.lang.String str4 = feedType0.getNameXPath();
        java.lang.String str5 = feedType0.getNameXPath();
        java.lang.String str6 = feedType0.getAuthorXPath();
        java.lang.String str7 = feedType0.getTypeXPath();
        java.lang.String str8 = feedType0.getDurationXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "./enclosure/@url" + "'", str1, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "/rss/channel/title" + "'", str2, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "./description" + "'", str3, "./description");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "/rss/channel/title" + "'", str4, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/rss/channel/title" + "'", str5, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "./author" + "'", str6, "./author");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "./enclosure/@type" + "'", str7, "./enclosure/@type");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "./duration" + "'", str8, "./duration");
    }

    @Test
    public void test0573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0573");
        java.lang.Throwable throwable0 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException1 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable0);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList2 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable3 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException4 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable3);
        java.lang.Throwable[] throwableArray5 = searchQuerySyntaxException4.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException6 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException4);
        java.lang.Throwable throwable7 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException8 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable7);
        java.lang.Throwable[] throwableArray9 = searchQuerySyntaxException8.getSuppressed();
        throwableRankList2.replaceItem((java.lang.Throwable) searchQuerySyntaxException4, (java.lang.Throwable) searchQuerySyntaxException8);
        searchQuerySyntaxException1.addSuppressed((java.lang.Throwable) searchQuerySyntaxException8);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException12 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException1);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException13 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException12);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException14 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException13);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException15 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException13);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException16 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException13);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
    }

    @Test
    public void test0574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0574");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        columnBean0.setVisible(false);
        net.sourceforge.atunes.model.ColumnSort columnSort6 = columnBean0.getSort();
        net.sourceforge.atunes.model.TextTagAttribute textTagAttribute7 = net.sourceforge.atunes.model.TextTagAttribute.COMPOSER;
        boolean boolean8 = columnBean0.equals((java.lang.Object) textTagAttribute7);
        columnBean0.setOrder(10);
        columnBean0.setOrder((int) ' ');
        int int13 = columnBean0.getWidth();
        net.sourceforge.atunes.model.CDMetadata cDMetadata14 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str15 = cDMetadata14.getGenre();
        java.util.List<java.lang.String> strList16 = cDMetadata14.getComposerNames();
        java.lang.String str17 = cDMetadata14.getAlbum();
        java.util.List<java.lang.Integer> intList18 = cDMetadata14.getTracks();
        int int19 = cDMetadata14.getDisc();
        java.lang.String[] strArray27 = new java.lang.String[] { "net.sourceforge.atunes.model.InconsistentRepositoryException", "./title", "1.0.0 ", "./title", "./duration", "mpc", "net.sourceforge.atunes.model.InconsistentRepositoryException" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        cDMetadata14.setArtistNames((java.util.List<java.lang.String>) strList28);
        java.lang.String str31 = cDMetadata14.getAlbum();
        java.lang.String str33 = cDMetadata14.getTitle(10);
        boolean boolean34 = columnBean0.equals((java.lang.Object) str33);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(columnSort6);
        org.junit.Assert.assertTrue("'" + textTagAttribute7 + "' != '" + net.sourceforge.atunes.model.TextTagAttribute.COMPOSER + "'", textTagAttribute7.equals(net.sourceforge.atunes.model.TextTagAttribute.COMPOSER));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(strList16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(intList18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test0575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0575");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType12 = applicationVersion9.getVersionType();
        int int13 = applicationVersion9.getMinorNumber();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType14 = applicationVersion9.getVersionType();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + versionType12 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType12.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + versionType14 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType14.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
    }

    @Test
    public void test0576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0576");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList3 = cDMetadata0.getTracks();
        cDMetadata0.setAlbumArtist("/rss/channel/title");
        java.util.List<java.lang.String> strList6 = cDMetadata0.getTrackNames();
        java.lang.String str7 = cDMetadata0.getAlbumArtist();
        java.lang.String str8 = cDMetadata0.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata9 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata9.setAlbumArtist("");
        java.lang.String str12 = cDMetadata9.getGenre();
        java.lang.String[] strArray14 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        cDMetadata9.setTrackNames((java.util.List<java.lang.String>) strList15);
        cDMetadata9.setYear((int) (short) 10);
        java.util.List<java.lang.String> strList20 = cDMetadata9.getComposerNames();
        cDMetadata9.setDisc(120);
        net.sourceforge.atunes.model.CDMetadata cDMetadata23 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str24 = cDMetadata23.getGenre();
        java.util.List<java.lang.String> strList25 = cDMetadata23.getComposerNames();
        java.lang.String str26 = cDMetadata23.getAlbum();
        java.util.List<java.lang.Integer> intList27 = cDMetadata23.getTracks();
        int int28 = cDMetadata23.getDisc();
        java.lang.String[] strArray36 = new java.lang.String[] { "net.sourceforge.atunes.model.InconsistentRepositoryException", "./title", "1.0.0 ", "./title", "./duration", "mpc", "net.sourceforge.atunes.model.InconsistentRepositoryException" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        cDMetadata23.setArtistNames((java.util.List<java.lang.String>) strList37);
        cDMetadata9.setTrackNames((java.util.List<java.lang.String>) strList37);
        cDMetadata0.setArtistNames((java.util.List<java.lang.String>) strList37);
        org.junit.Assert.assertNull(intList3);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/rss/channel/title" + "'", str7, "/rss/channel/title");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(strList20);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(strList25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(intList27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test0577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0577");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        fontSettings0.setUseFontSmoothing(false);
        net.sourceforge.atunes.model.IFontBean iFontBean3 = fontSettings0.getFont();
        boolean boolean4 = fontSettings0.isUseFontSmoothing();
        fontSettings0.setUseFontSmoothing(true);
        boolean boolean7 = fontSettings0.isUseFontSmoothingSettingsFromOs();
        org.junit.Assert.assertNull(iFontBean3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0578");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        int int1 = cDMetadata0.getYear();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata3 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str4 = cDMetadata3.getGenre();
        java.util.List<java.lang.String> strList5 = cDMetadata3.getComposerNames();
        java.lang.String str6 = cDMetadata3.getAlbum();
        java.util.List<java.lang.Integer> intList7 = cDMetadata3.getTracks();
        net.sourceforge.atunes.model.CDMetadata cDMetadata8 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata8.setAlbumArtist("");
        java.lang.String str12 = cDMetadata8.getTitle((int) (byte) -1);
        java.lang.String[] strArray14 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        cDMetadata8.setTrackNames((java.util.List<java.lang.String>) strList15);
        cDMetadata3.setTrackNames((java.util.List<java.lang.String>) strList15);
        cDMetadata3.setYear((int) (short) 1);
        net.sourceforge.atunes.model.CDMetadata cDMetadata21 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str22 = cDMetadata21.getGenre();
        java.util.List<java.lang.String> strList23 = cDMetadata21.getComposerNames();
        java.lang.String str24 = cDMetadata21.getAlbum();
        java.util.List<java.lang.Integer> intList25 = cDMetadata21.getTracks();
        int int26 = cDMetadata21.getYear();
        java.util.List<java.lang.String> strList27 = cDMetadata21.getArtistNames();
        cDMetadata21.setDisc((int) (short) 100);
        net.sourceforge.atunes.model.CDMetadata cDMetadata30 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str31 = cDMetadata30.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata32 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata32.setAlbumArtist("");
        java.lang.String str35 = cDMetadata32.getGenre();
        java.lang.String[] strArray37 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        cDMetadata32.setTrackNames((java.util.List<java.lang.String>) strList38);
        cDMetadata30.setComposerNames((java.util.List<java.lang.String>) strList38);
        net.sourceforge.atunes.model.CDMetadata cDMetadata42 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str43 = cDMetadata42.getGenre();
        java.util.List<java.lang.String> strList44 = cDMetadata42.getComposerNames();
        java.lang.String str45 = cDMetadata42.getAlbum();
        net.sourceforge.atunes.model.CDMetadata cDMetadata46 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata46.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList49 = cDMetadata46.getTracks();
        cDMetadata46.setAlbumArtist("/rss/channel/title");
        java.util.List<java.lang.String> strList52 = cDMetadata46.getTrackNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata53 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata53.setAlbumArtist("");
        java.lang.String str56 = cDMetadata53.getGenre();
        java.lang.String[] strArray58 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList59 = new java.util.ArrayList<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList59, strArray58);
        cDMetadata53.setTrackNames((java.util.List<java.lang.String>) strList59);
        cDMetadata46.setTrackNames((java.util.List<java.lang.String>) strList59);
        cDMetadata42.setTrackNames((java.util.List<java.lang.String>) strList59);
        cDMetadata30.setTrackNames((java.util.List<java.lang.String>) strList59);
        cDMetadata21.setArtistNames((java.util.List<java.lang.String>) strList59);
        cDMetadata3.setTrackNames((java.util.List<java.lang.String>) strList59);
        cDMetadata0.setComposerNames((java.util.List<java.lang.String>) strList59);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(intList7);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(strList23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(intList25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNull(strList27);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(strList44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(intList49);
        org.junit.Assert.assertNull(strList52);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
    }

    @Test
    public void test0579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0579");
        java.lang.Throwable throwable0 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException1 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable0);
        java.lang.Throwable[] throwableArray2 = searchQuerySyntaxException1.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException3 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException1);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException4 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException1);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList5 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable6 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException7 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable6);
        java.lang.Throwable[] throwableArray8 = searchQuerySyntaxException7.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException9 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException7);
        java.lang.Throwable throwable10 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException11 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable10);
        java.lang.Throwable[] throwableArray12 = searchQuerySyntaxException11.getSuppressed();
        throwableRankList5.replaceItem((java.lang.Throwable) searchQuerySyntaxException7, (java.lang.Throwable) searchQuerySyntaxException11);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException14 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException11);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException15 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException14);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException16 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchIndexNotAvailableException15);
        searchQuerySyntaxException4.addSuppressed((java.lang.Throwable) searchIndexNotAvailableException16);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException18 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException4);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException19 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchIndexNotAvailableException18);
        java.lang.String str20 = searchQuerySyntaxException19.toString();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "net.sourceforge.atunes.model.SearchQuerySyntaxException: net.sourceforge.atunes.model.SearchIndexNotAvailableException: net.sourceforge.atunes.model.SearchQuerySyntaxException: net.sourceforge.atunes.model.SearchQuerySyntaxException" + "'", str20, "net.sourceforge.atunes.model.SearchQuerySyntaxException: net.sourceforge.atunes.model.SearchIndexNotAvailableException: net.sourceforge.atunes.model.SearchQuerySyntaxException: net.sourceforge.atunes.model.SearchQuerySyntaxException");
    }

    @Test
    public void test0580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0580");
        java.lang.Throwable throwable0 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException1 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable0);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList2 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable3 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException4 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable3);
        java.lang.Throwable[] throwableArray5 = searchQuerySyntaxException4.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException6 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException4);
        java.lang.Throwable throwable7 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException8 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable7);
        java.lang.Throwable[] throwableArray9 = searchQuerySyntaxException8.getSuppressed();
        throwableRankList2.replaceItem((java.lang.Throwable) searchQuerySyntaxException4, (java.lang.Throwable) searchQuerySyntaxException8);
        searchQuerySyntaxException1.addSuppressed((java.lang.Throwable) searchQuerySyntaxException8);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException12 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException1);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException13 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException12);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException14 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException12);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList15 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList17 = throwableRankList15.getNFirstElements((int) (short) 100);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList18 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable19 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException20 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable19);
        java.lang.Throwable[] throwableArray21 = searchQuerySyntaxException20.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException22 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException20);
        java.lang.Throwable throwable23 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException24 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable23);
        java.lang.Throwable[] throwableArray25 = searchQuerySyntaxException24.getSuppressed();
        throwableRankList18.replaceItem((java.lang.Throwable) searchQuerySyntaxException20, (java.lang.Throwable) searchQuerySyntaxException24);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException27 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException24);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException28 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException27);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException29 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchIndexNotAvailableException28);
        java.lang.Integer int30 = throwableRankList15.getCount((java.lang.Throwable) searchIndexNotAvailableException28);
        java.lang.Throwable[] throwableArray31 = searchIndexNotAvailableException28.getSuppressed();
        searchQuerySyntaxException12.addSuppressed((java.lang.Throwable) searchIndexNotAvailableException28);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableList17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNull(int30);
        org.junit.Assert.assertNotNull(throwableArray31);
    }

    @Test
    public void test0581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0581");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType8 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion13 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType8, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str14 = applicationVersion13.getDate();
        java.lang.String str15 = applicationVersion13.toShortString();
        int int16 = applicationVersion13.getMajorNumber();
        int int17 = applicationVersion13.getMinorNumber();
        java.lang.String str18 = applicationVersion13.getName();
        java.lang.String str19 = applicationVersion13.getChanges();
        boolean boolean20 = columnBean0.equals((java.lang.Object) applicationVersion13);
        boolean boolean21 = columnBean0.isVisible();
        columnBean0.setOrder(10);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + versionType8 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType8.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "./title" + "'", str14, "./title");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1.0.0 " + "'", str15, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "mpc" + "'", str18, "mpc");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "./title" + "'", str19, "./title");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0582");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType11 = applicationVersion9.getVersionType();
        int int12 = applicationVersion9.getMajorNumber();
        java.lang.String str13 = applicationVersion9.getChanges();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertTrue("'" + versionType11 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType11.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "./title" + "'", str13, "./title");
    }

    @Test
    public void test0583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0583");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        net.sourceforge.atunes.model.InconsistentRepositoryException inconsistentRepositoryException1 = new net.sourceforge.atunes.model.InconsistentRepositoryException();
        net.sourceforge.atunes.model.InconsistentRepositoryException inconsistentRepositoryException2 = new net.sourceforge.atunes.model.InconsistentRepositoryException();
        throwableRankList0.replaceItem((java.lang.Throwable) inconsistentRepositoryException1, (java.lang.Throwable) inconsistentRepositoryException2);
        int int4 = throwableRankList0.size();
        java.lang.Throwable throwable5 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException6 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable5);
        java.lang.Throwable[] throwableArray7 = searchQuerySyntaxException6.getSuppressed();
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException8 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException6);
        throwableRankList0.addItem((java.lang.Throwable) searchQuerySyntaxException6);
        java.lang.Throwable throwable10 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException11 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable10);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList12 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable13 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException14 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable13);
        java.lang.Throwable[] throwableArray15 = searchQuerySyntaxException14.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException16 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException14);
        java.lang.Throwable throwable17 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException18 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable17);
        java.lang.Throwable[] throwableArray19 = searchQuerySyntaxException18.getSuppressed();
        throwableRankList12.replaceItem((java.lang.Throwable) searchQuerySyntaxException14, (java.lang.Throwable) searchQuerySyntaxException18);
        searchQuerySyntaxException11.addSuppressed((java.lang.Throwable) searchQuerySyntaxException18);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException22 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException11);
        java.lang.Throwable throwable23 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException24 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable23);
        java.lang.Throwable[] throwableArray25 = searchQuerySyntaxException24.getSuppressed();
        searchQuerySyntaxException11.addSuppressed((java.lang.Throwable) searchQuerySyntaxException24);
        java.lang.Integer int27 = throwableRankList0.getCount((java.lang.Throwable) searchQuerySyntaxException11);
        java.lang.Throwable throwable28 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException29 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable28);
        java.lang.Throwable[] throwableArray30 = searchQuerySyntaxException29.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException31 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException29);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException32 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException29);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList33 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable34 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException35 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable34);
        java.lang.Throwable[] throwableArray36 = searchQuerySyntaxException35.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException37 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException35);
        java.lang.Throwable throwable38 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException39 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable38);
        java.lang.Throwable[] throwableArray40 = searchQuerySyntaxException39.getSuppressed();
        throwableRankList33.replaceItem((java.lang.Throwable) searchQuerySyntaxException35, (java.lang.Throwable) searchQuerySyntaxException39);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException42 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException39);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException43 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException42);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException44 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchIndexNotAvailableException43);
        searchQuerySyntaxException32.addSuppressed((java.lang.Throwable) searchIndexNotAvailableException44);
        java.lang.Integer int46 = throwableRankList0.getCount((java.lang.Throwable) searchIndexNotAvailableException44);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNull(int27);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNull(int46);
    }

    @Test
    public void test0584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0584");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        net.sourceforge.atunes.model.AudioObjectProperty audioObjectProperty1 = net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY;
        boolean boolean2 = columnBean0.equals((java.lang.Object) audioObjectProperty1);
        int int3 = columnBean0.getWidth();
        int int4 = columnBean0.getOrder();
        net.sourceforge.atunes.model.CDMetadata cDMetadata5 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata5.setAlbumArtist("");
        java.lang.String str8 = cDMetadata5.getGenre();
        int int9 = cDMetadata5.getYear();
        int int10 = cDMetadata5.getYear();
        cDMetadata5.setGenre("./enclosure/@url");
        java.util.List<java.lang.String> strList13 = null;
        cDMetadata5.setTrackNames(strList13);
        cDMetadata5.setAlbumArtist("./link[@rel='enclosure']/@type");
        boolean boolean17 = columnBean0.equals((java.lang.Object) "./link[@rel='enclosure']/@type");
        net.sourceforge.atunes.model.CDMetadata cDMetadata18 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str19 = cDMetadata18.getGenre();
        java.util.List<java.lang.String> strList20 = cDMetadata18.getComposerNames();
        java.lang.String str21 = cDMetadata18.getAlbum();
        net.sourceforge.atunes.model.CDMetadata cDMetadata22 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata22.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList25 = cDMetadata22.getTracks();
        cDMetadata22.setAlbumArtist("/rss/channel/title");
        java.util.List<java.lang.String> strList28 = cDMetadata22.getTrackNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata29 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata29.setAlbumArtist("");
        java.lang.String str32 = cDMetadata29.getGenre();
        java.lang.String[] strArray34 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        cDMetadata29.setTrackNames((java.util.List<java.lang.String>) strList35);
        cDMetadata22.setTrackNames((java.util.List<java.lang.String>) strList35);
        cDMetadata18.setTrackNames((java.util.List<java.lang.String>) strList35);
        java.util.List<java.lang.String> strList40 = cDMetadata18.getTrackNames();
        boolean boolean41 = columnBean0.equals((java.lang.Object) cDMetadata18);
        java.lang.String str42 = cDMetadata18.getAlbum();
        java.lang.String str43 = cDMetadata18.getGenre();
        cDMetadata18.setYear((int) (short) -1);
        org.junit.Assert.assertTrue("'" + audioObjectProperty1 + "' != '" + net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY + "'", audioObjectProperty1.equals(net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(strList20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(intList25);
        org.junit.Assert.assertNull(strList28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(str43);
    }

    @Test
    public void test0585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0585");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.lang.String str3 = cDMetadata0.getAlbum();
        java.util.List<java.lang.Integer> intList4 = cDMetadata0.getTracks();
        net.sourceforge.atunes.model.CDMetadata cDMetadata5 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata5.setAlbumArtist("");
        java.lang.String str9 = cDMetadata5.getTitle((int) (byte) -1);
        java.lang.String[] strArray11 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        cDMetadata5.setTrackNames((java.util.List<java.lang.String>) strList12);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList12);
        cDMetadata0.setYear((int) (short) 1);
        int int18 = cDMetadata0.getDisc();
        cDMetadata0.setYear((int) ' ');
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(intList4);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test0586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0586");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.ATOM;
        java.lang.String str1 = feedType0.getTypeXPath();
        java.lang.String str2 = feedType0.getUrlXPath();
        java.lang.String str3 = feedType0.getDescriptionXPath();
        java.lang.String str4 = feedType0.getDurationXPath();
        java.lang.String str5 = feedType0.getEntryXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.ATOM + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.ATOM));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "./link[@rel='enclosure']/@type" + "'", str1, "./link[@rel='enclosure']/@type");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "./summary" + "'", str3, "./summary");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/feed/entry" + "'", str5, "/feed/entry");
    }

    @Test
    public void test0587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0587");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType11 = applicationVersion9.getVersionType();
        java.lang.String str12 = applicationVersion9.getDownloadURL();
        java.lang.String str13 = applicationVersion9.getDirectDownloadURL();
        java.lang.String str14 = applicationVersion9.getDownloadURL();
        java.lang.String str15 = applicationVersion9.getDate();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertTrue("'" + versionType11 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType11.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "./description" + "'", str12, "./description");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "./pubDate" + "'", str13, "./pubDate");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "./description" + "'", str14, "./description");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "./title" + "'", str15, "./title");
    }

    @Test
    public void test0588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0588");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        columnBean0.setVisible(false);
        columnBean0.setWidth(0);
        net.sourceforge.atunes.model.ColumnSort columnSort8 = columnBean0.getSort();
        int int9 = columnBean0.getWidth();
        net.sourceforge.atunes.model.ColumnSort columnSort10 = columnBean0.getSort();
        columnBean0.setWidth(150);
        columnBean0.setWidth((int) ' ');
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList15 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList17 = throwableRankList15.getNFirstElements((int) (short) 10);
        throwableRankList15.clear();
        java.util.List<java.lang.Integer> intList20 = throwableRankList15.getNFirstElementCounts(150);
        java.util.List<java.lang.Throwable> throwableList22 = throwableRankList15.getNFirstElements((int) (short) 100);
        throwableRankList15.clear();
        throwableRankList15.clear();
        boolean boolean25 = columnBean0.equals((java.lang.Object) throwableRankList15);
        columnBean0.setOrder((int) ' ');
        columnBean0.setOrder((int) (byte) 100);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(columnSort8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(columnSort10);
        org.junit.Assert.assertNotNull(throwableList17);
        org.junit.Assert.assertNotNull(intList20);
        org.junit.Assert.assertNotNull(throwableList22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test0589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0589");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType11 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.BETA;
        boolean boolean12 = applicationVersion9.equals((java.lang.Object) versionType11);
        java.lang.String str13 = applicationVersion9.getChanges();
        int int14 = applicationVersion9.getRevisionNumber();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertTrue("'" + versionType11 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.BETA + "'", versionType11.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.BETA));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "./title" + "'", str13, "./title");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test0590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0590");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        net.sourceforge.atunes.model.SubmissionState submissionState2 = net.sourceforge.atunes.model.SubmissionState.PENDING;
        boolean boolean3 = columnBean0.equals((java.lang.Object) submissionState2);
        columnBean0.setVisible(false);
        net.sourceforge.atunes.model.ColumnSort columnSort6 = net.sourceforge.atunes.model.ColumnSort.ASCENDING;
        columnBean0.setSort(columnSort6);
        int int8 = columnBean0.getWidth();
        int int9 = columnBean0.getWidth();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + submissionState2 + "' != '" + net.sourceforge.atunes.model.SubmissionState.PENDING + "'", submissionState2.equals(net.sourceforge.atunes.model.SubmissionState.PENDING));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + columnSort6 + "' != '" + net.sourceforge.atunes.model.ColumnSort.ASCENDING + "'", columnSort6.equals(net.sourceforge.atunes.model.ColumnSort.ASCENDING));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test0591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0591");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        net.sourceforge.atunes.model.InconsistentRepositoryException inconsistentRepositoryException1 = new net.sourceforge.atunes.model.InconsistentRepositoryException();
        net.sourceforge.atunes.model.InconsistentRepositoryException inconsistentRepositoryException2 = new net.sourceforge.atunes.model.InconsistentRepositoryException();
        throwableRankList0.replaceItem((java.lang.Throwable) inconsistentRepositoryException1, (java.lang.Throwable) inconsistentRepositoryException2);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList4 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList6 = throwableRankList4.getNFirstElements((int) (short) 10);
        throwableRankList4.clear();
        java.util.List<java.lang.Integer> intList9 = throwableRankList4.getNFirstElementCounts(150);
        throwableRankList4.clear();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList11 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable12 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException13 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable12);
        java.lang.Throwable[] throwableArray14 = searchQuerySyntaxException13.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException15 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException13);
        java.lang.Throwable throwable16 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException17 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable16);
        java.lang.Throwable[] throwableArray18 = searchQuerySyntaxException17.getSuppressed();
        throwableRankList11.replaceItem((java.lang.Throwable) searchQuerySyntaxException13, (java.lang.Throwable) searchQuerySyntaxException17);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException20 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException17);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException21 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException17);
        java.lang.Throwable throwable22 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException23 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable22);
        java.lang.Throwable[] throwableArray24 = searchQuerySyntaxException23.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException25 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException23);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException26 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException23);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList27 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable28 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException29 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable28);
        java.lang.Throwable[] throwableArray30 = searchQuerySyntaxException29.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException31 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException29);
        java.lang.Throwable throwable32 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException33 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable32);
        java.lang.Throwable[] throwableArray34 = searchQuerySyntaxException33.getSuppressed();
        throwableRankList27.replaceItem((java.lang.Throwable) searchQuerySyntaxException29, (java.lang.Throwable) searchQuerySyntaxException33);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException36 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException33);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException37 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException36);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException38 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchIndexNotAvailableException37);
        searchQuerySyntaxException26.addSuppressed((java.lang.Throwable) searchIndexNotAvailableException38);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException40 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException26);
        throwableRankList4.replaceItem((java.lang.Throwable) searchIndexNotAvailableException21, (java.lang.Throwable) searchQuerySyntaxException40);
        inconsistentRepositoryException2.addSuppressed((java.lang.Throwable) searchQuerySyntaxException40);
        org.junit.Assert.assertNotNull(throwableList6);
        org.junit.Assert.assertNotNull(intList9);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray34);
    }

    @Test
    public void test0592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0592");
        net.sourceforge.atunes.model.LookAndFeelBean lookAndFeelBean0 = new net.sourceforge.atunes.model.LookAndFeelBean();
        lookAndFeelBean0.setName("./summary");
        java.lang.String str3 = lookAndFeelBean0.getSkin();
        lookAndFeelBean0.setName("./description");
        java.lang.String str6 = lookAndFeelBean0.getName();
        java.lang.String str7 = lookAndFeelBean0.getName();
        lookAndFeelBean0.setSkin("./updated");
        java.lang.String str10 = lookAndFeelBean0.getName();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "./description" + "'", str6, "./description");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "./description" + "'", str7, "./description");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./description" + "'", str10, "./description");
    }

    @Test
    public void test0593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0593");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        int int1 = cDMetadata0.getYear();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        net.sourceforge.atunes.model.FontSettings fontSettings3 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata4 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata4.setAlbumArtist("");
        boolean boolean7 = fontSettings3.equals((java.lang.Object) cDMetadata4);
        java.lang.String str8 = cDMetadata4.getAlbum();
        java.lang.String str9 = cDMetadata4.getAlbum();
        java.lang.String str11 = cDMetadata4.getTitle(1);
        java.util.List<java.lang.String> strList12 = cDMetadata4.getTrackNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata13 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str14 = cDMetadata13.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata15 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata15.setAlbumArtist("");
        java.lang.String str18 = cDMetadata15.getGenre();
        java.lang.String[] strArray20 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        cDMetadata15.setTrackNames((java.util.List<java.lang.String>) strList21);
        cDMetadata13.setComposerNames((java.util.List<java.lang.String>) strList21);
        cDMetadata4.setComposerNames((java.util.List<java.lang.String>) strList21);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList21);
        java.util.List<java.lang.String> strList27 = cDMetadata0.getTrackNames();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(strList12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strList27);
    }

    @Test
    public void test0594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0594");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable1 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException2 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable1);
        java.lang.Throwable[] throwableArray3 = searchQuerySyntaxException2.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException4 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException2);
        java.lang.Throwable throwable5 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException6 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable5);
        java.lang.Throwable[] throwableArray7 = searchQuerySyntaxException6.getSuppressed();
        throwableRankList0.replaceItem((java.lang.Throwable) searchQuerySyntaxException2, (java.lang.Throwable) searchQuerySyntaxException6);
        java.util.List<java.lang.Throwable> throwableList9 = throwableRankList0.getOrder();
        java.lang.Throwable throwable10 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException11 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable10);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList12 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable13 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException14 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable13);
        java.lang.Throwable[] throwableArray15 = searchQuerySyntaxException14.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException16 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException14);
        java.lang.Throwable throwable17 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException18 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable17);
        java.lang.Throwable[] throwableArray19 = searchQuerySyntaxException18.getSuppressed();
        throwableRankList12.replaceItem((java.lang.Throwable) searchQuerySyntaxException14, (java.lang.Throwable) searchQuerySyntaxException18);
        searchQuerySyntaxException11.addSuppressed((java.lang.Throwable) searchQuerySyntaxException18);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException22 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException11);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException23 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException11);
        java.lang.Integer int24 = throwableRankList0.getCount((java.lang.Throwable) searchIndexNotAvailableException23);
        java.util.List<java.lang.Integer> intList26 = throwableRankList0.getNFirstElementCounts((int) '#');
        java.util.List<java.lang.Integer> intList28 = throwableRankList0.getNFirstElementCounts((int) (short) 100);
        int int29 = throwableRankList0.size();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableList9);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNotNull(intList26);
        org.junit.Assert.assertNotNull(intList28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test0595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0595");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("HTTP_PROXY");
        net.sourceforge.atunes.model.CDMetadata cDMetadata3 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata3.setAlbumArtist("");
        java.lang.String str7 = cDMetadata3.getTitle((int) (byte) -1);
        net.sourceforge.atunes.model.CDMetadata cDMetadata8 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata8.setAlbumArtist("");
        java.lang.String str11 = cDMetadata8.getGenre();
        int int12 = cDMetadata8.getYear();
        int int13 = cDMetadata8.getYear();
        net.sourceforge.atunes.model.CDMetadata cDMetadata14 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str15 = cDMetadata14.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata16 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata16.setAlbumArtist("");
        java.lang.String str19 = cDMetadata16.getGenre();
        java.lang.String[] strArray21 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        cDMetadata16.setTrackNames((java.util.List<java.lang.String>) strList22);
        cDMetadata14.setComposerNames((java.util.List<java.lang.String>) strList22);
        cDMetadata8.setTrackNames((java.util.List<java.lang.String>) strList22);
        net.sourceforge.atunes.model.CDMetadata cDMetadata27 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str28 = cDMetadata27.getGenre();
        java.util.List<java.lang.String> strList29 = cDMetadata27.getComposerNames();
        java.lang.String str30 = cDMetadata27.getAlbum();
        java.util.List<java.lang.Integer> intList31 = cDMetadata27.getTracks();
        int int32 = cDMetadata27.getDisc();
        java.lang.String[] strArray40 = new java.lang.String[] { "net.sourceforge.atunes.model.InconsistentRepositoryException", "./title", "1.0.0 ", "./title", "./duration", "mpc", "net.sourceforge.atunes.model.InconsistentRepositoryException" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        cDMetadata27.setArtistNames((java.util.List<java.lang.String>) strList41);
        cDMetadata8.setArtistNames((java.util.List<java.lang.String>) strList41);
        cDMetadata3.setComposerNames((java.util.List<java.lang.String>) strList41);
        cDMetadata3.setDisc((int) (byte) 1);
        java.util.List<java.lang.String> strList48 = cDMetadata3.getTrackNames();
        java.lang.Integer[] intArray54 = new java.lang.Integer[] { 120, 2, 2, 0, 120 };
        java.util.ArrayList<java.lang.Integer> intList55 = new java.util.ArrayList<java.lang.Integer>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) intList55, intArray54);
        cDMetadata3.setTracks((java.util.List<java.lang.Integer>) intList55);
        cDMetadata0.setTracks((java.util.List<java.lang.Integer>) intList55);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(intList31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNull(strList48);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test0596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0596");
        net.sourceforge.atunes.model.LookAndFeelBean lookAndFeelBean0 = new net.sourceforge.atunes.model.LookAndFeelBean();
        java.lang.String str1 = lookAndFeelBean0.getSkin();
        lookAndFeelBean0.setSkin("./enclosure/@url");
        lookAndFeelBean0.setSkin("hi!");
        java.lang.String str6 = lookAndFeelBean0.getSkin();
        java.lang.String str7 = lookAndFeelBean0.getSkin();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
    }

    @Test
    public void test0597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0597");
        net.sourceforge.atunes.model.LookAndFeelBean lookAndFeelBean0 = new net.sourceforge.atunes.model.LookAndFeelBean();
        lookAndFeelBean0.setName("./summary");
        java.lang.String str3 = lookAndFeelBean0.getSkin();
        lookAndFeelBean0.setName("./summary");
        lookAndFeelBean0.setSkin("10.52.35  ");
        lookAndFeelBean0.setName("/feed/title");
        lookAndFeelBean0.setName("net.sourceforge.atunes.model.SearchIndexNotAvailableException: net.sourceforge.atunes.model.SearchQuerySyntaxException");
        java.lang.String str12 = lookAndFeelBean0.getName();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "net.sourceforge.atunes.model.SearchIndexNotAvailableException: net.sourceforge.atunes.model.SearchQuerySyntaxException" + "'", str12, "net.sourceforge.atunes.model.SearchIndexNotAvailableException: net.sourceforge.atunes.model.SearchQuerySyntaxException");
    }

    @Test
    public void test0598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0598");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str1 = feedType0.getUrlXPath();
        java.lang.String str2 = feedType0.getDateXPath();
        java.lang.String str3 = feedType0.getTitleXPath();
        java.lang.String str4 = feedType0.getDurationXPath();
        java.lang.String str5 = feedType0.getDurationXPath();
        java.lang.String str6 = feedType0.getUrlXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "./enclosure/@url" + "'", str1, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "./pubDate" + "'", str2, "./pubDate");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "./title" + "'", str3, "./title");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "./duration" + "'", str4, "./duration");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "./duration" + "'", str5, "./duration");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "./enclosure/@url" + "'", str6, "./enclosure/@url");
    }

    @Test
    public void test0599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0599");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList3 = cDMetadata0.getTracks();
        cDMetadata0.setAlbumArtist("/rss/channel/title");
        java.util.List<java.lang.String> strList6 = cDMetadata0.getTrackNames();
        cDMetadata0.setAlbum("/rss/channel/item");
        cDMetadata0.setAlbum("");
        cDMetadata0.setYear((int) (byte) -1);
        java.util.List<java.lang.String> strList13 = cDMetadata0.getTrackNames();
        java.util.List<java.lang.String> strList14 = cDMetadata0.getArtistNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata15 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata15.setAlbumArtist("");
        java.lang.String str19 = cDMetadata15.getTitle((int) (byte) -1);
        java.lang.String[] strArray21 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        cDMetadata15.setTrackNames((java.util.List<java.lang.String>) strList22);
        cDMetadata15.setAlbumArtist("/rss/channel/item");
        net.sourceforge.atunes.model.CDMetadata cDMetadata27 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str28 = cDMetadata27.getGenre();
        java.util.List<java.lang.String> strList29 = cDMetadata27.getComposerNames();
        java.lang.String str30 = cDMetadata27.getAlbum();
        java.util.List<java.lang.Integer> intList31 = cDMetadata27.getTracks();
        net.sourceforge.atunes.model.CDMetadata cDMetadata32 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata32.setAlbumArtist("");
        java.lang.String str36 = cDMetadata32.getTitle((int) (byte) -1);
        java.lang.String[] strArray38 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        cDMetadata32.setTrackNames((java.util.List<java.lang.String>) strList39);
        cDMetadata27.setTrackNames((java.util.List<java.lang.String>) strList39);
        cDMetadata15.setTrackNames((java.util.List<java.lang.String>) strList39);
        cDMetadata0.setArtistNames((java.util.List<java.lang.String>) strList39);
        cDMetadata0.setGenre("./author/name");
        org.junit.Assert.assertNull(intList3);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertNull(strList13);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(intList31);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test0600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0600");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.lang.String str4 = cDMetadata0.getTitle((int) (byte) -1);
        cDMetadata0.setDisc(100);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList7 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList9 = throwableRankList7.getNFirstElements((int) (short) 10);
        throwableRankList7.clear();
        java.util.List<java.lang.Integer> intList12 = throwableRankList7.getNFirstElementCounts(150);
        cDMetadata0.setTracks(intList12);
        java.util.List<java.lang.String> strList14 = cDMetadata0.getComposerNames();
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(throwableList9);
        org.junit.Assert.assertNotNull(intList12);
        org.junit.Assert.assertNull(strList14);
    }

    @Test
    public void test0601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0601");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        columnBean0.setVisible(false);
        net.sourceforge.atunes.model.ColumnSort columnSort6 = columnBean0.getSort();
        net.sourceforge.atunes.model.TextTagAttribute textTagAttribute7 = net.sourceforge.atunes.model.TextTagAttribute.COMPOSER;
        boolean boolean8 = columnBean0.equals((java.lang.Object) textTagAttribute7);
        columnBean0.setVisible(true);
        columnBean0.setOrder((int) (short) 100);
        net.sourceforge.atunes.model.ColumnSort columnSort13 = columnBean0.getSort();
        int int14 = columnBean0.getOrder();
        columnBean0.setVisible(false);
        boolean boolean17 = columnBean0.isVisible();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(columnSort6);
        org.junit.Assert.assertTrue("'" + textTagAttribute7 + "' != '" + net.sourceforge.atunes.model.TextTagAttribute.COMPOSER + "'", textTagAttribute7.equals(net.sourceforge.atunes.model.TextTagAttribute.COMPOSER));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(columnSort13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0602");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata1 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata1.setAlbumArtist("");
        boolean boolean4 = fontSettings0.equals((java.lang.Object) cDMetadata1);
        fontSettings0.setUseFontSmoothing(true);
        fontSettings0.setUseFontSmoothing(false);
        fontSettings0.setUseFontSmoothingSettingsFromOs(true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0603");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable1 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException2 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable1);
        java.lang.Throwable[] throwableArray3 = searchQuerySyntaxException2.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException4 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException2);
        java.lang.Throwable throwable5 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException6 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable5);
        java.lang.Throwable[] throwableArray7 = searchQuerySyntaxException6.getSuppressed();
        throwableRankList0.replaceItem((java.lang.Throwable) searchQuerySyntaxException2, (java.lang.Throwable) searchQuerySyntaxException6);
        java.util.List<java.lang.Throwable> throwableList9 = throwableRankList0.getOrder();
        java.util.List<java.lang.Throwable> throwableList10 = throwableRankList0.getOrder();
        java.lang.Throwable throwable11 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException12 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable11);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList13 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable14 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException15 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable14);
        java.lang.Throwable[] throwableArray16 = searchQuerySyntaxException15.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException17 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException15);
        java.lang.Throwable throwable18 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException19 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable18);
        java.lang.Throwable[] throwableArray20 = searchQuerySyntaxException19.getSuppressed();
        throwableRankList13.replaceItem((java.lang.Throwable) searchQuerySyntaxException15, (java.lang.Throwable) searchQuerySyntaxException19);
        searchQuerySyntaxException12.addSuppressed((java.lang.Throwable) searchQuerySyntaxException19);
        java.lang.Throwable[] throwableArray23 = searchQuerySyntaxException12.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException24 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException12);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException25 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchIndexNotAvailableException24);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList26 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        net.sourceforge.atunes.model.InconsistentRepositoryException inconsistentRepositoryException27 = new net.sourceforge.atunes.model.InconsistentRepositoryException();
        net.sourceforge.atunes.model.InconsistentRepositoryException inconsistentRepositoryException28 = new net.sourceforge.atunes.model.InconsistentRepositoryException();
        throwableRankList26.replaceItem((java.lang.Throwable) inconsistentRepositoryException27, (java.lang.Throwable) inconsistentRepositoryException28);
        int int30 = throwableRankList26.size();
        java.lang.Throwable throwable31 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException32 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable31);
        java.lang.Throwable[] throwableArray33 = searchQuerySyntaxException32.getSuppressed();
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException34 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException32);
        throwableRankList26.addItem((java.lang.Throwable) searchQuerySyntaxException32);
        java.lang.Throwable throwable36 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException37 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable36);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList38 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable39 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException40 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable39);
        java.lang.Throwable[] throwableArray41 = searchQuerySyntaxException40.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException42 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException40);
        java.lang.Throwable throwable43 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException44 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable43);
        java.lang.Throwable[] throwableArray45 = searchQuerySyntaxException44.getSuppressed();
        throwableRankList38.replaceItem((java.lang.Throwable) searchQuerySyntaxException40, (java.lang.Throwable) searchQuerySyntaxException44);
        searchQuerySyntaxException37.addSuppressed((java.lang.Throwable) searchQuerySyntaxException44);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException48 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException37);
        java.lang.Throwable throwable49 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException50 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable49);
        java.lang.Throwable[] throwableArray51 = searchQuerySyntaxException50.getSuppressed();
        searchQuerySyntaxException37.addSuppressed((java.lang.Throwable) searchQuerySyntaxException50);
        java.lang.Integer int53 = throwableRankList26.getCount((java.lang.Throwable) searchQuerySyntaxException37);
        java.lang.Throwable throwable54 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException55 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable54);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList56 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable57 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException58 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable57);
        java.lang.Throwable[] throwableArray59 = searchQuerySyntaxException58.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException60 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException58);
        java.lang.Throwable throwable61 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException62 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable61);
        java.lang.Throwable[] throwableArray63 = searchQuerySyntaxException62.getSuppressed();
        throwableRankList56.replaceItem((java.lang.Throwable) searchQuerySyntaxException58, (java.lang.Throwable) searchQuerySyntaxException62);
        searchQuerySyntaxException55.addSuppressed((java.lang.Throwable) searchQuerySyntaxException62);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException66 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException55);
        java.lang.Throwable throwable67 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException68 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable67);
        java.lang.Throwable[] throwableArray69 = searchQuerySyntaxException68.getSuppressed();
        searchQuerySyntaxException55.addSuppressed((java.lang.Throwable) searchQuerySyntaxException68);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException71 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException55);
        java.lang.Integer int72 = throwableRankList26.getCount((java.lang.Throwable) searchQuerySyntaxException55);
        java.lang.Throwable throwable73 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException74 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable73);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList75 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable76 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException77 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable76);
        java.lang.Throwable[] throwableArray78 = searchQuerySyntaxException77.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException79 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException77);
        java.lang.Throwable throwable80 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException81 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable80);
        java.lang.Throwable[] throwableArray82 = searchQuerySyntaxException81.getSuppressed();
        throwableRankList75.replaceItem((java.lang.Throwable) searchQuerySyntaxException77, (java.lang.Throwable) searchQuerySyntaxException81);
        searchQuerySyntaxException74.addSuppressed((java.lang.Throwable) searchQuerySyntaxException81);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException85 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException74);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException86 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException85);
        java.lang.Integer int87 = throwableRankList26.getCount((java.lang.Throwable) searchQuerySyntaxException86);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException88 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException86);
        throwableRankList0.replaceItem((java.lang.Throwable) searchIndexNotAvailableException24, (java.lang.Throwable) searchQuerySyntaxException88);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableList9);
        org.junit.Assert.assertNotNull(throwableList10);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNull(int53);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNull(int72);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNull(int87);
    }

    @Test
    public void test0604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0604");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.lang.String str3 = cDMetadata0.getAlbum();
        java.util.List<java.lang.Integer> intList4 = cDMetadata0.getTracks();
        int int5 = cDMetadata0.getYear();
        java.util.List<java.lang.String> strList6 = cDMetadata0.getArtistNames();
        cDMetadata0.setDisc((int) (short) 100);
        net.sourceforge.atunes.model.CDMetadata cDMetadata9 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata9.setAlbumArtist("");
        java.lang.String str12 = cDMetadata9.getGenre();
        java.lang.String[] strArray14 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        cDMetadata9.setTrackNames((java.util.List<java.lang.String>) strList15);
        cDMetadata0.setArtistNames((java.util.List<java.lang.String>) strList15);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList19 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable20 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException21 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable20);
        java.lang.Throwable[] throwableArray22 = searchQuerySyntaxException21.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException23 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException21);
        java.lang.Throwable throwable24 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException25 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable24);
        java.lang.Throwable[] throwableArray26 = searchQuerySyntaxException25.getSuppressed();
        throwableRankList19.replaceItem((java.lang.Throwable) searchQuerySyntaxException21, (java.lang.Throwable) searchQuerySyntaxException25);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList28 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable29 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException30 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable29);
        java.lang.Throwable[] throwableArray31 = searchQuerySyntaxException30.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException32 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException30);
        java.lang.Throwable throwable33 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException34 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable33);
        java.lang.Throwable[] throwableArray35 = searchQuerySyntaxException34.getSuppressed();
        throwableRankList28.replaceItem((java.lang.Throwable) searchQuerySyntaxException30, (java.lang.Throwable) searchQuerySyntaxException34);
        java.lang.Integer int37 = throwableRankList19.getCount((java.lang.Throwable) searchQuerySyntaxException34);
        java.lang.Throwable throwable38 = null;
        java.lang.Throwable throwable39 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException40 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable39);
        throwableRankList19.replaceItem(throwable38, (java.lang.Throwable) searchQuerySyntaxException40);
        java.util.List<java.lang.Integer> intList43 = throwableRankList19.getNFirstElementCounts((int) (byte) 1);
        cDMetadata0.setTracks(intList43);
        cDMetadata0.setDisc((int) (short) 1);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(intList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNull(int37);
        org.junit.Assert.assertNotNull(intList43);
    }

    @Test
    public void test0605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0605");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.lang.String str3 = cDMetadata0.getGenre();
        int int4 = cDMetadata0.getYear();
        java.util.List<java.lang.Integer> intList5 = cDMetadata0.getTracks();
        int int6 = cDMetadata0.getYear();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(intList5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test0606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0606");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.toString();
        int int11 = applicationVersion9.getMajorNumber();
        java.lang.String str12 = applicationVersion9.getName();
        java.lang.String str13 = applicationVersion9.getName();
        java.lang.String str14 = applicationVersion9.getDirectDownloadURL();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1.0.0 mpc " + "'", str10, "1.0.0 mpc ");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "mpc" + "'", str12, "mpc");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "mpc" + "'", str13, "mpc");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "./pubDate" + "'", str14, "./pubDate");
    }

    @Test
    public void test0607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0607");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        net.sourceforge.atunes.model.InconsistentRepositoryException inconsistentRepositoryException1 = new net.sourceforge.atunes.model.InconsistentRepositoryException();
        net.sourceforge.atunes.model.InconsistentRepositoryException inconsistentRepositoryException2 = new net.sourceforge.atunes.model.InconsistentRepositoryException();
        throwableRankList0.replaceItem((java.lang.Throwable) inconsistentRepositoryException1, (java.lang.Throwable) inconsistentRepositoryException2);
        int int4 = throwableRankList0.size();
        java.util.List<java.lang.Throwable> throwableList6 = throwableRankList0.getNFirstElements((int) (byte) 10);
        java.lang.Throwable throwable7 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException8 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable7);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList9 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable10 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException11 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable10);
        java.lang.Throwable[] throwableArray12 = searchQuerySyntaxException11.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException13 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException11);
        java.lang.Throwable throwable14 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException15 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable14);
        java.lang.Throwable[] throwableArray16 = searchQuerySyntaxException15.getSuppressed();
        throwableRankList9.replaceItem((java.lang.Throwable) searchQuerySyntaxException11, (java.lang.Throwable) searchQuerySyntaxException15);
        searchQuerySyntaxException8.addSuppressed((java.lang.Throwable) searchQuerySyntaxException15);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException19 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException8);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException20 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException19);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException21 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException20);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException22 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException20);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException23 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException22);
        java.lang.Integer int24 = throwableRankList0.getCount((java.lang.Throwable) searchQuerySyntaxException22);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList25 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList27 = throwableRankList25.getNFirstElements((int) (short) 10);
        throwableRankList25.clear();
        java.util.List<java.lang.Integer> intList30 = throwableRankList25.getNFirstElementCounts((int) (short) 0);
        int int31 = throwableRankList25.size();
        java.lang.Throwable throwable32 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException33 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable32);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList34 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable35 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException36 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable35);
        java.lang.Throwable[] throwableArray37 = searchQuerySyntaxException36.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException38 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException36);
        java.lang.Throwable throwable39 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException40 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable39);
        java.lang.Throwable[] throwableArray41 = searchQuerySyntaxException40.getSuppressed();
        throwableRankList34.replaceItem((java.lang.Throwable) searchQuerySyntaxException36, (java.lang.Throwable) searchQuerySyntaxException40);
        searchQuerySyntaxException33.addSuppressed((java.lang.Throwable) searchQuerySyntaxException40);
        java.lang.Throwable[] throwableArray44 = searchQuerySyntaxException40.getSuppressed();
        java.lang.Integer int45 = throwableRankList25.getCount((java.lang.Throwable) searchQuerySyntaxException40);
        java.lang.Integer int46 = throwableRankList0.getCount((java.lang.Throwable) searchQuerySyntaxException40);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(throwableList6);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNotNull(throwableList27);
        org.junit.Assert.assertNotNull(intList30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNull(int45);
        org.junit.Assert.assertNull(int46);
    }

    @Test
    public void test0608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0608");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        net.sourceforge.atunes.model.AudioObjectProperty audioObjectProperty1 = net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY;
        boolean boolean2 = columnBean0.equals((java.lang.Object) audioObjectProperty1);
        int int3 = columnBean0.getWidth();
        int int4 = columnBean0.getOrder();
        net.sourceforge.atunes.model.CDMetadata cDMetadata5 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata5.setAlbumArtist("");
        java.lang.String str8 = cDMetadata5.getGenre();
        int int9 = cDMetadata5.getYear();
        int int10 = cDMetadata5.getYear();
        cDMetadata5.setGenre("./enclosure/@url");
        java.util.List<java.lang.String> strList13 = null;
        cDMetadata5.setTrackNames(strList13);
        cDMetadata5.setAlbumArtist("./link[@rel='enclosure']/@type");
        boolean boolean17 = columnBean0.equals((java.lang.Object) "./link[@rel='enclosure']/@type");
        columnBean0.setVisible(true);
        columnBean0.setVisible(false);
        net.sourceforge.atunes.model.LocalAudioObjectFormat localAudioObjectFormat22 = net.sourceforge.atunes.model.LocalAudioObjectFormat.WAV;
        java.lang.String str23 = localAudioObjectFormat22.getExtension();
        boolean boolean24 = columnBean0.equals((java.lang.Object) str23);
        org.junit.Assert.assertTrue("'" + audioObjectProperty1 + "' != '" + net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY + "'", audioObjectProperty1.equals(net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + localAudioObjectFormat22 + "' != '" + net.sourceforge.atunes.model.LocalAudioObjectFormat.WAV + "'", localAudioObjectFormat22.equals(net.sourceforge.atunes.model.LocalAudioObjectFormat.WAV));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "wav" + "'", str23, "wav");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0609");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.lang.String str3 = cDMetadata0.getGenre();
        int int4 = cDMetadata0.getYear();
        int int5 = cDMetadata0.getYear();
        net.sourceforge.atunes.model.CDMetadata cDMetadata6 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str7 = cDMetadata6.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata8 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata8.setAlbumArtist("");
        java.lang.String str11 = cDMetadata8.getGenre();
        java.lang.String[] strArray13 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        cDMetadata8.setTrackNames((java.util.List<java.lang.String>) strList14);
        cDMetadata6.setComposerNames((java.util.List<java.lang.String>) strList14);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList14);
        net.sourceforge.atunes.model.CDMetadata cDMetadata19 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str20 = cDMetadata19.getGenre();
        java.util.List<java.lang.String> strList21 = cDMetadata19.getComposerNames();
        java.lang.String str22 = cDMetadata19.getAlbum();
        java.util.List<java.lang.Integer> intList23 = cDMetadata19.getTracks();
        int int24 = cDMetadata19.getDisc();
        java.lang.String[] strArray32 = new java.lang.String[] { "net.sourceforge.atunes.model.InconsistentRepositoryException", "./title", "1.0.0 ", "./title", "./duration", "mpc", "net.sourceforge.atunes.model.InconsistentRepositoryException" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        cDMetadata19.setArtistNames((java.util.List<java.lang.String>) strList33);
        cDMetadata0.setArtistNames((java.util.List<java.lang.String>) strList33);
        java.util.List<java.lang.String> strList37 = null;
        cDMetadata0.setArtistNames(strList37);
        java.util.List<java.lang.String> strList39 = cDMetadata0.getComposerNames();
        int int40 = cDMetadata0.getYear();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(strList21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(intList23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(strList39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test0610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0610");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType8 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion13 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType8, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str14 = applicationVersion13.getDate();
        java.lang.String str15 = applicationVersion13.toShortString();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType16 = applicationVersion13.getVersionType();
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion21 = new net.sourceforge.atunes.model.ApplicationVersion("1.0.0 ", (int) (short) 10, (int) '4', (int) '#', versionType16, "", "./enclosure/@url", "SOCKS_PROXY", "./enclosure/@url");
        java.lang.String str22 = applicationVersion21.getName();
        java.lang.String str23 = applicationVersion21.toString();
        net.sourceforge.atunes.model.FeedType feedType24 = net.sourceforge.atunes.model.FeedType.ATOM;
        java.lang.String str25 = feedType24.getTypeXPath();
        java.lang.String str26 = feedType24.getUrlXPath();
        boolean boolean27 = applicationVersion21.equals((java.lang.Object) feedType24);
        int int28 = applicationVersion21.getRevisionNumber();
        java.lang.String str29 = applicationVersion21.getChanges();
        org.junit.Assert.assertTrue("'" + versionType8 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType8.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "./title" + "'", str14, "./title");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1.0.0 " + "'", str15, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + versionType16 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType16.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "10.52.35  " + "'", str23, "10.52.35  ");
        org.junit.Assert.assertTrue("'" + feedType24 + "' != '" + net.sourceforge.atunes.model.FeedType.ATOM + "'", feedType24.equals(net.sourceforge.atunes.model.FeedType.ATOM));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "./link[@rel='enclosure']/@type" + "'", str25, "./link[@rel='enclosure']/@type");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35 + "'", int28 == 35);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "./enclosure/@url" + "'", str29, "./enclosure/@url");
    }

    @Test
    public void test0611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0611");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList2 = throwableRankList0.getNFirstElements((int) (short) 10);
        throwableRankList0.clear();
        java.util.List<java.lang.Integer> intList5 = throwableRankList0.getNFirstElementCounts(150);
        throwableRankList0.clear();
        java.util.List<java.lang.Throwable> throwableList8 = throwableRankList0.getNFirstElements(10);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList9 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList11 = throwableRankList9.getNFirstElements((int) (short) 100);
        java.lang.Throwable throwable12 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException13 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable12);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList14 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable15 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException16 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable15);
        java.lang.Throwable[] throwableArray17 = searchQuerySyntaxException16.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException18 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException16);
        java.lang.Throwable throwable19 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException20 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable19);
        java.lang.Throwable[] throwableArray21 = searchQuerySyntaxException20.getSuppressed();
        throwableRankList14.replaceItem((java.lang.Throwable) searchQuerySyntaxException16, (java.lang.Throwable) searchQuerySyntaxException20);
        searchQuerySyntaxException13.addSuppressed((java.lang.Throwable) searchQuerySyntaxException20);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException24 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException13);
        java.lang.Throwable throwable25 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException26 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable25);
        java.lang.Throwable[] throwableArray27 = searchQuerySyntaxException26.getSuppressed();
        searchQuerySyntaxException13.addSuppressed((java.lang.Throwable) searchQuerySyntaxException26);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException29 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException13);
        java.lang.Throwable throwable30 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException31 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable30);
        java.lang.Throwable[] throwableArray32 = searchQuerySyntaxException31.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException33 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException31);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException34 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException31);
        throwableRankList9.replaceItem((java.lang.Throwable) searchQuerySyntaxException13, (java.lang.Throwable) searchQuerySyntaxException34);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException36 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException34);
        java.lang.Integer int37 = throwableRankList0.getCount((java.lang.Throwable) searchQuerySyntaxException34);
        throwableRankList0.clear();
        org.junit.Assert.assertNotNull(throwableList2);
        org.junit.Assert.assertNotNull(intList5);
        org.junit.Assert.assertNotNull(throwableList8);
        org.junit.Assert.assertNotNull(throwableList11);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNull(int37);
    }

    @Test
    public void test0612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0612");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        net.sourceforge.atunes.model.AudioObjectProperty audioObjectProperty1 = net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY;
        boolean boolean2 = columnBean0.equals((java.lang.Object) audioObjectProperty1);
        boolean boolean3 = columnBean0.isVisible();
        columnBean0.setWidth((int) ' ');
        columnBean0.setVisible(true);
        columnBean0.setVisible(true);
        org.junit.Assert.assertTrue("'" + audioObjectProperty1 + "' != '" + net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY + "'", audioObjectProperty1.equals(net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0613");
        net.sourceforge.atunes.model.LookAndFeelBean lookAndFeelBean0 = new net.sourceforge.atunes.model.LookAndFeelBean();
        lookAndFeelBean0.setName("./summary");
        lookAndFeelBean0.setName("net.sourceforge.atunes.model.SearchQuerySyntaxException");
        lookAndFeelBean0.setSkin("net.sourceforge.atunes.model.SearchQuerySyntaxException: net.sourceforge.atunes.model.SearchQuerySyntaxException");
        lookAndFeelBean0.setName("mac");
    }

    @Test
    public void test0614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0614");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.util.List<java.lang.String> strList1 = cDMetadata0.getArtistNames();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getTrackNames();
        cDMetadata0.setYear((int) '4');
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(strList2);
    }

    @Test
    public void test0615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0615");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        fontSettings0.setUseFontSmoothing(false);
        net.sourceforge.atunes.model.IFontBean iFontBean3 = fontSettings0.getFont();
        boolean boolean4 = fontSettings0.isUseFontSmoothing();
        fontSettings0.setUseFontSmoothing(true);
        net.sourceforge.atunes.model.IFontBean iFontBean7 = fontSettings0.getFont();
        boolean boolean8 = fontSettings0.isUseFontSmoothingSettingsFromOs();
        org.junit.Assert.assertNull(iFontBean3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(iFontBean7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0616");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList3 = cDMetadata0.getTracks();
        cDMetadata0.setAlbumArtist("/rss/channel/title");
        java.util.List<java.lang.String> strList6 = cDMetadata0.getTrackNames();
        cDMetadata0.setAlbum("/rss/channel/item");
        java.util.List<java.lang.String> strList9 = cDMetadata0.getArtistNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata10 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata10.setAlbumArtist("");
        java.lang.String str13 = cDMetadata10.getGenre();
        int int14 = cDMetadata10.getYear();
        int int15 = cDMetadata10.getYear();
        net.sourceforge.atunes.model.CDMetadata cDMetadata16 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str17 = cDMetadata16.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata18 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata18.setAlbumArtist("");
        java.lang.String str21 = cDMetadata18.getGenre();
        java.lang.String[] strArray23 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        cDMetadata18.setTrackNames((java.util.List<java.lang.String>) strList24);
        cDMetadata16.setComposerNames((java.util.List<java.lang.String>) strList24);
        cDMetadata10.setTrackNames((java.util.List<java.lang.String>) strList24);
        cDMetadata0.setArtistNames((java.util.List<java.lang.String>) strList24);
        java.lang.String str30 = cDMetadata0.getAlbumArtist();
        org.junit.Assert.assertNull(intList3);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertNull(strList9);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "/rss/channel/title" + "'", str30, "/rss/channel/title");
    }

    @Test
    public void test0617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0617");
        net.sourceforge.atunes.model.LookAndFeelBean lookAndFeelBean0 = new net.sourceforge.atunes.model.LookAndFeelBean();
        java.lang.String str1 = lookAndFeelBean0.getSkin();
        lookAndFeelBean0.setSkin("./enclosure/@url");
        lookAndFeelBean0.setSkin("hi!");
        java.lang.String str6 = lookAndFeelBean0.getSkin();
        lookAndFeelBean0.setSkin("/feed/title");
        lookAndFeelBean0.setSkin("/rss/channel/title");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
    }

    @Test
    public void test0618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0618");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata1 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata1.setAlbumArtist("");
        boolean boolean4 = fontSettings0.equals((java.lang.Object) cDMetadata1);
        fontSettings0.setUseFontSmoothingSettingsFromOs(false);
        boolean boolean7 = fontSettings0.isUseFontSmoothing();
        net.sourceforge.atunes.model.PlaybackState playbackState8 = net.sourceforge.atunes.model.PlaybackState.PLAY_FINISHED;
        boolean boolean9 = fontSettings0.equals((java.lang.Object) playbackState8);
        net.sourceforge.atunes.model.CDMetadata cDMetadata10 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata10.setAlbumArtist("");
        java.lang.String str13 = cDMetadata10.getGenre();
        int int14 = cDMetadata10.getYear();
        int int15 = cDMetadata10.getYear();
        net.sourceforge.atunes.model.CDMetadata cDMetadata16 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str17 = cDMetadata16.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata18 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata18.setAlbumArtist("");
        java.lang.String str21 = cDMetadata18.getGenre();
        java.lang.String[] strArray23 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        cDMetadata18.setTrackNames((java.util.List<java.lang.String>) strList24);
        cDMetadata16.setComposerNames((java.util.List<java.lang.String>) strList24);
        cDMetadata10.setTrackNames((java.util.List<java.lang.String>) strList24);
        net.sourceforge.atunes.model.CDMetadata cDMetadata29 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str30 = cDMetadata29.getGenre();
        java.util.List<java.lang.String> strList31 = cDMetadata29.getComposerNames();
        java.lang.String str32 = cDMetadata29.getAlbum();
        java.util.List<java.lang.Integer> intList33 = cDMetadata29.getTracks();
        int int34 = cDMetadata29.getDisc();
        java.lang.String[] strArray42 = new java.lang.String[] { "net.sourceforge.atunes.model.InconsistentRepositoryException", "./title", "1.0.0 ", "./title", "./duration", "mpc", "net.sourceforge.atunes.model.InconsistentRepositoryException" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        cDMetadata29.setArtistNames((java.util.List<java.lang.String>) strList43);
        cDMetadata10.setArtistNames((java.util.List<java.lang.String>) strList43);
        net.sourceforge.atunes.model.CDMetadata cDMetadata47 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata47.setAlbumArtist("");
        java.lang.String str50 = cDMetadata47.getGenre();
        java.lang.String[] strArray52 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        cDMetadata47.setTrackNames((java.util.List<java.lang.String>) strList53);
        cDMetadata10.setTrackNames((java.util.List<java.lang.String>) strList53);
        boolean boolean57 = fontSettings0.equals((java.lang.Object) cDMetadata10);
        cDMetadata10.setGenre("");
        java.lang.String str60 = cDMetadata10.getAlbum();
        cDMetadata10.setDisc((int) (short) -1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + playbackState8 + "' != '" + net.sourceforge.atunes.model.PlaybackState.PLAY_FINISHED + "'", playbackState8.equals(net.sourceforge.atunes.model.PlaybackState.PLAY_FINISHED));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(strList31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(intList33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(str60);
    }

    @Test
    public void test0619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0619");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType8 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion13 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType8, "mpc", "./description", "./pubDate", "./title");
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion18 = new net.sourceforge.atunes.model.ApplicationVersion("1.0.0 ", (int) (byte) 10, 100, 150, versionType8, "./description", "/rss/channel/item", "/rss/channel/item", "./enclosure/@url");
        java.lang.String str19 = applicationVersion18.getDirectDownloadURL();
        int int20 = applicationVersion18.getRevisionNumber();
        java.lang.Throwable throwable21 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException22 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable21);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList23 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable24 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException25 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable24);
        java.lang.Throwable[] throwableArray26 = searchQuerySyntaxException25.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException27 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException25);
        java.lang.Throwable throwable28 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException29 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable28);
        java.lang.Throwable[] throwableArray30 = searchQuerySyntaxException29.getSuppressed();
        throwableRankList23.replaceItem((java.lang.Throwable) searchQuerySyntaxException25, (java.lang.Throwable) searchQuerySyntaxException29);
        searchQuerySyntaxException22.addSuppressed((java.lang.Throwable) searchQuerySyntaxException29);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException33 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException22);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException34 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException22);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException35 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchIndexNotAvailableException34);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException36 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchIndexNotAvailableException34);
        boolean boolean37 = applicationVersion18.equals((java.lang.Object) searchIndexNotAvailableException36);
        java.lang.String str38 = applicationVersion18.toString();
        org.junit.Assert.assertTrue("'" + versionType8 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType8.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "/rss/channel/item" + "'", str19, "/rss/channel/item");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 150 + "'", int20 == 150);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "10.100.150 ./description " + "'", str38, "10.100.150 ./description ");
    }

    @Test
    public void test0620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0620");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.lang.String str3 = cDMetadata0.getAlbum();
        java.util.List<java.lang.Integer> intList4 = cDMetadata0.getTracks();
        int int5 = cDMetadata0.getYear();
        cDMetadata0.setAlbumArtist("mpc");
        java.lang.String str9 = cDMetadata0.getTitle((-1));
        int int10 = cDMetadata0.getYear();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(intList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test0621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0621");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.Integer> intList2 = null;
        cDMetadata0.setTracks(intList2);
        java.lang.String str4 = cDMetadata0.getGenre();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test0622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0622");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.lang.String str4 = cDMetadata0.getTitle((int) (byte) -1);
        net.sourceforge.atunes.model.CDMetadata cDMetadata5 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata5.setAlbumArtist("");
        java.lang.String str8 = cDMetadata5.getGenre();
        int int9 = cDMetadata5.getYear();
        int int10 = cDMetadata5.getYear();
        net.sourceforge.atunes.model.CDMetadata cDMetadata11 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str12 = cDMetadata11.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata13 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata13.setAlbumArtist("");
        java.lang.String str16 = cDMetadata13.getGenre();
        java.lang.String[] strArray18 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        cDMetadata13.setTrackNames((java.util.List<java.lang.String>) strList19);
        cDMetadata11.setComposerNames((java.util.List<java.lang.String>) strList19);
        cDMetadata5.setTrackNames((java.util.List<java.lang.String>) strList19);
        net.sourceforge.atunes.model.CDMetadata cDMetadata24 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str25 = cDMetadata24.getGenre();
        java.util.List<java.lang.String> strList26 = cDMetadata24.getComposerNames();
        java.lang.String str27 = cDMetadata24.getAlbum();
        java.util.List<java.lang.Integer> intList28 = cDMetadata24.getTracks();
        int int29 = cDMetadata24.getDisc();
        java.lang.String[] strArray37 = new java.lang.String[] { "net.sourceforge.atunes.model.InconsistentRepositoryException", "./title", "1.0.0 ", "./title", "./duration", "mpc", "net.sourceforge.atunes.model.InconsistentRepositoryException" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        cDMetadata24.setArtistNames((java.util.List<java.lang.String>) strList38);
        cDMetadata5.setArtistNames((java.util.List<java.lang.String>) strList38);
        cDMetadata0.setComposerNames((java.util.List<java.lang.String>) strList38);
        java.lang.String str43 = cDMetadata0.getAlbumArtist();
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(intList28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
    }

    @Test
    public void test0623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0623");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType11 = applicationVersion9.getVersionType();
        java.lang.String str12 = applicationVersion9.getDownloadURL();
        int int13 = applicationVersion9.getMinorNumber();
        int int14 = applicationVersion9.getMajorNumber();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType15 = applicationVersion9.getVersionType();
        java.lang.String str16 = applicationVersion9.getName();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertTrue("'" + versionType11 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType11.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "./description" + "'", str12, "./description");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + versionType15 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType15.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "mpc" + "'", str16, "mpc");
    }

    @Test
    public void test0624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0624");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.lang.String str3 = cDMetadata0.getAlbum();
        java.util.List<java.lang.Integer> intList4 = cDMetadata0.getTracks();
        int int5 = cDMetadata0.getYear();
        cDMetadata0.setAlbumArtist("mpc");
        java.lang.String str8 = cDMetadata0.getAlbum();
        java.util.List<java.lang.Integer> intList9 = cDMetadata0.getTracks();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(intList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(intList9);
    }

    @Test
    public void test0625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0625");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        fontSettings0.setUseFontSmoothing(false);
        fontSettings0.setUseFontSmoothing(false);
        boolean boolean6 = fontSettings0.equals((java.lang.Object) 10L);
        boolean boolean7 = fontSettings0.isUseFontSmoothingSettingsFromOs();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0626");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList3 = cDMetadata0.getTracks();
        cDMetadata0.setAlbumArtist("/rss/channel/title");
        java.util.List<java.lang.String> strList6 = cDMetadata0.getTrackNames();
        java.lang.String str7 = cDMetadata0.getAlbumArtist();
        cDMetadata0.setYear((-1));
        java.lang.String str10 = cDMetadata0.getAlbum();
        cDMetadata0.setAlbumArtist("./title");
        org.junit.Assert.assertNull(intList3);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/rss/channel/title" + "'", str7, "/rss/channel/title");
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test0627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0627");
        net.sourceforge.atunes.model.ColumnBean columnBean4 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean5 = columnBean4.isVisible();
        columnBean4.setOrder((int) (byte) -1);
        columnBean4.setVisible(false);
        columnBean4.setWidth(0);
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType16 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion21 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType16, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str22 = applicationVersion21.getDate();
        java.lang.String str23 = applicationVersion21.toShortString();
        java.lang.String str24 = applicationVersion21.getChanges();
        boolean boolean25 = columnBean4.equals((java.lang.Object) applicationVersion21);
        java.lang.String str26 = applicationVersion21.getDownloadURL();
        java.lang.String str27 = applicationVersion21.getChanges();
        java.lang.String str28 = applicationVersion21.getDownloadURL();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType29 = applicationVersion21.getVersionType();
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion34 = new net.sourceforge.atunes.model.ApplicationVersion("/rss/channel/item", (int) (short) 10, 1, (int) (byte) 1, versionType29, "./updated", "mp4", "1.0.0 mpc ", "rm");
        int int35 = applicationVersion34.getRevisionNumber();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + versionType16 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType16.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "./title" + "'", str22, "./title");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1.0.0 " + "'", str23, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "./title" + "'", str24, "./title");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "./description" + "'", str26, "./description");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "./title" + "'", str27, "./title");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "./description" + "'", str28, "./description");
        org.junit.Assert.assertTrue("'" + versionType29 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType29.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
    }

    @Test
    public void test0628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0628");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.lang.String str3 = cDMetadata0.getAlbum();
        java.util.List<java.lang.Integer> intList4 = cDMetadata0.getTracks();
        net.sourceforge.atunes.model.CDMetadata cDMetadata5 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata5.setAlbumArtist("");
        java.lang.String str9 = cDMetadata5.getTitle((int) (byte) -1);
        java.lang.String[] strArray11 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        cDMetadata5.setTrackNames((java.util.List<java.lang.String>) strList12);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList12);
        cDMetadata0.setYear((int) (short) 1);
        int int18 = cDMetadata0.getYear();
        java.lang.String str19 = cDMetadata0.getGenre();
        cDMetadata0.setYear((int) (short) 10);
        java.lang.String str22 = cDMetadata0.getAlbum();
        java.util.List<java.lang.Integer> intList23 = cDMetadata0.getTracks();
        java.lang.String str24 = cDMetadata0.getAlbumArtist();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(intList4);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(intList23);
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test0629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0629");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str1 = feedType0.getUrlXPath();
        java.lang.String str2 = feedType0.getNameXPath();
        java.lang.String str3 = feedType0.getDescriptionXPath();
        java.lang.String str4 = feedType0.getDateXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "./enclosure/@url" + "'", str1, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "/rss/channel/title" + "'", str2, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "./description" + "'", str3, "./description");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "./pubDate" + "'", str4, "./pubDate");
    }

    @Test
    public void test0630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0630");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.lang.String str3 = cDMetadata0.getAlbum();
        cDMetadata0.setAlbumArtist("./description");
        cDMetadata0.setAlbumArtist("./description");
        java.lang.String str8 = cDMetadata0.getAlbumArtist();
        net.sourceforge.atunes.model.ColumnBean columnBean9 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean10 = columnBean9.isVisible();
        net.sourceforge.atunes.model.SubmissionState submissionState11 = net.sourceforge.atunes.model.SubmissionState.PENDING;
        boolean boolean12 = columnBean9.equals((java.lang.Object) submissionState11);
        net.sourceforge.atunes.model.CDMetadata cDMetadata13 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata13.setAlbumArtist("");
        java.lang.String str17 = cDMetadata13.getTitle((int) (byte) -1);
        net.sourceforge.atunes.model.CDMetadata cDMetadata18 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata18.setAlbumArtist("");
        java.lang.String str22 = cDMetadata18.getTitle((int) (byte) -1);
        java.lang.String[] strArray24 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        cDMetadata18.setTrackNames((java.util.List<java.lang.String>) strList25);
        cDMetadata13.setArtistNames((java.util.List<java.lang.String>) strList25);
        boolean boolean29 = columnBean9.equals((java.lang.Object) strList25);
        cDMetadata0.setComposerNames((java.util.List<java.lang.String>) strList25);
        cDMetadata0.setDisc(1);
        java.util.List<java.lang.Integer> intList33 = cDMetadata0.getTracks();
        net.sourceforge.atunes.model.FontSettings fontSettings34 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata35 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata35.setAlbumArtist("");
        boolean boolean38 = fontSettings34.equals((java.lang.Object) cDMetadata35);
        fontSettings34.setUseFontSmoothing(true);
        net.sourceforge.atunes.model.IFontBean iFontBean41 = fontSettings34.getFont();
        net.sourceforge.atunes.model.CDMetadata cDMetadata42 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str43 = cDMetadata42.getGenre();
        java.util.List<java.lang.String> strList44 = cDMetadata42.getComposerNames();
        java.lang.String str45 = cDMetadata42.getAlbum();
        java.util.List<java.lang.Integer> intList46 = cDMetadata42.getTracks();
        cDMetadata42.setAlbumArtist("mpc");
        java.lang.String str49 = cDMetadata42.getAlbum();
        boolean boolean50 = fontSettings34.equals((java.lang.Object) cDMetadata42);
        java.lang.String[] strArray75 = new java.lang.String[] { "./link[@rel='enclosure']/@type", "SOCKS_PROXY", "/feed/title", "./pubDate", "1.0.0 mpc ", "net.sourceforge.atunes.model.InconsistentRepositoryException", "1.0.0 mpc ", "1.0.0 mpc ", "rm", "./enclosure/@type", "/rss/channel/item", "mpc", "./title", "1.0.0 ", "flv", "1.0.0 ", "./link[@rel='enclosure']/@type", "hi!", "./link[@rel='enclosure']/@type", "./updated", "10.52.35  ", "net.sourceforge.atunes.model.InconsistentRepositoryException", "./enclosure/@url", "SOCKS_PROXY" };
        java.util.ArrayList<java.lang.String> strList76 = new java.util.ArrayList<java.lang.String>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList76, strArray75);
        cDMetadata42.setTrackNames((java.util.List<java.lang.String>) strList76);
        cDMetadata0.setComposerNames((java.util.List<java.lang.String>) strList76);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "./description" + "'", str8, "./description");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + submissionState11 + "' != '" + net.sourceforge.atunes.model.SubmissionState.PENDING + "'", submissionState11.equals(net.sourceforge.atunes.model.SubmissionState.PENDING));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(intList33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(iFontBean41);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(strList44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(intList46);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
    }

    @Test
    public void test0631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0631");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.lang.String str3 = cDMetadata0.getAlbum();
        java.util.List<java.lang.Integer> intList4 = cDMetadata0.getTracks();
        net.sourceforge.atunes.model.CDMetadata cDMetadata5 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata5.setAlbumArtist("");
        java.lang.String str9 = cDMetadata5.getTitle((int) (byte) -1);
        java.lang.String[] strArray11 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        cDMetadata5.setTrackNames((java.util.List<java.lang.String>) strList12);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList12);
        cDMetadata0.setYear((int) (short) 1);
        int int18 = cDMetadata0.getYear();
        java.lang.String str19 = cDMetadata0.getGenre();
        cDMetadata0.setYear((int) (short) 10);
        net.sourceforge.atunes.model.CDMetadata cDMetadata22 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata22.setAlbumArtist("");
        java.lang.String str25 = cDMetadata22.getGenre();
        java.lang.String[] strArray27 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        cDMetadata22.setTrackNames((java.util.List<java.lang.String>) strList28);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList28);
        int int32 = cDMetadata0.getDisc();
        java.util.List<java.lang.String> strList33 = cDMetadata0.getComposerNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata34 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata34.setAlbumArtist("");
        java.lang.String str37 = cDMetadata34.getGenre();
        java.util.List<java.lang.String> strList38 = cDMetadata34.getTrackNames();
        java.util.List<java.lang.String> strList39 = cDMetadata34.getTrackNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata40 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata40.setAlbumArtist("");
        java.lang.String str44 = cDMetadata40.getTitle((int) (byte) -1);
        net.sourceforge.atunes.model.CDMetadata cDMetadata45 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata45.setAlbumArtist("");
        java.lang.String str48 = cDMetadata45.getGenre();
        int int49 = cDMetadata45.getYear();
        int int50 = cDMetadata45.getYear();
        net.sourceforge.atunes.model.CDMetadata cDMetadata51 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str52 = cDMetadata51.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata53 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata53.setAlbumArtist("");
        java.lang.String str56 = cDMetadata53.getGenre();
        java.lang.String[] strArray58 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList59 = new java.util.ArrayList<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList59, strArray58);
        cDMetadata53.setTrackNames((java.util.List<java.lang.String>) strList59);
        cDMetadata51.setComposerNames((java.util.List<java.lang.String>) strList59);
        cDMetadata45.setTrackNames((java.util.List<java.lang.String>) strList59);
        net.sourceforge.atunes.model.CDMetadata cDMetadata64 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str65 = cDMetadata64.getGenre();
        java.util.List<java.lang.String> strList66 = cDMetadata64.getComposerNames();
        java.lang.String str67 = cDMetadata64.getAlbum();
        java.util.List<java.lang.Integer> intList68 = cDMetadata64.getTracks();
        int int69 = cDMetadata64.getDisc();
        java.lang.String[] strArray77 = new java.lang.String[] { "net.sourceforge.atunes.model.InconsistentRepositoryException", "./title", "1.0.0 ", "./title", "./duration", "mpc", "net.sourceforge.atunes.model.InconsistentRepositoryException" };
        java.util.ArrayList<java.lang.String> strList78 = new java.util.ArrayList<java.lang.String>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList78, strArray77);
        cDMetadata64.setArtistNames((java.util.List<java.lang.String>) strList78);
        cDMetadata45.setArtistNames((java.util.List<java.lang.String>) strList78);
        cDMetadata40.setComposerNames((java.util.List<java.lang.String>) strList78);
        cDMetadata34.setTrackNames((java.util.List<java.lang.String>) strList78);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList78);
        cDMetadata0.setAlbum("/rss/channel/title");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(intList4);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNull(strList33);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(strList38);
        org.junit.Assert.assertNull(strList39);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNull(strList66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNull(intList68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test0632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0632");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        int int12 = applicationVersion9.getMajorNumber();
        int int13 = applicationVersion9.getMinorNumber();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType18 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion23 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType18, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str24 = applicationVersion23.getDate();
        java.lang.String str25 = applicationVersion23.toShortString();
        java.lang.String str26 = applicationVersion23.getChanges();
        int int27 = applicationVersion23.getMinorNumber();
        java.lang.String str28 = applicationVersion23.getChanges();
        int int29 = applicationVersion23.getRevisionNumber();
        int int30 = applicationVersion9.compareTo(applicationVersion23);
        net.sourceforge.atunes.model.ColumnBean columnBean31 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean32 = columnBean31.isVisible();
        columnBean31.setOrder((int) (byte) -1);
        columnBean31.setVisible(false);
        columnBean31.setWidth(0);
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType43 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion48 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType43, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str49 = applicationVersion48.getDate();
        java.lang.String str50 = applicationVersion48.toShortString();
        java.lang.String str51 = applicationVersion48.getChanges();
        boolean boolean52 = columnBean31.equals((java.lang.Object) applicationVersion48);
        java.lang.String str53 = applicationVersion48.toString();
        java.lang.String str54 = applicationVersion48.getDate();
        int int55 = applicationVersion48.getMajorNumber();
        int int56 = applicationVersion9.compareTo(applicationVersion48);
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + versionType18 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType18.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "./title" + "'", str24, "./title");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1.0.0 " + "'", str25, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "./title" + "'", str26, "./title");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "./title" + "'", str28, "./title");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + versionType43 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType43.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "./title" + "'", str49, "./title");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "1.0.0 " + "'", str50, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "./title" + "'", str51, "./title");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "1.0.0 mpc " + "'", str53, "1.0.0 mpc ");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "./title" + "'", str54, "./title");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
    }

    @Test
    public void test0633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0633");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        java.lang.String str12 = applicationVersion9.toShortString();
        java.lang.String str13 = applicationVersion9.getDownloadURL();
        java.lang.String str14 = applicationVersion9.getDate();
        int int15 = applicationVersion9.getMajorNumber();
        java.lang.String str16 = applicationVersion9.getDate();
        java.lang.String str17 = applicationVersion9.getDate();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1.0.0 " + "'", str12, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "./description" + "'", str13, "./description");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "./title" + "'", str14, "./title");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "./title" + "'", str16, "./title");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "./title" + "'", str17, "./title");
    }

    @Test
    public void test0634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0634");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.lang.String str3 = cDMetadata0.getAlbum();
        cDMetadata0.setAlbumArtist("./description");
        cDMetadata0.setAlbumArtist("./description");
        java.lang.String str8 = cDMetadata0.getAlbumArtist();
        java.lang.String str10 = cDMetadata0.getTitle((int) (short) 0);
        net.sourceforge.atunes.model.CDMetadata cDMetadata11 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata11.setAlbumArtist("");
        java.lang.String str14 = cDMetadata11.getGenre();
        int int15 = cDMetadata11.getYear();
        int int16 = cDMetadata11.getYear();
        net.sourceforge.atunes.model.CDMetadata cDMetadata17 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str18 = cDMetadata17.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata19 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata19.setAlbumArtist("");
        java.lang.String str22 = cDMetadata19.getGenre();
        java.lang.String[] strArray24 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        cDMetadata19.setTrackNames((java.util.List<java.lang.String>) strList25);
        cDMetadata17.setComposerNames((java.util.List<java.lang.String>) strList25);
        cDMetadata11.setTrackNames((java.util.List<java.lang.String>) strList25);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList25);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "./description" + "'", str8, "./description");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test0635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0635");
        net.sourceforge.atunes.model.LookAndFeelBean lookAndFeelBean0 = new net.sourceforge.atunes.model.LookAndFeelBean();
        java.lang.String str1 = lookAndFeelBean0.getSkin();
        lookAndFeelBean0.setName("net.sourceforge.atunes.model.SearchQuerySyntaxException");
        lookAndFeelBean0.setSkin("");
        java.lang.String str6 = lookAndFeelBean0.getName();
        java.lang.String str7 = lookAndFeelBean0.getName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "net.sourceforge.atunes.model.SearchQuerySyntaxException" + "'", str6, "net.sourceforge.atunes.model.SearchQuerySyntaxException");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "net.sourceforge.atunes.model.SearchQuerySyntaxException" + "'", str7, "net.sourceforge.atunes.model.SearchQuerySyntaxException");
    }

    @Test
    public void test0636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0636");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        int int3 = cDMetadata0.getYear();
        cDMetadata0.setYear(100);
        net.sourceforge.atunes.model.CDMetadata cDMetadata6 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata6.setAlbumArtist("");
        java.lang.String str9 = cDMetadata6.getGenre();
        java.util.List<java.lang.String> strList10 = cDMetadata6.getTrackNames();
        java.util.List<java.lang.String> strList11 = cDMetadata6.getTrackNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata12 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str13 = cDMetadata12.getGenre();
        java.lang.String str14 = cDMetadata12.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata15 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str16 = cDMetadata15.getGenre();
        java.util.List<java.lang.String> strList17 = cDMetadata15.getComposerNames();
        java.lang.String str18 = cDMetadata15.getAlbum();
        java.util.List<java.lang.Integer> intList19 = cDMetadata15.getTracks();
        int int20 = cDMetadata15.getYear();
        net.sourceforge.atunes.model.CDMetadata cDMetadata21 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str22 = cDMetadata21.getGenre();
        java.util.List<java.lang.String> strList23 = cDMetadata21.getComposerNames();
        java.lang.String str24 = cDMetadata21.getAlbum();
        java.util.List<java.lang.Integer> intList25 = cDMetadata21.getTracks();
        net.sourceforge.atunes.model.CDMetadata cDMetadata26 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata26.setAlbumArtist("");
        java.lang.String str30 = cDMetadata26.getTitle((int) (byte) -1);
        java.lang.String[] strArray32 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        cDMetadata26.setTrackNames((java.util.List<java.lang.String>) strList33);
        cDMetadata21.setTrackNames((java.util.List<java.lang.String>) strList33);
        cDMetadata21.setYear((int) (short) 1);
        int int39 = cDMetadata21.getYear();
        java.lang.String str40 = cDMetadata21.getGenre();
        cDMetadata21.setYear((int) (short) 10);
        net.sourceforge.atunes.model.CDMetadata cDMetadata43 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata43.setAlbumArtist("");
        java.lang.String str46 = cDMetadata43.getGenre();
        java.lang.String[] strArray48 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        cDMetadata43.setTrackNames((java.util.List<java.lang.String>) strList49);
        cDMetadata21.setTrackNames((java.util.List<java.lang.String>) strList49);
        cDMetadata15.setComposerNames((java.util.List<java.lang.String>) strList49);
        cDMetadata12.setArtistNames((java.util.List<java.lang.String>) strList49);
        cDMetadata6.setTrackNames((java.util.List<java.lang.String>) strList49);
        cDMetadata0.setComposerNames((java.util.List<java.lang.String>) strList49);
        int int57 = cDMetadata0.getDisc();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(strList10);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(intList19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(strList23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(intList25);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
    }

    @Test
    public void test0637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0637");
        net.sourceforge.atunes.model.InconsistentRepositoryException inconsistentRepositoryException0 = new net.sourceforge.atunes.model.InconsistentRepositoryException();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList1 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable2 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException3 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable2);
        java.lang.Throwable[] throwableArray4 = searchQuerySyntaxException3.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException5 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException3);
        java.lang.Throwable throwable6 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException7 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable6);
        java.lang.Throwable[] throwableArray8 = searchQuerySyntaxException7.getSuppressed();
        throwableRankList1.replaceItem((java.lang.Throwable) searchQuerySyntaxException3, (java.lang.Throwable) searchQuerySyntaxException7);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList10 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable11 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException12 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable11);
        java.lang.Throwable[] throwableArray13 = searchQuerySyntaxException12.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException14 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException12);
        java.lang.Throwable throwable15 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException16 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable15);
        java.lang.Throwable[] throwableArray17 = searchQuerySyntaxException16.getSuppressed();
        throwableRankList10.replaceItem((java.lang.Throwable) searchQuerySyntaxException12, (java.lang.Throwable) searchQuerySyntaxException16);
        java.lang.Integer int19 = throwableRankList1.getCount((java.lang.Throwable) searchQuerySyntaxException16);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList20 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable21 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException22 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable21);
        java.lang.Throwable[] throwableArray23 = searchQuerySyntaxException22.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException24 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException22);
        java.lang.Throwable throwable25 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException26 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable25);
        java.lang.Throwable[] throwableArray27 = searchQuerySyntaxException26.getSuppressed();
        throwableRankList20.replaceItem((java.lang.Throwable) searchQuerySyntaxException22, (java.lang.Throwable) searchQuerySyntaxException26);
        java.util.List<java.lang.Throwable> throwableList29 = throwableRankList20.getOrder();
        java.lang.Throwable throwable30 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException31 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable30);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList32 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable33 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException34 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable33);
        java.lang.Throwable[] throwableArray35 = searchQuerySyntaxException34.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException36 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException34);
        java.lang.Throwable throwable37 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException38 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable37);
        java.lang.Throwable[] throwableArray39 = searchQuerySyntaxException38.getSuppressed();
        throwableRankList32.replaceItem((java.lang.Throwable) searchQuerySyntaxException34, (java.lang.Throwable) searchQuerySyntaxException38);
        searchQuerySyntaxException31.addSuppressed((java.lang.Throwable) searchQuerySyntaxException38);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException42 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException31);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException43 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException31);
        java.lang.Integer int44 = throwableRankList20.getCount((java.lang.Throwable) searchIndexNotAvailableException43);
        java.lang.Integer int45 = throwableRankList1.getCount((java.lang.Throwable) searchIndexNotAvailableException43);
        java.lang.Throwable[] throwableArray46 = searchIndexNotAvailableException43.getSuppressed();
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException47 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchIndexNotAvailableException43);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList48 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        net.sourceforge.atunes.model.InconsistentRepositoryException inconsistentRepositoryException49 = new net.sourceforge.atunes.model.InconsistentRepositoryException();
        net.sourceforge.atunes.model.InconsistentRepositoryException inconsistentRepositoryException50 = new net.sourceforge.atunes.model.InconsistentRepositoryException();
        throwableRankList48.replaceItem((java.lang.Throwable) inconsistentRepositoryException49, (java.lang.Throwable) inconsistentRepositoryException50);
        java.lang.Throwable throwable52 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException53 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable52);
        java.lang.Throwable[] throwableArray54 = searchQuerySyntaxException53.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException55 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException53);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException56 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException53);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList57 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable58 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException59 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable58);
        java.lang.Throwable[] throwableArray60 = searchQuerySyntaxException59.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException61 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException59);
        java.lang.Throwable throwable62 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException63 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable62);
        java.lang.Throwable[] throwableArray64 = searchQuerySyntaxException63.getSuppressed();
        throwableRankList57.replaceItem((java.lang.Throwable) searchQuerySyntaxException59, (java.lang.Throwable) searchQuerySyntaxException63);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException66 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException63);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException67 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException66);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException68 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchIndexNotAvailableException67);
        searchQuerySyntaxException56.addSuppressed((java.lang.Throwable) searchIndexNotAvailableException68);
        throwableRankList48.addItem((java.lang.Throwable) searchQuerySyntaxException56);
        searchIndexNotAvailableException43.addSuppressed((java.lang.Throwable) searchQuerySyntaxException56);
        inconsistentRepositoryException0.addSuppressed((java.lang.Throwable) searchQuerySyntaxException56);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException73 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException56);
        java.lang.Throwable[] throwableArray74 = searchQuerySyntaxException56.getSuppressed();
        java.lang.String str75 = searchQuerySyntaxException56.toString();
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableList29);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNull(int44);
        org.junit.Assert.assertNull(int45);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "net.sourceforge.atunes.model.SearchQuerySyntaxException: net.sourceforge.atunes.model.SearchQuerySyntaxException" + "'", str75, "net.sourceforge.atunes.model.SearchQuerySyntaxException: net.sourceforge.atunes.model.SearchQuerySyntaxException");
    }

    @Test
    public void test0638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0638");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable1 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException2 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable1);
        java.lang.Throwable[] throwableArray3 = searchQuerySyntaxException2.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException4 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException2);
        java.lang.Throwable throwable5 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException6 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable5);
        java.lang.Throwable[] throwableArray7 = searchQuerySyntaxException6.getSuppressed();
        throwableRankList0.replaceItem((java.lang.Throwable) searchQuerySyntaxException2, (java.lang.Throwable) searchQuerySyntaxException6);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList9 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable10 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException11 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable10);
        java.lang.Throwable[] throwableArray12 = searchQuerySyntaxException11.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException13 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException11);
        java.lang.Throwable throwable14 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException15 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable14);
        java.lang.Throwable[] throwableArray16 = searchQuerySyntaxException15.getSuppressed();
        throwableRankList9.replaceItem((java.lang.Throwable) searchQuerySyntaxException11, (java.lang.Throwable) searchQuerySyntaxException15);
        java.lang.Integer int18 = throwableRankList0.getCount((java.lang.Throwable) searchQuerySyntaxException15);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList19 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable20 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException21 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable20);
        java.lang.Throwable[] throwableArray22 = searchQuerySyntaxException21.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException23 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException21);
        java.lang.Throwable throwable24 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException25 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable24);
        java.lang.Throwable[] throwableArray26 = searchQuerySyntaxException25.getSuppressed();
        throwableRankList19.replaceItem((java.lang.Throwable) searchQuerySyntaxException21, (java.lang.Throwable) searchQuerySyntaxException25);
        java.util.List<java.lang.Throwable> throwableList28 = throwableRankList19.getOrder();
        java.lang.Throwable throwable29 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException30 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable29);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList31 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable32 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException33 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable32);
        java.lang.Throwable[] throwableArray34 = searchQuerySyntaxException33.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException35 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException33);
        java.lang.Throwable throwable36 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException37 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable36);
        java.lang.Throwable[] throwableArray38 = searchQuerySyntaxException37.getSuppressed();
        throwableRankList31.replaceItem((java.lang.Throwable) searchQuerySyntaxException33, (java.lang.Throwable) searchQuerySyntaxException37);
        searchQuerySyntaxException30.addSuppressed((java.lang.Throwable) searchQuerySyntaxException37);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException41 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException30);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException42 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException30);
        java.lang.Integer int43 = throwableRankList19.getCount((java.lang.Throwable) searchIndexNotAvailableException42);
        java.lang.Integer int44 = throwableRankList0.getCount((java.lang.Throwable) searchIndexNotAvailableException42);
        java.lang.Throwable[] throwableArray45 = searchIndexNotAvailableException42.getSuppressed();
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException46 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchIndexNotAvailableException42);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList47 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        net.sourceforge.atunes.model.InconsistentRepositoryException inconsistentRepositoryException48 = new net.sourceforge.atunes.model.InconsistentRepositoryException();
        net.sourceforge.atunes.model.InconsistentRepositoryException inconsistentRepositoryException49 = new net.sourceforge.atunes.model.InconsistentRepositoryException();
        throwableRankList47.replaceItem((java.lang.Throwable) inconsistentRepositoryException48, (java.lang.Throwable) inconsistentRepositoryException49);
        java.lang.Throwable throwable51 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException52 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable51);
        java.lang.Throwable[] throwableArray53 = searchQuerySyntaxException52.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException54 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException52);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException55 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException52);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList56 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable57 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException58 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable57);
        java.lang.Throwable[] throwableArray59 = searchQuerySyntaxException58.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException60 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException58);
        java.lang.Throwable throwable61 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException62 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable61);
        java.lang.Throwable[] throwableArray63 = searchQuerySyntaxException62.getSuppressed();
        throwableRankList56.replaceItem((java.lang.Throwable) searchQuerySyntaxException58, (java.lang.Throwable) searchQuerySyntaxException62);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException65 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException62);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException66 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException65);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException67 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchIndexNotAvailableException66);
        searchQuerySyntaxException55.addSuppressed((java.lang.Throwable) searchIndexNotAvailableException67);
        throwableRankList47.addItem((java.lang.Throwable) searchQuerySyntaxException55);
        searchIndexNotAvailableException42.addSuppressed((java.lang.Throwable) searchQuerySyntaxException55);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException71 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException55);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableList28);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNull(int43);
        org.junit.Assert.assertNull(int44);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray63);
    }

    @Test
    public void test0639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0639");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.lang.String str3 = cDMetadata0.getAlbum();
        java.util.List<java.lang.Integer> intList4 = cDMetadata0.getTracks();
        int int5 = cDMetadata0.getYear();
        java.util.List<java.lang.String> strList6 = cDMetadata0.getArtistNames();
        cDMetadata0.setDisc((int) (short) 100);
        net.sourceforge.atunes.model.CDMetadata cDMetadata9 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata9.setAlbumArtist("");
        java.lang.String str12 = cDMetadata9.getGenre();
        java.lang.String[] strArray14 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        cDMetadata9.setTrackNames((java.util.List<java.lang.String>) strList15);
        cDMetadata0.setArtistNames((java.util.List<java.lang.String>) strList15);
        cDMetadata0.setYear(150);
        java.util.List<java.lang.Integer> intList21 = cDMetadata0.getTracks();
        cDMetadata0.setAlbum("net.sourceforge.atunes.model.SearchQuerySyntaxException: net.sourceforge.atunes.model.SearchIndexNotAvailableException: net.sourceforge.atunes.model.SearchQuerySyntaxException: net.sourceforge.atunes.model.SearchQuerySyntaxException");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(intList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(intList21);
    }

    @Test
    public void test0640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0640");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        cDMetadata0.setAlbumArtist("SOCKS_PROXY");
        java.util.List<java.lang.String> strList5 = cDMetadata0.getArtistNames();
        org.junit.Assert.assertNull(strList5);
    }

    @Test
    public void test0641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0641");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList3 = cDMetadata0.getTracks();
        cDMetadata0.setAlbumArtist("/rss/channel/title");
        java.util.List<java.lang.String> strList6 = cDMetadata0.getTrackNames();
        cDMetadata0.setAlbum("/rss/channel/item");
        cDMetadata0.setAlbum("");
        cDMetadata0.setYear((int) (byte) -1);
        java.lang.String str13 = cDMetadata0.getAlbum();
        org.junit.Assert.assertNull(intList3);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test0642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0642");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        net.sourceforge.atunes.model.InconsistentRepositoryException inconsistentRepositoryException1 = new net.sourceforge.atunes.model.InconsistentRepositoryException();
        net.sourceforge.atunes.model.InconsistentRepositoryException inconsistentRepositoryException2 = new net.sourceforge.atunes.model.InconsistentRepositoryException();
        throwableRankList0.replaceItem((java.lang.Throwable) inconsistentRepositoryException1, (java.lang.Throwable) inconsistentRepositoryException2);
        java.lang.Throwable throwable4 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException5 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable4);
        java.lang.Throwable[] throwableArray6 = searchQuerySyntaxException5.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException7 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException5);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException8 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException5);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList9 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable10 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException11 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable10);
        java.lang.Throwable[] throwableArray12 = searchQuerySyntaxException11.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException13 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException11);
        java.lang.Throwable throwable14 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException15 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable14);
        java.lang.Throwable[] throwableArray16 = searchQuerySyntaxException15.getSuppressed();
        throwableRankList9.replaceItem((java.lang.Throwable) searchQuerySyntaxException11, (java.lang.Throwable) searchQuerySyntaxException15);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException18 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException15);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException19 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException18);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException20 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchIndexNotAvailableException19);
        searchQuerySyntaxException8.addSuppressed((java.lang.Throwable) searchIndexNotAvailableException20);
        throwableRankList0.addItem((java.lang.Throwable) searchQuerySyntaxException8);
        int int23 = throwableRankList0.size();
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
    }

    @Test
    public void test0643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0643");
        net.sourceforge.atunes.model.LookAndFeelBean lookAndFeelBean0 = new net.sourceforge.atunes.model.LookAndFeelBean();
        java.lang.String str1 = lookAndFeelBean0.getSkin();
        lookAndFeelBean0.setName("net.sourceforge.atunes.model.SearchQuerySyntaxException");
        lookAndFeelBean0.setSkin("");
        java.lang.String str6 = lookAndFeelBean0.getSkin();
        lookAndFeelBean0.setSkin("mpc");
        java.lang.String str9 = lookAndFeelBean0.getSkin();
        java.lang.String str10 = lookAndFeelBean0.getName();
        lookAndFeelBean0.setSkin("net.sourceforge.atunes.model.SearchQuerySyntaxException: net.sourceforge.atunes.model.SearchQuerySyntaxException");
        java.lang.String str13 = lookAndFeelBean0.getSkin();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "mpc" + "'", str9, "mpc");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "net.sourceforge.atunes.model.SearchQuerySyntaxException" + "'", str10, "net.sourceforge.atunes.model.SearchQuerySyntaxException");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "net.sourceforge.atunes.model.SearchQuerySyntaxException: net.sourceforge.atunes.model.SearchQuerySyntaxException" + "'", str13, "net.sourceforge.atunes.model.SearchQuerySyntaxException: net.sourceforge.atunes.model.SearchQuerySyntaxException");
    }

    @Test
    public void test0644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0644");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable1 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException2 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable1);
        java.lang.Throwable[] throwableArray3 = searchQuerySyntaxException2.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException4 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException2);
        java.lang.Throwable throwable5 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException6 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable5);
        java.lang.Throwable[] throwableArray7 = searchQuerySyntaxException6.getSuppressed();
        throwableRankList0.replaceItem((java.lang.Throwable) searchQuerySyntaxException2, (java.lang.Throwable) searchQuerySyntaxException6);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList9 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable10 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException11 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable10);
        java.lang.Throwable[] throwableArray12 = searchQuerySyntaxException11.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException13 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException11);
        java.lang.Throwable throwable14 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException15 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable14);
        java.lang.Throwable[] throwableArray16 = searchQuerySyntaxException15.getSuppressed();
        throwableRankList9.replaceItem((java.lang.Throwable) searchQuerySyntaxException11, (java.lang.Throwable) searchQuerySyntaxException15);
        java.lang.Integer int18 = throwableRankList0.getCount((java.lang.Throwable) searchQuerySyntaxException15);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList19 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable20 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException21 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable20);
        java.lang.Throwable[] throwableArray22 = searchQuerySyntaxException21.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException23 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException21);
        java.lang.Throwable throwable24 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException25 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable24);
        java.lang.Throwable[] throwableArray26 = searchQuerySyntaxException25.getSuppressed();
        throwableRankList19.replaceItem((java.lang.Throwable) searchQuerySyntaxException21, (java.lang.Throwable) searchQuerySyntaxException25);
        java.util.List<java.lang.Throwable> throwableList28 = throwableRankList19.getOrder();
        java.lang.Throwable throwable29 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException30 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable29);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList31 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable32 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException33 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable32);
        java.lang.Throwable[] throwableArray34 = searchQuerySyntaxException33.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException35 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException33);
        java.lang.Throwable throwable36 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException37 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable36);
        java.lang.Throwable[] throwableArray38 = searchQuerySyntaxException37.getSuppressed();
        throwableRankList31.replaceItem((java.lang.Throwable) searchQuerySyntaxException33, (java.lang.Throwable) searchQuerySyntaxException37);
        searchQuerySyntaxException30.addSuppressed((java.lang.Throwable) searchQuerySyntaxException37);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException41 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException30);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException42 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException30);
        java.lang.Integer int43 = throwableRankList19.getCount((java.lang.Throwable) searchIndexNotAvailableException42);
        java.lang.Integer int44 = throwableRankList0.getCount((java.lang.Throwable) searchIndexNotAvailableException42);
        java.lang.Throwable[] throwableArray45 = searchIndexNotAvailableException42.getSuppressed();
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException46 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchIndexNotAvailableException42);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList47 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        net.sourceforge.atunes.model.InconsistentRepositoryException inconsistentRepositoryException48 = new net.sourceforge.atunes.model.InconsistentRepositoryException();
        net.sourceforge.atunes.model.InconsistentRepositoryException inconsistentRepositoryException49 = new net.sourceforge.atunes.model.InconsistentRepositoryException();
        throwableRankList47.replaceItem((java.lang.Throwable) inconsistentRepositoryException48, (java.lang.Throwable) inconsistentRepositoryException49);
        java.lang.Throwable throwable51 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException52 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable51);
        java.lang.Throwable[] throwableArray53 = searchQuerySyntaxException52.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException54 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException52);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException55 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException52);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList56 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable57 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException58 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable57);
        java.lang.Throwable[] throwableArray59 = searchQuerySyntaxException58.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException60 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException58);
        java.lang.Throwable throwable61 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException62 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable61);
        java.lang.Throwable[] throwableArray63 = searchQuerySyntaxException62.getSuppressed();
        throwableRankList56.replaceItem((java.lang.Throwable) searchQuerySyntaxException58, (java.lang.Throwable) searchQuerySyntaxException62);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException65 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException62);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException66 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException65);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException67 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchIndexNotAvailableException66);
        searchQuerySyntaxException55.addSuppressed((java.lang.Throwable) searchIndexNotAvailableException67);
        throwableRankList47.addItem((java.lang.Throwable) searchQuerySyntaxException55);
        searchIndexNotAvailableException42.addSuppressed((java.lang.Throwable) searchQuerySyntaxException55);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException71 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException55);
        java.lang.Throwable[] throwableArray72 = searchQuerySyntaxException55.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableList28);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNull(int43);
        org.junit.Assert.assertNull(int44);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray72);
    }

    @Test
    public void test0645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0645");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.util.List<java.lang.String> strList1 = cDMetadata0.getArtistNames();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getTrackNames();
        java.lang.String str3 = cDMetadata0.getAlbumArtist();
        cDMetadata0.setAlbumArtist("net.sourceforge.atunes.model.SearchIndexNotAvailableException: net.sourceforge.atunes.model.SearchQuerySyntaxException");
        java.util.List<java.lang.String> strList6 = cDMetadata0.getComposerNames();
        java.util.List<java.lang.String> strList7 = cDMetadata0.getTrackNames();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertNull(strList7);
    }

    @Test
    public void test0646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0646");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str1 = feedType0.getUrlXPath();
        java.lang.String str2 = feedType0.getNameXPath();
        java.lang.String str3 = feedType0.getDescriptionXPath();
        java.lang.String str4 = feedType0.getTypeXPath();
        java.lang.String str5 = feedType0.getEntryXPath();
        java.lang.String str6 = feedType0.getDurationXPath();
        java.lang.String str7 = feedType0.getDescriptionXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "./enclosure/@url" + "'", str1, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "/rss/channel/title" + "'", str2, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "./description" + "'", str3, "./description");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "./enclosure/@type" + "'", str4, "./enclosure/@type");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/rss/channel/item" + "'", str5, "/rss/channel/item");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "./duration" + "'", str6, "./duration");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "./description" + "'", str7, "./description");
    }

    @Test
    public void test0647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0647");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.lang.String str3 = cDMetadata0.getGenre();
        java.lang.String[] strArray5 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList6);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList9 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable10 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException11 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable10);
        java.lang.Throwable[] throwableArray12 = searchQuerySyntaxException11.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException13 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException11);
        java.lang.Throwable throwable14 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException15 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable14);
        java.lang.Throwable[] throwableArray16 = searchQuerySyntaxException15.getSuppressed();
        throwableRankList9.replaceItem((java.lang.Throwable) searchQuerySyntaxException11, (java.lang.Throwable) searchQuerySyntaxException15);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList18 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable19 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException20 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable19);
        java.lang.Throwable[] throwableArray21 = searchQuerySyntaxException20.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException22 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException20);
        java.lang.Throwable throwable23 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException24 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable23);
        java.lang.Throwable[] throwableArray25 = searchQuerySyntaxException24.getSuppressed();
        throwableRankList18.replaceItem((java.lang.Throwable) searchQuerySyntaxException20, (java.lang.Throwable) searchQuerySyntaxException24);
        java.lang.Integer int27 = throwableRankList9.getCount((java.lang.Throwable) searchQuerySyntaxException24);
        java.lang.Throwable throwable28 = null;
        java.lang.Throwable throwable29 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException30 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable29);
        throwableRankList9.replaceItem(throwable28, (java.lang.Throwable) searchQuerySyntaxException30);
        java.util.List<java.lang.Integer> intList33 = throwableRankList9.getNFirstElementCounts((int) (byte) 1);
        int int34 = throwableRankList9.size();
        java.util.List<java.lang.Integer> intList36 = throwableRankList9.getNFirstElementCounts((int) (short) 10);
        cDMetadata0.setTracks(intList36);
        net.sourceforge.atunes.model.CDMetadata cDMetadata38 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata38.setAlbumArtist("");
        java.lang.String str41 = cDMetadata38.getGenre();
        int int42 = cDMetadata38.getYear();
        int int43 = cDMetadata38.getYear();
        cDMetadata38.setGenre("./enclosure/@url");
        net.sourceforge.atunes.model.CDMetadata cDMetadata46 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata46.setAlbumArtist("");
        java.lang.String str49 = cDMetadata46.getGenre();
        int int50 = cDMetadata46.getYear();
        int int51 = cDMetadata46.getYear();
        net.sourceforge.atunes.model.CDMetadata cDMetadata52 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str53 = cDMetadata52.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata54 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata54.setAlbumArtist("");
        java.lang.String str57 = cDMetadata54.getGenre();
        java.lang.String[] strArray59 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList60 = new java.util.ArrayList<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList60, strArray59);
        cDMetadata54.setTrackNames((java.util.List<java.lang.String>) strList60);
        cDMetadata52.setComposerNames((java.util.List<java.lang.String>) strList60);
        cDMetadata46.setTrackNames((java.util.List<java.lang.String>) strList60);
        net.sourceforge.atunes.model.CDMetadata cDMetadata65 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str66 = cDMetadata65.getGenre();
        java.util.List<java.lang.String> strList67 = cDMetadata65.getComposerNames();
        java.lang.String str68 = cDMetadata65.getAlbum();
        java.util.List<java.lang.Integer> intList69 = cDMetadata65.getTracks();
        int int70 = cDMetadata65.getDisc();
        java.lang.String[] strArray78 = new java.lang.String[] { "net.sourceforge.atunes.model.InconsistentRepositoryException", "./title", "1.0.0 ", "./title", "./duration", "mpc", "net.sourceforge.atunes.model.InconsistentRepositoryException" };
        java.util.ArrayList<java.lang.String> strList79 = new java.util.ArrayList<java.lang.String>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList79, strArray78);
        cDMetadata65.setArtistNames((java.util.List<java.lang.String>) strList79);
        cDMetadata46.setArtistNames((java.util.List<java.lang.String>) strList79);
        net.sourceforge.atunes.model.CDMetadata cDMetadata83 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata83.setAlbumArtist("");
        java.lang.String str86 = cDMetadata83.getGenre();
        java.lang.String[] strArray88 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList89 = new java.util.ArrayList<java.lang.String>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList89, strArray88);
        cDMetadata83.setTrackNames((java.util.List<java.lang.String>) strList89);
        cDMetadata46.setTrackNames((java.util.List<java.lang.String>) strList89);
        cDMetadata38.setComposerNames((java.util.List<java.lang.String>) strList89);
        cDMetadata0.setComposerNames((java.util.List<java.lang.String>) strList89);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str96 = cDMetadata0.getArtist((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.List.size()\" because the return value of \"net.sourceforge.atunes.model.CDMetadata.getArtistNames()\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNull(int27);
        org.junit.Assert.assertNotNull(intList33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intList36);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNull(strList67);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNull(intList69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    public void test0648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0648");
        net.sourceforge.atunes.model.LookAndFeelBean lookAndFeelBean0 = new net.sourceforge.atunes.model.LookAndFeelBean();
        java.lang.String str1 = lookAndFeelBean0.getSkin();
        lookAndFeelBean0.setSkin("./enclosure/@url");
        lookAndFeelBean0.setSkin("hi!");
        lookAndFeelBean0.setSkin("./author");
        lookAndFeelBean0.setSkin("/rss/channel/title");
        java.lang.String str10 = lookAndFeelBean0.getSkin();
        java.lang.String str11 = lookAndFeelBean0.getSkin();
        lookAndFeelBean0.setName("net.sourceforge.atunes.model.SearchIndexNotAvailableException: net.sourceforge.atunes.model.SearchIndexNotAvailableException: net.sourceforge.atunes.model.SearchQuerySyntaxException: net.sourceforge.atunes.model.SearchQuerySyntaxException");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/rss/channel/title" + "'", str10, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "/rss/channel/title" + "'", str11, "/rss/channel/title");
    }

    @Test
    public void test0649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0649");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str1 = feedType0.getEntryXPath();
        java.lang.String str2 = feedType0.getTypeXPath();
        java.lang.String str3 = feedType0.getTypeXPath();
        java.lang.String str4 = feedType0.getNameXPath();
        java.lang.String str5 = feedType0.getUrlXPath();
        java.lang.String str6 = feedType0.getAuthorXPath();
        java.lang.String str7 = feedType0.getDurationXPath();
        java.lang.String str8 = feedType0.getUrlXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "/rss/channel/item" + "'", str1, "/rss/channel/item");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "./enclosure/@type" + "'", str2, "./enclosure/@type");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "./enclosure/@type" + "'", str3, "./enclosure/@type");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "/rss/channel/title" + "'", str4, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "./enclosure/@url" + "'", str5, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "./author" + "'", str6, "./author");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "./duration" + "'", str7, "./duration");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "./enclosure/@url" + "'", str8, "./enclosure/@url");
    }

    @Test
    public void test0650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0650");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.lang.String str3 = cDMetadata0.getAlbum();
        java.util.List<java.lang.Integer> intList4 = cDMetadata0.getTracks();
        cDMetadata0.setYear((int) '#');
        cDMetadata0.setAlbumArtist("10.1.1 ");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(intList4);
    }

    @Test
    public void test0651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0651");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata1 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata1.setAlbumArtist("");
        boolean boolean4 = fontSettings0.equals((java.lang.Object) cDMetadata1);
        fontSettings0.setUseFontSmoothingSettingsFromOs(false);
        boolean boolean7 = fontSettings0.isUseFontSmoothing();
        fontSettings0.setUseFontSmoothingSettingsFromOs(false);
        net.sourceforge.atunes.model.IFontBean iFontBean10 = fontSettings0.getFont();
        fontSettings0.setUseFontSmoothingSettingsFromOs(true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(iFontBean10);
    }

    @Test
    public void test0652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0652");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        columnBean0.setVisible(false);
        columnBean0.setWidth(0);
        boolean boolean8 = columnBean0.isVisible();
        columnBean0.setVisible(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0653");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable1 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException2 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable1);
        java.lang.Throwable[] throwableArray3 = searchQuerySyntaxException2.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException4 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException2);
        java.lang.Throwable throwable5 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException6 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable5);
        java.lang.Throwable[] throwableArray7 = searchQuerySyntaxException6.getSuppressed();
        throwableRankList0.replaceItem((java.lang.Throwable) searchQuerySyntaxException2, (java.lang.Throwable) searchQuerySyntaxException6);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList9 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable10 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException11 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable10);
        java.lang.Throwable[] throwableArray12 = searchQuerySyntaxException11.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException13 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException11);
        java.lang.Throwable throwable14 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException15 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable14);
        java.lang.Throwable[] throwableArray16 = searchQuerySyntaxException15.getSuppressed();
        throwableRankList9.replaceItem((java.lang.Throwable) searchQuerySyntaxException11, (java.lang.Throwable) searchQuerySyntaxException15);
        java.lang.Integer int18 = throwableRankList0.getCount((java.lang.Throwable) searchQuerySyntaxException15);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList19 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable20 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException21 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable20);
        java.lang.Throwable[] throwableArray22 = searchQuerySyntaxException21.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException23 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException21);
        java.lang.Throwable throwable24 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException25 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable24);
        java.lang.Throwable[] throwableArray26 = searchQuerySyntaxException25.getSuppressed();
        throwableRankList19.replaceItem((java.lang.Throwable) searchQuerySyntaxException21, (java.lang.Throwable) searchQuerySyntaxException25);
        java.util.List<java.lang.Throwable> throwableList28 = throwableRankList19.getOrder();
        java.lang.Throwable throwable29 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException30 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable29);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList31 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable32 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException33 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable32);
        java.lang.Throwable[] throwableArray34 = searchQuerySyntaxException33.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException35 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException33);
        java.lang.Throwable throwable36 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException37 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable36);
        java.lang.Throwable[] throwableArray38 = searchQuerySyntaxException37.getSuppressed();
        throwableRankList31.replaceItem((java.lang.Throwable) searchQuerySyntaxException33, (java.lang.Throwable) searchQuerySyntaxException37);
        searchQuerySyntaxException30.addSuppressed((java.lang.Throwable) searchQuerySyntaxException37);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException41 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException30);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException42 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException30);
        java.lang.Integer int43 = throwableRankList19.getCount((java.lang.Throwable) searchIndexNotAvailableException42);
        java.lang.Integer int44 = throwableRankList0.getCount((java.lang.Throwable) searchIndexNotAvailableException42);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList45 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList47 = throwableRankList45.getNFirstElements((int) (short) 10);
        throwableRankList45.clear();
        java.util.List<java.lang.Integer> intList50 = throwableRankList45.getNFirstElementCounts(0);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList51 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable52 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException53 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable52);
        java.lang.Throwable[] throwableArray54 = searchQuerySyntaxException53.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException55 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException53);
        java.lang.Throwable throwable56 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException57 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable56);
        java.lang.Throwable[] throwableArray58 = searchQuerySyntaxException57.getSuppressed();
        throwableRankList51.replaceItem((java.lang.Throwable) searchQuerySyntaxException53, (java.lang.Throwable) searchQuerySyntaxException57);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException60 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException57);
        java.lang.Integer int61 = throwableRankList45.getCount((java.lang.Throwable) searchQuerySyntaxException60);
        java.lang.Throwable throwable62 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException63 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable62);
        java.lang.Throwable[] throwableArray64 = searchQuerySyntaxException63.getSuppressed();
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException65 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException63);
        java.lang.Integer int66 = throwableRankList45.getCount((java.lang.Throwable) searchQuerySyntaxException65);
        java.lang.Integer int67 = throwableRankList0.getCount((java.lang.Throwable) searchQuerySyntaxException65);
        java.lang.Throwable[] throwableArray68 = searchQuerySyntaxException65.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableList28);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNull(int43);
        org.junit.Assert.assertNull(int44);
        org.junit.Assert.assertNotNull(throwableList47);
        org.junit.Assert.assertNotNull(intList50);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNull(int61);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNull(int66);
        org.junit.Assert.assertNull(int67);
        org.junit.Assert.assertNotNull(throwableArray68);
    }

    @Test
    public void test0654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0654");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType12 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion17 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType12, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str18 = applicationVersion17.getDate();
        java.lang.String str19 = applicationVersion17.toShortString();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType20 = applicationVersion17.getVersionType();
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion25 = new net.sourceforge.atunes.model.ApplicationVersion("1.0.0 ", (int) (short) 10, (int) '4', (int) '#', versionType20, "", "./enclosure/@url", "SOCKS_PROXY", "./enclosure/@url");
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion30 = new net.sourceforge.atunes.model.ApplicationVersion("./description", 0, (int) (short) 10, 10, versionType20, "/feed/entry", "./author", "mac", "");
        int int31 = applicationVersion30.getMajorNumber();
        java.lang.String str32 = applicationVersion30.getName();
        org.junit.Assert.assertTrue("'" + versionType12 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType12.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "./title" + "'", str18, "./title");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1.0.0 " + "'", str19, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + versionType20 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType20.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "/feed/entry" + "'", str32, "/feed/entry");
    }

    @Test
    public void test0655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0655");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        java.lang.String str12 = applicationVersion9.getDirectDownloadURL();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "./pubDate" + "'", str12, "./pubDate");
    }

    @Test
    public void test0656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0656");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.ATOM;
        java.lang.String str1 = feedType0.getUrlXPath();
        java.lang.String str2 = feedType0.getDescriptionXPath();
        java.lang.String str3 = feedType0.getNameXPath();
        java.lang.String str4 = feedType0.getTypeXPath();
        java.lang.String str5 = feedType0.getTypeXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.ATOM + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.ATOM));
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "./summary" + "'", str2, "./summary");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "/feed/title" + "'", str3, "/feed/title");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "./link[@rel='enclosure']/@type" + "'", str4, "./link[@rel='enclosure']/@type");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "./link[@rel='enclosure']/@type" + "'", str5, "./link[@rel='enclosure']/@type");
    }

    @Test
    public void test0657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0657");
        net.sourceforge.atunes.model.LookAndFeelBean lookAndFeelBean0 = new net.sourceforge.atunes.model.LookAndFeelBean();
        java.lang.String str1 = lookAndFeelBean0.getSkin();
        lookAndFeelBean0.setSkin("./enclosure/@url");
        lookAndFeelBean0.setSkin("hi!");
        lookAndFeelBean0.setSkin("./author");
        lookAndFeelBean0.setSkin("/rss/channel/title");
        java.lang.String str10 = lookAndFeelBean0.getSkin();
        lookAndFeelBean0.setName("flv");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/rss/channel/title" + "'", str10, "/rss/channel/title");
    }

    @Test
    public void test0658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0658");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable[]> throwableArrayRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable[]>();
    }

    @Test
    public void test0659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0659");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.lang.String str3 = cDMetadata0.getAlbum();
        java.util.List<java.lang.Integer> intList4 = cDMetadata0.getTracks();
        int int5 = cDMetadata0.getYear();
        java.util.List<java.lang.String> strList6 = cDMetadata0.getArtistNames();
        cDMetadata0.setDisc((int) (short) 100);
        net.sourceforge.atunes.model.CDMetadata cDMetadata9 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata9.setAlbumArtist("");
        java.lang.String str12 = cDMetadata9.getGenre();
        java.lang.String[] strArray14 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        cDMetadata9.setTrackNames((java.util.List<java.lang.String>) strList15);
        cDMetadata0.setArtistNames((java.util.List<java.lang.String>) strList15);
        net.sourceforge.atunes.model.CDMetadata cDMetadata19 = new net.sourceforge.atunes.model.CDMetadata();
        int int20 = cDMetadata19.getYear();
        java.util.List<java.lang.String> strList21 = cDMetadata19.getComposerNames();
        net.sourceforge.atunes.model.FontSettings fontSettings22 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata23 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata23.setAlbumArtist("");
        boolean boolean26 = fontSettings22.equals((java.lang.Object) cDMetadata23);
        java.lang.String str27 = cDMetadata23.getAlbum();
        java.lang.String str28 = cDMetadata23.getAlbum();
        java.lang.String str30 = cDMetadata23.getTitle(1);
        java.util.List<java.lang.String> strList31 = cDMetadata23.getTrackNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata32 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str33 = cDMetadata32.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata34 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata34.setAlbumArtist("");
        java.lang.String str37 = cDMetadata34.getGenre();
        java.lang.String[] strArray39 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        cDMetadata34.setTrackNames((java.util.List<java.lang.String>) strList40);
        cDMetadata32.setComposerNames((java.util.List<java.lang.String>) strList40);
        cDMetadata23.setComposerNames((java.util.List<java.lang.String>) strList40);
        cDMetadata19.setTrackNames((java.util.List<java.lang.String>) strList40);
        cDMetadata0.setComposerNames((java.util.List<java.lang.String>) strList40);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(intList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(strList21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(strList31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test0660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0660");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        columnBean0.setVisible(false);
        columnBean0.setWidth(0);
        net.sourceforge.atunes.model.ColumnSort columnSort8 = columnBean0.getSort();
        int int9 = columnBean0.getWidth();
        net.sourceforge.atunes.model.ColumnSort columnSort10 = columnBean0.getSort();
        columnBean0.setWidth(150);
        columnBean0.setWidth((int) ' ');
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList15 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList17 = throwableRankList15.getNFirstElements((int) (short) 10);
        throwableRankList15.clear();
        java.util.List<java.lang.Integer> intList20 = throwableRankList15.getNFirstElementCounts(150);
        java.util.List<java.lang.Throwable> throwableList22 = throwableRankList15.getNFirstElements((int) (short) 100);
        throwableRankList15.clear();
        throwableRankList15.clear();
        boolean boolean25 = columnBean0.equals((java.lang.Object) throwableRankList15);
        net.sourceforge.atunes.model.FeedType feedType26 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str27 = feedType26.getUrlXPath();
        java.lang.String str28 = feedType26.getDurationXPath();
        java.lang.String str29 = feedType26.getDateXPath();
        boolean boolean30 = columnBean0.equals((java.lang.Object) feedType26);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(columnSort8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(columnSort10);
        org.junit.Assert.assertNotNull(throwableList17);
        org.junit.Assert.assertNotNull(intList20);
        org.junit.Assert.assertNotNull(throwableList22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + feedType26 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType26.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "./enclosure/@url" + "'", str27, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "./duration" + "'", str28, "./duration");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "./pubDate" + "'", str29, "./pubDate");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test0661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0661");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.lang.String str3 = cDMetadata0.getGenre();
        java.lang.String[] strArray5 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList6);
        cDMetadata0.setAlbumArtist("net.sourceforge.atunes.model.InconsistentRepositoryException");
        int int11 = cDMetadata0.getYear();
        java.util.List<java.lang.String> strList12 = cDMetadata0.getComposerNames();
        cDMetadata0.setAlbumArtist("./duration");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(strList12);
    }

    @Test
    public void test0662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0662");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata1 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata1.setAlbumArtist("");
        boolean boolean4 = fontSettings0.equals((java.lang.Object) cDMetadata1);
        fontSettings0.setUseFontSmoothing(true);
        net.sourceforge.atunes.model.IFontBean iFontBean7 = fontSettings0.getFont();
        net.sourceforge.atunes.model.CDMetadata cDMetadata8 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str9 = cDMetadata8.getGenre();
        java.util.List<java.lang.String> strList10 = cDMetadata8.getComposerNames();
        java.lang.String str11 = cDMetadata8.getAlbum();
        java.util.List<java.lang.Integer> intList12 = cDMetadata8.getTracks();
        cDMetadata8.setAlbumArtist("mpc");
        java.lang.String str15 = cDMetadata8.getAlbum();
        boolean boolean16 = fontSettings0.equals((java.lang.Object) cDMetadata8);
        fontSettings0.setUseFontSmoothingSettingsFromOs(true);
        fontSettings0.setUseFontSmoothingSettingsFromOs(true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(iFontBean7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(strList10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(intList12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0663");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.lang.String str3 = cDMetadata0.getAlbum();
        java.util.List<java.lang.Integer> intList4 = cDMetadata0.getTracks();
        net.sourceforge.atunes.model.CDMetadata cDMetadata5 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata5.setAlbumArtist("");
        java.lang.String str9 = cDMetadata5.getTitle((int) (byte) -1);
        java.lang.String[] strArray11 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        cDMetadata5.setTrackNames((java.util.List<java.lang.String>) strList12);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList12);
        cDMetadata0.setYear((int) (short) 1);
        int int18 = cDMetadata0.getYear();
        cDMetadata0.setGenre("0.10.10 ");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(intList4);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test0664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0664");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata1 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata1.setAlbumArtist("");
        boolean boolean4 = fontSettings0.equals((java.lang.Object) cDMetadata1);
        fontSettings0.setUseFontSmoothingSettingsFromOs(false);
        boolean boolean7 = fontSettings0.isUseFontSmoothing();
        fontSettings0.setUseFontSmoothingSettingsFromOs(false);
        net.sourceforge.atunes.model.IFontBean iFontBean10 = fontSettings0.getFont();
        net.sourceforge.atunes.model.IFontBean iFontBean11 = null;
        fontSettings0.setFont(iFontBean11);
        net.sourceforge.atunes.model.IFontBean iFontBean13 = null;
        fontSettings0.setFont(iFontBean13);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(iFontBean10);
    }

    @Test
    public void test0665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0665");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList2 = throwableRankList0.getNFirstElements((int) (short) 10);
        throwableRankList0.clear();
        java.util.List<java.lang.Integer> intList5 = throwableRankList0.getNFirstElementCounts((int) (short) 0);
        int int6 = throwableRankList0.size();
        java.lang.Throwable throwable7 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException8 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable7);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList9 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable10 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException11 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable10);
        java.lang.Throwable[] throwableArray12 = searchQuerySyntaxException11.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException13 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException11);
        java.lang.Throwable throwable14 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException15 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable14);
        java.lang.Throwable[] throwableArray16 = searchQuerySyntaxException15.getSuppressed();
        throwableRankList9.replaceItem((java.lang.Throwable) searchQuerySyntaxException11, (java.lang.Throwable) searchQuerySyntaxException15);
        searchQuerySyntaxException8.addSuppressed((java.lang.Throwable) searchQuerySyntaxException15);
        java.lang.Throwable[] throwableArray19 = searchQuerySyntaxException15.getSuppressed();
        java.lang.Integer int20 = throwableRankList0.getCount((java.lang.Throwable) searchQuerySyntaxException15);
        java.util.List<java.lang.Throwable> throwableList21 = throwableRankList0.getOrder();
        org.junit.Assert.assertNotNull(throwableList2);
        org.junit.Assert.assertNotNull(intList5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertNotNull(throwableList21);
    }

    @Test
    public void test0666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0666");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        java.lang.String str12 = applicationVersion9.getChanges();
        int int13 = applicationVersion9.getMinorNumber();
        java.lang.String str14 = applicationVersion9.getChanges();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType15 = applicationVersion9.getVersionType();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType20 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion25 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType20, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str26 = applicationVersion25.getDate();
        java.lang.String str27 = applicationVersion25.toShortString();
        int int28 = applicationVersion25.getMajorNumber();
        int int29 = applicationVersion25.getMinorNumber();
        java.lang.String str30 = applicationVersion25.getChanges();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType35 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion40 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType35, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str41 = applicationVersion40.getDate();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType42 = applicationVersion40.getVersionType();
        java.lang.String str43 = applicationVersion40.getDate();
        int int44 = applicationVersion25.compareTo(applicationVersion40);
        int int45 = applicationVersion9.compareTo(applicationVersion25);
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "./title" + "'", str12, "./title");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "./title" + "'", str14, "./title");
        org.junit.Assert.assertTrue("'" + versionType15 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType15.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertTrue("'" + versionType20 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType20.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "./title" + "'", str26, "./title");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1.0.0 " + "'", str27, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "./title" + "'", str30, "./title");
        org.junit.Assert.assertTrue("'" + versionType35 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType35.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "./title" + "'", str41, "./title");
        org.junit.Assert.assertTrue("'" + versionType42 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType42.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "./title" + "'", str43, "./title");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test0667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0667");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.lang.String str4 = cDMetadata0.getTitle((int) (byte) -1);
        java.lang.String[] strArray6 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList7);
        cDMetadata0.setAlbumArtist("/rss/channel/item");
        net.sourceforge.atunes.model.CDMetadata cDMetadata12 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str13 = cDMetadata12.getGenre();
        java.util.List<java.lang.String> strList14 = cDMetadata12.getComposerNames();
        java.lang.String str15 = cDMetadata12.getAlbum();
        java.util.List<java.lang.Integer> intList16 = cDMetadata12.getTracks();
        net.sourceforge.atunes.model.CDMetadata cDMetadata17 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata17.setAlbumArtist("");
        java.lang.String str21 = cDMetadata17.getTitle((int) (byte) -1);
        java.lang.String[] strArray23 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        cDMetadata17.setTrackNames((java.util.List<java.lang.String>) strList24);
        cDMetadata12.setTrackNames((java.util.List<java.lang.String>) strList24);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList24);
        net.sourceforge.atunes.model.CDMetadata cDMetadata29 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata29.setAlbumArtist("");
        java.lang.String str32 = cDMetadata29.getGenre();
        java.lang.String[] strArray34 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        cDMetadata29.setTrackNames((java.util.List<java.lang.String>) strList35);
        cDMetadata29.setDisc(2);
        net.sourceforge.atunes.model.CDMetadata cDMetadata40 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata40.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList43 = cDMetadata40.getTracks();
        cDMetadata40.setAlbumArtist("/rss/channel/title");
        java.util.List<java.lang.String> strList46 = cDMetadata40.getTrackNames();
        cDMetadata40.setAlbum("/rss/channel/item");
        java.util.List<java.lang.String> strList49 = cDMetadata40.getArtistNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata50 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str51 = cDMetadata50.getGenre();
        java.util.List<java.lang.String> strList52 = cDMetadata50.getComposerNames();
        java.lang.String str53 = cDMetadata50.getAlbum();
        java.util.List<java.lang.Integer> intList54 = cDMetadata50.getTracks();
        net.sourceforge.atunes.model.CDMetadata cDMetadata55 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata55.setAlbumArtist("");
        java.lang.String str59 = cDMetadata55.getTitle((int) (byte) -1);
        java.lang.String[] strArray61 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        cDMetadata55.setTrackNames((java.util.List<java.lang.String>) strList62);
        cDMetadata50.setTrackNames((java.util.List<java.lang.String>) strList62);
        cDMetadata50.setYear((int) (short) 1);
        int int68 = cDMetadata50.getYear();
        java.lang.String str69 = cDMetadata50.getGenre();
        cDMetadata50.setYear((int) (short) 10);
        net.sourceforge.atunes.model.CDMetadata cDMetadata72 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata72.setAlbumArtist("");
        java.lang.String str75 = cDMetadata72.getGenre();
        java.lang.String[] strArray77 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList78 = new java.util.ArrayList<java.lang.String>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList78, strArray77);
        cDMetadata72.setTrackNames((java.util.List<java.lang.String>) strList78);
        cDMetadata50.setTrackNames((java.util.List<java.lang.String>) strList78);
        cDMetadata40.setArtistNames((java.util.List<java.lang.String>) strList78);
        cDMetadata29.setArtistNames((java.util.List<java.lang.String>) strList78);
        cDMetadata0.setArtistNames((java.util.List<java.lang.String>) strList78);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(intList16);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNull(intList43);
        org.junit.Assert.assertNull(strList46);
        org.junit.Assert.assertNull(strList49);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(strList52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(intList54);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test0668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0668");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata1 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata1.setAlbumArtist("");
        boolean boolean4 = fontSettings0.equals((java.lang.Object) cDMetadata1);
        fontSettings0.setUseFontSmoothing(true);
        net.sourceforge.atunes.model.IFontBean iFontBean7 = fontSettings0.getFont();
        fontSettings0.setUseFontSmoothing(false);
        fontSettings0.setUseFontSmoothing(false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(iFontBean7);
    }

    @Test
    public void test0669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0669");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.lang.String str3 = cDMetadata0.getGenre();
        java.lang.String[] strArray5 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList6);
        cDMetadata0.setAlbumArtist("net.sourceforge.atunes.model.InconsistentRepositoryException");
        cDMetadata0.setAlbum("./duration");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test0670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0670");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        fontSettings0.setUseFontSmoothing(false);
        net.sourceforge.atunes.model.IFontBean iFontBean3 = fontSettings0.getFont();
        boolean boolean4 = fontSettings0.isUseFontSmoothing();
        fontSettings0.setUseFontSmoothing(true);
        net.sourceforge.atunes.model.IFontBean iFontBean7 = fontSettings0.getFont();
        boolean boolean8 = fontSettings0.isUseFontSmoothing();
        net.sourceforge.atunes.model.IFontBean iFontBean9 = null;
        fontSettings0.setFont(iFontBean9);
        net.sourceforge.atunes.model.CDMetadata cDMetadata11 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata11.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList14 = cDMetadata11.getTracks();
        cDMetadata11.setAlbumArtist("/rss/channel/title");
        java.util.List<java.lang.String> strList17 = cDMetadata11.getTrackNames();
        java.lang.String str18 = cDMetadata11.getAlbumArtist();
        cDMetadata11.setYear((-1));
        java.util.List<java.lang.String> strList21 = cDMetadata11.getTrackNames();
        boolean boolean22 = fontSettings0.equals((java.lang.Object) strList21);
        org.junit.Assert.assertNull(iFontBean3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(iFontBean7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(intList14);
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "/rss/channel/title" + "'", str18, "/rss/channel/title");
        org.junit.Assert.assertNull(strList21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0671");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList2 = throwableRankList0.getNFirstElements((int) (short) 10);
        throwableRankList0.clear();
        java.util.List<java.lang.Integer> intList5 = throwableRankList0.getNFirstElementCounts(150);
        throwableRankList0.clear();
        java.util.List<java.lang.Throwable> throwableList8 = throwableRankList0.getNFirstElements(10);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList9 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList11 = throwableRankList9.getNFirstElements((int) (short) 100);
        java.lang.Throwable throwable12 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException13 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable12);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList14 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable15 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException16 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable15);
        java.lang.Throwable[] throwableArray17 = searchQuerySyntaxException16.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException18 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException16);
        java.lang.Throwable throwable19 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException20 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable19);
        java.lang.Throwable[] throwableArray21 = searchQuerySyntaxException20.getSuppressed();
        throwableRankList14.replaceItem((java.lang.Throwable) searchQuerySyntaxException16, (java.lang.Throwable) searchQuerySyntaxException20);
        searchQuerySyntaxException13.addSuppressed((java.lang.Throwable) searchQuerySyntaxException20);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException24 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException13);
        java.lang.Throwable throwable25 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException26 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable25);
        java.lang.Throwable[] throwableArray27 = searchQuerySyntaxException26.getSuppressed();
        searchQuerySyntaxException13.addSuppressed((java.lang.Throwable) searchQuerySyntaxException26);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException29 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException13);
        java.lang.Throwable throwable30 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException31 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable30);
        java.lang.Throwable[] throwableArray32 = searchQuerySyntaxException31.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException33 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException31);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException34 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException31);
        throwableRankList9.replaceItem((java.lang.Throwable) searchQuerySyntaxException13, (java.lang.Throwable) searchQuerySyntaxException34);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException36 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException34);
        java.lang.Integer int37 = throwableRankList0.getCount((java.lang.Throwable) searchQuerySyntaxException34);
        java.util.List<java.lang.Throwable> throwableList39 = throwableRankList0.getNFirstElements((int) '#');
        java.util.List<java.lang.Throwable> throwableList40 = throwableRankList0.getOrder();
        org.junit.Assert.assertNotNull(throwableList2);
        org.junit.Assert.assertNotNull(intList5);
        org.junit.Assert.assertNotNull(throwableList8);
        org.junit.Assert.assertNotNull(throwableList11);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNull(int37);
        org.junit.Assert.assertNotNull(throwableList39);
        org.junit.Assert.assertNotNull(throwableList40);
    }

    @Test
    public void test0672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0672");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("net.sourceforge.atunes.model.SearchQuerySyntaxException: net.sourceforge.atunes.model.SearchQuerySyntaxException", 1, (int) (short) 1, 0, versionType4, "/rss/channel/title", "net.sourceforge.atunes.model.SearchQuerySyntaxException", "./author", "net.sourceforge.atunes.model.SearchQuerySyntaxException");
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
    }

    @Test
    public void test0673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0673");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        columnBean0.setVisible(false);
        columnBean0.setWidth(0);
        net.sourceforge.atunes.model.ColumnSort columnSort8 = columnBean0.getSort();
        net.sourceforge.atunes.model.ColumnSort columnSort9 = columnBean0.getSort();
        columnBean0.setOrder((int) (short) 100);
        columnBean0.setOrder((int) (byte) -1);
        boolean boolean14 = columnBean0.isVisible();
        boolean boolean15 = columnBean0.isVisible();
        net.sourceforge.atunes.model.ColumnSort columnSort16 = columnBean0.getSort();
        columnBean0.setWidth((int) (short) 10);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(columnSort8);
        org.junit.Assert.assertNull(columnSort9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(columnSort16);
    }

    @Test
    public void test0674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0674");
        net.sourceforge.atunes.model.RankList<net.sourceforge.atunes.model.SearchQuerySyntaxException> searchQuerySyntaxExceptionRankList0 = new net.sourceforge.atunes.model.RankList<net.sourceforge.atunes.model.SearchQuerySyntaxException>();
    }

    @Test
    public void test0675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0675");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str1 = feedType0.getUrlXPath();
        java.lang.String str2 = feedType0.getNameXPath();
        java.lang.String str3 = feedType0.getDescriptionXPath();
        java.lang.String str4 = feedType0.getNameXPath();
        java.lang.String str5 = feedType0.getEntryXPath();
        java.lang.String str6 = feedType0.getEntryXPath();
        java.lang.String str7 = feedType0.getNameXPath();
        java.lang.String str8 = feedType0.getDescriptionXPath();
        java.lang.String str9 = feedType0.getDescriptionXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "./enclosure/@url" + "'", str1, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "/rss/channel/title" + "'", str2, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "./description" + "'", str3, "./description");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "/rss/channel/title" + "'", str4, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/rss/channel/item" + "'", str5, "/rss/channel/item");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "/rss/channel/item" + "'", str6, "/rss/channel/item");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/rss/channel/title" + "'", str7, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "./description" + "'", str8, "./description");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "./description" + "'", str9, "./description");
    }

    @Test
    public void test0676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0676");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.getDownloadURL();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "./description" + "'", str11, "./description");
    }

    @Test
    public void test0677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0677");
        net.sourceforge.atunes.model.LookAndFeelBean lookAndFeelBean0 = new net.sourceforge.atunes.model.LookAndFeelBean();
        java.lang.String str1 = lookAndFeelBean0.getSkin();
        lookAndFeelBean0.setSkin("./enclosure/@url");
        java.lang.String str4 = lookAndFeelBean0.getSkin();
        java.lang.String str5 = lookAndFeelBean0.getSkin();
        lookAndFeelBean0.setName("mac");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "./enclosure/@url" + "'", str4, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "./enclosure/@url" + "'", str5, "./enclosure/@url");
    }

    @Test
    public void test0678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0678");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable1 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException2 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable1);
        java.lang.Throwable[] throwableArray3 = searchQuerySyntaxException2.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException4 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException2);
        java.lang.Throwable throwable5 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException6 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable5);
        java.lang.Throwable[] throwableArray7 = searchQuerySyntaxException6.getSuppressed();
        throwableRankList0.replaceItem((java.lang.Throwable) searchQuerySyntaxException2, (java.lang.Throwable) searchQuerySyntaxException6);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList9 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable10 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException11 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable10);
        java.lang.Throwable[] throwableArray12 = searchQuerySyntaxException11.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException13 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException11);
        java.lang.Throwable throwable14 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException15 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable14);
        java.lang.Throwable[] throwableArray16 = searchQuerySyntaxException15.getSuppressed();
        throwableRankList9.replaceItem((java.lang.Throwable) searchQuerySyntaxException11, (java.lang.Throwable) searchQuerySyntaxException15);
        java.lang.Integer int18 = throwableRankList0.getCount((java.lang.Throwable) searchQuerySyntaxException15);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList19 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable20 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException21 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable20);
        java.lang.Throwable[] throwableArray22 = searchQuerySyntaxException21.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException23 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException21);
        java.lang.Throwable throwable24 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException25 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable24);
        java.lang.Throwable[] throwableArray26 = searchQuerySyntaxException25.getSuppressed();
        throwableRankList19.replaceItem((java.lang.Throwable) searchQuerySyntaxException21, (java.lang.Throwable) searchQuerySyntaxException25);
        java.util.List<java.lang.Throwable> throwableList28 = throwableRankList19.getOrder();
        java.lang.Throwable throwable29 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException30 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable29);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList31 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable32 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException33 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable32);
        java.lang.Throwable[] throwableArray34 = searchQuerySyntaxException33.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException35 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException33);
        java.lang.Throwable throwable36 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException37 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable36);
        java.lang.Throwable[] throwableArray38 = searchQuerySyntaxException37.getSuppressed();
        throwableRankList31.replaceItem((java.lang.Throwable) searchQuerySyntaxException33, (java.lang.Throwable) searchQuerySyntaxException37);
        searchQuerySyntaxException30.addSuppressed((java.lang.Throwable) searchQuerySyntaxException37);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException41 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException30);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException42 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException30);
        java.lang.Integer int43 = throwableRankList19.getCount((java.lang.Throwable) searchIndexNotAvailableException42);
        java.lang.Integer int44 = throwableRankList0.getCount((java.lang.Throwable) searchIndexNotAvailableException42);
        java.util.List<java.lang.Integer> intList46 = throwableRankList0.getNFirstElementCounts((int) (byte) 0);
        java.lang.Throwable throwable47 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException48 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable47);
        java.lang.Throwable[] throwableArray49 = searchQuerySyntaxException48.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException50 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException48);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException51 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException48);
        java.lang.Integer int52 = throwableRankList0.getCount((java.lang.Throwable) searchQuerySyntaxException51);
        java.lang.Throwable[] throwableArray53 = searchQuerySyntaxException51.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableList28);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNull(int43);
        org.junit.Assert.assertNull(int44);
        org.junit.Assert.assertNotNull(intList46);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNull(int52);
        org.junit.Assert.assertNotNull(throwableArray53);
    }

    @Test
    public void test0679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0679");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        int int12 = applicationVersion9.getMajorNumber();
        java.lang.String str13 = applicationVersion9.toShortString();
        net.sourceforge.atunes.model.ArtistViewMode artistViewMode14 = net.sourceforge.atunes.model.ArtistViewMode.BOTH;
        boolean boolean15 = applicationVersion9.equals((java.lang.Object) artistViewMode14);
        int int16 = applicationVersion9.getMajorNumber();
        int int17 = applicationVersion9.getMajorNumber();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1.0.0 " + "'", str13, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + artistViewMode14 + "' != '" + net.sourceforge.atunes.model.ArtistViewMode.BOTH + "'", artistViewMode14.equals(net.sourceforge.atunes.model.ArtistViewMode.BOTH));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test0680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0680");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str1 = feedType0.getUrlXPath();
        java.lang.String str2 = feedType0.getDateXPath();
        java.lang.String str3 = feedType0.getTitleXPath();
        java.lang.String str4 = feedType0.getDurationXPath();
        java.lang.String str5 = feedType0.getEntryXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "./enclosure/@url" + "'", str1, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "./pubDate" + "'", str2, "./pubDate");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "./title" + "'", str3, "./title");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "./duration" + "'", str4, "./duration");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/rss/channel/item" + "'", str5, "/rss/channel/item");
    }

    @Test
    public void test0681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0681");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        columnBean0.setVisible(false);
        net.sourceforge.atunes.model.ColumnSort columnSort6 = columnBean0.getSort();
        net.sourceforge.atunes.model.ColumnSort columnSort7 = columnBean0.getSort();
        columnBean0.setOrder((int) (byte) -1);
        columnBean0.setOrder((int) (short) 10);
        int int12 = columnBean0.getWidth();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(columnSort6);
        org.junit.Assert.assertNull(columnSort7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test0682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0682");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.lang.String str3 = cDMetadata0.getAlbum();
        cDMetadata0.setYear((int) (byte) 10);
        java.util.List<java.lang.Integer> intList6 = cDMetadata0.getTracks();
        cDMetadata0.setGenre("10.52.35 ");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(intList6);
    }

    @Test
    public void test0683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0683");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        columnBean0.setVisible(false);
        net.sourceforge.atunes.model.ColumnSort columnSort6 = columnBean0.getSort();
        int int7 = columnBean0.getWidth();
        boolean boolean8 = columnBean0.isVisible();
        columnBean0.setOrder((int) '4');
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType15 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion20 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType15, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str21 = applicationVersion20.getDate();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType22 = applicationVersion20.getVersionType();
        int int23 = applicationVersion20.getMajorNumber();
        int int24 = applicationVersion20.getRevisionNumber();
        java.lang.String str25 = applicationVersion20.getDirectDownloadURL();
        boolean boolean26 = columnBean0.equals((java.lang.Object) str25);
        int int27 = columnBean0.getOrder();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(columnSort6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + versionType15 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType15.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "./title" + "'", str21, "./title");
        org.junit.Assert.assertTrue("'" + versionType22 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType22.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "./pubDate" + "'", str25, "./pubDate");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
    }

    @Test
    public void test0684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0684");
        net.sourceforge.atunes.model.IFontBean iFontBean0 = null;
        net.sourceforge.atunes.model.FontSettings fontSettings3 = new net.sourceforge.atunes.model.FontSettings(iFontBean0, true, true);
        fontSettings3.setUseFontSmoothing(true);
        boolean boolean6 = fontSettings3.isUseFontSmoothing();
        java.lang.Object obj7 = null;
        boolean boolean8 = fontSettings3.equals(obj7);
        boolean boolean9 = fontSettings3.isUseFontSmoothing();
        fontSettings3.setUseFontSmoothingSettingsFromOs(false);
        net.sourceforge.atunes.model.IFontBean iFontBean12 = fontSettings3.getFont();
        fontSettings3.setUseFontSmoothing(true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(iFontBean12);
    }

    @Test
    public void test0685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0685");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata1 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata1.setAlbumArtist("");
        boolean boolean4 = fontSettings0.equals((java.lang.Object) cDMetadata1);
        fontSettings0.setUseFontSmoothingSettingsFromOs(false);
        net.sourceforge.atunes.model.ViewMode viewMode7 = net.sourceforge.atunes.model.ViewMode.ALBUM;
        boolean boolean8 = fontSettings0.equals((java.lang.Object) viewMode7);
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType13 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion18 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType13, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str19 = applicationVersion18.getDate();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType20 = applicationVersion18.getVersionType();
        java.lang.String str21 = applicationVersion18.getDownloadURL();
        java.lang.String str22 = applicationVersion18.getDirectDownloadURL();
        boolean boolean23 = fontSettings0.equals((java.lang.Object) applicationVersion18);
        net.sourceforge.atunes.model.IFontBean iFontBean24 = fontSettings0.getFont();
        boolean boolean25 = fontSettings0.isUseFontSmoothing();
        java.lang.Object obj26 = null;
        boolean boolean27 = fontSettings0.equals(obj26);
        fontSettings0.setUseFontSmoothingSettingsFromOs(false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + viewMode7 + "' != '" + net.sourceforge.atunes.model.ViewMode.ALBUM + "'", viewMode7.equals(net.sourceforge.atunes.model.ViewMode.ALBUM));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + versionType13 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType13.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "./title" + "'", str19, "./title");
        org.junit.Assert.assertTrue("'" + versionType20 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType20.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "./description" + "'", str21, "./description");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "./pubDate" + "'", str22, "./pubDate");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(iFontBean24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test0686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0686");
        net.sourceforge.atunes.model.IFontBean iFontBean0 = null;
        net.sourceforge.atunes.model.FontSettings fontSettings3 = new net.sourceforge.atunes.model.FontSettings(iFontBean0, false, true);
        fontSettings3.setUseFontSmoothingSettingsFromOs(true);
        net.sourceforge.atunes.model.IFontBean iFontBean6 = fontSettings3.getFont();
        java.lang.Object obj7 = null;
        boolean boolean8 = fontSettings3.equals(obj7);
        boolean boolean9 = fontSettings3.isUseFontSmoothingSettingsFromOs();
        org.junit.Assert.assertNull(iFontBean6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test0687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0687");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        columnBean0.setVisible(false);
        net.sourceforge.atunes.model.ColumnSort columnSort6 = columnBean0.getSort();
        net.sourceforge.atunes.model.TextTagAttribute textTagAttribute7 = net.sourceforge.atunes.model.TextTagAttribute.COMPOSER;
        boolean boolean8 = columnBean0.equals((java.lang.Object) textTagAttribute7);
        columnBean0.setVisible(true);
        columnBean0.setOrder((int) (short) 100);
        net.sourceforge.atunes.model.ColumnSort columnSort13 = columnBean0.getSort();
        int int14 = columnBean0.getOrder();
        columnBean0.setVisible(true);
        columnBean0.setWidth((int) (byte) 0);
        net.sourceforge.atunes.model.ColumnSort columnSort19 = columnBean0.getSort();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(columnSort6);
        org.junit.Assert.assertTrue("'" + textTagAttribute7 + "' != '" + net.sourceforge.atunes.model.TextTagAttribute.COMPOSER + "'", textTagAttribute7.equals(net.sourceforge.atunes.model.TextTagAttribute.COMPOSER));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(columnSort13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertNull(columnSort19);
    }

    @Test
    public void test0688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0688");
        java.lang.Throwable throwable0 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException1 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable0);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList2 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable3 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException4 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable3);
        java.lang.Throwable[] throwableArray5 = searchQuerySyntaxException4.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException6 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException4);
        java.lang.Throwable throwable7 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException8 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable7);
        java.lang.Throwable[] throwableArray9 = searchQuerySyntaxException8.getSuppressed();
        throwableRankList2.replaceItem((java.lang.Throwable) searchQuerySyntaxException4, (java.lang.Throwable) searchQuerySyntaxException8);
        searchQuerySyntaxException1.addSuppressed((java.lang.Throwable) searchQuerySyntaxException8);
        java.lang.Throwable[] throwableArray12 = searchQuerySyntaxException1.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException13 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException1);
        java.lang.Throwable[] throwableArray14 = searchIndexNotAvailableException13.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray14);
    }

    @Test
    public void test0689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0689");
        net.sourceforge.atunes.model.LookAndFeelBean lookAndFeelBean0 = new net.sourceforge.atunes.model.LookAndFeelBean();
        java.lang.String str1 = lookAndFeelBean0.getSkin();
        lookAndFeelBean0.setSkin("./enclosure/@url");
        lookAndFeelBean0.setSkin("hi!");
        java.lang.String str6 = lookAndFeelBean0.getSkin();
        lookAndFeelBean0.setName("net.sourceforge.atunes.model.SearchIndexNotAvailableException: net.sourceforge.atunes.model.SearchQuerySyntaxException");
        java.lang.String str9 = lookAndFeelBean0.getSkin();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
    }

    @Test
    public void test0690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0690");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata1 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata1.setAlbumArtist("");
        boolean boolean4 = fontSettings0.equals((java.lang.Object) cDMetadata1);
        java.lang.String str5 = cDMetadata1.getAlbum();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList6 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList8 = throwableRankList6.getNFirstElements((int) (short) 10);
        throwableRankList6.clear();
        java.util.List<java.lang.Integer> intList11 = throwableRankList6.getNFirstElementCounts(150);
        cDMetadata1.setTracks(intList11);
        java.lang.String str13 = cDMetadata1.getAlbumArtist();
        cDMetadata1.setGenre("SOCKS_PROXY");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(throwableList8);
        org.junit.Assert.assertNotNull(intList11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test0691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0691");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata1 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata1.setAlbumArtist("");
        boolean boolean4 = fontSettings0.equals((java.lang.Object) cDMetadata1);
        fontSettings0.setUseFontSmoothingSettingsFromOs(false);
        boolean boolean7 = fontSettings0.isUseFontSmoothing();
        net.sourceforge.atunes.model.PlaybackState playbackState8 = net.sourceforge.atunes.model.PlaybackState.PLAY_FINISHED;
        boolean boolean9 = fontSettings0.equals((java.lang.Object) playbackState8);
        net.sourceforge.atunes.model.CDMetadata cDMetadata10 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata10.setAlbumArtist("");
        java.lang.String str13 = cDMetadata10.getGenre();
        int int14 = cDMetadata10.getYear();
        int int15 = cDMetadata10.getYear();
        net.sourceforge.atunes.model.CDMetadata cDMetadata16 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str17 = cDMetadata16.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata18 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata18.setAlbumArtist("");
        java.lang.String str21 = cDMetadata18.getGenre();
        java.lang.String[] strArray23 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        cDMetadata18.setTrackNames((java.util.List<java.lang.String>) strList24);
        cDMetadata16.setComposerNames((java.util.List<java.lang.String>) strList24);
        cDMetadata10.setTrackNames((java.util.List<java.lang.String>) strList24);
        net.sourceforge.atunes.model.CDMetadata cDMetadata29 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str30 = cDMetadata29.getGenre();
        java.util.List<java.lang.String> strList31 = cDMetadata29.getComposerNames();
        java.lang.String str32 = cDMetadata29.getAlbum();
        java.util.List<java.lang.Integer> intList33 = cDMetadata29.getTracks();
        int int34 = cDMetadata29.getDisc();
        java.lang.String[] strArray42 = new java.lang.String[] { "net.sourceforge.atunes.model.InconsistentRepositoryException", "./title", "1.0.0 ", "./title", "./duration", "mpc", "net.sourceforge.atunes.model.InconsistentRepositoryException" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        cDMetadata29.setArtistNames((java.util.List<java.lang.String>) strList43);
        cDMetadata10.setArtistNames((java.util.List<java.lang.String>) strList43);
        net.sourceforge.atunes.model.CDMetadata cDMetadata47 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata47.setAlbumArtist("");
        java.lang.String str50 = cDMetadata47.getGenre();
        java.lang.String[] strArray52 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        cDMetadata47.setTrackNames((java.util.List<java.lang.String>) strList53);
        cDMetadata10.setTrackNames((java.util.List<java.lang.String>) strList53);
        boolean boolean57 = fontSettings0.equals((java.lang.Object) cDMetadata10);
        boolean boolean58 = fontSettings0.isUseFontSmoothing();
        net.sourceforge.atunes.model.IFontBean iFontBean59 = fontSettings0.getFont();
        net.sourceforge.atunes.model.IFontBean iFontBean60 = null;
        fontSettings0.setFont(iFontBean60);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + playbackState8 + "' != '" + net.sourceforge.atunes.model.PlaybackState.PLAY_FINISHED + "'", playbackState8.equals(net.sourceforge.atunes.model.PlaybackState.PLAY_FINISHED));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(strList31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(intList33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(iFontBean59);
    }

    @Test
    public void test0692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0692");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata1 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata1.setAlbumArtist("");
        boolean boolean4 = fontSettings0.equals((java.lang.Object) cDMetadata1);
        fontSettings0.setUseFontSmoothing(true);
        net.sourceforge.atunes.model.IFontBean iFontBean7 = fontSettings0.getFont();
        net.sourceforge.atunes.model.CDMetadata cDMetadata8 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str9 = cDMetadata8.getGenre();
        java.util.List<java.lang.String> strList10 = cDMetadata8.getComposerNames();
        java.lang.String str11 = cDMetadata8.getAlbum();
        java.util.List<java.lang.Integer> intList12 = cDMetadata8.getTracks();
        cDMetadata8.setAlbumArtist("mpc");
        java.lang.String str15 = cDMetadata8.getAlbum();
        boolean boolean16 = fontSettings0.equals((java.lang.Object) cDMetadata8);
        net.sourceforge.atunes.model.ColumnBean columnBean17 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean18 = columnBean17.isVisible();
        columnBean17.setOrder((int) (byte) -1);
        columnBean17.setVisible(false);
        net.sourceforge.atunes.model.ColumnSort columnSort23 = columnBean17.getSort();
        net.sourceforge.atunes.model.TextTagAttribute textTagAttribute24 = net.sourceforge.atunes.model.TextTagAttribute.COMPOSER;
        boolean boolean25 = columnBean17.equals((java.lang.Object) textTagAttribute24);
        columnBean17.setVisible(true);
        columnBean17.setOrder((int) (short) 100);
        boolean boolean30 = fontSettings0.equals((java.lang.Object) (short) 100);
        net.sourceforge.atunes.model.ColumnBean columnBean31 = new net.sourceforge.atunes.model.ColumnBean();
        net.sourceforge.atunes.model.AudioObjectProperty audioObjectProperty32 = net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY;
        boolean boolean33 = columnBean31.equals((java.lang.Object) audioObjectProperty32);
        net.sourceforge.atunes.model.FontSettings fontSettings34 = new net.sourceforge.atunes.model.FontSettings();
        boolean boolean35 = fontSettings34.isUseFontSmoothing();
        net.sourceforge.atunes.model.IFontBean iFontBean36 = null;
        fontSettings34.setFont(iFontBean36);
        fontSettings34.setUseFontSmoothingSettingsFromOs(true);
        boolean boolean40 = columnBean31.equals((java.lang.Object) true);
        boolean boolean41 = fontSettings0.equals((java.lang.Object) columnBean31);
        columnBean31.setWidth((int) (short) 10);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(iFontBean7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(strList10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(intList12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(columnSort23);
        org.junit.Assert.assertTrue("'" + textTagAttribute24 + "' != '" + net.sourceforge.atunes.model.TextTagAttribute.COMPOSER + "'", textTagAttribute24.equals(net.sourceforge.atunes.model.TextTagAttribute.COMPOSER));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + audioObjectProperty32 + "' != '" + net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY + "'", audioObjectProperty32.equals(net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test0693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0693");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable1 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException2 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable1);
        java.lang.Throwable[] throwableArray3 = searchQuerySyntaxException2.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException4 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException2);
        java.lang.Throwable throwable5 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException6 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable5);
        java.lang.Throwable[] throwableArray7 = searchQuerySyntaxException6.getSuppressed();
        throwableRankList0.replaceItem((java.lang.Throwable) searchQuerySyntaxException2, (java.lang.Throwable) searchQuerySyntaxException6);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList9 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable10 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException11 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable10);
        java.lang.Throwable[] throwableArray12 = searchQuerySyntaxException11.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException13 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException11);
        java.lang.Throwable throwable14 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException15 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable14);
        java.lang.Throwable[] throwableArray16 = searchQuerySyntaxException15.getSuppressed();
        throwableRankList9.replaceItem((java.lang.Throwable) searchQuerySyntaxException11, (java.lang.Throwable) searchQuerySyntaxException15);
        java.lang.Integer int18 = throwableRankList0.getCount((java.lang.Throwable) searchQuerySyntaxException15);
        java.lang.Throwable throwable19 = null;
        java.lang.Throwable throwable20 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException21 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable20);
        throwableRankList0.replaceItem(throwable19, (java.lang.Throwable) searchQuerySyntaxException21);
        java.util.List<java.lang.Integer> intList24 = throwableRankList0.getNFirstElementCounts((int) (byte) 1);
        int int25 = throwableRankList0.size();
        java.util.List<java.lang.Integer> intList27 = throwableRankList0.getNFirstElementCounts(10);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(intList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intList27);
    }

    @Test
    public void test0694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0694");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.lang.String str3 = cDMetadata0.getAlbum();
        java.util.List<java.lang.Integer> intList4 = cDMetadata0.getTracks();
        java.util.List<java.lang.String> strList5 = cDMetadata0.getArtistNames();
        java.util.List<java.lang.Integer> intList6 = cDMetadata0.getTracks();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(intList4);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNull(intList6);
    }

    @Test
    public void test0695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0695");
        net.sourceforge.atunes.model.LookAndFeelBean lookAndFeelBean0 = new net.sourceforge.atunes.model.LookAndFeelBean();
        java.lang.String str1 = lookAndFeelBean0.getSkin();
        lookAndFeelBean0.setSkin("./enclosure/@url");
        java.lang.String str4 = lookAndFeelBean0.getSkin();
        java.lang.String str5 = lookAndFeelBean0.getName();
        java.lang.String str6 = lookAndFeelBean0.getSkin();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "./enclosure/@url" + "'", str4, "./enclosure/@url");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "./enclosure/@url" + "'", str6, "./enclosure/@url");
    }

    @Test
    public void test0696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0696");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType11 = applicationVersion9.getVersionType();
        java.lang.String str12 = applicationVersion9.getDownloadURL();
        java.lang.String str13 = applicationVersion9.getDirectDownloadURL();
        java.lang.String str14 = applicationVersion9.getDownloadURL();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType19 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion24 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType19, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str25 = applicationVersion24.getDate();
        java.lang.String str26 = applicationVersion24.toShortString();
        int int27 = applicationVersion24.getMajorNumber();
        java.lang.String str28 = applicationVersion24.toShortString();
        java.lang.String str29 = applicationVersion24.getDownloadURL();
        int int30 = applicationVersion9.compareTo(applicationVersion24);
        java.lang.String str31 = applicationVersion24.toString();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertTrue("'" + versionType11 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType11.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "./description" + "'", str12, "./description");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "./pubDate" + "'", str13, "./pubDate");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "./description" + "'", str14, "./description");
        org.junit.Assert.assertTrue("'" + versionType19 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType19.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "./title" + "'", str25, "./title");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1.0.0 " + "'", str26, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1.0.0 " + "'", str28, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "./description" + "'", str29, "./description");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1.0.0 mpc " + "'", str31, "1.0.0 mpc ");
    }

    @Test
    public void test0697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0697");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        int int12 = applicationVersion9.getMajorNumber();
        java.lang.String str13 = applicationVersion9.toShortString();
        net.sourceforge.atunes.model.ArtistViewMode artistViewMode14 = net.sourceforge.atunes.model.ArtistViewMode.BOTH;
        boolean boolean15 = applicationVersion9.equals((java.lang.Object) artistViewMode14);
        int int16 = applicationVersion9.getRevisionNumber();
        int int17 = applicationVersion9.getRevisionNumber();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1.0.0 " + "'", str13, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + artistViewMode14 + "' != '" + net.sourceforge.atunes.model.ArtistViewMode.BOTH + "'", artistViewMode14.equals(net.sourceforge.atunes.model.ArtistViewMode.BOTH));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test0698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0698");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.lang.String str3 = cDMetadata0.getGenre();
        java.lang.String[] strArray5 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList6);
        java.lang.String str10 = cDMetadata0.getTitle((int) (byte) 100);
        cDMetadata0.setYear((int) '4');
        java.util.List<java.lang.String> strList13 = cDMetadata0.getComposerNames();
        java.util.List<java.lang.String> strList14 = cDMetadata0.getArtistNames();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(strList13);
        org.junit.Assert.assertNull(strList14);
    }

    @Test
    public void test0699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0699");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.ATOM;
        java.lang.String str1 = feedType0.getTypeXPath();
        java.lang.String str2 = feedType0.getUrlXPath();
        java.lang.String str3 = feedType0.getDescriptionXPath();
        java.lang.String str4 = feedType0.getDurationXPath();
        java.lang.String str5 = feedType0.getTitleXPath();
        java.lang.String str6 = feedType0.getAuthorXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.ATOM + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.ATOM));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "./link[@rel='enclosure']/@type" + "'", str1, "./link[@rel='enclosure']/@type");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "./summary" + "'", str3, "./summary");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "./title" + "'", str5, "./title");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "./author/name" + "'", str6, "./author/name");
    }

    @Test
    public void test0700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0700");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable1 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException2 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable1);
        java.lang.Throwable[] throwableArray3 = searchQuerySyntaxException2.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException4 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException2);
        java.lang.Throwable throwable5 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException6 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable5);
        java.lang.Throwable[] throwableArray7 = searchQuerySyntaxException6.getSuppressed();
        throwableRankList0.replaceItem((java.lang.Throwable) searchQuerySyntaxException2, (java.lang.Throwable) searchQuerySyntaxException6);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList9 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable10 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException11 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable10);
        java.lang.Throwable[] throwableArray12 = searchQuerySyntaxException11.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException13 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException11);
        java.lang.Throwable throwable14 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException15 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable14);
        java.lang.Throwable[] throwableArray16 = searchQuerySyntaxException15.getSuppressed();
        throwableRankList9.replaceItem((java.lang.Throwable) searchQuerySyntaxException11, (java.lang.Throwable) searchQuerySyntaxException15);
        java.lang.Integer int18 = throwableRankList0.getCount((java.lang.Throwable) searchQuerySyntaxException15);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList19 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList21 = throwableRankList19.getNFirstElements((int) (short) 10);
        throwableRankList19.clear();
        int int23 = throwableRankList19.size();
        java.lang.Throwable throwable24 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException25 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable24);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList26 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable27 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException28 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable27);
        java.lang.Throwable[] throwableArray29 = searchQuerySyntaxException28.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException30 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException28);
        java.lang.Throwable throwable31 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException32 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable31);
        java.lang.Throwable[] throwableArray33 = searchQuerySyntaxException32.getSuppressed();
        throwableRankList26.replaceItem((java.lang.Throwable) searchQuerySyntaxException28, (java.lang.Throwable) searchQuerySyntaxException32);
        searchQuerySyntaxException25.addSuppressed((java.lang.Throwable) searchQuerySyntaxException32);
        java.lang.Integer int36 = throwableRankList19.getCount((java.lang.Throwable) searchQuerySyntaxException32);
        searchQuerySyntaxException15.addSuppressed((java.lang.Throwable) searchQuerySyntaxException32);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException38 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException32);
        java.lang.Throwable throwable39 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException40 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable39);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList41 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable42 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException43 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable42);
        java.lang.Throwable[] throwableArray44 = searchQuerySyntaxException43.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException45 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException43);
        java.lang.Throwable throwable46 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException47 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable46);
        java.lang.Throwable[] throwableArray48 = searchQuerySyntaxException47.getSuppressed();
        throwableRankList41.replaceItem((java.lang.Throwable) searchQuerySyntaxException43, (java.lang.Throwable) searchQuerySyntaxException47);
        searchQuerySyntaxException40.addSuppressed((java.lang.Throwable) searchQuerySyntaxException47);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException51 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException40);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException52 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException40);
        searchQuerySyntaxException32.addSuppressed((java.lang.Throwable) searchQuerySyntaxException40);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(throwableList21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNull(int36);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray48);
    }

    @Test
    public void test0701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0701");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList2 = throwableRankList0.getNFirstElements((int) (short) 10);
        throwableRankList0.clear();
        java.util.List<java.lang.Integer> intList5 = throwableRankList0.getNFirstElementCounts(150);
        java.util.List<java.lang.Throwable> throwableList7 = throwableRankList0.getNFirstElements((int) (short) 100);
        throwableRankList0.clear();
        java.lang.Throwable throwable9 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException10 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable9);
        java.lang.Throwable[] throwableArray11 = searchQuerySyntaxException10.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException12 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException10);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException13 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException10);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList14 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable15 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException16 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable15);
        java.lang.Throwable[] throwableArray17 = searchQuerySyntaxException16.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException18 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException16);
        java.lang.Throwable throwable19 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException20 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable19);
        java.lang.Throwable[] throwableArray21 = searchQuerySyntaxException20.getSuppressed();
        throwableRankList14.replaceItem((java.lang.Throwable) searchQuerySyntaxException16, (java.lang.Throwable) searchQuerySyntaxException20);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException23 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException20);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException24 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException23);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException25 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchIndexNotAvailableException24);
        searchQuerySyntaxException13.addSuppressed((java.lang.Throwable) searchIndexNotAvailableException25);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException27 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException13);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList28 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable29 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException30 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable29);
        java.lang.Throwable[] throwableArray31 = searchQuerySyntaxException30.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException32 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException30);
        java.lang.Throwable throwable33 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException34 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable33);
        java.lang.Throwable[] throwableArray35 = searchQuerySyntaxException34.getSuppressed();
        throwableRankList28.replaceItem((java.lang.Throwable) searchQuerySyntaxException30, (java.lang.Throwable) searchQuerySyntaxException34);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList37 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable38 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException39 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable38);
        java.lang.Throwable[] throwableArray40 = searchQuerySyntaxException39.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException41 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException39);
        java.lang.Throwable throwable42 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException43 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable42);
        java.lang.Throwable[] throwableArray44 = searchQuerySyntaxException43.getSuppressed();
        throwableRankList37.replaceItem((java.lang.Throwable) searchQuerySyntaxException39, (java.lang.Throwable) searchQuerySyntaxException43);
        java.lang.Integer int46 = throwableRankList28.getCount((java.lang.Throwable) searchQuerySyntaxException43);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList47 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable48 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException49 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable48);
        java.lang.Throwable[] throwableArray50 = searchQuerySyntaxException49.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException51 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException49);
        java.lang.Throwable throwable52 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException53 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable52);
        java.lang.Throwable[] throwableArray54 = searchQuerySyntaxException53.getSuppressed();
        throwableRankList47.replaceItem((java.lang.Throwable) searchQuerySyntaxException49, (java.lang.Throwable) searchQuerySyntaxException53);
        java.util.List<java.lang.Throwable> throwableList56 = throwableRankList47.getOrder();
        java.lang.Throwable throwable57 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException58 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable57);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList59 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable60 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException61 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable60);
        java.lang.Throwable[] throwableArray62 = searchQuerySyntaxException61.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException63 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException61);
        java.lang.Throwable throwable64 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException65 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable64);
        java.lang.Throwable[] throwableArray66 = searchQuerySyntaxException65.getSuppressed();
        throwableRankList59.replaceItem((java.lang.Throwable) searchQuerySyntaxException61, (java.lang.Throwable) searchQuerySyntaxException65);
        searchQuerySyntaxException58.addSuppressed((java.lang.Throwable) searchQuerySyntaxException65);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException69 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException58);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException70 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException58);
        java.lang.Integer int71 = throwableRankList47.getCount((java.lang.Throwable) searchIndexNotAvailableException70);
        java.lang.Integer int72 = throwableRankList28.getCount((java.lang.Throwable) searchIndexNotAvailableException70);
        java.lang.Throwable[] throwableArray73 = searchIndexNotAvailableException70.getSuppressed();
        java.lang.Throwable[] throwableArray74 = searchIndexNotAvailableException70.getSuppressed();
        throwableRankList0.replaceItem((java.lang.Throwable) searchQuerySyntaxException13, (java.lang.Throwable) searchIndexNotAvailableException70);
        java.util.List<java.lang.Throwable> throwableList77 = throwableRankList0.getNFirstElements((int) (short) 100);
        org.junit.Assert.assertNotNull(throwableList2);
        org.junit.Assert.assertNotNull(intList5);
        org.junit.Assert.assertNotNull(throwableList7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNull(int46);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableList56);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNull(int71);
        org.junit.Assert.assertNull(int72);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableList77);
    }

    @Test
    public void test0702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0702");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        columnBean0.setVisible(false);
        net.sourceforge.atunes.model.ColumnSort columnSort6 = columnBean0.getSort();
        int int7 = columnBean0.getWidth();
        boolean boolean8 = columnBean0.isVisible();
        columnBean0.setOrder((int) '4');
        net.sourceforge.atunes.model.ColumnSort columnSort11 = columnBean0.getSort();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList12 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList14 = throwableRankList12.getNFirstElements((int) (short) 10);
        throwableRankList12.clear();
        java.util.List<java.lang.Integer> intList17 = throwableRankList12.getNFirstElementCounts(150);
        java.util.List<java.lang.Throwable> throwableList19 = throwableRankList12.getNFirstElements((int) (short) 100);
        java.util.List<java.lang.Throwable> throwableList21 = throwableRankList12.getNFirstElements((int) (byte) 1);
        java.lang.Throwable throwable22 = null;
        throwableRankList12.addItem(throwable22);
        boolean boolean24 = columnBean0.equals((java.lang.Object) throwable22);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(columnSort6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(columnSort11);
        org.junit.Assert.assertNotNull(throwableList14);
        org.junit.Assert.assertNotNull(intList17);
        org.junit.Assert.assertNotNull(throwableList19);
        org.junit.Assert.assertNotNull(throwableList21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0703");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str1 = feedType0.getUrlXPath();
        java.lang.String str2 = feedType0.getNameXPath();
        java.lang.String str3 = feedType0.getDescriptionXPath();
        java.lang.String str4 = feedType0.getNameXPath();
        java.lang.String str5 = feedType0.getNameXPath();
        java.lang.String str6 = feedType0.getAuthorXPath();
        java.lang.String str7 = feedType0.getTypeXPath();
        java.lang.String str8 = feedType0.getTypeXPath();
        java.lang.String str9 = feedType0.getAuthorXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "./enclosure/@url" + "'", str1, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "/rss/channel/title" + "'", str2, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "./description" + "'", str3, "./description");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "/rss/channel/title" + "'", str4, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/rss/channel/title" + "'", str5, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "./author" + "'", str6, "./author");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "./enclosure/@type" + "'", str7, "./enclosure/@type");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "./enclosure/@type" + "'", str8, "./enclosure/@type");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "./author" + "'", str9, "./author");
    }

    @Test
    public void test0704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0704");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        java.lang.String str12 = applicationVersion9.getChanges();
        int int13 = applicationVersion9.getMinorNumber();
        java.lang.String str14 = applicationVersion9.getChanges();
        java.lang.String str15 = applicationVersion9.getDirectDownloadURL();
        int int16 = applicationVersion9.getMajorNumber();
        java.lang.String str17 = applicationVersion9.toString();
        net.sourceforge.atunes.model.CDMetadata cDMetadata18 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata18.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList21 = cDMetadata18.getTracks();
        java.util.List<java.lang.String> strList22 = cDMetadata18.getArtistNames();
        boolean boolean23 = applicationVersion9.equals((java.lang.Object) strList22);
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "./title" + "'", str12, "./title");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "./title" + "'", str14, "./title");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "./pubDate" + "'", str15, "./pubDate");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1.0.0 mpc " + "'", str17, "1.0.0 mpc ");
        org.junit.Assert.assertNull(intList21);
        org.junit.Assert.assertNull(strList22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0705");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        fontSettings0.setUseFontSmoothing(false);
        net.sourceforge.atunes.model.IFontBean iFontBean3 = fontSettings0.getFont();
        boolean boolean4 = fontSettings0.isUseFontSmoothing();
        fontSettings0.setUseFontSmoothing(true);
        boolean boolean7 = fontSettings0.isUseFontSmoothing();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType12 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion17 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType12, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str18 = applicationVersion17.getDate();
        java.lang.String str19 = applicationVersion17.toShortString();
        int int20 = applicationVersion17.getMajorNumber();
        java.lang.String str21 = applicationVersion17.toString();
        java.lang.String str22 = applicationVersion17.getChanges();
        int int23 = applicationVersion17.getRevisionNumber();
        boolean boolean24 = fontSettings0.equals((java.lang.Object) int23);
        net.sourceforge.atunes.model.CDMetadata cDMetadata25 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str26 = cDMetadata25.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata27 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata27.setAlbumArtist("");
        java.lang.String str30 = cDMetadata27.getGenre();
        java.lang.String[] strArray32 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        cDMetadata27.setTrackNames((java.util.List<java.lang.String>) strList33);
        cDMetadata25.setComposerNames((java.util.List<java.lang.String>) strList33);
        java.lang.String str37 = cDMetadata25.getAlbum();
        cDMetadata25.setAlbum("./duration");
        cDMetadata25.setDisc((int) (short) 1);
        boolean boolean42 = fontSettings0.equals((java.lang.Object) cDMetadata25);
        cDMetadata25.setYear(35);
        org.junit.Assert.assertNull(iFontBean3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + versionType12 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType12.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "./title" + "'", str18, "./title");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1.0.0 " + "'", str19, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1.0.0 mpc " + "'", str21, "1.0.0 mpc ");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "./title" + "'", str22, "./title");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test0706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0706");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.lang.String str3 = cDMetadata0.getGenre();
        java.lang.String[] strArray5 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList6);
        cDMetadata0.setAlbumArtist("net.sourceforge.atunes.model.InconsistentRepositoryException");
        cDMetadata0.setDisc((int) (short) -1);
        java.lang.String str13 = cDMetadata0.getAlbumArtist();
        java.util.List<java.lang.String> strList14 = cDMetadata0.getArtistNames();
        java.lang.String str15 = cDMetadata0.getGenre();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "net.sourceforge.atunes.model.InconsistentRepositoryException" + "'", str13, "net.sourceforge.atunes.model.InconsistentRepositoryException");
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test0707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0707");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        columnBean0.setOrder((int) (short) 0);
        columnBean0.setWidth((int) 'a');
        net.sourceforge.atunes.model.ColumnBean columnBean5 = new net.sourceforge.atunes.model.ColumnBean();
        net.sourceforge.atunes.model.AudioObjectProperty audioObjectProperty6 = net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY;
        boolean boolean7 = columnBean5.equals((java.lang.Object) audioObjectProperty6);
        net.sourceforge.atunes.model.TextTagAttribute textTagAttribute8 = net.sourceforge.atunes.model.TextTagAttribute.LYRICS;
        boolean boolean9 = columnBean5.equals((java.lang.Object) textTagAttribute8);
        net.sourceforge.atunes.model.ColumnSort columnSort10 = columnBean5.getSort();
        net.sourceforge.atunes.model.ColumnSort columnSort11 = null;
        columnBean5.setSort(columnSort11);
        net.sourceforge.atunes.model.ColumnBean columnBean13 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean14 = columnBean13.isVisible();
        columnBean13.setOrder((int) (byte) -1);
        columnBean13.setVisible(false);
        columnBean13.setWidth(0);
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType25 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion30 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType25, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str31 = applicationVersion30.getDate();
        java.lang.String str32 = applicationVersion30.toShortString();
        java.lang.String str33 = applicationVersion30.getChanges();
        boolean boolean34 = columnBean13.equals((java.lang.Object) applicationVersion30);
        net.sourceforge.atunes.model.ColumnBean columnBean35 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean36 = columnBean35.isVisible();
        net.sourceforge.atunes.model.SubmissionState submissionState37 = net.sourceforge.atunes.model.SubmissionState.PENDING;
        boolean boolean38 = columnBean35.equals((java.lang.Object) submissionState37);
        columnBean35.setVisible(false);
        net.sourceforge.atunes.model.ColumnSort columnSort41 = net.sourceforge.atunes.model.ColumnSort.ASCENDING;
        columnBean35.setSort(columnSort41);
        columnBean13.setSort(columnSort41);
        boolean boolean44 = columnBean13.isVisible();
        net.sourceforge.atunes.model.ColumnSort columnSort45 = columnBean13.getSort();
        columnBean5.setSort(columnSort45);
        columnBean0.setSort(columnSort45);
        org.junit.Assert.assertTrue("'" + audioObjectProperty6 + "' != '" + net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY + "'", audioObjectProperty6.equals(net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + textTagAttribute8 + "' != '" + net.sourceforge.atunes.model.TextTagAttribute.LYRICS + "'", textTagAttribute8.equals(net.sourceforge.atunes.model.TextTagAttribute.LYRICS));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(columnSort10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + versionType25 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType25.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "./title" + "'", str31, "./title");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1.0.0 " + "'", str32, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "./title" + "'", str33, "./title");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + submissionState37 + "' != '" + net.sourceforge.atunes.model.SubmissionState.PENDING + "'", submissionState37.equals(net.sourceforge.atunes.model.SubmissionState.PENDING));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + columnSort41 + "' != '" + net.sourceforge.atunes.model.ColumnSort.ASCENDING + "'", columnSort41.equals(net.sourceforge.atunes.model.ColumnSort.ASCENDING));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + columnSort45 + "' != '" + net.sourceforge.atunes.model.ColumnSort.ASCENDING + "'", columnSort45.equals(net.sourceforge.atunes.model.ColumnSort.ASCENDING));
    }

    @Test
    public void test0708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0708");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        net.sourceforge.atunes.model.ColumnSort columnSort4 = columnBean0.getSort();
        net.sourceforge.atunes.model.ImageSize imageSize5 = net.sourceforge.atunes.model.ImageSize.SIZE_150;
        int int6 = imageSize5.getSize();
        boolean boolean7 = columnBean0.equals((java.lang.Object) imageSize5);
        columnBean0.setOrder((int) '4');
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(columnSort4);
        org.junit.Assert.assertTrue("'" + imageSize5 + "' != '" + net.sourceforge.atunes.model.ImageSize.SIZE_150 + "'", imageSize5.equals(net.sourceforge.atunes.model.ImageSize.SIZE_150));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 150 + "'", int6 == 150);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0709");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType8 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion13 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType8, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str14 = applicationVersion13.getDate();
        java.lang.String str15 = applicationVersion13.toShortString();
        java.lang.String str16 = applicationVersion13.getChanges();
        int int17 = applicationVersion13.getMinorNumber();
        java.lang.String str18 = applicationVersion13.getChanges();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType19 = applicationVersion13.getVersionType();
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion24 = new net.sourceforge.atunes.model.ApplicationVersion("rm", (int) (short) 0, (int) (short) 1, (int) (byte) 1, versionType19, "./enclosure/@url", "1.0.0 mpc ", "mac", "./enclosure/@type");
        java.lang.String str25 = applicationVersion24.getName();
        org.junit.Assert.assertTrue("'" + versionType8 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType8.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "./title" + "'", str14, "./title");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1.0.0 " + "'", str15, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "./title" + "'", str16, "./title");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "./title" + "'", str18, "./title");
        org.junit.Assert.assertTrue("'" + versionType19 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType19.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "./enclosure/@url" + "'", str25, "./enclosure/@url");
    }

    @Test
    public void test0710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0710");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        int int12 = applicationVersion9.getMajorNumber();
        int int13 = applicationVersion9.getMinorNumber();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType18 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion23 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType18, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str24 = applicationVersion23.getDate();
        java.lang.String str25 = applicationVersion23.toShortString();
        java.lang.String str26 = applicationVersion23.getChanges();
        int int27 = applicationVersion23.getMinorNumber();
        java.lang.String str28 = applicationVersion23.getChanges();
        int int29 = applicationVersion23.getRevisionNumber();
        int int30 = applicationVersion9.compareTo(applicationVersion23);
        java.lang.String str31 = applicationVersion23.getDate();
        java.lang.String str32 = applicationVersion23.toString();
        int int33 = applicationVersion23.getRevisionNumber();
        net.sourceforge.atunes.model.FeedType feedType34 = net.sourceforge.atunes.model.FeedType.ATOM;
        java.lang.String str35 = feedType34.getDescriptionXPath();
        boolean boolean36 = applicationVersion23.equals((java.lang.Object) str35);
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + versionType18 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType18.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "./title" + "'", str24, "./title");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1.0.0 " + "'", str25, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "./title" + "'", str26, "./title");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "./title" + "'", str28, "./title");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "./title" + "'", str31, "./title");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1.0.0 mpc " + "'", str32, "1.0.0 mpc ");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + feedType34 + "' != '" + net.sourceforge.atunes.model.FeedType.ATOM + "'", feedType34.equals(net.sourceforge.atunes.model.FeedType.ATOM));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "./summary" + "'", str35, "./summary");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test0711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0711");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata1 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata1.setAlbumArtist("");
        boolean boolean4 = fontSettings0.equals((java.lang.Object) cDMetadata1);
        fontSettings0.setUseFontSmoothingSettingsFromOs(false);
        boolean boolean7 = fontSettings0.isUseFontSmoothing();
        net.sourceforge.atunes.model.PlaybackState playbackState8 = net.sourceforge.atunes.model.PlaybackState.PLAY_FINISHED;
        boolean boolean9 = fontSettings0.equals((java.lang.Object) playbackState8);
        net.sourceforge.atunes.model.CDMetadata cDMetadata10 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata10.setAlbumArtist("");
        java.lang.String str13 = cDMetadata10.getGenre();
        int int14 = cDMetadata10.getYear();
        int int15 = cDMetadata10.getYear();
        net.sourceforge.atunes.model.CDMetadata cDMetadata16 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str17 = cDMetadata16.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata18 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata18.setAlbumArtist("");
        java.lang.String str21 = cDMetadata18.getGenre();
        java.lang.String[] strArray23 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        cDMetadata18.setTrackNames((java.util.List<java.lang.String>) strList24);
        cDMetadata16.setComposerNames((java.util.List<java.lang.String>) strList24);
        cDMetadata10.setTrackNames((java.util.List<java.lang.String>) strList24);
        net.sourceforge.atunes.model.CDMetadata cDMetadata29 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str30 = cDMetadata29.getGenre();
        java.util.List<java.lang.String> strList31 = cDMetadata29.getComposerNames();
        java.lang.String str32 = cDMetadata29.getAlbum();
        java.util.List<java.lang.Integer> intList33 = cDMetadata29.getTracks();
        int int34 = cDMetadata29.getDisc();
        java.lang.String[] strArray42 = new java.lang.String[] { "net.sourceforge.atunes.model.InconsistentRepositoryException", "./title", "1.0.0 ", "./title", "./duration", "mpc", "net.sourceforge.atunes.model.InconsistentRepositoryException" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        cDMetadata29.setArtistNames((java.util.List<java.lang.String>) strList43);
        cDMetadata10.setArtistNames((java.util.List<java.lang.String>) strList43);
        net.sourceforge.atunes.model.CDMetadata cDMetadata47 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata47.setAlbumArtist("");
        java.lang.String str50 = cDMetadata47.getGenre();
        java.lang.String[] strArray52 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        cDMetadata47.setTrackNames((java.util.List<java.lang.String>) strList53);
        cDMetadata10.setTrackNames((java.util.List<java.lang.String>) strList53);
        boolean boolean57 = fontSettings0.equals((java.lang.Object) cDMetadata10);
        boolean boolean58 = fontSettings0.isUseFontSmoothing();
        net.sourceforge.atunes.model.IFontBean iFontBean59 = fontSettings0.getFont();
        fontSettings0.setUseFontSmoothing(false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + playbackState8 + "' != '" + net.sourceforge.atunes.model.PlaybackState.PLAY_FINISHED + "'", playbackState8.equals(net.sourceforge.atunes.model.PlaybackState.PLAY_FINISHED));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(strList31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(intList33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(iFontBean59);
    }

    @Test
    public void test0712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0712");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList3 = cDMetadata0.getTracks();
        cDMetadata0.setAlbumArtist("/rss/channel/title");
        java.util.List<java.lang.String> strList6 = cDMetadata0.getTrackNames();
        cDMetadata0.setAlbum("/rss/channel/item");
        java.util.List<java.lang.String> strList9 = cDMetadata0.getArtistNames();
        java.util.List<java.lang.Integer> intList10 = cDMetadata0.getTracks();
        cDMetadata0.setGenre("/feed/title");
        org.junit.Assert.assertNull(intList3);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertNull(strList9);
        org.junit.Assert.assertNull(intList10);
    }

    @Test
    public void test0713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0713");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.util.List<java.lang.String> strList1 = cDMetadata0.getArtistNames();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getTrackNames();
        java.lang.String str3 = cDMetadata0.getAlbumArtist();
        cDMetadata0.setAlbumArtist("net.sourceforge.atunes.model.SearchIndexNotAvailableException: net.sourceforge.atunes.model.SearchQuerySyntaxException");
        java.util.List<java.lang.String> strList6 = cDMetadata0.getComposerNames();
        cDMetadata0.setAlbum("0.10.10 ");
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(strList6);
    }

    @Test
    public void test0714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0714");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata1 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata1.setAlbumArtist("");
        boolean boolean4 = fontSettings0.equals((java.lang.Object) cDMetadata1);
        fontSettings0.setUseFontSmoothing(true);
        net.sourceforge.atunes.model.IFontBean iFontBean7 = fontSettings0.getFont();
        net.sourceforge.atunes.model.CDMetadata cDMetadata8 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str9 = cDMetadata8.getGenre();
        java.util.List<java.lang.String> strList10 = cDMetadata8.getComposerNames();
        java.lang.String str11 = cDMetadata8.getAlbum();
        java.util.List<java.lang.Integer> intList12 = cDMetadata8.getTracks();
        cDMetadata8.setAlbumArtist("mpc");
        java.lang.String str15 = cDMetadata8.getAlbum();
        boolean boolean16 = fontSettings0.equals((java.lang.Object) cDMetadata8);
        java.lang.String[] strArray41 = new java.lang.String[] { "./link[@rel='enclosure']/@type", "SOCKS_PROXY", "/feed/title", "./pubDate", "1.0.0 mpc ", "net.sourceforge.atunes.model.InconsistentRepositoryException", "1.0.0 mpc ", "1.0.0 mpc ", "rm", "./enclosure/@type", "/rss/channel/item", "mpc", "./title", "1.0.0 ", "flv", "1.0.0 ", "./link[@rel='enclosure']/@type", "hi!", "./link[@rel='enclosure']/@type", "./updated", "10.52.35  ", "net.sourceforge.atunes.model.InconsistentRepositoryException", "./enclosure/@url", "SOCKS_PROXY" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        cDMetadata8.setTrackNames((java.util.List<java.lang.String>) strList42);
        cDMetadata8.setAlbumArtist("flac");
        net.sourceforge.atunes.model.CDMetadata cDMetadata47 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata47.setAlbumArtist("");
        java.lang.String str51 = cDMetadata47.getTitle((int) (byte) -1);
        net.sourceforge.atunes.model.CDMetadata cDMetadata52 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata52.setAlbumArtist("");
        java.lang.String str56 = cDMetadata52.getTitle((int) (byte) -1);
        java.lang.String[] strArray58 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList59 = new java.util.ArrayList<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList59, strArray58);
        cDMetadata52.setTrackNames((java.util.List<java.lang.String>) strList59);
        cDMetadata47.setArtistNames((java.util.List<java.lang.String>) strList59);
        java.lang.String str64 = cDMetadata47.getTitle((int) (byte) -1);
        cDMetadata47.setAlbumArtist("1.0.0 ");
        net.sourceforge.atunes.model.CDMetadata cDMetadata67 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str68 = cDMetadata67.getGenre();
        java.util.List<java.lang.String> strList69 = cDMetadata67.getComposerNames();
        java.lang.String str70 = cDMetadata67.getAlbum();
        java.util.List<java.lang.Integer> intList71 = cDMetadata67.getTracks();
        int int72 = cDMetadata67.getYear();
        java.util.List<java.lang.String> strList73 = cDMetadata67.getArtistNames();
        cDMetadata67.setDisc((int) (short) 100);
        net.sourceforge.atunes.model.CDMetadata cDMetadata76 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata76.setAlbumArtist("");
        java.lang.String str79 = cDMetadata76.getGenre();
        java.lang.String[] strArray81 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList82 = new java.util.ArrayList<java.lang.String>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList82, strArray81);
        cDMetadata76.setTrackNames((java.util.List<java.lang.String>) strList82);
        cDMetadata67.setArtistNames((java.util.List<java.lang.String>) strList82);
        java.util.List<java.lang.String> strList86 = cDMetadata67.getArtistNames();
        java.util.List<java.lang.String> strList87 = cDMetadata67.getArtistNames();
        cDMetadata47.setArtistNames(strList87);
        cDMetadata8.setArtistNames(strList87);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(iFontBean7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(strList10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(intList12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNull(strList69);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNull(intList71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNull(strList73);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(strList86);
        org.junit.Assert.assertNotNull(strList87);
    }

    @Test
    public void test0715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0715");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType8 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion13 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType8, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str14 = applicationVersion13.getDate();
        java.lang.String str15 = applicationVersion13.toShortString();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType16 = applicationVersion13.getVersionType();
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion21 = new net.sourceforge.atunes.model.ApplicationVersion("1.0.0 ", (int) (short) 10, (int) '4', (int) '#', versionType16, "", "./enclosure/@url", "SOCKS_PROXY", "./enclosure/@url");
        java.lang.String str22 = applicationVersion21.getName();
        java.lang.String str23 = applicationVersion21.toString();
        net.sourceforge.atunes.model.FeedType feedType24 = net.sourceforge.atunes.model.FeedType.ATOM;
        java.lang.String str25 = feedType24.getTypeXPath();
        java.lang.String str26 = feedType24.getUrlXPath();
        boolean boolean27 = applicationVersion21.equals((java.lang.Object) feedType24);
        java.lang.String str28 = applicationVersion21.getDate();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType29 = applicationVersion21.getVersionType();
        int int30 = applicationVersion21.getRevisionNumber();
        org.junit.Assert.assertTrue("'" + versionType8 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType8.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "./title" + "'", str14, "./title");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1.0.0 " + "'", str15, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + versionType16 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType16.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "10.52.35  " + "'", str23, "10.52.35  ");
        org.junit.Assert.assertTrue("'" + feedType24 + "' != '" + net.sourceforge.atunes.model.FeedType.ATOM + "'", feedType24.equals(net.sourceforge.atunes.model.FeedType.ATOM));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "./link[@rel='enclosure']/@type" + "'", str25, "./link[@rel='enclosure']/@type");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1.0.0 " + "'", str28, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + versionType29 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType29.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
    }

    @Test
    public void test0716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0716");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata1 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata1.setAlbumArtist("");
        boolean boolean4 = fontSettings0.equals((java.lang.Object) cDMetadata1);
        fontSettings0.setUseFontSmoothingSettingsFromOs(false);
        boolean boolean7 = fontSettings0.isUseFontSmoothing();
        fontSettings0.setUseFontSmoothingSettingsFromOs(false);
        boolean boolean10 = fontSettings0.isUseFontSmoothing();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0717");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList2 = throwableRankList0.getNFirstElements((int) (short) 10);
        int int3 = throwableRankList0.size();
        int int4 = throwableRankList0.size();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList5 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList7 = throwableRankList5.getNFirstElements((int) (short) 10);
        int int8 = throwableRankList5.size();
        int int9 = throwableRankList5.size();
        java.lang.Throwable throwable10 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException11 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable10);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList12 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable13 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException14 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable13);
        java.lang.Throwable[] throwableArray15 = searchQuerySyntaxException14.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException16 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException14);
        java.lang.Throwable throwable17 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException18 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable17);
        java.lang.Throwable[] throwableArray19 = searchQuerySyntaxException18.getSuppressed();
        throwableRankList12.replaceItem((java.lang.Throwable) searchQuerySyntaxException14, (java.lang.Throwable) searchQuerySyntaxException18);
        searchQuerySyntaxException11.addSuppressed((java.lang.Throwable) searchQuerySyntaxException18);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException22 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException11);
        java.lang.Integer int23 = throwableRankList5.getCount((java.lang.Throwable) searchQuerySyntaxException11);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList24 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList26 = throwableRankList24.getNFirstElements((int) (short) 100);
        java.lang.Throwable throwable27 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException28 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable27);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList29 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable30 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException31 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable30);
        java.lang.Throwable[] throwableArray32 = searchQuerySyntaxException31.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException33 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException31);
        java.lang.Throwable throwable34 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException35 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable34);
        java.lang.Throwable[] throwableArray36 = searchQuerySyntaxException35.getSuppressed();
        throwableRankList29.replaceItem((java.lang.Throwable) searchQuerySyntaxException31, (java.lang.Throwable) searchQuerySyntaxException35);
        searchQuerySyntaxException28.addSuppressed((java.lang.Throwable) searchQuerySyntaxException35);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException39 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException28);
        java.lang.Throwable throwable40 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException41 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable40);
        java.lang.Throwable[] throwableArray42 = searchQuerySyntaxException41.getSuppressed();
        searchQuerySyntaxException28.addSuppressed((java.lang.Throwable) searchQuerySyntaxException41);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException44 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException28);
        java.lang.Throwable throwable45 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException46 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable45);
        java.lang.Throwable[] throwableArray47 = searchQuerySyntaxException46.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException48 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException46);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException49 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException46);
        throwableRankList24.replaceItem((java.lang.Throwable) searchQuerySyntaxException28, (java.lang.Throwable) searchQuerySyntaxException49);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList51 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        net.sourceforge.atunes.model.InconsistentRepositoryException inconsistentRepositoryException52 = new net.sourceforge.atunes.model.InconsistentRepositoryException();
        net.sourceforge.atunes.model.InconsistentRepositoryException inconsistentRepositoryException53 = new net.sourceforge.atunes.model.InconsistentRepositoryException();
        throwableRankList51.replaceItem((java.lang.Throwable) inconsistentRepositoryException52, (java.lang.Throwable) inconsistentRepositoryException53);
        java.lang.Throwable throwable55 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException56 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable55);
        java.lang.Throwable[] throwableArray57 = searchQuerySyntaxException56.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException58 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException56);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException59 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException56);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList60 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable61 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException62 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable61);
        java.lang.Throwable[] throwableArray63 = searchQuerySyntaxException62.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException64 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException62);
        java.lang.Throwable throwable65 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException66 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable65);
        java.lang.Throwable[] throwableArray67 = searchQuerySyntaxException66.getSuppressed();
        throwableRankList60.replaceItem((java.lang.Throwable) searchQuerySyntaxException62, (java.lang.Throwable) searchQuerySyntaxException66);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException69 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException66);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException70 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException69);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException71 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchIndexNotAvailableException70);
        searchQuerySyntaxException59.addSuppressed((java.lang.Throwable) searchIndexNotAvailableException71);
        throwableRankList51.addItem((java.lang.Throwable) searchQuerySyntaxException59);
        throwableRankList5.replaceItem((java.lang.Throwable) searchQuerySyntaxException49, (java.lang.Throwable) searchQuerySyntaxException59);
        throwableRankList0.addItem((java.lang.Throwable) searchQuerySyntaxException49);
        java.util.List<java.lang.Integer> intList77 = throwableRankList0.getNFirstElementCounts(120);
        java.lang.Throwable throwable78 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException79 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable78);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList80 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable81 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException82 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable81);
        java.lang.Throwable[] throwableArray83 = searchQuerySyntaxException82.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException84 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException82);
        java.lang.Throwable throwable85 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException86 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable85);
        java.lang.Throwable[] throwableArray87 = searchQuerySyntaxException86.getSuppressed();
        throwableRankList80.replaceItem((java.lang.Throwable) searchQuerySyntaxException82, (java.lang.Throwable) searchQuerySyntaxException86);
        searchQuerySyntaxException79.addSuppressed((java.lang.Throwable) searchQuerySyntaxException86);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException90 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException79);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException91 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException90);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException92 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException91);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException93 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException91);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException94 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException93);
        throwableRankList0.addItem((java.lang.Throwable) searchQuerySyntaxException93);
        org.junit.Assert.assertNotNull(throwableList2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(throwableList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertNotNull(throwableList26);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(intList77);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertNotNull(throwableArray87);
    }

    @Test
    public void test0718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0718");
        net.sourceforge.atunes.model.OperatingSystem operatingSystem0 = net.sourceforge.atunes.model.OperatingSystem.getWindows();
        java.lang.Class<?> wildcardClass1 = operatingSystem0.getClass();
        org.junit.Assert.assertTrue("'" + operatingSystem0 + "' != '" + net.sourceforge.atunes.model.OperatingSystem.WINDOWS + "'", operatingSystem0.equals(net.sourceforge.atunes.model.OperatingSystem.WINDOWS));
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test0719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0719");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.lang.String str3 = cDMetadata0.getAlbum();
        java.util.List<java.lang.Integer> intList4 = cDMetadata0.getTracks();
        int int5 = cDMetadata0.getYear();
        java.util.List<java.lang.String> strList6 = cDMetadata0.getArtistNames();
        cDMetadata0.setDisc((int) (short) 100);
        net.sourceforge.atunes.model.CDMetadata cDMetadata9 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata9.setAlbumArtist("");
        java.lang.String str12 = cDMetadata9.getGenre();
        java.lang.String[] strArray14 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        cDMetadata9.setTrackNames((java.util.List<java.lang.String>) strList15);
        cDMetadata0.setArtistNames((java.util.List<java.lang.String>) strList15);
        java.lang.String str19 = cDMetadata0.getAlbum();
        net.sourceforge.atunes.model.CDMetadata cDMetadata20 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str21 = cDMetadata20.getGenre();
        java.util.List<java.lang.String> strList22 = cDMetadata20.getComposerNames();
        java.lang.String str23 = cDMetadata20.getAlbum();
        java.util.List<java.lang.Integer> intList24 = cDMetadata20.getTracks();
        net.sourceforge.atunes.model.CDMetadata cDMetadata25 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata25.setAlbumArtist("");
        java.lang.String str29 = cDMetadata25.getTitle((int) (byte) -1);
        java.lang.String[] strArray31 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        cDMetadata25.setTrackNames((java.util.List<java.lang.String>) strList32);
        cDMetadata20.setTrackNames((java.util.List<java.lang.String>) strList32);
        cDMetadata20.setYear((int) (short) 1);
        int int38 = cDMetadata20.getYear();
        cDMetadata20.setAlbumArtist("net.sourceforge.atunes.model.InconsistentRepositoryException");
        cDMetadata20.setAlbum("./title");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList43 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList45 = throwableRankList43.getNFirstElements((int) (short) 10);
        int int46 = throwableRankList43.size();
        int int47 = throwableRankList43.size();
        java.util.List<java.lang.Throwable> throwableList48 = throwableRankList43.getOrder();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList49 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable50 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException51 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable50);
        java.lang.Throwable[] throwableArray52 = searchQuerySyntaxException51.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException53 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException51);
        java.lang.Throwable throwable54 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException55 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable54);
        java.lang.Throwable[] throwableArray56 = searchQuerySyntaxException55.getSuppressed();
        throwableRankList49.replaceItem((java.lang.Throwable) searchQuerySyntaxException51, (java.lang.Throwable) searchQuerySyntaxException55);
        java.lang.Throwable[] throwableArray58 = searchQuerySyntaxException51.getSuppressed();
        java.lang.Throwable[] throwableArray59 = searchQuerySyntaxException51.getSuppressed();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList60 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList62 = throwableRankList60.getNFirstElements((int) (short) 10);
        int int63 = throwableRankList60.size();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList64 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable65 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException66 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable65);
        java.lang.Throwable[] throwableArray67 = searchQuerySyntaxException66.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException68 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException66);
        java.lang.Throwable throwable69 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException70 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable69);
        java.lang.Throwable[] throwableArray71 = searchQuerySyntaxException70.getSuppressed();
        throwableRankList64.replaceItem((java.lang.Throwable) searchQuerySyntaxException66, (java.lang.Throwable) searchQuerySyntaxException70);
        java.lang.Throwable[] throwableArray73 = searchQuerySyntaxException66.getSuppressed();
        java.lang.Integer int74 = throwableRankList60.getCount((java.lang.Throwable) searchQuerySyntaxException66);
        throwableRankList43.replaceItem((java.lang.Throwable) searchQuerySyntaxException51, (java.lang.Throwable) searchQuerySyntaxException66);
        java.lang.Throwable throwable76 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException77 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable76);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList78 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable79 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException80 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable79);
        java.lang.Throwable[] throwableArray81 = searchQuerySyntaxException80.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException82 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException80);
        java.lang.Throwable throwable83 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException84 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable83);
        java.lang.Throwable[] throwableArray85 = searchQuerySyntaxException84.getSuppressed();
        throwableRankList78.replaceItem((java.lang.Throwable) searchQuerySyntaxException80, (java.lang.Throwable) searchQuerySyntaxException84);
        searchQuerySyntaxException77.addSuppressed((java.lang.Throwable) searchQuerySyntaxException84);
        java.lang.Throwable[] throwableArray88 = searchQuerySyntaxException84.getSuppressed();
        throwableRankList43.addItem((java.lang.Throwable) searchQuerySyntaxException84);
        java.util.List<java.lang.Integer> intList91 = throwableRankList43.getNFirstElementCounts((int) (short) -1);
        cDMetadata20.setTracks(intList91);
        java.util.List<java.lang.String> strList93 = cDMetadata20.getTrackNames();
        cDMetadata0.setComposerNames(strList93);
        java.util.List<java.lang.Integer> intList95 = cDMetadata0.getTracks();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(intList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(strList22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(intList24);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(throwableList45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(throwableList48);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableList62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNull(int74);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(throwableArray88);
        org.junit.Assert.assertNotNull(intList91);
        org.junit.Assert.assertNotNull(strList93);
        org.junit.Assert.assertNull(intList95);
    }

    @Test
    public void test0720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0720");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.lang.String str3 = cDMetadata0.getAlbum();
        cDMetadata0.setYear((int) (byte) 10);
        java.util.List<java.lang.String> strList6 = cDMetadata0.getComposerNames();
        java.lang.String str7 = cDMetadata0.getAlbumArtist();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test0721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0721");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.lang.String str3 = cDMetadata0.getAlbum();
        java.util.List<java.lang.Integer> intList4 = cDMetadata0.getTracks();
        net.sourceforge.atunes.model.CDMetadata cDMetadata5 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata5.setAlbumArtist("");
        java.lang.String str9 = cDMetadata5.getTitle((int) (byte) -1);
        java.lang.String[] strArray11 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        cDMetadata5.setTrackNames((java.util.List<java.lang.String>) strList12);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList12);
        cDMetadata0.setYear((int) (short) 1);
        int int18 = cDMetadata0.getDisc();
        int int19 = cDMetadata0.getDisc();
        java.lang.String str20 = cDMetadata0.getGenre();
        java.lang.String str21 = cDMetadata0.getAlbum();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(intList4);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test0722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0722");
        net.sourceforge.atunes.model.LookAndFeelBean lookAndFeelBean0 = new net.sourceforge.atunes.model.LookAndFeelBean();
        lookAndFeelBean0.setName("./summary");
        java.lang.String str3 = lookAndFeelBean0.getSkin();
        lookAndFeelBean0.setName("./description");
        java.lang.String str6 = lookAndFeelBean0.getName();
        java.lang.String str7 = lookAndFeelBean0.getName();
        lookAndFeelBean0.setSkin("");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "./description" + "'", str6, "./description");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "./description" + "'", str7, "./description");
    }

    @Test
    public void test0723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0723");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable1 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException2 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable1);
        java.lang.Throwable[] throwableArray3 = searchQuerySyntaxException2.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException4 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException2);
        java.lang.Throwable throwable5 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException6 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable5);
        java.lang.Throwable[] throwableArray7 = searchQuerySyntaxException6.getSuppressed();
        throwableRankList0.replaceItem((java.lang.Throwable) searchQuerySyntaxException2, (java.lang.Throwable) searchQuerySyntaxException6);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList9 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable10 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException11 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable10);
        java.lang.Throwable[] throwableArray12 = searchQuerySyntaxException11.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException13 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException11);
        java.lang.Throwable throwable14 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException15 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable14);
        java.lang.Throwable[] throwableArray16 = searchQuerySyntaxException15.getSuppressed();
        throwableRankList9.replaceItem((java.lang.Throwable) searchQuerySyntaxException11, (java.lang.Throwable) searchQuerySyntaxException15);
        java.lang.Integer int18 = throwableRankList0.getCount((java.lang.Throwable) searchQuerySyntaxException15);
        java.lang.Throwable throwable19 = null;
        java.lang.Throwable throwable20 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException21 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable20);
        throwableRankList0.replaceItem(throwable19, (java.lang.Throwable) searchQuerySyntaxException21);
        java.util.List<java.lang.Integer> intList24 = throwableRankList0.getNFirstElementCounts((int) (byte) 1);
        java.util.List<java.lang.Throwable> throwableList26 = throwableRankList0.getNFirstElements(0);
        java.util.List<java.lang.Integer> intList28 = throwableRankList0.getNFirstElementCounts((int) 'a');
        java.util.List<java.lang.Throwable> throwableList30 = throwableRankList0.getNFirstElements(97);
        java.lang.Throwable throwable31 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException32 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable31);
        java.lang.Throwable[] throwableArray33 = searchQuerySyntaxException32.getSuppressed();
        java.lang.Throwable[] throwableArray34 = searchQuerySyntaxException32.getSuppressed();
        java.lang.Throwable[] throwableArray35 = searchQuerySyntaxException32.getSuppressed();
        java.lang.Integer int36 = throwableRankList0.getCount((java.lang.Throwable) searchQuerySyntaxException32);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(intList24);
        org.junit.Assert.assertNotNull(throwableList26);
        org.junit.Assert.assertNotNull(intList28);
        org.junit.Assert.assertNotNull(throwableList30);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNull(int36);
    }

    @Test
    public void test0724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0724");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata2 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata2.setAlbumArtist("");
        java.lang.String str5 = cDMetadata2.getGenre();
        java.lang.String[] strArray7 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        cDMetadata2.setTrackNames((java.util.List<java.lang.String>) strList8);
        cDMetadata0.setComposerNames((java.util.List<java.lang.String>) strList8);
        java.lang.String str12 = cDMetadata0.getAlbum();
        cDMetadata0.setAlbum("./duration");
        java.util.List<java.lang.String> strList15 = cDMetadata0.getTrackNames();
        java.lang.String str16 = cDMetadata0.getAlbum();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(strList15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "./duration" + "'", str16, "./duration");
    }

    @Test
    public void test0725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0725");
        net.sourceforge.atunes.model.LookAndFeelBean lookAndFeelBean0 = new net.sourceforge.atunes.model.LookAndFeelBean();
        lookAndFeelBean0.setName("./summary");
        lookAndFeelBean0.setSkin("./enclosure/@url");
        java.lang.String str5 = lookAndFeelBean0.getSkin();
        lookAndFeelBean0.setSkin("net.sourceforge.atunes.model.SearchQuerySyntaxException: net.sourceforge.atunes.model.SearchIndexNotAvailableException: net.sourceforge.atunes.model.SearchQuerySyntaxException");
        java.lang.String str8 = lookAndFeelBean0.getSkin();
        lookAndFeelBean0.setSkin("10.52.35  ");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "./enclosure/@url" + "'", str5, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "net.sourceforge.atunes.model.SearchQuerySyntaxException: net.sourceforge.atunes.model.SearchIndexNotAvailableException: net.sourceforge.atunes.model.SearchQuerySyntaxException" + "'", str8, "net.sourceforge.atunes.model.SearchQuerySyntaxException: net.sourceforge.atunes.model.SearchIndexNotAvailableException: net.sourceforge.atunes.model.SearchQuerySyntaxException");
    }

    @Test
    public void test0726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0726");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable1 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException2 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable1);
        java.lang.Throwable[] throwableArray3 = searchQuerySyntaxException2.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException4 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException2);
        java.lang.Throwable throwable5 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException6 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable5);
        java.lang.Throwable[] throwableArray7 = searchQuerySyntaxException6.getSuppressed();
        throwableRankList0.replaceItem((java.lang.Throwable) searchQuerySyntaxException2, (java.lang.Throwable) searchQuerySyntaxException6);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList9 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable10 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException11 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable10);
        java.lang.Throwable[] throwableArray12 = searchQuerySyntaxException11.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException13 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException11);
        java.lang.Throwable throwable14 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException15 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable14);
        java.lang.Throwable[] throwableArray16 = searchQuerySyntaxException15.getSuppressed();
        throwableRankList9.replaceItem((java.lang.Throwable) searchQuerySyntaxException11, (java.lang.Throwable) searchQuerySyntaxException15);
        java.lang.Integer int18 = throwableRankList0.getCount((java.lang.Throwable) searchQuerySyntaxException15);
        java.util.List<java.lang.Throwable> throwableList20 = throwableRankList0.getNFirstElements((-1));
        throwableRankList0.clear();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList22 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable23 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException24 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable23);
        java.lang.Throwable[] throwableArray25 = searchQuerySyntaxException24.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException26 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException24);
        java.lang.Throwable throwable27 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException28 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable27);
        java.lang.Throwable[] throwableArray29 = searchQuerySyntaxException28.getSuppressed();
        throwableRankList22.replaceItem((java.lang.Throwable) searchQuerySyntaxException24, (java.lang.Throwable) searchQuerySyntaxException28);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList31 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable32 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException33 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable32);
        java.lang.Throwable[] throwableArray34 = searchQuerySyntaxException33.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException35 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException33);
        java.lang.Throwable throwable36 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException37 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable36);
        java.lang.Throwable[] throwableArray38 = searchQuerySyntaxException37.getSuppressed();
        throwableRankList31.replaceItem((java.lang.Throwable) searchQuerySyntaxException33, (java.lang.Throwable) searchQuerySyntaxException37);
        java.lang.Integer int40 = throwableRankList22.getCount((java.lang.Throwable) searchQuerySyntaxException37);
        java.util.List<java.lang.Integer> intList42 = throwableRankList22.getNFirstElementCounts((int) (short) -1);
        java.lang.Throwable throwable43 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException44 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable43);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList45 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable46 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException47 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable46);
        java.lang.Throwable[] throwableArray48 = searchQuerySyntaxException47.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException49 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException47);
        java.lang.Throwable throwable50 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException51 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable50);
        java.lang.Throwable[] throwableArray52 = searchQuerySyntaxException51.getSuppressed();
        throwableRankList45.replaceItem((java.lang.Throwable) searchQuerySyntaxException47, (java.lang.Throwable) searchQuerySyntaxException51);
        searchQuerySyntaxException44.addSuppressed((java.lang.Throwable) searchQuerySyntaxException51);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException55 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException44);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException56 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException55);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException57 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException55);
        throwableRankList22.addItem((java.lang.Throwable) searchQuerySyntaxException57);
        throwableRankList0.addItem((java.lang.Throwable) searchQuerySyntaxException57);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(throwableList20);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNull(int40);
        org.junit.Assert.assertNotNull(intList42);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray52);
    }

    @Test
    public void test0727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0727");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList3 = cDMetadata0.getTracks();
        cDMetadata0.setAlbumArtist("/rss/channel/title");
        java.util.List<java.lang.String> strList6 = cDMetadata0.getTrackNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata7 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata7.setAlbumArtist("");
        java.lang.String str10 = cDMetadata7.getGenre();
        java.lang.String[] strArray12 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        cDMetadata7.setTrackNames((java.util.List<java.lang.String>) strList13);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList13);
        java.util.List<java.lang.String> strList17 = cDMetadata0.getTrackNames();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList18 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable19 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException20 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable19);
        java.lang.Throwable[] throwableArray21 = searchQuerySyntaxException20.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException22 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException20);
        java.lang.Throwable throwable23 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException24 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable23);
        java.lang.Throwable[] throwableArray25 = searchQuerySyntaxException24.getSuppressed();
        throwableRankList18.replaceItem((java.lang.Throwable) searchQuerySyntaxException20, (java.lang.Throwable) searchQuerySyntaxException24);
        java.util.List<java.lang.Throwable> throwableList27 = throwableRankList18.getOrder();
        int int28 = throwableRankList18.size();
        java.util.List<java.lang.Throwable> throwableList30 = throwableRankList18.getNFirstElements(1);
        java.util.List<java.lang.Integer> intList32 = throwableRankList18.getNFirstElementCounts(1);
        cDMetadata0.setTracks(intList32);
        org.junit.Assert.assertNull(intList3);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableList27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(throwableList30);
        org.junit.Assert.assertNotNull(intList32);
    }

    @Test
    public void test0728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0728");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable1 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException2 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable1);
        java.lang.Throwable[] throwableArray3 = searchQuerySyntaxException2.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException4 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException2);
        java.lang.Throwable throwable5 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException6 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable5);
        java.lang.Throwable[] throwableArray7 = searchQuerySyntaxException6.getSuppressed();
        throwableRankList0.replaceItem((java.lang.Throwable) searchQuerySyntaxException2, (java.lang.Throwable) searchQuerySyntaxException6);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList9 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable10 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException11 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable10);
        java.lang.Throwable[] throwableArray12 = searchQuerySyntaxException11.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException13 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException11);
        java.lang.Throwable throwable14 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException15 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable14);
        java.lang.Throwable[] throwableArray16 = searchQuerySyntaxException15.getSuppressed();
        throwableRankList9.replaceItem((java.lang.Throwable) searchQuerySyntaxException11, (java.lang.Throwable) searchQuerySyntaxException15);
        java.lang.Integer int18 = throwableRankList0.getCount((java.lang.Throwable) searchQuerySyntaxException15);
        java.lang.Throwable throwable19 = null;
        java.lang.Throwable throwable20 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException21 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable20);
        throwableRankList0.replaceItem(throwable19, (java.lang.Throwable) searchQuerySyntaxException21);
        java.util.List<java.lang.Integer> intList24 = throwableRankList0.getNFirstElementCounts((int) (byte) 1);
        int int25 = throwableRankList0.size();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList26 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable27 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException28 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable27);
        java.lang.Throwable[] throwableArray29 = searchQuerySyntaxException28.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException30 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException28);
        java.lang.Throwable throwable31 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException32 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable31);
        java.lang.Throwable[] throwableArray33 = searchQuerySyntaxException32.getSuppressed();
        throwableRankList26.replaceItem((java.lang.Throwable) searchQuerySyntaxException28, (java.lang.Throwable) searchQuerySyntaxException32);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList35 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable36 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException37 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable36);
        java.lang.Throwable[] throwableArray38 = searchQuerySyntaxException37.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException39 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException37);
        java.lang.Throwable throwable40 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException41 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable40);
        java.lang.Throwable[] throwableArray42 = searchQuerySyntaxException41.getSuppressed();
        throwableRankList35.replaceItem((java.lang.Throwable) searchQuerySyntaxException37, (java.lang.Throwable) searchQuerySyntaxException41);
        java.lang.Integer int44 = throwableRankList26.getCount((java.lang.Throwable) searchQuerySyntaxException41);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList45 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList47 = throwableRankList45.getNFirstElements((int) (short) 10);
        throwableRankList45.clear();
        int int49 = throwableRankList45.size();
        java.lang.Throwable throwable50 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException51 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable50);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList52 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable53 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException54 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable53);
        java.lang.Throwable[] throwableArray55 = searchQuerySyntaxException54.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException56 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException54);
        java.lang.Throwable throwable57 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException58 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable57);
        java.lang.Throwable[] throwableArray59 = searchQuerySyntaxException58.getSuppressed();
        throwableRankList52.replaceItem((java.lang.Throwable) searchQuerySyntaxException54, (java.lang.Throwable) searchQuerySyntaxException58);
        searchQuerySyntaxException51.addSuppressed((java.lang.Throwable) searchQuerySyntaxException58);
        java.lang.Integer int62 = throwableRankList45.getCount((java.lang.Throwable) searchQuerySyntaxException58);
        searchQuerySyntaxException41.addSuppressed((java.lang.Throwable) searchQuerySyntaxException58);
        throwableRankList0.addItem((java.lang.Throwable) searchQuerySyntaxException41);
        java.lang.Throwable throwable65 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException66 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable65);
        java.lang.Throwable[] throwableArray67 = searchQuerySyntaxException66.getSuppressed();
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException68 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException66);
        net.sourceforge.atunes.model.InconsistentRepositoryException inconsistentRepositoryException69 = new net.sourceforge.atunes.model.InconsistentRepositoryException();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList70 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable71 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException72 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable71);
        java.lang.Throwable[] throwableArray73 = searchQuerySyntaxException72.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException74 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException72);
        java.lang.Throwable throwable75 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException76 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable75);
        java.lang.Throwable[] throwableArray77 = searchQuerySyntaxException76.getSuppressed();
        throwableRankList70.replaceItem((java.lang.Throwable) searchQuerySyntaxException72, (java.lang.Throwable) searchQuerySyntaxException76);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException79 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException76);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException80 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException79);
        inconsistentRepositoryException69.addSuppressed((java.lang.Throwable) searchIndexNotAvailableException80);
        throwableRankList0.replaceItem((java.lang.Throwable) searchQuerySyntaxException66, (java.lang.Throwable) inconsistentRepositoryException69);
        java.lang.Throwable[] throwableArray83 = searchQuerySyntaxException66.getSuppressed();
        java.lang.Class<?> wildcardClass84 = searchQuerySyntaxException66.getClass();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(intList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNull(int44);
        org.junit.Assert.assertNotNull(throwableList47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNull(int62);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0729");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList3 = cDMetadata0.getTracks();
        cDMetadata0.setAlbumArtist("/rss/channel/title");
        java.util.List<java.lang.String> strList6 = cDMetadata0.getTrackNames();
        int int7 = cDMetadata0.getDisc();
        java.lang.String str9 = cDMetadata0.getTitle((int) (byte) 0);
        java.lang.String str10 = cDMetadata0.getAlbumArtist();
        java.util.List<java.lang.Integer> intList11 = cDMetadata0.getTracks();
        org.junit.Assert.assertNull(intList3);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/rss/channel/title" + "'", str10, "/rss/channel/title");
        org.junit.Assert.assertNull(intList11);
    }

    @Test
    public void test0730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0730");
        net.sourceforge.atunes.model.LookAndFeelBean lookAndFeelBean0 = new net.sourceforge.atunes.model.LookAndFeelBean();
        java.lang.String str1 = lookAndFeelBean0.getSkin();
        lookAndFeelBean0.setSkin("./enclosure/@url");
        lookAndFeelBean0.setSkin("hi!");
        java.lang.String str6 = lookAndFeelBean0.getSkin();
        lookAndFeelBean0.setName("net.sourceforge.atunes.model.SearchIndexNotAvailableException: net.sourceforge.atunes.model.SearchQuerySyntaxException");
        lookAndFeelBean0.setSkin("10.52.35  ");
        java.lang.String str11 = lookAndFeelBean0.getSkin();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "10.52.35  " + "'", str11, "10.52.35  ");
    }

    @Test
    public void test0731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0731");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.lang.String str3 = cDMetadata0.getAlbum();
        java.util.List<java.lang.Integer> intList4 = cDMetadata0.getTracks();
        cDMetadata0.setAlbumArtist("mpc");
        java.util.List<java.lang.String> strList7 = cDMetadata0.getArtistNames();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(intList4);
        org.junit.Assert.assertNull(strList7);
    }

    @Test
    public void test0732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0732");
        net.sourceforge.atunes.model.LocalAudioObjectFormat localAudioObjectFormat0 = net.sourceforge.atunes.model.LocalAudioObjectFormat.MP4_2;
        java.lang.String str1 = localAudioObjectFormat0.getExtension();
        java.lang.String str2 = localAudioObjectFormat0.getExtension();
        java.lang.String str3 = localAudioObjectFormat0.getExtension();
        org.junit.Assert.assertTrue("'" + localAudioObjectFormat0 + "' != '" + net.sourceforge.atunes.model.LocalAudioObjectFormat.MP4_2 + "'", localAudioObjectFormat0.equals(net.sourceforge.atunes.model.LocalAudioObjectFormat.MP4_2));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "mp4" + "'", str1, "mp4");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mp4" + "'", str2, "mp4");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mp4" + "'", str3, "mp4");
    }

    @Test
    public void test0733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0733");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable1 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException2 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable1);
        java.lang.Throwable[] throwableArray3 = searchQuerySyntaxException2.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException4 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException2);
        java.lang.Throwable throwable5 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException6 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable5);
        java.lang.Throwable[] throwableArray7 = searchQuerySyntaxException6.getSuppressed();
        throwableRankList0.replaceItem((java.lang.Throwable) searchQuerySyntaxException2, (java.lang.Throwable) searchQuerySyntaxException6);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList9 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable10 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException11 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable10);
        java.lang.Throwable[] throwableArray12 = searchQuerySyntaxException11.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException13 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException11);
        java.lang.Throwable throwable14 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException15 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable14);
        java.lang.Throwable[] throwableArray16 = searchQuerySyntaxException15.getSuppressed();
        throwableRankList9.replaceItem((java.lang.Throwable) searchQuerySyntaxException11, (java.lang.Throwable) searchQuerySyntaxException15);
        java.lang.Integer int18 = throwableRankList0.getCount((java.lang.Throwable) searchQuerySyntaxException15);
        java.util.List<java.lang.Throwable> throwableList20 = throwableRankList0.getNFirstElements((int) (byte) -1);
        throwableRankList0.clear();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(throwableList20);
    }

    @Test
    public void test0734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0734");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        java.lang.String str12 = applicationVersion9.getChanges();
        java.lang.String str13 = applicationVersion9.getChanges();
        int int14 = applicationVersion9.getMajorNumber();
        int int15 = applicationVersion9.getRevisionNumber();
        java.lang.String str16 = applicationVersion9.getName();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "./title" + "'", str12, "./title");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "./title" + "'", str13, "./title");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "mpc" + "'", str16, "mpc");
    }

    @Test
    public void test0735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0735");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        int int12 = applicationVersion9.getMajorNumber();
        int int13 = applicationVersion9.getMinorNumber();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType18 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion23 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType18, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str24 = applicationVersion23.getDate();
        java.lang.String str25 = applicationVersion23.toShortString();
        java.lang.String str26 = applicationVersion23.getChanges();
        int int27 = applicationVersion23.getMinorNumber();
        java.lang.String str28 = applicationVersion23.getChanges();
        int int29 = applicationVersion23.getRevisionNumber();
        int int30 = applicationVersion9.compareTo(applicationVersion23);
        java.lang.String str31 = applicationVersion23.getDate();
        java.lang.String str32 = applicationVersion23.toString();
        int int33 = applicationVersion23.getMinorNumber();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + versionType18 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType18.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "./title" + "'", str24, "./title");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1.0.0 " + "'", str25, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "./title" + "'", str26, "./title");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "./title" + "'", str28, "./title");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "./title" + "'", str31, "./title");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1.0.0 mpc " + "'", str32, "1.0.0 mpc ");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test0736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0736");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        fontSettings0.setUseFontSmoothing(false);
        fontSettings0.setUseFontSmoothingSettingsFromOs(false);
        net.sourceforge.atunes.model.IFontBean iFontBean5 = null;
        fontSettings0.setFont(iFontBean5);
        net.sourceforge.atunes.model.CDMetadata cDMetadata7 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata7.setAlbumArtist("");
        java.lang.String str10 = cDMetadata7.getGenre();
        java.lang.String[] strArray12 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        cDMetadata7.setTrackNames((java.util.List<java.lang.String>) strList13);
        cDMetadata7.setYear((int) (short) 10);
        net.sourceforge.atunes.model.FontSettings fontSettings18 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata19 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata19.setAlbumArtist("");
        boolean boolean22 = fontSettings18.equals((java.lang.Object) cDMetadata19);
        java.lang.String str23 = cDMetadata19.getGenre();
        cDMetadata19.setAlbum("net.sourceforge.atunes.model.SearchQuerySyntaxException");
        java.util.List<java.lang.String> strList26 = cDMetadata19.getArtistNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata27 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str28 = cDMetadata27.getGenre();
        java.util.List<java.lang.String> strList29 = cDMetadata27.getComposerNames();
        java.lang.String str30 = cDMetadata27.getAlbum();
        java.util.List<java.lang.Integer> intList31 = cDMetadata27.getTracks();
        net.sourceforge.atunes.model.CDMetadata cDMetadata32 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata32.setAlbumArtist("");
        java.lang.String str36 = cDMetadata32.getTitle((int) (byte) -1);
        java.lang.String[] strArray38 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        cDMetadata32.setTrackNames((java.util.List<java.lang.String>) strList39);
        cDMetadata27.setTrackNames((java.util.List<java.lang.String>) strList39);
        cDMetadata27.setYear((int) (short) 1);
        int int45 = cDMetadata27.getYear();
        java.lang.String str46 = cDMetadata27.getGenre();
        cDMetadata27.setYear((int) (short) 10);
        net.sourceforge.atunes.model.CDMetadata cDMetadata49 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata49.setAlbumArtist("");
        java.lang.String str52 = cDMetadata49.getGenre();
        java.lang.String[] strArray54 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList55 = new java.util.ArrayList<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList55, strArray54);
        cDMetadata49.setTrackNames((java.util.List<java.lang.String>) strList55);
        cDMetadata27.setTrackNames((java.util.List<java.lang.String>) strList55);
        cDMetadata19.setTrackNames((java.util.List<java.lang.String>) strList55);
        cDMetadata7.setTrackNames((java.util.List<java.lang.String>) strList55);
        boolean boolean61 = fontSettings0.equals((java.lang.Object) cDMetadata7);
        int int62 = cDMetadata7.getYear();
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(intList31);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
    }

    @Test
    public void test0737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0737");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str1 = feedType0.getUrlXPath();
        java.lang.String str2 = feedType0.getNameXPath();
        java.lang.String str3 = feedType0.getDescriptionXPath();
        java.lang.String str4 = feedType0.getNameXPath();
        java.lang.String str5 = feedType0.getEntryXPath();
        java.lang.String str6 = feedType0.getEntryXPath();
        java.lang.String str7 = feedType0.getNameXPath();
        java.lang.String str8 = feedType0.getUrlXPath();
        java.lang.String str9 = feedType0.getDescriptionXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "./enclosure/@url" + "'", str1, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "/rss/channel/title" + "'", str2, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "./description" + "'", str3, "./description");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "/rss/channel/title" + "'", str4, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/rss/channel/item" + "'", str5, "/rss/channel/item");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "/rss/channel/item" + "'", str6, "/rss/channel/item");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/rss/channel/title" + "'", str7, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "./enclosure/@url" + "'", str8, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "./description" + "'", str9, "./description");
    }

    @Test
    public void test0738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0738");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        columnBean0.setVisible(false);
        columnBean0.setWidth(0);
        net.sourceforge.atunes.model.ColumnSort columnSort8 = columnBean0.getSort();
        net.sourceforge.atunes.model.ColumnSort columnSort9 = columnBean0.getSort();
        columnBean0.setOrder((int) (short) 100);
        columnBean0.setOrder((int) (byte) -1);
        boolean boolean14 = columnBean0.isVisible();
        boolean boolean15 = columnBean0.isVisible();
        net.sourceforge.atunes.model.ColumnSort columnSort16 = columnBean0.getSort();
        columnBean0.setOrder(150);
        columnBean0.setWidth(2);
        int int21 = columnBean0.getWidth();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(columnSort8);
        org.junit.Assert.assertNull(columnSort9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(columnSort16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
    }

    @Test
    public void test0739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0739");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        columnBean0.setVisible(false);
        columnBean0.setWidth(0);
        net.sourceforge.atunes.model.ColumnSort columnSort8 = columnBean0.getSort();
        net.sourceforge.atunes.model.ColumnSort columnSort9 = columnBean0.getSort();
        columnBean0.setOrder((int) (short) 100);
        columnBean0.setOrder((int) (byte) -1);
        boolean boolean14 = columnBean0.isVisible();
        boolean boolean15 = columnBean0.isVisible();
        columnBean0.setOrder((int) (short) 1);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(columnSort8);
        org.junit.Assert.assertNull(columnSort9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0740");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType8 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion13 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType8, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str14 = applicationVersion13.getDate();
        java.lang.String str15 = applicationVersion13.toShortString();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType16 = applicationVersion13.getVersionType();
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion21 = new net.sourceforge.atunes.model.ApplicationVersion("1.0.0 ", (int) (short) 10, (int) '4', (int) '#', versionType16, "", "./enclosure/@url", "SOCKS_PROXY", "./enclosure/@url");
        java.lang.String str22 = applicationVersion21.getName();
        java.lang.String str23 = applicationVersion21.toString();
        net.sourceforge.atunes.model.FeedType feedType24 = net.sourceforge.atunes.model.FeedType.ATOM;
        java.lang.String str25 = feedType24.getTypeXPath();
        java.lang.String str26 = feedType24.getUrlXPath();
        boolean boolean27 = applicationVersion21.equals((java.lang.Object) feedType24);
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType28 = applicationVersion21.getVersionType();
        java.lang.String str29 = applicationVersion21.getDate();
        org.junit.Assert.assertTrue("'" + versionType8 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType8.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "./title" + "'", str14, "./title");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1.0.0 " + "'", str15, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + versionType16 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType16.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "10.52.35  " + "'", str23, "10.52.35  ");
        org.junit.Assert.assertTrue("'" + feedType24 + "' != '" + net.sourceforge.atunes.model.FeedType.ATOM + "'", feedType24.equals(net.sourceforge.atunes.model.FeedType.ATOM));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "./link[@rel='enclosure']/@type" + "'", str25, "./link[@rel='enclosure']/@type");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + versionType28 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType28.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1.0.0 " + "'", str29, "1.0.0 ");
    }

    @Test
    public void test0741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0741");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.toString();
        int int11 = applicationVersion9.getMinorNumber();
        java.lang.Class<?> wildcardClass12 = applicationVersion9.getClass();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1.0.0 mpc " + "'", str10, "1.0.0 mpc ");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0742");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.lang.String str3 = cDMetadata0.getAlbum();
        java.util.List<java.lang.Integer> intList4 = cDMetadata0.getTracks();
        int int5 = cDMetadata0.getYear();
        java.util.List<java.lang.String> strList6 = cDMetadata0.getArtistNames();
        int int7 = cDMetadata0.getYear();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(intList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test0743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0743");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        columnBean0.setVisible(false);
        columnBean0.setWidth(0);
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType12 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion17 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType12, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str18 = applicationVersion17.getDate();
        java.lang.String str19 = applicationVersion17.toShortString();
        java.lang.String str20 = applicationVersion17.getChanges();
        boolean boolean21 = columnBean0.equals((java.lang.Object) applicationVersion17);
        net.sourceforge.atunes.model.ColumnSort columnSort22 = columnBean0.getSort();
        boolean boolean23 = columnBean0.isVisible();
        int int24 = columnBean0.getOrder();
        int int25 = columnBean0.getWidth();
        net.sourceforge.atunes.model.ColumnSort columnSort26 = null;
        columnBean0.setSort(columnSort26);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + versionType12 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType12.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "./title" + "'", str18, "./title");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1.0.0 " + "'", str19, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "./title" + "'", str20, "./title");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(columnSort22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test0744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0744");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.ATOM;
        java.lang.String str1 = feedType0.getUrlXPath();
        java.lang.String str2 = feedType0.getDateXPath();
        java.lang.String str3 = feedType0.getTitleXPath();
        java.lang.String str4 = feedType0.getDateXPath();
        java.lang.String str5 = feedType0.getEntryXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.ATOM + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.ATOM));
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "./updated" + "'", str2, "./updated");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "./title" + "'", str3, "./title");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "./updated" + "'", str4, "./updated");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/feed/entry" + "'", str5, "/feed/entry");
    }

    @Test
    public void test0745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0745");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList3 = cDMetadata0.getTracks();
        cDMetadata0.setAlbumArtist("/rss/channel/title");
        java.util.List<java.lang.String> strList6 = cDMetadata0.getTrackNames();
        cDMetadata0.setAlbum("/rss/channel/item");
        java.util.List<java.lang.String> strList9 = cDMetadata0.getArtistNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata10 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata10.setAlbumArtist("");
        java.lang.String str13 = cDMetadata10.getGenre();
        int int14 = cDMetadata10.getYear();
        int int15 = cDMetadata10.getYear();
        net.sourceforge.atunes.model.CDMetadata cDMetadata16 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str17 = cDMetadata16.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata18 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata18.setAlbumArtist("");
        java.lang.String str21 = cDMetadata18.getGenre();
        java.lang.String[] strArray23 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        cDMetadata18.setTrackNames((java.util.List<java.lang.String>) strList24);
        cDMetadata16.setComposerNames((java.util.List<java.lang.String>) strList24);
        cDMetadata10.setTrackNames((java.util.List<java.lang.String>) strList24);
        cDMetadata0.setArtistNames((java.util.List<java.lang.String>) strList24);
        java.util.List<java.lang.String> strList30 = cDMetadata0.getComposerNames();
        org.junit.Assert.assertNull(intList3);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertNull(strList9);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(strList30);
    }

    @Test
    public void test0746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0746");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        net.sourceforge.atunes.model.SubmissionState submissionState2 = net.sourceforge.atunes.model.SubmissionState.PENDING;
        boolean boolean3 = columnBean0.equals((java.lang.Object) submissionState2);
        columnBean0.setVisible(false);
        net.sourceforge.atunes.model.ColumnSort columnSort6 = net.sourceforge.atunes.model.ColumnSort.ASCENDING;
        columnBean0.setSort(columnSort6);
        int int8 = columnBean0.getWidth();
        net.sourceforge.atunes.model.ColumnSort columnSort9 = columnBean0.getSort();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + submissionState2 + "' != '" + net.sourceforge.atunes.model.SubmissionState.PENDING + "'", submissionState2.equals(net.sourceforge.atunes.model.SubmissionState.PENDING));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + columnSort6 + "' != '" + net.sourceforge.atunes.model.ColumnSort.ASCENDING + "'", columnSort6.equals(net.sourceforge.atunes.model.ColumnSort.ASCENDING));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + columnSort9 + "' != '" + net.sourceforge.atunes.model.ColumnSort.ASCENDING + "'", columnSort9.equals(net.sourceforge.atunes.model.ColumnSort.ASCENDING));
    }

    @Test
    public void test0747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0747");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        columnBean0.setVisible(false);
        net.sourceforge.atunes.model.ColumnSort columnSort6 = columnBean0.getSort();
        int int7 = columnBean0.getWidth();
        boolean boolean8 = columnBean0.isVisible();
        boolean boolean9 = columnBean0.isVisible();
        columnBean0.setVisible(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(columnSort6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0748");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.lang.String str3 = cDMetadata0.getGenre();
        int int4 = cDMetadata0.getYear();
        int int5 = cDMetadata0.getYear();
        net.sourceforge.atunes.model.CDMetadata cDMetadata6 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str7 = cDMetadata6.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata8 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata8.setAlbumArtist("");
        java.lang.String str11 = cDMetadata8.getGenre();
        java.lang.String[] strArray13 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        cDMetadata8.setTrackNames((java.util.List<java.lang.String>) strList14);
        cDMetadata6.setComposerNames((java.util.List<java.lang.String>) strList14);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList14);
        net.sourceforge.atunes.model.CDMetadata cDMetadata19 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str20 = cDMetadata19.getGenre();
        java.util.List<java.lang.String> strList21 = cDMetadata19.getComposerNames();
        java.lang.String str22 = cDMetadata19.getAlbum();
        java.util.List<java.lang.Integer> intList23 = cDMetadata19.getTracks();
        int int24 = cDMetadata19.getDisc();
        java.lang.String[] strArray32 = new java.lang.String[] { "net.sourceforge.atunes.model.InconsistentRepositoryException", "./title", "1.0.0 ", "./title", "./duration", "mpc", "net.sourceforge.atunes.model.InconsistentRepositoryException" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        cDMetadata19.setArtistNames((java.util.List<java.lang.String>) strList33);
        cDMetadata0.setArtistNames((java.util.List<java.lang.String>) strList33);
        cDMetadata0.setAlbum("hi!");
        java.util.List<java.lang.String> strList39 = cDMetadata0.getComposerNames();
        cDMetadata0.setYear(120);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(strList21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(intList23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(strList39);
    }

    @Test
    public void test0749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0749");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        cDMetadata0.setYear((int) (byte) 0);
    }

    @Test
    public void test0750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0750");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType8 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion13 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType8, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str14 = applicationVersion13.getDate();
        java.lang.String str15 = applicationVersion13.toShortString();
        int int16 = applicationVersion13.getMajorNumber();
        int int17 = applicationVersion13.getMinorNumber();
        java.lang.String str18 = applicationVersion13.getName();
        java.lang.String str19 = applicationVersion13.getChanges();
        boolean boolean20 = columnBean0.equals((java.lang.Object) applicationVersion13);
        java.lang.String str21 = applicationVersion13.toString();
        int int22 = applicationVersion13.getMajorNumber();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + versionType8 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType8.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "./title" + "'", str14, "./title");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1.0.0 " + "'", str15, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "mpc" + "'", str18, "mpc");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "./title" + "'", str19, "./title");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1.0.0 mpc " + "'", str21, "1.0.0 mpc ");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test0751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0751");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        java.lang.String str12 = applicationVersion9.getChanges();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType13 = applicationVersion9.getVersionType();
        java.lang.String str14 = applicationVersion9.toShortString();
        java.lang.String str15 = applicationVersion9.getDate();
        java.lang.String str16 = applicationVersion9.getChanges();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "./title" + "'", str12, "./title");
        org.junit.Assert.assertTrue("'" + versionType13 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType13.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1.0.0 " + "'", str14, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "./title" + "'", str15, "./title");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "./title" + "'", str16, "./title");
    }

    @Test
    public void test0752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0752");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        columnBean0.setVisible(false);
        columnBean0.setWidth(0);
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType12 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion17 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType12, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str18 = applicationVersion17.getDate();
        java.lang.String str19 = applicationVersion17.toShortString();
        java.lang.String str20 = applicationVersion17.getChanges();
        boolean boolean21 = columnBean0.equals((java.lang.Object) applicationVersion17);
        java.lang.String str22 = applicationVersion17.toString();
        java.lang.String str23 = applicationVersion17.getDownloadURL();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType24 = applicationVersion17.getVersionType();
        java.lang.String str25 = applicationVersion17.getName();
        java.lang.String str26 = applicationVersion17.getDownloadURL();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + versionType12 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType12.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "./title" + "'", str18, "./title");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1.0.0 " + "'", str19, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "./title" + "'", str20, "./title");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1.0.0 mpc " + "'", str22, "1.0.0 mpc ");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "./description" + "'", str23, "./description");
        org.junit.Assert.assertTrue("'" + versionType24 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType24.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "mpc" + "'", str25, "mpc");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "./description" + "'", str26, "./description");
    }

    @Test
    public void test0753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0753");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.lang.String str3 = cDMetadata0.getAlbum();
        java.util.List<java.lang.Integer> intList4 = cDMetadata0.getTracks();
        int int5 = cDMetadata0.getYear();
        java.util.List<java.lang.String> strList6 = cDMetadata0.getArtistNames();
        cDMetadata0.setDisc((int) (short) 100);
        net.sourceforge.atunes.model.CDMetadata cDMetadata9 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata9.setAlbumArtist("");
        java.lang.String str12 = cDMetadata9.getGenre();
        java.lang.String[] strArray14 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        cDMetadata9.setTrackNames((java.util.List<java.lang.String>) strList15);
        cDMetadata0.setArtistNames((java.util.List<java.lang.String>) strList15);
        cDMetadata0.setAlbumArtist("10.1.1 ");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(intList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test0754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0754");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str1 = feedType0.getUrlXPath();
        java.lang.String str2 = feedType0.getUrlXPath();
        java.lang.String str3 = feedType0.getEntryXPath();
        java.lang.String str4 = feedType0.getUrlXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "./enclosure/@url" + "'", str1, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "./enclosure/@url" + "'", str2, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "/rss/channel/item" + "'", str3, "/rss/channel/item");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "./enclosure/@url" + "'", str4, "./enclosure/@url");
    }

    @Test
    public void test0755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0755");
        net.sourceforge.atunes.model.ViewMode viewMode0 = net.sourceforge.atunes.model.ViewMode.YEAR;
        net.sourceforge.atunes.model.IRepository iRepository1 = null;
        java.util.Map<java.lang.String, ?> strMap2 = viewMode0.getDataForView(iRepository1);
        net.sourceforge.atunes.model.IRepository iRepository3 = null;
        java.util.Map<java.lang.String, ?> strMap4 = viewMode0.getDataForView(iRepository3);
        java.lang.Class<?> wildcardClass5 = viewMode0.getClass();
        org.junit.Assert.assertTrue("'" + viewMode0 + "' != '" + net.sourceforge.atunes.model.ViewMode.YEAR + "'", viewMode0.equals(net.sourceforge.atunes.model.ViewMode.YEAR));
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0756");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        columnBean0.setVisible(false);
        net.sourceforge.atunes.model.ColumnSort columnSort6 = columnBean0.getSort();
        int int7 = columnBean0.getWidth();
        boolean boolean8 = columnBean0.isVisible();
        columnBean0.setOrder((int) '4');
        columnBean0.setOrder((int) (short) -1);
        int int13 = columnBean0.getWidth();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(columnSort6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test0757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0757");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str1 = feedType0.getEntryXPath();
        java.lang.String str2 = feedType0.getTypeXPath();
        java.lang.String str3 = feedType0.getNameXPath();
        java.lang.String str4 = feedType0.getUrlXPath();
        java.lang.String str5 = feedType0.getUrlXPath();
        java.lang.String str6 = feedType0.getTitleXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "/rss/channel/item" + "'", str1, "/rss/channel/item");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "./enclosure/@type" + "'", str2, "./enclosure/@type");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "/rss/channel/title" + "'", str3, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "./enclosure/@url" + "'", str4, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "./enclosure/@url" + "'", str5, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "./title" + "'", str6, "./title");
    }

    @Test
    public void test0758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0758");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        java.lang.String str12 = applicationVersion9.toShortString();
        java.lang.String str13 = applicationVersion9.getDownloadURL();
        java.lang.String str14 = applicationVersion9.getDirectDownloadURL();
        java.lang.String str15 = applicationVersion9.toShortString();
        int int16 = applicationVersion9.getMajorNumber();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1.0.0 " + "'", str12, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "./description" + "'", str13, "./description");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "./pubDate" + "'", str14, "./pubDate");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1.0.0 " + "'", str15, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test0759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0759");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList2 = throwableRankList0.getNFirstElements((int) (short) 10);
        throwableRankList0.clear();
        java.util.List<java.lang.Integer> intList5 = throwableRankList0.getNFirstElementCounts(0);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList6 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList8 = throwableRankList6.getNFirstElements((int) (short) 10);
        int int9 = throwableRankList6.size();
        int int10 = throwableRankList6.size();
        java.lang.Throwable throwable11 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException12 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable11);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList13 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable14 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException15 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable14);
        java.lang.Throwable[] throwableArray16 = searchQuerySyntaxException15.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException17 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException15);
        java.lang.Throwable throwable18 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException19 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable18);
        java.lang.Throwable[] throwableArray20 = searchQuerySyntaxException19.getSuppressed();
        throwableRankList13.replaceItem((java.lang.Throwable) searchQuerySyntaxException15, (java.lang.Throwable) searchQuerySyntaxException19);
        searchQuerySyntaxException12.addSuppressed((java.lang.Throwable) searchQuerySyntaxException19);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException23 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException12);
        java.lang.Integer int24 = throwableRankList6.getCount((java.lang.Throwable) searchQuerySyntaxException12);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList25 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList27 = throwableRankList25.getNFirstElements((int) (short) 100);
        java.lang.Throwable throwable28 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException29 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable28);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList30 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable31 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException32 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable31);
        java.lang.Throwable[] throwableArray33 = searchQuerySyntaxException32.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException34 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException32);
        java.lang.Throwable throwable35 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException36 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable35);
        java.lang.Throwable[] throwableArray37 = searchQuerySyntaxException36.getSuppressed();
        throwableRankList30.replaceItem((java.lang.Throwable) searchQuerySyntaxException32, (java.lang.Throwable) searchQuerySyntaxException36);
        searchQuerySyntaxException29.addSuppressed((java.lang.Throwable) searchQuerySyntaxException36);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException40 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException29);
        java.lang.Throwable throwable41 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException42 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable41);
        java.lang.Throwable[] throwableArray43 = searchQuerySyntaxException42.getSuppressed();
        searchQuerySyntaxException29.addSuppressed((java.lang.Throwable) searchQuerySyntaxException42);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException45 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException29);
        java.lang.Throwable throwable46 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException47 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable46);
        java.lang.Throwable[] throwableArray48 = searchQuerySyntaxException47.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException49 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException47);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException50 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException47);
        throwableRankList25.replaceItem((java.lang.Throwable) searchQuerySyntaxException29, (java.lang.Throwable) searchQuerySyntaxException50);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList52 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        net.sourceforge.atunes.model.InconsistentRepositoryException inconsistentRepositoryException53 = new net.sourceforge.atunes.model.InconsistentRepositoryException();
        net.sourceforge.atunes.model.InconsistentRepositoryException inconsistentRepositoryException54 = new net.sourceforge.atunes.model.InconsistentRepositoryException();
        throwableRankList52.replaceItem((java.lang.Throwable) inconsistentRepositoryException53, (java.lang.Throwable) inconsistentRepositoryException54);
        java.lang.Throwable throwable56 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException57 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable56);
        java.lang.Throwable[] throwableArray58 = searchQuerySyntaxException57.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException59 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException57);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException60 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException57);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList61 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable62 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException63 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable62);
        java.lang.Throwable[] throwableArray64 = searchQuerySyntaxException63.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException65 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException63);
        java.lang.Throwable throwable66 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException67 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable66);
        java.lang.Throwable[] throwableArray68 = searchQuerySyntaxException67.getSuppressed();
        throwableRankList61.replaceItem((java.lang.Throwable) searchQuerySyntaxException63, (java.lang.Throwable) searchQuerySyntaxException67);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException70 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException67);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException71 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException70);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException72 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchIndexNotAvailableException71);
        searchQuerySyntaxException60.addSuppressed((java.lang.Throwable) searchIndexNotAvailableException72);
        throwableRankList52.addItem((java.lang.Throwable) searchQuerySyntaxException60);
        throwableRankList6.replaceItem((java.lang.Throwable) searchQuerySyntaxException50, (java.lang.Throwable) searchQuerySyntaxException60);
        throwableRankList0.addItem((java.lang.Throwable) searchQuerySyntaxException50);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException77 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException50);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException78 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException77);
        org.junit.Assert.assertNotNull(throwableList2);
        org.junit.Assert.assertNotNull(intList5);
        org.junit.Assert.assertNotNull(throwableList8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNotNull(throwableList27);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray68);
    }

    @Test
    public void test0760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0760");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        net.sourceforge.atunes.model.AudioObjectProperty audioObjectProperty1 = net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY;
        boolean boolean2 = columnBean0.equals((java.lang.Object) audioObjectProperty1);
        int int3 = columnBean0.getWidth();
        int int4 = columnBean0.getOrder();
        net.sourceforge.atunes.model.CDMetadata cDMetadata5 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata5.setAlbumArtist("");
        java.lang.String str8 = cDMetadata5.getGenre();
        int int9 = cDMetadata5.getYear();
        int int10 = cDMetadata5.getYear();
        cDMetadata5.setGenre("./enclosure/@url");
        java.util.List<java.lang.String> strList13 = null;
        cDMetadata5.setTrackNames(strList13);
        cDMetadata5.setAlbumArtist("./link[@rel='enclosure']/@type");
        boolean boolean17 = columnBean0.equals((java.lang.Object) "./link[@rel='enclosure']/@type");
        net.sourceforge.atunes.model.CDMetadata cDMetadata18 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str19 = cDMetadata18.getGenre();
        java.util.List<java.lang.String> strList20 = cDMetadata18.getComposerNames();
        java.lang.String str21 = cDMetadata18.getAlbum();
        net.sourceforge.atunes.model.CDMetadata cDMetadata22 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata22.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList25 = cDMetadata22.getTracks();
        cDMetadata22.setAlbumArtist("/rss/channel/title");
        java.util.List<java.lang.String> strList28 = cDMetadata22.getTrackNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata29 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata29.setAlbumArtist("");
        java.lang.String str32 = cDMetadata29.getGenre();
        java.lang.String[] strArray34 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        cDMetadata29.setTrackNames((java.util.List<java.lang.String>) strList35);
        cDMetadata22.setTrackNames((java.util.List<java.lang.String>) strList35);
        cDMetadata18.setTrackNames((java.util.List<java.lang.String>) strList35);
        java.util.List<java.lang.String> strList40 = cDMetadata18.getTrackNames();
        boolean boolean41 = columnBean0.equals((java.lang.Object) cDMetadata18);
        java.util.List<java.lang.String> strList42 = cDMetadata18.getArtistNames();
        int int43 = cDMetadata18.getYear();
        org.junit.Assert.assertTrue("'" + audioObjectProperty1 + "' != '" + net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY + "'", audioObjectProperty1.equals(net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(strList20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(intList25);
        org.junit.Assert.assertNull(strList28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(strList42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test0761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0761");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        java.lang.String str12 = applicationVersion9.getChanges();
        int int13 = applicationVersion9.getMinorNumber();
        java.lang.String str14 = applicationVersion9.getChanges();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType19 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion24 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType19, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str25 = applicationVersion24.getDate();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType26 = applicationVersion24.getVersionType();
        java.lang.String str27 = applicationVersion24.getDownloadURL();
        java.lang.String str28 = applicationVersion24.getDirectDownloadURL();
        int int29 = applicationVersion9.compareTo(applicationVersion24);
        java.lang.String str30 = applicationVersion9.getDate();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "./title" + "'", str12, "./title");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "./title" + "'", str14, "./title");
        org.junit.Assert.assertTrue("'" + versionType19 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType19.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "./title" + "'", str25, "./title");
        org.junit.Assert.assertTrue("'" + versionType26 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType26.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "./description" + "'", str27, "./description");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "./pubDate" + "'", str28, "./pubDate");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "./title" + "'", str30, "./title");
    }

    @Test
    public void test0762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0762");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.lang.String str3 = cDMetadata0.getAlbum();
        cDMetadata0.setAlbumArtist("./description");
        cDMetadata0.setAlbumArtist("./description");
        java.lang.String str8 = cDMetadata0.getAlbumArtist();
        java.lang.String str10 = cDMetadata0.getTitle((int) (short) 0);
        java.util.List<java.lang.String> strList11 = cDMetadata0.getTrackNames();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "./description" + "'", str8, "./description");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(strList11);
    }

    @Test
    public void test0763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0763");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str1 = feedType0.getUrlXPath();
        java.lang.String str2 = feedType0.getDateXPath();
        java.lang.String str3 = feedType0.getTitleXPath();
        java.lang.String str4 = feedType0.getDurationXPath();
        java.lang.String str5 = feedType0.getTitleXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "./enclosure/@url" + "'", str1, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "./pubDate" + "'", str2, "./pubDate");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "./title" + "'", str3, "./title");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "./duration" + "'", str4, "./duration");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "./title" + "'", str5, "./title");
    }

    @Test
    public void test0764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0764");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        fontSettings0.setUseFontSmoothing(false);
        fontSettings0.setUseFontSmoothing(false);
        net.sourceforge.atunes.model.IFontBean iFontBean5 = null;
        fontSettings0.setFont(iFontBean5);
        net.sourceforge.atunes.model.IFontBean iFontBean7 = fontSettings0.getFont();
        fontSettings0.setUseFontSmoothing(false);
        net.sourceforge.atunes.model.IFontBean iFontBean10 = null;
        fontSettings0.setFont(iFontBean10);
        boolean boolean12 = fontSettings0.isUseFontSmoothingSettingsFromOs();
        net.sourceforge.atunes.model.IFontBean iFontBean13 = fontSettings0.getFont();
        net.sourceforge.atunes.model.IFontBean iFontBean14 = null;
        fontSettings0.setFont(iFontBean14);
        org.junit.Assert.assertNull(iFontBean7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(iFontBean13);
    }

    @Test
    public void test0765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0765");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable1 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException2 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable1);
        java.lang.Throwable[] throwableArray3 = searchQuerySyntaxException2.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException4 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException2);
        java.lang.Throwable throwable5 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException6 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable5);
        java.lang.Throwable[] throwableArray7 = searchQuerySyntaxException6.getSuppressed();
        throwableRankList0.replaceItem((java.lang.Throwable) searchQuerySyntaxException2, (java.lang.Throwable) searchQuerySyntaxException6);
        java.util.List<java.lang.Throwable> throwableList9 = throwableRankList0.getOrder();
        java.lang.Throwable throwable10 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException11 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable10);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList12 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable13 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException14 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable13);
        java.lang.Throwable[] throwableArray15 = searchQuerySyntaxException14.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException16 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException14);
        java.lang.Throwable throwable17 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException18 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable17);
        java.lang.Throwable[] throwableArray19 = searchQuerySyntaxException18.getSuppressed();
        throwableRankList12.replaceItem((java.lang.Throwable) searchQuerySyntaxException14, (java.lang.Throwable) searchQuerySyntaxException18);
        searchQuerySyntaxException11.addSuppressed((java.lang.Throwable) searchQuerySyntaxException18);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException22 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException11);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException23 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException11);
        java.lang.Integer int24 = throwableRankList0.getCount((java.lang.Throwable) searchIndexNotAvailableException23);
        java.lang.Throwable throwable25 = null;
        throwableRankList0.addItem(throwable25);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableList9);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNull(int24);
    }

    @Test
    public void test0766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0766");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.lang.String str3 = cDMetadata0.getAlbum();
        net.sourceforge.atunes.model.CDMetadata cDMetadata4 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata4.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList7 = cDMetadata4.getTracks();
        cDMetadata4.setAlbumArtist("/rss/channel/title");
        java.util.List<java.lang.String> strList10 = cDMetadata4.getTrackNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata11 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata11.setAlbumArtist("");
        java.lang.String str14 = cDMetadata11.getGenre();
        java.lang.String[] strArray16 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        cDMetadata11.setTrackNames((java.util.List<java.lang.String>) strList17);
        cDMetadata4.setTrackNames((java.util.List<java.lang.String>) strList17);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList17);
        java.util.List<java.lang.String> strList22 = cDMetadata0.getTrackNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata23 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata23.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList26 = cDMetadata23.getTracks();
        cDMetadata23.setAlbumArtist("/rss/channel/title");
        java.util.List<java.lang.String> strList29 = cDMetadata23.getTrackNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata30 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata30.setAlbumArtist("");
        java.lang.String str33 = cDMetadata30.getGenre();
        java.lang.String[] strArray35 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        cDMetadata30.setTrackNames((java.util.List<java.lang.String>) strList36);
        cDMetadata23.setTrackNames((java.util.List<java.lang.String>) strList36);
        cDMetadata0.setArtistNames((java.util.List<java.lang.String>) strList36);
        java.lang.String str42 = cDMetadata0.getTitle(10);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(intList7);
        org.junit.Assert.assertNull(strList10);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNull(intList26);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNull(str42);
    }

    @Test
    public void test0767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0767");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType12 = applicationVersion9.getVersionType();
        int int13 = applicationVersion9.getMinorNumber();
        int int14 = applicationVersion9.getRevisionNumber();
        java.lang.String str15 = applicationVersion9.toString();
        java.lang.String str16 = applicationVersion9.toString();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + versionType12 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType12.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1.0.0 mpc " + "'", str15, "1.0.0 mpc ");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1.0.0 mpc " + "'", str16, "1.0.0 mpc ");
    }

    @Test
    public void test0768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0768");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType10 = applicationVersion9.getVersionType();
        java.lang.String str11 = applicationVersion9.getName();
        java.lang.String str12 = applicationVersion9.toShortString();
        net.sourceforge.atunes.model.CDMetadata cDMetadata13 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str14 = cDMetadata13.getGenre();
        java.util.List<java.lang.String> strList15 = cDMetadata13.getComposerNames();
        java.lang.String str16 = cDMetadata13.getAlbum();
        java.util.List<java.lang.Integer> intList17 = cDMetadata13.getTracks();
        cDMetadata13.setAlbumArtist("mpc");
        java.lang.String str21 = cDMetadata13.getTitle(90);
        java.util.List<java.lang.String> strList22 = cDMetadata13.getArtistNames();
        cDMetadata13.setDisc(3);
        boolean boolean25 = applicationVersion9.equals((java.lang.Object) 3);
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertTrue("'" + versionType10 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType10.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mpc" + "'", str11, "mpc");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1.0.0 " + "'", str12, "1.0.0 ");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(strList15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(intList17);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(strList22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test0769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0769");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.ATOM;
        java.lang.String str1 = feedType0.getTypeXPath();
        java.lang.String str2 = feedType0.getDurationXPath();
        java.lang.String str3 = feedType0.getAuthorXPath();
        java.lang.String str4 = feedType0.getDateXPath();
        java.lang.String str5 = feedType0.getTypeXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.ATOM + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.ATOM));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "./link[@rel='enclosure']/@type" + "'", str1, "./link[@rel='enclosure']/@type");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "./author/name" + "'", str3, "./author/name");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "./updated" + "'", str4, "./updated");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "./link[@rel='enclosure']/@type" + "'", str5, "./link[@rel='enclosure']/@type");
    }

    @Test
    public void test0770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0770");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        net.sourceforge.atunes.model.AudioObjectProperty audioObjectProperty1 = net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY;
        boolean boolean2 = columnBean0.equals((java.lang.Object) audioObjectProperty1);
        int int3 = columnBean0.getWidth();
        int int4 = columnBean0.getOrder();
        net.sourceforge.atunes.model.CDMetadata cDMetadata5 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata5.setAlbumArtist("");
        java.lang.String str8 = cDMetadata5.getGenre();
        int int9 = cDMetadata5.getYear();
        int int10 = cDMetadata5.getYear();
        cDMetadata5.setGenre("./enclosure/@url");
        java.util.List<java.lang.String> strList13 = null;
        cDMetadata5.setTrackNames(strList13);
        cDMetadata5.setAlbumArtist("./link[@rel='enclosure']/@type");
        boolean boolean17 = columnBean0.equals((java.lang.Object) "./link[@rel='enclosure']/@type");
        net.sourceforge.atunes.model.CDMetadata cDMetadata18 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str19 = cDMetadata18.getGenre();
        java.util.List<java.lang.String> strList20 = cDMetadata18.getComposerNames();
        java.lang.String str21 = cDMetadata18.getAlbum();
        net.sourceforge.atunes.model.CDMetadata cDMetadata22 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata22.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList25 = cDMetadata22.getTracks();
        cDMetadata22.setAlbumArtist("/rss/channel/title");
        java.util.List<java.lang.String> strList28 = cDMetadata22.getTrackNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata29 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata29.setAlbumArtist("");
        java.lang.String str32 = cDMetadata29.getGenre();
        java.lang.String[] strArray34 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        cDMetadata29.setTrackNames((java.util.List<java.lang.String>) strList35);
        cDMetadata22.setTrackNames((java.util.List<java.lang.String>) strList35);
        cDMetadata18.setTrackNames((java.util.List<java.lang.String>) strList35);
        java.util.List<java.lang.String> strList40 = cDMetadata18.getTrackNames();
        boolean boolean41 = columnBean0.equals((java.lang.Object) cDMetadata18);
        net.sourceforge.atunes.model.ColumnBean columnBean42 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean43 = columnBean42.isVisible();
        columnBean42.setOrder((int) (byte) -1);
        columnBean42.setVisible(false);
        columnBean42.setWidth(0);
        net.sourceforge.atunes.model.ColumnSort columnSort50 = columnBean42.getSort();
        columnBean42.setWidth((int) (byte) 10);
        columnBean42.setVisible(true);
        net.sourceforge.atunes.model.ColumnBean columnBean55 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean56 = columnBean55.isVisible();
        columnBean55.setOrder((int) (byte) -1);
        columnBean55.setVisible(false);
        columnBean55.setWidth(0);
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType67 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion72 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType67, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str73 = applicationVersion72.getDate();
        java.lang.String str74 = applicationVersion72.toShortString();
        java.lang.String str75 = applicationVersion72.getChanges();
        boolean boolean76 = columnBean55.equals((java.lang.Object) applicationVersion72);
        net.sourceforge.atunes.model.ColumnBean columnBean77 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean78 = columnBean77.isVisible();
        net.sourceforge.atunes.model.SubmissionState submissionState79 = net.sourceforge.atunes.model.SubmissionState.PENDING;
        boolean boolean80 = columnBean77.equals((java.lang.Object) submissionState79);
        columnBean77.setVisible(false);
        net.sourceforge.atunes.model.ColumnSort columnSort83 = net.sourceforge.atunes.model.ColumnSort.ASCENDING;
        columnBean77.setSort(columnSort83);
        columnBean55.setSort(columnSort83);
        columnBean42.setSort(columnSort83);
        columnBean0.setSort(columnSort83);
        org.junit.Assert.assertTrue("'" + audioObjectProperty1 + "' != '" + net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY + "'", audioObjectProperty1.equals(net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(strList20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(intList25);
        org.junit.Assert.assertNull(strList28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(columnSort50);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + versionType67 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType67.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "./title" + "'", str73, "./title");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "1.0.0 " + "'", str74, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "./title" + "'", str75, "./title");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + submissionState79 + "' != '" + net.sourceforge.atunes.model.SubmissionState.PENDING + "'", submissionState79.equals(net.sourceforge.atunes.model.SubmissionState.PENDING));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + columnSort83 + "' != '" + net.sourceforge.atunes.model.ColumnSort.ASCENDING + "'", columnSort83.equals(net.sourceforge.atunes.model.ColumnSort.ASCENDING));
    }

    @Test
    public void test0771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0771");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata1 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata1.setAlbumArtist("");
        boolean boolean4 = fontSettings0.equals((java.lang.Object) cDMetadata1);
        fontSettings0.setUseFontSmoothing(true);
        net.sourceforge.atunes.model.IFontBean iFontBean7 = fontSettings0.getFont();
        net.sourceforge.atunes.model.CDMetadata cDMetadata8 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str9 = cDMetadata8.getGenre();
        java.util.List<java.lang.String> strList10 = cDMetadata8.getComposerNames();
        java.lang.String str11 = cDMetadata8.getAlbum();
        java.util.List<java.lang.Integer> intList12 = cDMetadata8.getTracks();
        cDMetadata8.setAlbumArtist("mpc");
        java.lang.String str15 = cDMetadata8.getAlbum();
        boolean boolean16 = fontSettings0.equals((java.lang.Object) cDMetadata8);
        java.lang.String[] strArray41 = new java.lang.String[] { "./link[@rel='enclosure']/@type", "SOCKS_PROXY", "/feed/title", "./pubDate", "1.0.0 mpc ", "net.sourceforge.atunes.model.InconsistentRepositoryException", "1.0.0 mpc ", "1.0.0 mpc ", "rm", "./enclosure/@type", "/rss/channel/item", "mpc", "./title", "1.0.0 ", "flv", "1.0.0 ", "./link[@rel='enclosure']/@type", "hi!", "./link[@rel='enclosure']/@type", "./updated", "10.52.35  ", "net.sourceforge.atunes.model.InconsistentRepositoryException", "./enclosure/@url", "SOCKS_PROXY" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        cDMetadata8.setTrackNames((java.util.List<java.lang.String>) strList42);
        java.util.List<java.lang.String> strList45 = cDMetadata8.getComposerNames();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(iFontBean7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(strList10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(intList12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNull(strList45);
    }

    @Test
    public void test0772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0772");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList3 = cDMetadata0.getTracks();
        cDMetadata0.setAlbumArtist("/rss/channel/title");
        java.util.List<java.lang.String> strList6 = cDMetadata0.getTrackNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata7 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata7.setAlbumArtist("");
        java.lang.String str10 = cDMetadata7.getGenre();
        java.lang.String[] strArray12 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        cDMetadata7.setTrackNames((java.util.List<java.lang.String>) strList13);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList13);
        net.sourceforge.atunes.model.CDMetadata cDMetadata17 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata17.setAlbumArtist("");
        java.lang.String str20 = cDMetadata17.getGenre();
        java.lang.String[] strArray22 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        cDMetadata17.setTrackNames((java.util.List<java.lang.String>) strList23);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList26 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable27 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException28 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable27);
        java.lang.Throwable[] throwableArray29 = searchQuerySyntaxException28.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException30 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException28);
        java.lang.Throwable throwable31 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException32 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable31);
        java.lang.Throwable[] throwableArray33 = searchQuerySyntaxException32.getSuppressed();
        throwableRankList26.replaceItem((java.lang.Throwable) searchQuerySyntaxException28, (java.lang.Throwable) searchQuerySyntaxException32);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList35 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable36 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException37 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable36);
        java.lang.Throwable[] throwableArray38 = searchQuerySyntaxException37.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException39 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException37);
        java.lang.Throwable throwable40 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException41 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable40);
        java.lang.Throwable[] throwableArray42 = searchQuerySyntaxException41.getSuppressed();
        throwableRankList35.replaceItem((java.lang.Throwable) searchQuerySyntaxException37, (java.lang.Throwable) searchQuerySyntaxException41);
        java.lang.Integer int44 = throwableRankList26.getCount((java.lang.Throwable) searchQuerySyntaxException41);
        java.lang.Throwable throwable45 = null;
        java.lang.Throwable throwable46 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException47 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable46);
        throwableRankList26.replaceItem(throwable45, (java.lang.Throwable) searchQuerySyntaxException47);
        java.util.List<java.lang.Integer> intList50 = throwableRankList26.getNFirstElementCounts((int) (byte) 1);
        int int51 = throwableRankList26.size();
        java.util.List<java.lang.Integer> intList53 = throwableRankList26.getNFirstElementCounts((int) (short) 10);
        cDMetadata17.setTracks(intList53);
        cDMetadata0.setTracks(intList53);
        int int56 = cDMetadata0.getDisc();
        org.junit.Assert.assertNull(intList3);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNull(int44);
        org.junit.Assert.assertNotNull(intList50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(intList53);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
    }

    @Test
    public void test0773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0773");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType8 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion13 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType8, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str14 = applicationVersion13.getDate();
        java.lang.String str15 = applicationVersion13.toShortString();
        int int16 = applicationVersion13.getMajorNumber();
        int int17 = applicationVersion13.getMinorNumber();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType22 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion27 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType22, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str28 = applicationVersion27.getDate();
        java.lang.String str29 = applicationVersion27.toShortString();
        java.lang.String str30 = applicationVersion27.getChanges();
        int int31 = applicationVersion27.getMinorNumber();
        java.lang.String str32 = applicationVersion27.getChanges();
        int int33 = applicationVersion27.getRevisionNumber();
        int int34 = applicationVersion13.compareTo(applicationVersion27);
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType35 = applicationVersion13.getVersionType();
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion40 = new net.sourceforge.atunes.model.ApplicationVersion("./enclosure/@type", (int) (short) 0, (int) '#', 10, versionType35, "10.1.1 ", "./duration", "./title", "/rss/channel/item");
        org.junit.Assert.assertTrue("'" + versionType8 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType8.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "./title" + "'", str14, "./title");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1.0.0 " + "'", str15, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + versionType22 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType22.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "./title" + "'", str28, "./title");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1.0.0 " + "'", str29, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "./title" + "'", str30, "./title");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "./title" + "'", str32, "./title");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + versionType35 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType35.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
    }

    @Test
    public void test0774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0774");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata1 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata1.setAlbumArtist("");
        boolean boolean4 = fontSettings0.equals((java.lang.Object) cDMetadata1);
        fontSettings0.setUseFontSmoothingSettingsFromOs(false);
        net.sourceforge.atunes.model.ViewMode viewMode7 = net.sourceforge.atunes.model.ViewMode.ALBUM;
        boolean boolean8 = fontSettings0.equals((java.lang.Object) viewMode7);
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType13 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion18 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType13, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str19 = applicationVersion18.getDate();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType20 = applicationVersion18.getVersionType();
        java.lang.String str21 = applicationVersion18.getDownloadURL();
        java.lang.String str22 = applicationVersion18.getDirectDownloadURL();
        boolean boolean23 = fontSettings0.equals((java.lang.Object) applicationVersion18);
        net.sourceforge.atunes.model.IFontBean iFontBean24 = fontSettings0.getFont();
        boolean boolean25 = fontSettings0.isUseFontSmoothing();
        java.lang.Object obj26 = null;
        boolean boolean27 = fontSettings0.equals(obj26);
        fontSettings0.setUseFontSmoothing(true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + viewMode7 + "' != '" + net.sourceforge.atunes.model.ViewMode.ALBUM + "'", viewMode7.equals(net.sourceforge.atunes.model.ViewMode.ALBUM));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + versionType13 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType13.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "./title" + "'", str19, "./title");
        org.junit.Assert.assertTrue("'" + versionType20 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType20.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "./description" + "'", str21, "./description");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "./pubDate" + "'", str22, "./pubDate");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(iFontBean24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test0775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0775");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.lang.String str3 = cDMetadata0.getAlbum();
        java.util.List<java.lang.Integer> intList4 = cDMetadata0.getTracks();
        int int5 = cDMetadata0.getYear();
        java.util.List<java.lang.String> strList6 = cDMetadata0.getArtistNames();
        cDMetadata0.setDisc((int) (short) 100);
        net.sourceforge.atunes.model.CDMetadata cDMetadata9 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata9.setAlbumArtist("");
        java.lang.String str12 = cDMetadata9.getGenre();
        java.lang.String[] strArray14 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        cDMetadata9.setTrackNames((java.util.List<java.lang.String>) strList15);
        cDMetadata0.setArtistNames((java.util.List<java.lang.String>) strList15);
        java.util.List<java.lang.String> strList19 = cDMetadata0.getTrackNames();
        java.lang.String str20 = cDMetadata0.getAlbum();
        java.lang.Class<?> wildcardClass21 = cDMetadata0.getClass();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(intList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(strList19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0776");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        columnBean0.setVisible(false);
        columnBean0.setWidth(0);
        net.sourceforge.atunes.model.ColumnSort columnSort8 = columnBean0.getSort();
        net.sourceforge.atunes.model.ColumnSort columnSort9 = columnBean0.getSort();
        columnBean0.setOrder((int) (short) 100);
        columnBean0.setOrder((int) (byte) -1);
        boolean boolean14 = columnBean0.isVisible();
        boolean boolean15 = columnBean0.isVisible();
        boolean boolean16 = columnBean0.isVisible();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(columnSort8);
        org.junit.Assert.assertNull(columnSort9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0777");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList2 = throwableRankList0.getNFirstElements((int) (short) 10);
        throwableRankList0.clear();
        java.util.List<java.lang.Integer> intList5 = throwableRankList0.getNFirstElementCounts(150);
        throwableRankList0.clear();
        java.util.List<java.lang.Integer> intList8 = throwableRankList0.getNFirstElementCounts(150);
        java.util.List<java.lang.Throwable> throwableList10 = throwableRankList0.getNFirstElements(0);
        int int11 = throwableRankList0.size();
        org.junit.Assert.assertNotNull(throwableList2);
        org.junit.Assert.assertNotNull(intList5);
        org.junit.Assert.assertNotNull(intList8);
        org.junit.Assert.assertNotNull(throwableList10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test0778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0778");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        java.lang.String str12 = applicationVersion9.getChanges();
        int int13 = applicationVersion9.getMinorNumber();
        java.lang.String str14 = applicationVersion9.getChanges();
        int int15 = applicationVersion9.getMajorNumber();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType20 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion25 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType20, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str26 = applicationVersion25.getDate();
        java.lang.String str27 = applicationVersion25.toShortString();
        java.lang.String str28 = applicationVersion25.getChanges();
        int int29 = applicationVersion25.getMinorNumber();
        java.lang.String str30 = applicationVersion25.getChanges();
        int int31 = applicationVersion9.compareTo(applicationVersion25);
        java.lang.String str32 = applicationVersion25.getDirectDownloadURL();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "./title" + "'", str12, "./title");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "./title" + "'", str14, "./title");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + versionType20 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType20.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "./title" + "'", str26, "./title");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1.0.0 " + "'", str27, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "./title" + "'", str28, "./title");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "./title" + "'", str30, "./title");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "./pubDate" + "'", str32, "./pubDate");
    }

    @Test
    public void test0779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0779");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        columnBean0.setVisible(false);
        columnBean0.setWidth(0);
        columnBean0.setOrder((int) (short) 10);
        columnBean0.setOrder(52);
        columnBean0.setOrder((int) '#');
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0780");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.lang.String str3 = cDMetadata0.getAlbum();
        java.util.List<java.lang.Integer> intList4 = cDMetadata0.getTracks();
        net.sourceforge.atunes.model.CDMetadata cDMetadata5 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata5.setAlbumArtist("");
        java.lang.String str9 = cDMetadata5.getTitle((int) (byte) -1);
        java.lang.String[] strArray11 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        cDMetadata5.setTrackNames((java.util.List<java.lang.String>) strList12);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList12);
        cDMetadata0.setYear((int) (short) 1);
        int int18 = cDMetadata0.getYear();
        cDMetadata0.setAlbumArtist("net.sourceforge.atunes.model.InconsistentRepositoryException");
        java.lang.String str21 = cDMetadata0.getAlbumArtist();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(intList4);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "net.sourceforge.atunes.model.InconsistentRepositoryException" + "'", str21, "net.sourceforge.atunes.model.InconsistentRepositoryException");
    }

    @Test
    public void test0781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0781");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.lang.String str3 = cDMetadata0.getAlbum();
        java.util.List<java.lang.Integer> intList4 = cDMetadata0.getTracks();
        int int5 = cDMetadata0.getYear();
        net.sourceforge.atunes.model.CDMetadata cDMetadata6 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str7 = cDMetadata6.getGenre();
        java.util.List<java.lang.String> strList8 = cDMetadata6.getComposerNames();
        java.lang.String str9 = cDMetadata6.getAlbum();
        java.util.List<java.lang.Integer> intList10 = cDMetadata6.getTracks();
        net.sourceforge.atunes.model.CDMetadata cDMetadata11 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata11.setAlbumArtist("");
        java.lang.String str15 = cDMetadata11.getTitle((int) (byte) -1);
        java.lang.String[] strArray17 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        cDMetadata11.setTrackNames((java.util.List<java.lang.String>) strList18);
        cDMetadata6.setTrackNames((java.util.List<java.lang.String>) strList18);
        cDMetadata6.setYear((int) (short) 1);
        int int24 = cDMetadata6.getYear();
        java.lang.String str25 = cDMetadata6.getGenre();
        cDMetadata6.setYear((int) (short) 10);
        net.sourceforge.atunes.model.CDMetadata cDMetadata28 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata28.setAlbumArtist("");
        java.lang.String str31 = cDMetadata28.getGenre();
        java.lang.String[] strArray33 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        cDMetadata28.setTrackNames((java.util.List<java.lang.String>) strList34);
        cDMetadata6.setTrackNames((java.util.List<java.lang.String>) strList34);
        cDMetadata0.setComposerNames((java.util.List<java.lang.String>) strList34);
        int int39 = cDMetadata0.getYear();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(intList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(intList10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test0782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0782");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        net.sourceforge.atunes.model.InconsistentRepositoryException inconsistentRepositoryException1 = new net.sourceforge.atunes.model.InconsistentRepositoryException();
        net.sourceforge.atunes.model.InconsistentRepositoryException inconsistentRepositoryException2 = new net.sourceforge.atunes.model.InconsistentRepositoryException();
        throwableRankList0.replaceItem((java.lang.Throwable) inconsistentRepositoryException1, (java.lang.Throwable) inconsistentRepositoryException2);
        java.lang.Throwable throwable4 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException5 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable4);
        java.lang.Throwable[] throwableArray6 = searchQuerySyntaxException5.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException7 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException5);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException8 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException5);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList9 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable10 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException11 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable10);
        java.lang.Throwable[] throwableArray12 = searchQuerySyntaxException11.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException13 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException11);
        java.lang.Throwable throwable14 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException15 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable14);
        java.lang.Throwable[] throwableArray16 = searchQuerySyntaxException15.getSuppressed();
        throwableRankList9.replaceItem((java.lang.Throwable) searchQuerySyntaxException11, (java.lang.Throwable) searchQuerySyntaxException15);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException18 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException15);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException19 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException18);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException20 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchIndexNotAvailableException19);
        searchQuerySyntaxException8.addSuppressed((java.lang.Throwable) searchIndexNotAvailableException20);
        throwableRankList0.addItem((java.lang.Throwable) searchQuerySyntaxException8);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList23 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable24 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException25 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable24);
        java.lang.Throwable[] throwableArray26 = searchQuerySyntaxException25.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException27 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException25);
        java.lang.Throwable throwable28 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException29 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable28);
        java.lang.Throwable[] throwableArray30 = searchQuerySyntaxException29.getSuppressed();
        throwableRankList23.replaceItem((java.lang.Throwable) searchQuerySyntaxException25, (java.lang.Throwable) searchQuerySyntaxException29);
        java.util.List<java.lang.Throwable> throwableList32 = throwableRankList23.getOrder();
        java.lang.Throwable throwable33 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException34 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable33);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList35 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable36 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException37 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable36);
        java.lang.Throwable[] throwableArray38 = searchQuerySyntaxException37.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException39 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException37);
        java.lang.Throwable throwable40 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException41 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable40);
        java.lang.Throwable[] throwableArray42 = searchQuerySyntaxException41.getSuppressed();
        throwableRankList35.replaceItem((java.lang.Throwable) searchQuerySyntaxException37, (java.lang.Throwable) searchQuerySyntaxException41);
        searchQuerySyntaxException34.addSuppressed((java.lang.Throwable) searchQuerySyntaxException41);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException45 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException34);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException46 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException34);
        java.lang.Integer int47 = throwableRankList23.getCount((java.lang.Throwable) searchIndexNotAvailableException46);
        java.lang.Throwable throwable48 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException49 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable48);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList50 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable51 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException52 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable51);
        java.lang.Throwable[] throwableArray53 = searchQuerySyntaxException52.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException54 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException52);
        java.lang.Throwable throwable55 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException56 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable55);
        java.lang.Throwable[] throwableArray57 = searchQuerySyntaxException56.getSuppressed();
        throwableRankList50.replaceItem((java.lang.Throwable) searchQuerySyntaxException52, (java.lang.Throwable) searchQuerySyntaxException56);
        searchQuerySyntaxException49.addSuppressed((java.lang.Throwable) searchQuerySyntaxException56);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException60 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException49);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException61 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException49);
        java.lang.Throwable throwable62 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException63 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable62);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList64 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable65 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException66 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable65);
        java.lang.Throwable[] throwableArray67 = searchQuerySyntaxException66.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException68 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException66);
        java.lang.Throwable throwable69 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException70 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable69);
        java.lang.Throwable[] throwableArray71 = searchQuerySyntaxException70.getSuppressed();
        throwableRankList64.replaceItem((java.lang.Throwable) searchQuerySyntaxException66, (java.lang.Throwable) searchQuerySyntaxException70);
        searchQuerySyntaxException63.addSuppressed((java.lang.Throwable) searchQuerySyntaxException70);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException74 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException63);
        java.lang.Throwable throwable75 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException76 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable75);
        java.lang.Throwable[] throwableArray77 = searchQuerySyntaxException76.getSuppressed();
        searchQuerySyntaxException63.addSuppressed((java.lang.Throwable) searchQuerySyntaxException76);
        searchIndexNotAvailableException61.addSuppressed((java.lang.Throwable) searchQuerySyntaxException76);
        java.lang.Throwable throwable80 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException81 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable80);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList82 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable83 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException84 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable83);
        java.lang.Throwable[] throwableArray85 = searchQuerySyntaxException84.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException86 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException84);
        java.lang.Throwable throwable87 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException88 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable87);
        java.lang.Throwable[] throwableArray89 = searchQuerySyntaxException88.getSuppressed();
        throwableRankList82.replaceItem((java.lang.Throwable) searchQuerySyntaxException84, (java.lang.Throwable) searchQuerySyntaxException88);
        searchQuerySyntaxException81.addSuppressed((java.lang.Throwable) searchQuerySyntaxException88);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException92 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException81);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException93 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException81);
        searchQuerySyntaxException76.addSuppressed((java.lang.Throwable) searchQuerySyntaxException81);
        java.lang.Integer int95 = throwableRankList23.getCount((java.lang.Throwable) searchQuerySyntaxException81);
        searchQuerySyntaxException8.addSuppressed((java.lang.Throwable) searchQuerySyntaxException81);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableList32);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNull(int47);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(throwableArray89);
        org.junit.Assert.assertNull(int95);
    }

    @Test
    public void test0783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0783");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        fontSettings0.setUseFontSmoothing(false);
        net.sourceforge.atunes.model.IFontBean iFontBean3 = fontSettings0.getFont();
        boolean boolean4 = fontSettings0.isUseFontSmoothing();
        fontSettings0.setUseFontSmoothing(true);
        net.sourceforge.atunes.model.IFontBean iFontBean7 = fontSettings0.getFont();
        boolean boolean8 = fontSettings0.isUseFontSmoothing();
        net.sourceforge.atunes.model.IFontBean iFontBean9 = null;
        fontSettings0.setFont(iFontBean9);
        net.sourceforge.atunes.model.IFontBean iFontBean11 = null;
        fontSettings0.setFont(iFontBean11);
        org.junit.Assert.assertNull(iFontBean3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(iFontBean7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test0784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0784");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList2 = throwableRankList0.getNFirstElements((int) (short) 10);
        throwableRankList0.clear();
        java.util.List<java.lang.Throwable> throwableList4 = throwableRankList0.getOrder();
        java.lang.Throwable throwable5 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException6 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable5);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList7 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable8 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException9 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable8);
        java.lang.Throwable[] throwableArray10 = searchQuerySyntaxException9.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException11 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException9);
        java.lang.Throwable throwable12 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException13 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable12);
        java.lang.Throwable[] throwableArray14 = searchQuerySyntaxException13.getSuppressed();
        throwableRankList7.replaceItem((java.lang.Throwable) searchQuerySyntaxException9, (java.lang.Throwable) searchQuerySyntaxException13);
        searchQuerySyntaxException6.addSuppressed((java.lang.Throwable) searchQuerySyntaxException13);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException17 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException6);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException18 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException6);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException19 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchIndexNotAvailableException18);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException20 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchIndexNotAvailableException18);
        java.lang.Throwable throwable21 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException22 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable21);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList23 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable24 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException25 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable24);
        java.lang.Throwable[] throwableArray26 = searchQuerySyntaxException25.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException27 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException25);
        java.lang.Throwable throwable28 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException29 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable28);
        java.lang.Throwable[] throwableArray30 = searchQuerySyntaxException29.getSuppressed();
        throwableRankList23.replaceItem((java.lang.Throwable) searchQuerySyntaxException25, (java.lang.Throwable) searchQuerySyntaxException29);
        searchQuerySyntaxException22.addSuppressed((java.lang.Throwable) searchQuerySyntaxException29);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException33 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException22);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException34 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException22);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException35 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchIndexNotAvailableException34);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException36 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchIndexNotAvailableException34);
        searchIndexNotAvailableException20.addSuppressed((java.lang.Throwable) searchIndexNotAvailableException34);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList38 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable39 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException40 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable39);
        java.lang.Throwable[] throwableArray41 = searchQuerySyntaxException40.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException42 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException40);
        java.lang.Throwable throwable43 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException44 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable43);
        java.lang.Throwable[] throwableArray45 = searchQuerySyntaxException44.getSuppressed();
        throwableRankList38.replaceItem((java.lang.Throwable) searchQuerySyntaxException40, (java.lang.Throwable) searchQuerySyntaxException44);
        java.util.List<java.lang.Throwable> throwableList47 = throwableRankList38.getOrder();
        java.lang.Throwable throwable48 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException49 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable48);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList50 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable51 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException52 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable51);
        java.lang.Throwable[] throwableArray53 = searchQuerySyntaxException52.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException54 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException52);
        java.lang.Throwable throwable55 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException56 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable55);
        java.lang.Throwable[] throwableArray57 = searchQuerySyntaxException56.getSuppressed();
        throwableRankList50.replaceItem((java.lang.Throwable) searchQuerySyntaxException52, (java.lang.Throwable) searchQuerySyntaxException56);
        searchQuerySyntaxException49.addSuppressed((java.lang.Throwable) searchQuerySyntaxException56);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException60 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException49);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException61 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException49);
        java.lang.Integer int62 = throwableRankList38.getCount((java.lang.Throwable) searchIndexNotAvailableException61);
        java.util.List<java.lang.Throwable> throwableList64 = throwableRankList38.getNFirstElements(90);
        java.util.List<java.lang.Throwable> throwableList66 = throwableRankList38.getNFirstElements(0);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList67 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable68 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException69 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable68);
        java.lang.Throwable[] throwableArray70 = searchQuerySyntaxException69.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException71 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException69);
        java.lang.Throwable throwable72 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException73 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable72);
        java.lang.Throwable[] throwableArray74 = searchQuerySyntaxException73.getSuppressed();
        throwableRankList67.replaceItem((java.lang.Throwable) searchQuerySyntaxException69, (java.lang.Throwable) searchQuerySyntaxException73);
        java.lang.Integer int76 = throwableRankList38.getCount((java.lang.Throwable) searchQuerySyntaxException69);
        throwableRankList0.replaceItem((java.lang.Throwable) searchIndexNotAvailableException20, (java.lang.Throwable) searchQuerySyntaxException69);
        org.junit.Assert.assertNotNull(throwableList2);
        org.junit.Assert.assertNotNull(throwableList4);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableList47);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNull(int62);
        org.junit.Assert.assertNotNull(throwableList64);
        org.junit.Assert.assertNotNull(throwableList66);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNull(int76);
    }

    @Test
    public void test0785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0785");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList3 = cDMetadata0.getTracks();
        cDMetadata0.setAlbumArtist("/rss/channel/title");
        java.util.List<java.lang.String> strList6 = cDMetadata0.getTrackNames();
        java.lang.String str7 = cDMetadata0.getAlbumArtist();
        cDMetadata0.setYear((-1));
        java.util.List<java.lang.String> strList10 = cDMetadata0.getTrackNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata11 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str12 = cDMetadata11.getGenre();
        java.util.List<java.lang.String> strList13 = cDMetadata11.getComposerNames();
        java.lang.String str14 = cDMetadata11.getAlbum();
        java.util.List<java.lang.Integer> intList15 = cDMetadata11.getTracks();
        int int16 = cDMetadata11.getDisc();
        net.sourceforge.atunes.model.CDMetadata cDMetadata17 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str18 = cDMetadata17.getGenre();
        java.util.List<java.lang.String> strList19 = cDMetadata17.getComposerNames();
        java.lang.String str20 = cDMetadata17.getAlbum();
        net.sourceforge.atunes.model.CDMetadata cDMetadata21 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata21.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList24 = cDMetadata21.getTracks();
        cDMetadata21.setAlbumArtist("/rss/channel/title");
        java.util.List<java.lang.String> strList27 = cDMetadata21.getTrackNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata28 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata28.setAlbumArtist("");
        java.lang.String str31 = cDMetadata28.getGenre();
        java.lang.String[] strArray33 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        cDMetadata28.setTrackNames((java.util.List<java.lang.String>) strList34);
        cDMetadata21.setTrackNames((java.util.List<java.lang.String>) strList34);
        cDMetadata17.setTrackNames((java.util.List<java.lang.String>) strList34);
        java.util.List<java.lang.String> strList39 = cDMetadata17.getTrackNames();
        cDMetadata11.setComposerNames(strList39);
        net.sourceforge.atunes.model.CDMetadata cDMetadata41 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata41.setAlbumArtist("");
        java.lang.String str44 = cDMetadata41.getGenre();
        int int45 = cDMetadata41.getYear();
        int int46 = cDMetadata41.getYear();
        net.sourceforge.atunes.model.CDMetadata cDMetadata47 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str48 = cDMetadata47.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata49 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata49.setAlbumArtist("");
        java.lang.String str52 = cDMetadata49.getGenre();
        java.lang.String[] strArray54 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList55 = new java.util.ArrayList<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList55, strArray54);
        cDMetadata49.setTrackNames((java.util.List<java.lang.String>) strList55);
        cDMetadata47.setComposerNames((java.util.List<java.lang.String>) strList55);
        cDMetadata41.setTrackNames((java.util.List<java.lang.String>) strList55);
        cDMetadata11.setTrackNames((java.util.List<java.lang.String>) strList55);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList55);
        java.util.List<java.lang.String> strList62 = cDMetadata0.getTrackNames();
        org.junit.Assert.assertNull(intList3);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/rss/channel/title" + "'", str7, "/rss/channel/title");
        org.junit.Assert.assertNull(strList10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(strList13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(intList15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(strList19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(intList24);
        org.junit.Assert.assertNull(strList27);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(strList62);
    }

    @Test
    public void test0786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0786");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        columnBean0.setVisible(false);
        columnBean0.setWidth(0);
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType12 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion17 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType12, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str18 = applicationVersion17.getDate();
        java.lang.String str19 = applicationVersion17.toShortString();
        java.lang.String str20 = applicationVersion17.getChanges();
        boolean boolean21 = columnBean0.equals((java.lang.Object) applicationVersion17);
        java.lang.String str22 = applicationVersion17.toString();
        java.lang.String str23 = applicationVersion17.getDownloadURL();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType24 = applicationVersion17.getVersionType();
        java.lang.String str25 = applicationVersion17.getDate();
        java.lang.String str26 = applicationVersion17.toShortString();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + versionType12 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType12.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "./title" + "'", str18, "./title");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1.0.0 " + "'", str19, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "./title" + "'", str20, "./title");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1.0.0 mpc " + "'", str22, "1.0.0 mpc ");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "./description" + "'", str23, "./description");
        org.junit.Assert.assertTrue("'" + versionType24 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType24.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "./title" + "'", str25, "./title");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1.0.0 " + "'", str26, "1.0.0 ");
    }

    @Test
    public void test0787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0787");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        net.sourceforge.atunes.model.AudioObjectProperty audioObjectProperty1 = net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY;
        boolean boolean2 = columnBean0.equals((java.lang.Object) audioObjectProperty1);
        int int3 = columnBean0.getWidth();
        int int4 = columnBean0.getOrder();
        net.sourceforge.atunes.model.CDMetadata cDMetadata5 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata5.setAlbumArtist("");
        java.lang.String str8 = cDMetadata5.getGenre();
        int int9 = cDMetadata5.getYear();
        int int10 = cDMetadata5.getYear();
        cDMetadata5.setGenre("./enclosure/@url");
        java.util.List<java.lang.String> strList13 = null;
        cDMetadata5.setTrackNames(strList13);
        cDMetadata5.setAlbumArtist("./link[@rel='enclosure']/@type");
        boolean boolean17 = columnBean0.equals((java.lang.Object) "./link[@rel='enclosure']/@type");
        net.sourceforge.atunes.model.CDMetadata cDMetadata18 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str19 = cDMetadata18.getGenre();
        java.util.List<java.lang.String> strList20 = cDMetadata18.getComposerNames();
        java.lang.String str21 = cDMetadata18.getAlbum();
        net.sourceforge.atunes.model.CDMetadata cDMetadata22 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata22.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList25 = cDMetadata22.getTracks();
        cDMetadata22.setAlbumArtist("/rss/channel/title");
        java.util.List<java.lang.String> strList28 = cDMetadata22.getTrackNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata29 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata29.setAlbumArtist("");
        java.lang.String str32 = cDMetadata29.getGenre();
        java.lang.String[] strArray34 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        cDMetadata29.setTrackNames((java.util.List<java.lang.String>) strList35);
        cDMetadata22.setTrackNames((java.util.List<java.lang.String>) strList35);
        cDMetadata18.setTrackNames((java.util.List<java.lang.String>) strList35);
        java.util.List<java.lang.String> strList40 = cDMetadata18.getTrackNames();
        boolean boolean41 = columnBean0.equals((java.lang.Object) cDMetadata18);
        java.lang.String str42 = cDMetadata18.getAlbum();
        java.lang.String str43 = cDMetadata18.getGenre();
        java.lang.String str44 = cDMetadata18.getAlbumArtist();
        java.lang.String str46 = cDMetadata18.getTitle((int) (byte) 100);
        org.junit.Assert.assertTrue("'" + audioObjectProperty1 + "' != '" + net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY + "'", audioObjectProperty1.equals(net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(strList20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(intList25);
        org.junit.Assert.assertNull(strList28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(str46);
    }

    @Test
    public void test0788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0788");
        java.lang.Throwable throwable0 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException1 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable0);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList2 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable3 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException4 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable3);
        java.lang.Throwable[] throwableArray5 = searchQuerySyntaxException4.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException6 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException4);
        java.lang.Throwable throwable7 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException8 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable7);
        java.lang.Throwable[] throwableArray9 = searchQuerySyntaxException8.getSuppressed();
        throwableRankList2.replaceItem((java.lang.Throwable) searchQuerySyntaxException4, (java.lang.Throwable) searchQuerySyntaxException8);
        searchQuerySyntaxException1.addSuppressed((java.lang.Throwable) searchQuerySyntaxException8);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException12 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException1);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException13 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException1);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException14 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchIndexNotAvailableException13);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException15 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchIndexNotAvailableException13);
        java.lang.Throwable throwable16 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException17 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable16);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList18 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable19 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException20 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable19);
        java.lang.Throwable[] throwableArray21 = searchQuerySyntaxException20.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException22 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException20);
        java.lang.Throwable throwable23 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException24 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable23);
        java.lang.Throwable[] throwableArray25 = searchQuerySyntaxException24.getSuppressed();
        throwableRankList18.replaceItem((java.lang.Throwable) searchQuerySyntaxException20, (java.lang.Throwable) searchQuerySyntaxException24);
        searchQuerySyntaxException17.addSuppressed((java.lang.Throwable) searchQuerySyntaxException24);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException28 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException17);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException29 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException17);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException30 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchIndexNotAvailableException29);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException31 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchIndexNotAvailableException29);
        searchIndexNotAvailableException15.addSuppressed((java.lang.Throwable) searchIndexNotAvailableException29);
        java.lang.Throwable[] throwableArray33 = searchIndexNotAvailableException15.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray33);
    }

    @Test
    public void test0789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0789");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.lang.String str3 = cDMetadata0.getAlbum();
        cDMetadata0.setAlbumArtist("./description");
        cDMetadata0.setAlbumArtist("./description");
        java.lang.String str8 = cDMetadata0.getAlbumArtist();
        net.sourceforge.atunes.model.ColumnBean columnBean9 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean10 = columnBean9.isVisible();
        net.sourceforge.atunes.model.SubmissionState submissionState11 = net.sourceforge.atunes.model.SubmissionState.PENDING;
        boolean boolean12 = columnBean9.equals((java.lang.Object) submissionState11);
        net.sourceforge.atunes.model.CDMetadata cDMetadata13 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata13.setAlbumArtist("");
        java.lang.String str17 = cDMetadata13.getTitle((int) (byte) -1);
        net.sourceforge.atunes.model.CDMetadata cDMetadata18 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata18.setAlbumArtist("");
        java.lang.String str22 = cDMetadata18.getTitle((int) (byte) -1);
        java.lang.String[] strArray24 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        cDMetadata18.setTrackNames((java.util.List<java.lang.String>) strList25);
        cDMetadata13.setArtistNames((java.util.List<java.lang.String>) strList25);
        boolean boolean29 = columnBean9.equals((java.lang.Object) strList25);
        cDMetadata0.setComposerNames((java.util.List<java.lang.String>) strList25);
        cDMetadata0.setAlbumArtist("1.0.0 ");
        java.util.List<java.lang.String> strList33 = cDMetadata0.getArtistNames();
        cDMetadata0.setAlbumArtist("/rss/channel/title");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "./description" + "'", str8, "./description");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + submissionState11 + "' != '" + net.sourceforge.atunes.model.SubmissionState.PENDING + "'", submissionState11.equals(net.sourceforge.atunes.model.SubmissionState.PENDING));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(strList33);
    }

    @Test
    public void test0790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0790");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType6 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion11 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType6, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str12 = applicationVersion11.getDate();
        java.lang.String str13 = applicationVersion11.toShortString();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType14 = applicationVersion11.getVersionType();
        java.lang.String str15 = applicationVersion11.getDirectDownloadURL();
        boolean boolean16 = columnBean0.equals((java.lang.Object) str15);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + versionType6 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType6.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "./title" + "'", str12, "./title");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1.0.0 " + "'", str13, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + versionType14 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType14.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "./pubDate" + "'", str15, "./pubDate");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0791");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str1 = feedType0.getUrlXPath();
        java.lang.String str2 = feedType0.getNameXPath();
        java.lang.String str3 = feedType0.getNameXPath();
        java.lang.String str4 = feedType0.getAuthorXPath();
        java.lang.String str5 = feedType0.getDescriptionXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "./enclosure/@url" + "'", str1, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "/rss/channel/title" + "'", str2, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "/rss/channel/title" + "'", str3, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "./author" + "'", str4, "./author");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "./description" + "'", str5, "./description");
    }

    @Test
    public void test0792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0792");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable1 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException2 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable1);
        java.lang.Throwable[] throwableArray3 = searchQuerySyntaxException2.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException4 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException2);
        java.lang.Throwable throwable5 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException6 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable5);
        java.lang.Throwable[] throwableArray7 = searchQuerySyntaxException6.getSuppressed();
        throwableRankList0.replaceItem((java.lang.Throwable) searchQuerySyntaxException2, (java.lang.Throwable) searchQuerySyntaxException6);
        java.util.List<java.lang.Throwable> throwableList9 = throwableRankList0.getOrder();
        java.lang.Throwable throwable10 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException11 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable10);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList12 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable13 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException14 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable13);
        java.lang.Throwable[] throwableArray15 = searchQuerySyntaxException14.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException16 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException14);
        java.lang.Throwable throwable17 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException18 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable17);
        java.lang.Throwable[] throwableArray19 = searchQuerySyntaxException18.getSuppressed();
        throwableRankList12.replaceItem((java.lang.Throwable) searchQuerySyntaxException14, (java.lang.Throwable) searchQuerySyntaxException18);
        searchQuerySyntaxException11.addSuppressed((java.lang.Throwable) searchQuerySyntaxException18);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException22 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException11);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException23 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException11);
        java.lang.Integer int24 = throwableRankList0.getCount((java.lang.Throwable) searchIndexNotAvailableException23);
        java.util.List<java.lang.Throwable> throwableList26 = throwableRankList0.getNFirstElements(90);
        java.util.List<java.lang.Throwable> throwableList28 = throwableRankList0.getNFirstElements(0);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList29 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable30 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException31 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable30);
        java.lang.Throwable[] throwableArray32 = searchQuerySyntaxException31.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException33 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException31);
        java.lang.Throwable throwable34 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException35 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable34);
        java.lang.Throwable[] throwableArray36 = searchQuerySyntaxException35.getSuppressed();
        throwableRankList29.replaceItem((java.lang.Throwable) searchQuerySyntaxException31, (java.lang.Throwable) searchQuerySyntaxException35);
        java.lang.Integer int38 = throwableRankList0.getCount((java.lang.Throwable) searchQuerySyntaxException31);
        java.util.List<java.lang.Throwable> throwableList39 = throwableRankList0.getOrder();
        int int40 = throwableRankList0.size();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableList9);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNotNull(throwableList26);
        org.junit.Assert.assertNotNull(throwableList28);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNull(int38);
        org.junit.Assert.assertNotNull(throwableList39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test0793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0793");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        columnBean0.setOrder((int) (short) 0);
        columnBean0.setWidth((int) 'a');
        boolean boolean5 = columnBean0.isVisible();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0794");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata1 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata1.setAlbumArtist("");
        boolean boolean4 = fontSettings0.equals((java.lang.Object) cDMetadata1);
        java.lang.String str5 = cDMetadata1.getAlbum();
        java.lang.String str6 = cDMetadata1.getAlbum();
        java.util.List<java.lang.Integer> intList7 = cDMetadata1.getTracks();
        net.sourceforge.atunes.model.FontSettings fontSettings8 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata9 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata9.setAlbumArtist("");
        boolean boolean12 = fontSettings8.equals((java.lang.Object) cDMetadata9);
        fontSettings8.setUseFontSmoothing(true);
        net.sourceforge.atunes.model.IFontBean iFontBean15 = fontSettings8.getFont();
        net.sourceforge.atunes.model.CDMetadata cDMetadata16 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str17 = cDMetadata16.getGenre();
        java.util.List<java.lang.String> strList18 = cDMetadata16.getComposerNames();
        java.lang.String str19 = cDMetadata16.getAlbum();
        java.util.List<java.lang.Integer> intList20 = cDMetadata16.getTracks();
        cDMetadata16.setAlbumArtist("mpc");
        java.lang.String str23 = cDMetadata16.getAlbum();
        boolean boolean24 = fontSettings8.equals((java.lang.Object) cDMetadata16);
        java.lang.String[] strArray49 = new java.lang.String[] { "./link[@rel='enclosure']/@type", "SOCKS_PROXY", "/feed/title", "./pubDate", "1.0.0 mpc ", "net.sourceforge.atunes.model.InconsistentRepositoryException", "1.0.0 mpc ", "1.0.0 mpc ", "rm", "./enclosure/@type", "/rss/channel/item", "mpc", "./title", "1.0.0 ", "flv", "1.0.0 ", "./link[@rel='enclosure']/@type", "hi!", "./link[@rel='enclosure']/@type", "./updated", "10.52.35  ", "net.sourceforge.atunes.model.InconsistentRepositoryException", "./enclosure/@url", "SOCKS_PROXY" };
        java.util.ArrayList<java.lang.String> strList50 = new java.util.ArrayList<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList50, strArray49);
        cDMetadata16.setTrackNames((java.util.List<java.lang.String>) strList50);
        cDMetadata1.setTrackNames((java.util.List<java.lang.String>) strList50);
        java.util.List<java.lang.Integer> intList54 = cDMetadata1.getTracks();
        java.lang.String str55 = cDMetadata1.getAlbumArtist();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(intList7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(iFontBean15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(intList20);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNull(intList54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
    }

    @Test
    public void test0795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0795");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str1 = feedType0.getDescriptionXPath();
        java.lang.String str2 = feedType0.getTitleXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "./description" + "'", str1, "./description");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "./title" + "'", str2, "./title");
    }

    @Test
    public void test0796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0796");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable1 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException2 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable1);
        java.lang.Throwable[] throwableArray3 = searchQuerySyntaxException2.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException4 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException2);
        java.lang.Throwable throwable5 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException6 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable5);
        java.lang.Throwable[] throwableArray7 = searchQuerySyntaxException6.getSuppressed();
        throwableRankList0.replaceItem((java.lang.Throwable) searchQuerySyntaxException2, (java.lang.Throwable) searchQuerySyntaxException6);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList9 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable10 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException11 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable10);
        java.lang.Throwable[] throwableArray12 = searchQuerySyntaxException11.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException13 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException11);
        java.lang.Throwable throwable14 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException15 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable14);
        java.lang.Throwable[] throwableArray16 = searchQuerySyntaxException15.getSuppressed();
        throwableRankList9.replaceItem((java.lang.Throwable) searchQuerySyntaxException11, (java.lang.Throwable) searchQuerySyntaxException15);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList18 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable19 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException20 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable19);
        java.lang.Throwable[] throwableArray21 = searchQuerySyntaxException20.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException22 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException20);
        java.lang.Throwable throwable23 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException24 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable23);
        java.lang.Throwable[] throwableArray25 = searchQuerySyntaxException24.getSuppressed();
        throwableRankList18.replaceItem((java.lang.Throwable) searchQuerySyntaxException20, (java.lang.Throwable) searchQuerySyntaxException24);
        java.lang.Integer int27 = throwableRankList9.getCount((java.lang.Throwable) searchQuerySyntaxException24);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList28 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable29 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException30 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable29);
        java.lang.Throwable[] throwableArray31 = searchQuerySyntaxException30.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException32 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException30);
        java.lang.Throwable throwable33 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException34 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable33);
        java.lang.Throwable[] throwableArray35 = searchQuerySyntaxException34.getSuppressed();
        throwableRankList28.replaceItem((java.lang.Throwable) searchQuerySyntaxException30, (java.lang.Throwable) searchQuerySyntaxException34);
        java.util.List<java.lang.Throwable> throwableList37 = throwableRankList28.getOrder();
        java.lang.Throwable throwable38 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException39 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable38);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList40 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable41 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException42 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable41);
        java.lang.Throwable[] throwableArray43 = searchQuerySyntaxException42.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException44 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException42);
        java.lang.Throwable throwable45 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException46 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable45);
        java.lang.Throwable[] throwableArray47 = searchQuerySyntaxException46.getSuppressed();
        throwableRankList40.replaceItem((java.lang.Throwable) searchQuerySyntaxException42, (java.lang.Throwable) searchQuerySyntaxException46);
        searchQuerySyntaxException39.addSuppressed((java.lang.Throwable) searchQuerySyntaxException46);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException50 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException39);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException51 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException39);
        java.lang.Integer int52 = throwableRankList28.getCount((java.lang.Throwable) searchIndexNotAvailableException51);
        java.lang.Integer int53 = throwableRankList9.getCount((java.lang.Throwable) searchIndexNotAvailableException51);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList54 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList56 = throwableRankList54.getNFirstElements((int) (short) 10);
        throwableRankList54.clear();
        java.util.List<java.lang.Integer> intList59 = throwableRankList54.getNFirstElementCounts(0);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList60 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable61 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException62 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable61);
        java.lang.Throwable[] throwableArray63 = searchQuerySyntaxException62.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException64 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException62);
        java.lang.Throwable throwable65 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException66 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable65);
        java.lang.Throwable[] throwableArray67 = searchQuerySyntaxException66.getSuppressed();
        throwableRankList60.replaceItem((java.lang.Throwable) searchQuerySyntaxException62, (java.lang.Throwable) searchQuerySyntaxException66);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException69 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException66);
        java.lang.Integer int70 = throwableRankList54.getCount((java.lang.Throwable) searchQuerySyntaxException69);
        java.lang.Throwable throwable71 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException72 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable71);
        java.lang.Throwable[] throwableArray73 = searchQuerySyntaxException72.getSuppressed();
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException74 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException72);
        java.lang.Integer int75 = throwableRankList54.getCount((java.lang.Throwable) searchQuerySyntaxException74);
        java.lang.Integer int76 = throwableRankList9.getCount((java.lang.Throwable) searchQuerySyntaxException74);
        java.lang.Integer int77 = throwableRankList0.getCount((java.lang.Throwable) searchQuerySyntaxException74);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNull(int27);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableList37);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNull(int52);
        org.junit.Assert.assertNull(int53);
        org.junit.Assert.assertNotNull(throwableList56);
        org.junit.Assert.assertNotNull(intList59);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNull(int70);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNull(int75);
        org.junit.Assert.assertNull(int76);
        org.junit.Assert.assertNull(int77);
    }

    @Test
    public void test0797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0797");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.lang.String str3 = cDMetadata0.getAlbum();
        java.util.List<java.lang.Integer> intList4 = cDMetadata0.getTracks();
        net.sourceforge.atunes.model.CDMetadata cDMetadata5 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata5.setAlbumArtist("");
        java.lang.String str9 = cDMetadata5.getTitle((int) (byte) -1);
        java.lang.String[] strArray11 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        cDMetadata5.setTrackNames((java.util.List<java.lang.String>) strList12);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList12);
        java.lang.String str16 = cDMetadata0.getGenre();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(intList4);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test0798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0798");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.lang.String str3 = cDMetadata0.getGenre();
        java.lang.String[] strArray5 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList6);
        cDMetadata0.setYear((int) (short) 10);
        net.sourceforge.atunes.model.FontSettings fontSettings11 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata12 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata12.setAlbumArtist("");
        boolean boolean15 = fontSettings11.equals((java.lang.Object) cDMetadata12);
        java.lang.String str16 = cDMetadata12.getGenre();
        cDMetadata12.setAlbum("net.sourceforge.atunes.model.SearchQuerySyntaxException");
        java.util.List<java.lang.String> strList19 = cDMetadata12.getArtistNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata20 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str21 = cDMetadata20.getGenre();
        java.util.List<java.lang.String> strList22 = cDMetadata20.getComposerNames();
        java.lang.String str23 = cDMetadata20.getAlbum();
        java.util.List<java.lang.Integer> intList24 = cDMetadata20.getTracks();
        net.sourceforge.atunes.model.CDMetadata cDMetadata25 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata25.setAlbumArtist("");
        java.lang.String str29 = cDMetadata25.getTitle((int) (byte) -1);
        java.lang.String[] strArray31 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        cDMetadata25.setTrackNames((java.util.List<java.lang.String>) strList32);
        cDMetadata20.setTrackNames((java.util.List<java.lang.String>) strList32);
        cDMetadata20.setYear((int) (short) 1);
        int int38 = cDMetadata20.getYear();
        java.lang.String str39 = cDMetadata20.getGenre();
        cDMetadata20.setYear((int) (short) 10);
        net.sourceforge.atunes.model.CDMetadata cDMetadata42 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata42.setAlbumArtist("");
        java.lang.String str45 = cDMetadata42.getGenre();
        java.lang.String[] strArray47 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        cDMetadata42.setTrackNames((java.util.List<java.lang.String>) strList48);
        cDMetadata20.setTrackNames((java.util.List<java.lang.String>) strList48);
        cDMetadata12.setTrackNames((java.util.List<java.lang.String>) strList48);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList48);
        cDMetadata0.setAlbumArtist("net.sourceforge.atunes.model.SearchQuerySyntaxException: net.sourceforge.atunes.model.SearchIndexNotAvailableException: net.sourceforge.atunes.model.SearchQuerySyntaxException");
        java.util.List<java.lang.String> strList56 = cDMetadata0.getComposerNames();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(strList19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(strList22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(intList24);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNull(strList56);
    }

    @Test
    public void test0799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0799");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.lang.String str3 = cDMetadata0.getGenre();
        java.lang.String[] strArray5 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList6);
        cDMetadata0.setDisc(2);
        net.sourceforge.atunes.model.CDMetadata cDMetadata11 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str12 = cDMetadata11.getGenre();
        java.util.List<java.lang.String> strList13 = cDMetadata11.getComposerNames();
        java.lang.String str14 = cDMetadata11.getAlbum();
        java.util.List<java.lang.Integer> intList15 = cDMetadata11.getTracks();
        int int16 = cDMetadata11.getDisc();
        net.sourceforge.atunes.model.CDMetadata cDMetadata17 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str18 = cDMetadata17.getGenre();
        java.util.List<java.lang.String> strList19 = cDMetadata17.getComposerNames();
        java.lang.String str20 = cDMetadata17.getAlbum();
        net.sourceforge.atunes.model.CDMetadata cDMetadata21 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata21.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList24 = cDMetadata21.getTracks();
        cDMetadata21.setAlbumArtist("/rss/channel/title");
        java.util.List<java.lang.String> strList27 = cDMetadata21.getTrackNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata28 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata28.setAlbumArtist("");
        java.lang.String str31 = cDMetadata28.getGenre();
        java.lang.String[] strArray33 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        cDMetadata28.setTrackNames((java.util.List<java.lang.String>) strList34);
        cDMetadata21.setTrackNames((java.util.List<java.lang.String>) strList34);
        cDMetadata17.setTrackNames((java.util.List<java.lang.String>) strList34);
        java.util.List<java.lang.String> strList39 = cDMetadata17.getTrackNames();
        cDMetadata11.setComposerNames(strList39);
        net.sourceforge.atunes.model.CDMetadata cDMetadata41 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata41.setAlbumArtist("");
        java.lang.String str44 = cDMetadata41.getGenre();
        int int45 = cDMetadata41.getYear();
        int int46 = cDMetadata41.getYear();
        net.sourceforge.atunes.model.CDMetadata cDMetadata47 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str48 = cDMetadata47.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata49 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata49.setAlbumArtist("");
        java.lang.String str52 = cDMetadata49.getGenre();
        java.lang.String[] strArray54 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList55 = new java.util.ArrayList<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList55, strArray54);
        cDMetadata49.setTrackNames((java.util.List<java.lang.String>) strList55);
        cDMetadata47.setComposerNames((java.util.List<java.lang.String>) strList55);
        cDMetadata41.setTrackNames((java.util.List<java.lang.String>) strList55);
        cDMetadata11.setTrackNames((java.util.List<java.lang.String>) strList55);
        cDMetadata0.setComposerNames((java.util.List<java.lang.String>) strList55);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(strList13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(intList15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(strList19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(intList24);
        org.junit.Assert.assertNull(strList27);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test0800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0800");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata1 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata1.setAlbumArtist("");
        boolean boolean4 = fontSettings0.equals((java.lang.Object) cDMetadata1);
        fontSettings0.setUseFontSmoothingSettingsFromOs(true);
        boolean boolean7 = fontSettings0.isUseFontSmoothingSettingsFromOs();
        fontSettings0.setUseFontSmoothing(true);
        net.sourceforge.atunes.model.IFontBean iFontBean10 = null;
        fontSettings0.setFont(iFontBean10);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test0801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0801");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        columnBean0.setVisible(false);
        columnBean0.setWidth(0);
        columnBean0.setOrder((int) (short) 10);
        columnBean0.setWidth((int) (short) 0);
        int int12 = columnBean0.getWidth();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test0802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0802");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.ATOM;
        java.lang.String str1 = feedType0.getTypeXPath();
        java.lang.String str2 = feedType0.getDurationXPath();
        java.lang.String str3 = feedType0.getDurationXPath();
        java.lang.String str4 = feedType0.getNameXPath();
        java.lang.String str5 = feedType0.getAuthorXPath();
        java.lang.String str6 = feedType0.getDurationXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.ATOM + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.ATOM));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "./link[@rel='enclosure']/@type" + "'", str1, "./link[@rel='enclosure']/@type");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "/feed/title" + "'", str4, "/feed/title");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "./author/name" + "'", str5, "./author/name");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test0803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0803");
        net.sourceforge.atunes.model.LookAndFeelBean lookAndFeelBean0 = new net.sourceforge.atunes.model.LookAndFeelBean();
        java.lang.String str1 = lookAndFeelBean0.getSkin();
        lookAndFeelBean0.setName("net.sourceforge.atunes.model.SearchQuerySyntaxException");
        lookAndFeelBean0.setSkin("");
        lookAndFeelBean0.setName("hi!");
        java.lang.String str8 = lookAndFeelBean0.getSkin();
        java.lang.String str9 = lookAndFeelBean0.getName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
    }

    @Test
    public void test0804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0804");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.lang.String str3 = cDMetadata0.getGenre();
        int int4 = cDMetadata0.getYear();
        int int5 = cDMetadata0.getYear();
        net.sourceforge.atunes.model.CDMetadata cDMetadata6 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str7 = cDMetadata6.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata8 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata8.setAlbumArtist("");
        java.lang.String str11 = cDMetadata8.getGenre();
        java.lang.String[] strArray13 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        cDMetadata8.setTrackNames((java.util.List<java.lang.String>) strList14);
        cDMetadata6.setComposerNames((java.util.List<java.lang.String>) strList14);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList14);
        net.sourceforge.atunes.model.CDMetadata cDMetadata19 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str20 = cDMetadata19.getGenre();
        java.util.List<java.lang.String> strList21 = cDMetadata19.getComposerNames();
        java.lang.String str22 = cDMetadata19.getAlbum();
        java.util.List<java.lang.Integer> intList23 = cDMetadata19.getTracks();
        int int24 = cDMetadata19.getDisc();
        java.lang.String[] strArray32 = new java.lang.String[] { "net.sourceforge.atunes.model.InconsistentRepositoryException", "./title", "1.0.0 ", "./title", "./duration", "mpc", "net.sourceforge.atunes.model.InconsistentRepositoryException" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        cDMetadata19.setArtistNames((java.util.List<java.lang.String>) strList33);
        cDMetadata0.setArtistNames((java.util.List<java.lang.String>) strList33);
        java.util.List<java.lang.String> strList37 = null;
        cDMetadata0.setArtistNames(strList37);
        cDMetadata0.setDisc((int) '#');
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(strList21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(intList23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test0805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0805");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str1 = feedType0.getUrlXPath();
        java.lang.String str2 = feedType0.getDurationXPath();
        java.lang.String str3 = feedType0.getAuthorXPath();
        java.lang.String str4 = feedType0.getDescriptionXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "./enclosure/@url" + "'", str1, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "./duration" + "'", str2, "./duration");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "./author" + "'", str3, "./author");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "./description" + "'", str4, "./description");
    }

    @Test
    public void test0806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0806");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        int int12 = applicationVersion9.getMajorNumber();
        java.lang.String str13 = applicationVersion9.toString();
        java.lang.String str14 = applicationVersion9.getChanges();
        java.lang.String str15 = applicationVersion9.toString();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1.0.0 mpc " + "'", str13, "1.0.0 mpc ");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "./title" + "'", str14, "./title");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1.0.0 mpc " + "'", str15, "1.0.0 mpc ");
    }

    @Test
    public void test0807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0807");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.lang.String str3 = cDMetadata0.getAlbum();
        java.util.List<java.lang.Integer> intList4 = cDMetadata0.getTracks();
        net.sourceforge.atunes.model.CDMetadata cDMetadata5 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata5.setAlbumArtist("");
        java.lang.String str9 = cDMetadata5.getTitle((int) (byte) -1);
        java.lang.String[] strArray11 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        cDMetadata5.setTrackNames((java.util.List<java.lang.String>) strList12);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList12);
        cDMetadata0.setYear((int) (short) 1);
        net.sourceforge.atunes.model.CDMetadata cDMetadata18 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str19 = cDMetadata18.getGenre();
        java.util.List<java.lang.String> strList20 = cDMetadata18.getComposerNames();
        java.lang.String str21 = cDMetadata18.getAlbum();
        java.util.List<java.lang.Integer> intList22 = cDMetadata18.getTracks();
        int int23 = cDMetadata18.getYear();
        java.util.List<java.lang.String> strList24 = cDMetadata18.getArtistNames();
        cDMetadata18.setDisc((int) (short) 100);
        net.sourceforge.atunes.model.CDMetadata cDMetadata27 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str28 = cDMetadata27.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata29 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata29.setAlbumArtist("");
        java.lang.String str32 = cDMetadata29.getGenre();
        java.lang.String[] strArray34 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        cDMetadata29.setTrackNames((java.util.List<java.lang.String>) strList35);
        cDMetadata27.setComposerNames((java.util.List<java.lang.String>) strList35);
        net.sourceforge.atunes.model.CDMetadata cDMetadata39 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str40 = cDMetadata39.getGenre();
        java.util.List<java.lang.String> strList41 = cDMetadata39.getComposerNames();
        java.lang.String str42 = cDMetadata39.getAlbum();
        net.sourceforge.atunes.model.CDMetadata cDMetadata43 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata43.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList46 = cDMetadata43.getTracks();
        cDMetadata43.setAlbumArtist("/rss/channel/title");
        java.util.List<java.lang.String> strList49 = cDMetadata43.getTrackNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata50 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata50.setAlbumArtist("");
        java.lang.String str53 = cDMetadata50.getGenre();
        java.lang.String[] strArray55 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList56 = new java.util.ArrayList<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList56, strArray55);
        cDMetadata50.setTrackNames((java.util.List<java.lang.String>) strList56);
        cDMetadata43.setTrackNames((java.util.List<java.lang.String>) strList56);
        cDMetadata39.setTrackNames((java.util.List<java.lang.String>) strList56);
        cDMetadata27.setTrackNames((java.util.List<java.lang.String>) strList56);
        cDMetadata18.setArtistNames((java.util.List<java.lang.String>) strList56);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList56);
        java.util.List<java.lang.String> strList64 = cDMetadata0.getComposerNames();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(intList4);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(strList20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(intList22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNull(strList24);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(strList41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(intList46);
        org.junit.Assert.assertNull(strList49);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNull(strList64);
    }

    @Test
    public void test0808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0808");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList2 = throwableRankList0.getNFirstElements((int) (short) 10);
        throwableRankList0.clear();
        java.util.List<java.lang.Integer> intList5 = throwableRankList0.getNFirstElementCounts(150);
        java.util.List<java.lang.Throwable> throwableList7 = throwableRankList0.getNFirstElements((int) (short) 100);
        throwableRankList0.clear();
        int int9 = throwableRankList0.size();
        int int10 = throwableRankList0.size();
        org.junit.Assert.assertNotNull(throwableList2);
        org.junit.Assert.assertNotNull(intList5);
        org.junit.Assert.assertNotNull(throwableList7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test0809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0809");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        net.sourceforge.atunes.model.AudioObjectProperty audioObjectProperty1 = net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY;
        boolean boolean2 = columnBean0.equals((java.lang.Object) audioObjectProperty1);
        int int3 = columnBean0.getWidth();
        int int4 = columnBean0.getOrder();
        net.sourceforge.atunes.model.CDMetadata cDMetadata5 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata5.setAlbumArtist("");
        java.lang.String str8 = cDMetadata5.getGenre();
        int int9 = cDMetadata5.getYear();
        int int10 = cDMetadata5.getYear();
        cDMetadata5.setGenre("./enclosure/@url");
        java.util.List<java.lang.String> strList13 = null;
        cDMetadata5.setTrackNames(strList13);
        cDMetadata5.setAlbumArtist("./link[@rel='enclosure']/@type");
        boolean boolean17 = columnBean0.equals((java.lang.Object) "./link[@rel='enclosure']/@type");
        net.sourceforge.atunes.model.CDMetadata cDMetadata18 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str19 = cDMetadata18.getGenre();
        java.util.List<java.lang.String> strList20 = cDMetadata18.getComposerNames();
        java.lang.String str21 = cDMetadata18.getAlbum();
        net.sourceforge.atunes.model.CDMetadata cDMetadata22 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata22.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList25 = cDMetadata22.getTracks();
        cDMetadata22.setAlbumArtist("/rss/channel/title");
        java.util.List<java.lang.String> strList28 = cDMetadata22.getTrackNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata29 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata29.setAlbumArtist("");
        java.lang.String str32 = cDMetadata29.getGenre();
        java.lang.String[] strArray34 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        cDMetadata29.setTrackNames((java.util.List<java.lang.String>) strList35);
        cDMetadata22.setTrackNames((java.util.List<java.lang.String>) strList35);
        cDMetadata18.setTrackNames((java.util.List<java.lang.String>) strList35);
        java.util.List<java.lang.String> strList40 = cDMetadata18.getTrackNames();
        boolean boolean41 = columnBean0.equals((java.lang.Object) cDMetadata18);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str43 = cDMetadata18.getComposer(0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.List.size()\" because the return value of \"net.sourceforge.atunes.model.CDMetadata.getComposerNames()\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + audioObjectProperty1 + "' != '" + net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY + "'", audioObjectProperty1.equals(net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(strList20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(intList25);
        org.junit.Assert.assertNull(strList28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test0810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0810");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList3 = cDMetadata0.getTracks();
        cDMetadata0.setAlbumArtist("/rss/channel/title");
        java.util.List<java.lang.String> strList6 = cDMetadata0.getTrackNames();
        java.lang.String str7 = cDMetadata0.getAlbumArtist();
        cDMetadata0.setYear((-1));
        java.util.List<java.lang.String> strList10 = cDMetadata0.getTrackNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata11 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str12 = cDMetadata11.getGenre();
        java.util.List<java.lang.String> strList13 = cDMetadata11.getComposerNames();
        java.lang.String str14 = cDMetadata11.getAlbum();
        java.util.List<java.lang.Integer> intList15 = cDMetadata11.getTracks();
        int int16 = cDMetadata11.getDisc();
        net.sourceforge.atunes.model.CDMetadata cDMetadata17 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str18 = cDMetadata17.getGenre();
        java.util.List<java.lang.String> strList19 = cDMetadata17.getComposerNames();
        java.lang.String str20 = cDMetadata17.getAlbum();
        net.sourceforge.atunes.model.CDMetadata cDMetadata21 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata21.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList24 = cDMetadata21.getTracks();
        cDMetadata21.setAlbumArtist("/rss/channel/title");
        java.util.List<java.lang.String> strList27 = cDMetadata21.getTrackNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata28 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata28.setAlbumArtist("");
        java.lang.String str31 = cDMetadata28.getGenre();
        java.lang.String[] strArray33 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        cDMetadata28.setTrackNames((java.util.List<java.lang.String>) strList34);
        cDMetadata21.setTrackNames((java.util.List<java.lang.String>) strList34);
        cDMetadata17.setTrackNames((java.util.List<java.lang.String>) strList34);
        java.util.List<java.lang.String> strList39 = cDMetadata17.getTrackNames();
        cDMetadata11.setComposerNames(strList39);
        net.sourceforge.atunes.model.CDMetadata cDMetadata41 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata41.setAlbumArtist("");
        java.lang.String str44 = cDMetadata41.getGenre();
        int int45 = cDMetadata41.getYear();
        int int46 = cDMetadata41.getYear();
        net.sourceforge.atunes.model.CDMetadata cDMetadata47 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str48 = cDMetadata47.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata49 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata49.setAlbumArtist("");
        java.lang.String str52 = cDMetadata49.getGenre();
        java.lang.String[] strArray54 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList55 = new java.util.ArrayList<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList55, strArray54);
        cDMetadata49.setTrackNames((java.util.List<java.lang.String>) strList55);
        cDMetadata47.setComposerNames((java.util.List<java.lang.String>) strList55);
        cDMetadata41.setTrackNames((java.util.List<java.lang.String>) strList55);
        cDMetadata11.setTrackNames((java.util.List<java.lang.String>) strList55);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList55);
        cDMetadata0.setYear(150);
        org.junit.Assert.assertNull(intList3);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/rss/channel/title" + "'", str7, "/rss/channel/title");
        org.junit.Assert.assertNull(strList10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(strList13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(intList15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(strList19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(intList24);
        org.junit.Assert.assertNull(strList27);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test0811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0811");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str1 = feedType0.getUrlXPath();
        java.lang.String str2 = feedType0.getNameXPath();
        java.lang.String str3 = feedType0.getDescriptionXPath();
        java.lang.String str4 = feedType0.getNameXPath();
        java.lang.String str5 = feedType0.getNameXPath();
        java.lang.String str6 = feedType0.getAuthorXPath();
        java.lang.String str7 = feedType0.getTypeXPath();
        java.lang.String str8 = feedType0.getEntryXPath();
        java.lang.String str9 = feedType0.getAuthorXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "./enclosure/@url" + "'", str1, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "/rss/channel/title" + "'", str2, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "./description" + "'", str3, "./description");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "/rss/channel/title" + "'", str4, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/rss/channel/title" + "'", str5, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "./author" + "'", str6, "./author");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "./enclosure/@type" + "'", str7, "./enclosure/@type");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "/rss/channel/item" + "'", str8, "/rss/channel/item");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "./author" + "'", str9, "./author");
    }

    @Test
    public void test0812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0812");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        java.lang.String str12 = applicationVersion9.toShortString();
        java.lang.String str13 = applicationVersion9.getDownloadURL();
        java.lang.String str14 = applicationVersion9.getDate();
        int int15 = applicationVersion9.getMajorNumber();
        int int16 = applicationVersion9.getMinorNumber();
        java.lang.String str17 = applicationVersion9.getDirectDownloadURL();
        boolean boolean19 = applicationVersion9.equals((java.lang.Object) "mac");
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1.0.0 " + "'", str12, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "./description" + "'", str13, "./description");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "./title" + "'", str14, "./title");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "./pubDate" + "'", str17, "./pubDate");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0813");
        net.sourceforge.atunes.model.LookAndFeelBean lookAndFeelBean0 = new net.sourceforge.atunes.model.LookAndFeelBean();
        java.lang.String str1 = lookAndFeelBean0.getSkin();
        lookAndFeelBean0.setSkin("./enclosure/@url");
        lookAndFeelBean0.setSkin("./link[@rel='enclosure']/@type");
        lookAndFeelBean0.setName("mac");
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test0814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0814");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList2 = throwableRankList0.getNFirstElements((int) (short) 10);
        throwableRankList0.clear();
        java.util.List<java.lang.Integer> intList5 = throwableRankList0.getNFirstElementCounts(150);
        java.util.List<java.lang.Throwable> throwableList7 = throwableRankList0.getNFirstElements((int) (short) 100);
        java.util.List<java.lang.Throwable> throwableList9 = throwableRankList0.getNFirstElements((int) (byte) 1);
        java.lang.Throwable throwable10 = null;
        throwableRankList0.addItem(throwable10);
        java.util.List<java.lang.Integer> intList13 = throwableRankList0.getNFirstElementCounts((int) (byte) 10);
        throwableRankList0.clear();
        org.junit.Assert.assertNotNull(throwableList2);
        org.junit.Assert.assertNotNull(intList5);
        org.junit.Assert.assertNotNull(throwableList7);
        org.junit.Assert.assertNotNull(throwableList9);
        org.junit.Assert.assertNotNull(intList13);
    }

    @Test
    public void test0815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0815");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        columnBean0.setVisible(false);
        columnBean0.setWidth(0);
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType12 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion17 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType12, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str18 = applicationVersion17.getDate();
        java.lang.String str19 = applicationVersion17.toShortString();
        java.lang.String str20 = applicationVersion17.getChanges();
        boolean boolean21 = columnBean0.equals((java.lang.Object) applicationVersion17);
        java.lang.String str22 = applicationVersion17.toString();
        java.lang.String str23 = applicationVersion17.getDownloadURL();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType24 = applicationVersion17.getVersionType();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType29 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion34 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType29, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str35 = applicationVersion34.getDate();
        java.lang.String str36 = applicationVersion34.toShortString();
        int int37 = applicationVersion34.getMajorNumber();
        int int38 = applicationVersion34.getMinorNumber();
        java.lang.String str39 = applicationVersion34.getDate();
        java.lang.String str40 = applicationVersion34.getChanges();
        java.lang.String str41 = applicationVersion34.getDirectDownloadURL();
        int int42 = applicationVersion17.compareTo(applicationVersion34);
        java.lang.String str43 = applicationVersion34.toString();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + versionType12 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType12.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "./title" + "'", str18, "./title");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1.0.0 " + "'", str19, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "./title" + "'", str20, "./title");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1.0.0 mpc " + "'", str22, "1.0.0 mpc ");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "./description" + "'", str23, "./description");
        org.junit.Assert.assertTrue("'" + versionType24 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType24.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertTrue("'" + versionType29 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType29.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "./title" + "'", str35, "./title");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1.0.0 " + "'", str36, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "./title" + "'", str39, "./title");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "./title" + "'", str40, "./title");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "./pubDate" + "'", str41, "./pubDate");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1.0.0 mpc " + "'", str43, "1.0.0 mpc ");
    }

    @Test
    public void test0816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0816");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        columnBean0.setVisible(false);
        net.sourceforge.atunes.model.ColumnSort columnSort6 = columnBean0.getSort();
        net.sourceforge.atunes.model.TextTagAttribute textTagAttribute7 = net.sourceforge.atunes.model.TextTagAttribute.COMPOSER;
        boolean boolean8 = columnBean0.equals((java.lang.Object) textTagAttribute7);
        columnBean0.setVisible(true);
        columnBean0.setOrder((int) (short) 100);
        net.sourceforge.atunes.model.ColumnSort columnSort13 = columnBean0.getSort();
        int int14 = columnBean0.getOrder();
        columnBean0.setVisible(false);
        int int17 = columnBean0.getOrder();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(columnSort6);
        org.junit.Assert.assertTrue("'" + textTagAttribute7 + "' != '" + net.sourceforge.atunes.model.TextTagAttribute.COMPOSER + "'", textTagAttribute7.equals(net.sourceforge.atunes.model.TextTagAttribute.COMPOSER));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(columnSort13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
    }

    @Test
    public void test0817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0817");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        fontSettings0.setUseFontSmoothing(false);
        fontSettings0.setUseFontSmoothingSettingsFromOs(false);
        fontSettings0.setUseFontSmoothingSettingsFromOs(false);
    }

    @Test
    public void test0818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0818");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.lang.String str4 = cDMetadata0.getTitle((int) (byte) -1);
        net.sourceforge.atunes.model.CDMetadata cDMetadata5 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata5.setAlbumArtist("");
        java.lang.String str8 = cDMetadata5.getGenre();
        int int9 = cDMetadata5.getYear();
        int int10 = cDMetadata5.getYear();
        net.sourceforge.atunes.model.CDMetadata cDMetadata11 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str12 = cDMetadata11.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata13 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata13.setAlbumArtist("");
        java.lang.String str16 = cDMetadata13.getGenre();
        java.lang.String[] strArray18 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        cDMetadata13.setTrackNames((java.util.List<java.lang.String>) strList19);
        cDMetadata11.setComposerNames((java.util.List<java.lang.String>) strList19);
        cDMetadata5.setTrackNames((java.util.List<java.lang.String>) strList19);
        net.sourceforge.atunes.model.CDMetadata cDMetadata24 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str25 = cDMetadata24.getGenre();
        java.util.List<java.lang.String> strList26 = cDMetadata24.getComposerNames();
        java.lang.String str27 = cDMetadata24.getAlbum();
        java.util.List<java.lang.Integer> intList28 = cDMetadata24.getTracks();
        int int29 = cDMetadata24.getDisc();
        java.lang.String[] strArray37 = new java.lang.String[] { "net.sourceforge.atunes.model.InconsistentRepositoryException", "./title", "1.0.0 ", "./title", "./duration", "mpc", "net.sourceforge.atunes.model.InconsistentRepositoryException" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        cDMetadata24.setArtistNames((java.util.List<java.lang.String>) strList38);
        cDMetadata5.setArtistNames((java.util.List<java.lang.String>) strList38);
        cDMetadata0.setComposerNames((java.util.List<java.lang.String>) strList38);
        cDMetadata0.setDisc((int) (byte) 1);
        net.sourceforge.atunes.model.CDMetadata cDMetadata45 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str46 = cDMetadata45.getGenre();
        java.util.List<java.lang.String> strList47 = cDMetadata45.getComposerNames();
        java.lang.String str48 = cDMetadata45.getAlbum();
        java.util.List<java.lang.Integer> intList49 = cDMetadata45.getTracks();
        net.sourceforge.atunes.model.CDMetadata cDMetadata50 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata50.setAlbumArtist("");
        java.lang.String str54 = cDMetadata50.getTitle((int) (byte) -1);
        java.lang.String[] strArray56 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        cDMetadata50.setTrackNames((java.util.List<java.lang.String>) strList57);
        cDMetadata45.setTrackNames((java.util.List<java.lang.String>) strList57);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList57);
        cDMetadata0.setGenre("./updated");
        java.lang.Class<?> wildcardClass64 = cDMetadata0.getClass();
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(intList28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(strList47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(intList49);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test0819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0819");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.lang.String str3 = cDMetadata0.getAlbum();
        cDMetadata0.setAlbumArtist("./description");
        cDMetadata0.setAlbumArtist("./description");
        java.lang.String str8 = cDMetadata0.getAlbumArtist();
        java.lang.String str9 = cDMetadata0.getAlbum();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList10 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList12 = throwableRankList10.getNFirstElements((int) (short) 10);
        throwableRankList10.clear();
        java.util.List<java.lang.Integer> intList15 = throwableRankList10.getNFirstElementCounts(150);
        java.util.List<java.lang.Throwable> throwableList16 = throwableRankList10.getOrder();
        throwableRankList10.clear();
        java.util.List<java.lang.Integer> intList19 = throwableRankList10.getNFirstElementCounts(120);
        java.util.List<java.lang.Integer> intList21 = throwableRankList10.getNFirstElementCounts(0);
        cDMetadata0.setTracks(intList21);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "./description" + "'", str8, "./description");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(throwableList12);
        org.junit.Assert.assertNotNull(intList15);
        org.junit.Assert.assertNotNull(throwableList16);
        org.junit.Assert.assertNotNull(intList19);
        org.junit.Assert.assertNotNull(intList21);
    }

    @Test
    public void test0820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0820");
        net.sourceforge.atunes.model.LookAndFeelBean lookAndFeelBean0 = new net.sourceforge.atunes.model.LookAndFeelBean();
        lookAndFeelBean0.setName("./summary");
        java.lang.String str3 = lookAndFeelBean0.getSkin();
        lookAndFeelBean0.setSkin("./summary");
        java.lang.String str6 = lookAndFeelBean0.getSkin();
        lookAndFeelBean0.setName("net.sourceforge.atunes.model.SearchIndexNotAvailableException: net.sourceforge.atunes.model.SearchQuerySyntaxException: net.sourceforge.atunes.model.SearchQuerySyntaxException");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "./summary" + "'", str6, "./summary");
    }

    @Test
    public void test0821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0821");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        net.sourceforge.atunes.model.AudioObjectProperty audioObjectProperty1 = net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY;
        boolean boolean2 = columnBean0.equals((java.lang.Object) audioObjectProperty1);
        int int3 = columnBean0.getWidth();
        int int4 = columnBean0.getOrder();
        int int5 = columnBean0.getWidth();
        columnBean0.setWidth(32);
        org.junit.Assert.assertTrue("'" + audioObjectProperty1 + "' != '" + net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY + "'", audioObjectProperty1.equals(net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test0822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0822");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        net.sourceforge.atunes.model.SubmissionState submissionState2 = net.sourceforge.atunes.model.SubmissionState.PENDING;
        boolean boolean3 = columnBean0.equals((java.lang.Object) submissionState2);
        columnBean0.setOrder((int) (byte) 100);
        net.sourceforge.atunes.model.ColumnSort columnSort6 = columnBean0.getSort();
        columnBean0.setOrder((int) '4');
        columnBean0.setWidth(32);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + submissionState2 + "' != '" + net.sourceforge.atunes.model.SubmissionState.PENDING + "'", submissionState2.equals(net.sourceforge.atunes.model.SubmissionState.PENDING));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(columnSort6);
    }

    @Test
    public void test0823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0823");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str1 = feedType0.getEntryXPath();
        java.lang.String str2 = feedType0.getTypeXPath();
        java.lang.String str3 = feedType0.getTypeXPath();
        java.lang.String str4 = feedType0.getDescriptionXPath();
        java.lang.String str5 = feedType0.getDateXPath();
        java.lang.String str6 = feedType0.getTypeXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "/rss/channel/item" + "'", str1, "/rss/channel/item");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "./enclosure/@type" + "'", str2, "./enclosure/@type");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "./enclosure/@type" + "'", str3, "./enclosure/@type");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "./description" + "'", str4, "./description");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "./pubDate" + "'", str5, "./pubDate");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "./enclosure/@type" + "'", str6, "./enclosure/@type");
    }

    @Test
    public void test0824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0824");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        net.sourceforge.atunes.model.InconsistentRepositoryException inconsistentRepositoryException1 = new net.sourceforge.atunes.model.InconsistentRepositoryException();
        net.sourceforge.atunes.model.InconsistentRepositoryException inconsistentRepositoryException2 = new net.sourceforge.atunes.model.InconsistentRepositoryException();
        throwableRankList0.replaceItem((java.lang.Throwable) inconsistentRepositoryException1, (java.lang.Throwable) inconsistentRepositoryException2);
        int int4 = throwableRankList0.size();
        java.lang.Throwable throwable5 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException6 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable5);
        java.lang.Throwable[] throwableArray7 = searchQuerySyntaxException6.getSuppressed();
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException8 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException6);
        throwableRankList0.addItem((java.lang.Throwable) searchQuerySyntaxException6);
        java.lang.Throwable throwable10 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException11 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable10);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList12 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable13 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException14 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable13);
        java.lang.Throwable[] throwableArray15 = searchQuerySyntaxException14.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException16 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException14);
        java.lang.Throwable throwable17 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException18 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable17);
        java.lang.Throwable[] throwableArray19 = searchQuerySyntaxException18.getSuppressed();
        throwableRankList12.replaceItem((java.lang.Throwable) searchQuerySyntaxException14, (java.lang.Throwable) searchQuerySyntaxException18);
        searchQuerySyntaxException11.addSuppressed((java.lang.Throwable) searchQuerySyntaxException18);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException22 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException11);
        java.lang.Throwable throwable23 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException24 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable23);
        java.lang.Throwable[] throwableArray25 = searchQuerySyntaxException24.getSuppressed();
        searchQuerySyntaxException11.addSuppressed((java.lang.Throwable) searchQuerySyntaxException24);
        java.lang.Integer int27 = throwableRankList0.getCount((java.lang.Throwable) searchQuerySyntaxException11);
        java.util.List<java.lang.Throwable> throwableList28 = throwableRankList0.getOrder();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNull(int27);
        org.junit.Assert.assertNotNull(throwableList28);
    }

    @Test
    public void test0825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0825");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList2 = throwableRankList0.getNFirstElements((int) (short) 10);
        int int3 = throwableRankList0.size();
        int int4 = throwableRankList0.size();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList5 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList7 = throwableRankList5.getNFirstElements((int) (short) 10);
        int int8 = throwableRankList5.size();
        int int9 = throwableRankList5.size();
        java.lang.Throwable throwable10 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException11 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable10);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList12 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable13 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException14 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable13);
        java.lang.Throwable[] throwableArray15 = searchQuerySyntaxException14.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException16 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException14);
        java.lang.Throwable throwable17 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException18 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable17);
        java.lang.Throwable[] throwableArray19 = searchQuerySyntaxException18.getSuppressed();
        throwableRankList12.replaceItem((java.lang.Throwable) searchQuerySyntaxException14, (java.lang.Throwable) searchQuerySyntaxException18);
        searchQuerySyntaxException11.addSuppressed((java.lang.Throwable) searchQuerySyntaxException18);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException22 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException11);
        java.lang.Integer int23 = throwableRankList5.getCount((java.lang.Throwable) searchQuerySyntaxException11);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList24 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList26 = throwableRankList24.getNFirstElements((int) (short) 100);
        java.lang.Throwable throwable27 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException28 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable27);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList29 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable30 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException31 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable30);
        java.lang.Throwable[] throwableArray32 = searchQuerySyntaxException31.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException33 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException31);
        java.lang.Throwable throwable34 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException35 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable34);
        java.lang.Throwable[] throwableArray36 = searchQuerySyntaxException35.getSuppressed();
        throwableRankList29.replaceItem((java.lang.Throwable) searchQuerySyntaxException31, (java.lang.Throwable) searchQuerySyntaxException35);
        searchQuerySyntaxException28.addSuppressed((java.lang.Throwable) searchQuerySyntaxException35);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException39 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException28);
        java.lang.Throwable throwable40 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException41 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable40);
        java.lang.Throwable[] throwableArray42 = searchQuerySyntaxException41.getSuppressed();
        searchQuerySyntaxException28.addSuppressed((java.lang.Throwable) searchQuerySyntaxException41);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException44 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException28);
        java.lang.Throwable throwable45 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException46 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable45);
        java.lang.Throwable[] throwableArray47 = searchQuerySyntaxException46.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException48 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException46);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException49 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException46);
        throwableRankList24.replaceItem((java.lang.Throwable) searchQuerySyntaxException28, (java.lang.Throwable) searchQuerySyntaxException49);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList51 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        net.sourceforge.atunes.model.InconsistentRepositoryException inconsistentRepositoryException52 = new net.sourceforge.atunes.model.InconsistentRepositoryException();
        net.sourceforge.atunes.model.InconsistentRepositoryException inconsistentRepositoryException53 = new net.sourceforge.atunes.model.InconsistentRepositoryException();
        throwableRankList51.replaceItem((java.lang.Throwable) inconsistentRepositoryException52, (java.lang.Throwable) inconsistentRepositoryException53);
        java.lang.Throwable throwable55 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException56 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable55);
        java.lang.Throwable[] throwableArray57 = searchQuerySyntaxException56.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException58 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException56);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException59 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException56);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList60 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable61 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException62 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable61);
        java.lang.Throwable[] throwableArray63 = searchQuerySyntaxException62.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException64 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException62);
        java.lang.Throwable throwable65 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException66 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable65);
        java.lang.Throwable[] throwableArray67 = searchQuerySyntaxException66.getSuppressed();
        throwableRankList60.replaceItem((java.lang.Throwable) searchQuerySyntaxException62, (java.lang.Throwable) searchQuerySyntaxException66);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException69 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException66);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException70 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException69);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException71 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchIndexNotAvailableException70);
        searchQuerySyntaxException59.addSuppressed((java.lang.Throwable) searchIndexNotAvailableException71);
        throwableRankList51.addItem((java.lang.Throwable) searchQuerySyntaxException59);
        throwableRankList5.replaceItem((java.lang.Throwable) searchQuerySyntaxException49, (java.lang.Throwable) searchQuerySyntaxException59);
        throwableRankList0.addItem((java.lang.Throwable) searchQuerySyntaxException49);
        java.util.List<java.lang.Integer> intList77 = throwableRankList0.getNFirstElementCounts(120);
        throwableRankList0.clear();
        org.junit.Assert.assertNotNull(throwableList2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(throwableList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertNotNull(throwableList26);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(intList77);
    }

    @Test
    public void test0826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0826");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList3 = cDMetadata0.getTracks();
        cDMetadata0.setAlbumArtist("/rss/channel/title");
        java.util.List<java.lang.String> strList6 = cDMetadata0.getTrackNames();
        cDMetadata0.setGenre("");
        cDMetadata0.setYear((int) ' ');
        java.util.List<java.lang.String> strList11 = cDMetadata0.getArtistNames();
        org.junit.Assert.assertNull(intList3);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertNull(strList11);
    }

    @Test
    public void test0827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0827");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.Integer> intList2 = null;
        cDMetadata0.setTracks(intList2);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = cDMetadata0.getArtist(0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.List.size()\" because the return value of \"net.sourceforge.atunes.model.CDMetadata.getArtistNames()\" is null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test0828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0828");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDownloadURL();
        java.lang.String str11 = applicationVersion9.getDirectDownloadURL();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./description" + "'", str10, "./description");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "./pubDate" + "'", str11, "./pubDate");
    }

    @Test
    public void test0829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0829");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        int int12 = applicationVersion9.getMajorNumber();
        int int13 = applicationVersion9.getMinorNumber();
        java.lang.String str14 = applicationVersion9.getName();
        java.lang.String str15 = applicationVersion9.toShortString();
        java.lang.String str16 = applicationVersion9.getDirectDownloadURL();
        java.lang.String str17 = applicationVersion9.toShortString();
        java.lang.String str18 = applicationVersion9.getName();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType23 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion28 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType23, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str29 = applicationVersion28.getDate();
        java.lang.String str30 = applicationVersion28.toShortString();
        int int31 = applicationVersion28.getMajorNumber();
        java.lang.String str32 = applicationVersion28.toShortString();
        net.sourceforge.atunes.model.ArtistViewMode artistViewMode33 = net.sourceforge.atunes.model.ArtistViewMode.BOTH;
        boolean boolean34 = applicationVersion28.equals((java.lang.Object) artistViewMode33);
        int int35 = applicationVersion28.getMajorNumber();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType40 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion45 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType40, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str46 = applicationVersion45.getDate();
        java.lang.String str47 = applicationVersion45.toShortString();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType48 = applicationVersion45.getVersionType();
        int int49 = applicationVersion45.getMinorNumber();
        int int50 = applicationVersion28.compareTo(applicationVersion45);
        int int51 = applicationVersion9.compareTo(applicationVersion45);
        java.lang.String str52 = applicationVersion9.getDirectDownloadURL();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "mpc" + "'", str14, "mpc");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1.0.0 " + "'", str15, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "./pubDate" + "'", str16, "./pubDate");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1.0.0 " + "'", str17, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "mpc" + "'", str18, "mpc");
        org.junit.Assert.assertTrue("'" + versionType23 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType23.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "./title" + "'", str29, "./title");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1.0.0 " + "'", str30, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1.0.0 " + "'", str32, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + artistViewMode33 + "' != '" + net.sourceforge.atunes.model.ArtistViewMode.BOTH + "'", artistViewMode33.equals(net.sourceforge.atunes.model.ArtistViewMode.BOTH));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + versionType40 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType40.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "./title" + "'", str46, "./title");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1.0.0 " + "'", str47, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + versionType48 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType48.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "./pubDate" + "'", str52, "./pubDate");
    }

    @Test
    public void test0830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0830");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        java.lang.String str12 = applicationVersion9.getChanges();
        int int13 = applicationVersion9.getMinorNumber();
        java.lang.String str14 = applicationVersion9.getChanges();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType19 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion24 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType19, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str25 = applicationVersion24.getDate();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType26 = applicationVersion24.getVersionType();
        java.lang.String str27 = applicationVersion24.getDownloadURL();
        java.lang.String str28 = applicationVersion24.getDirectDownloadURL();
        int int29 = applicationVersion9.compareTo(applicationVersion24);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList30 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable31 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException32 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable31);
        java.lang.Throwable[] throwableArray33 = searchQuerySyntaxException32.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException34 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException32);
        java.lang.Throwable throwable35 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException36 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable35);
        java.lang.Throwable[] throwableArray37 = searchQuerySyntaxException36.getSuppressed();
        throwableRankList30.replaceItem((java.lang.Throwable) searchQuerySyntaxException32, (java.lang.Throwable) searchQuerySyntaxException36);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList39 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable40 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException41 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable40);
        java.lang.Throwable[] throwableArray42 = searchQuerySyntaxException41.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException43 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException41);
        java.lang.Throwable throwable44 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException45 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable44);
        java.lang.Throwable[] throwableArray46 = searchQuerySyntaxException45.getSuppressed();
        throwableRankList39.replaceItem((java.lang.Throwable) searchQuerySyntaxException41, (java.lang.Throwable) searchQuerySyntaxException45);
        java.lang.Integer int48 = throwableRankList30.getCount((java.lang.Throwable) searchQuerySyntaxException45);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList49 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList51 = throwableRankList49.getNFirstElements((int) (short) 10);
        throwableRankList49.clear();
        int int53 = throwableRankList49.size();
        java.lang.Throwable throwable54 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException55 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable54);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList56 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable57 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException58 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable57);
        java.lang.Throwable[] throwableArray59 = searchQuerySyntaxException58.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException60 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException58);
        java.lang.Throwable throwable61 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException62 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable61);
        java.lang.Throwable[] throwableArray63 = searchQuerySyntaxException62.getSuppressed();
        throwableRankList56.replaceItem((java.lang.Throwable) searchQuerySyntaxException58, (java.lang.Throwable) searchQuerySyntaxException62);
        searchQuerySyntaxException55.addSuppressed((java.lang.Throwable) searchQuerySyntaxException62);
        java.lang.Integer int66 = throwableRankList49.getCount((java.lang.Throwable) searchQuerySyntaxException62);
        searchQuerySyntaxException45.addSuppressed((java.lang.Throwable) searchQuerySyntaxException62);
        java.lang.Throwable throwable68 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException69 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable68);
        java.lang.Throwable[] throwableArray70 = searchQuerySyntaxException69.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException71 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException69);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException72 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException69);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList73 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable74 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException75 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable74);
        java.lang.Throwable[] throwableArray76 = searchQuerySyntaxException75.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException77 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException75);
        java.lang.Throwable throwable78 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException79 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable78);
        java.lang.Throwable[] throwableArray80 = searchQuerySyntaxException79.getSuppressed();
        throwableRankList73.replaceItem((java.lang.Throwable) searchQuerySyntaxException75, (java.lang.Throwable) searchQuerySyntaxException79);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException82 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException79);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException83 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException82);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException84 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchIndexNotAvailableException83);
        searchQuerySyntaxException72.addSuppressed((java.lang.Throwable) searchIndexNotAvailableException84);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException86 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException72);
        searchQuerySyntaxException62.addSuppressed((java.lang.Throwable) searchIndexNotAvailableException86);
        boolean boolean88 = applicationVersion9.equals((java.lang.Object) searchIndexNotAvailableException86);
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "./title" + "'", str12, "./title");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "./title" + "'", str14, "./title");
        org.junit.Assert.assertTrue("'" + versionType19 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType19.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "./title" + "'", str25, "./title");
        org.junit.Assert.assertTrue("'" + versionType26 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType26.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "./description" + "'", str27, "./description");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "./pubDate" + "'", str28, "./pubDate");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNull(int48);
        org.junit.Assert.assertNotNull(throwableList51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNull(int66);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test0831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0831");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList3 = cDMetadata0.getTracks();
        cDMetadata0.setAlbumArtist("/rss/channel/title");
        java.util.List<java.lang.String> strList6 = cDMetadata0.getTrackNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata7 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata7.setAlbumArtist("");
        java.lang.String str10 = cDMetadata7.getGenre();
        java.lang.String[] strArray12 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        cDMetadata7.setTrackNames((java.util.List<java.lang.String>) strList13);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList13);
        net.sourceforge.atunes.model.CDMetadata cDMetadata17 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str18 = cDMetadata17.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata19 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata19.setAlbumArtist("");
        java.lang.String str22 = cDMetadata19.getGenre();
        java.lang.String[] strArray24 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        cDMetadata19.setTrackNames((java.util.List<java.lang.String>) strList25);
        cDMetadata17.setComposerNames((java.util.List<java.lang.String>) strList25);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList25);
        int int30 = cDMetadata0.getDisc();
        java.lang.String str31 = cDMetadata0.getAlbumArtist();
        org.junit.Assert.assertNull(intList3);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "/rss/channel/title" + "'", str31, "/rss/channel/title");
    }

    @Test
    public void test0832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0832");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable1 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException2 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable1);
        java.lang.Throwable[] throwableArray3 = searchQuerySyntaxException2.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException4 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException2);
        java.lang.Throwable throwable5 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException6 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable5);
        java.lang.Throwable[] throwableArray7 = searchQuerySyntaxException6.getSuppressed();
        throwableRankList0.replaceItem((java.lang.Throwable) searchQuerySyntaxException2, (java.lang.Throwable) searchQuerySyntaxException6);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList9 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable10 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException11 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable10);
        java.lang.Throwable[] throwableArray12 = searchQuerySyntaxException11.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException13 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException11);
        java.lang.Throwable throwable14 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException15 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable14);
        java.lang.Throwable[] throwableArray16 = searchQuerySyntaxException15.getSuppressed();
        throwableRankList9.replaceItem((java.lang.Throwable) searchQuerySyntaxException11, (java.lang.Throwable) searchQuerySyntaxException15);
        java.lang.Integer int18 = throwableRankList0.getCount((java.lang.Throwable) searchQuerySyntaxException15);
        java.util.List<java.lang.Throwable> throwableList19 = throwableRankList0.getOrder();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList20 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList22 = throwableRankList20.getNFirstElements((int) (short) 10);
        int int23 = throwableRankList20.size();
        int int24 = throwableRankList20.size();
        java.util.List<java.lang.Throwable> throwableList25 = throwableRankList20.getOrder();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList26 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable27 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException28 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable27);
        java.lang.Throwable[] throwableArray29 = searchQuerySyntaxException28.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException30 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException28);
        java.lang.Throwable throwable31 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException32 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable31);
        java.lang.Throwable[] throwableArray33 = searchQuerySyntaxException32.getSuppressed();
        throwableRankList26.replaceItem((java.lang.Throwable) searchQuerySyntaxException28, (java.lang.Throwable) searchQuerySyntaxException32);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList35 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable36 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException37 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable36);
        java.lang.Throwable[] throwableArray38 = searchQuerySyntaxException37.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException39 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException37);
        java.lang.Throwable throwable40 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException41 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable40);
        java.lang.Throwable[] throwableArray42 = searchQuerySyntaxException41.getSuppressed();
        throwableRankList35.replaceItem((java.lang.Throwable) searchQuerySyntaxException37, (java.lang.Throwable) searchQuerySyntaxException41);
        java.lang.Integer int44 = throwableRankList26.getCount((java.lang.Throwable) searchQuerySyntaxException41);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList45 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable46 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException47 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable46);
        java.lang.Throwable[] throwableArray48 = searchQuerySyntaxException47.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException49 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException47);
        java.lang.Throwable throwable50 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException51 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable50);
        java.lang.Throwable[] throwableArray52 = searchQuerySyntaxException51.getSuppressed();
        throwableRankList45.replaceItem((java.lang.Throwable) searchQuerySyntaxException47, (java.lang.Throwable) searchQuerySyntaxException51);
        java.util.List<java.lang.Throwable> throwableList54 = throwableRankList45.getOrder();
        java.lang.Throwable throwable55 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException56 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable55);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList57 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable58 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException59 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable58);
        java.lang.Throwable[] throwableArray60 = searchQuerySyntaxException59.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException61 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException59);
        java.lang.Throwable throwable62 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException63 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable62);
        java.lang.Throwable[] throwableArray64 = searchQuerySyntaxException63.getSuppressed();
        throwableRankList57.replaceItem((java.lang.Throwable) searchQuerySyntaxException59, (java.lang.Throwable) searchQuerySyntaxException63);
        searchQuerySyntaxException56.addSuppressed((java.lang.Throwable) searchQuerySyntaxException63);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException67 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException56);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException68 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException56);
        java.lang.Integer int69 = throwableRankList45.getCount((java.lang.Throwable) searchIndexNotAvailableException68);
        java.lang.Integer int70 = throwableRankList26.getCount((java.lang.Throwable) searchIndexNotAvailableException68);
        throwableRankList20.addItem((java.lang.Throwable) searchIndexNotAvailableException68);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList72 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable73 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException74 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable73);
        java.lang.Throwable[] throwableArray75 = searchQuerySyntaxException74.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException76 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException74);
        java.lang.Throwable throwable77 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException78 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable77);
        java.lang.Throwable[] throwableArray79 = searchQuerySyntaxException78.getSuppressed();
        throwableRankList72.replaceItem((java.lang.Throwable) searchQuerySyntaxException74, (java.lang.Throwable) searchQuerySyntaxException78);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException81 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException78);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException82 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException78);
        throwableRankList0.replaceItem((java.lang.Throwable) searchIndexNotAvailableException68, (java.lang.Throwable) searchQuerySyntaxException78);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException84 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException78);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(throwableList19);
        org.junit.Assert.assertNotNull(throwableList22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(throwableList25);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNull(int44);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableList54);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNull(int69);
        org.junit.Assert.assertNull(int70);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray79);
    }

    @Test
    public void test0833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0833");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        fontSettings0.setUseFontSmoothing(false);
        net.sourceforge.atunes.model.IFontBean iFontBean3 = fontSettings0.getFont();
        boolean boolean4 = fontSettings0.isUseFontSmoothing();
        fontSettings0.setUseFontSmoothing(true);
        fontSettings0.setUseFontSmoothing(true);
        boolean boolean9 = fontSettings0.isUseFontSmoothing();
        org.junit.Assert.assertNull(iFontBean3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test0834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0834");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        net.sourceforge.atunes.model.AudioObjectProperty audioObjectProperty1 = net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY;
        boolean boolean2 = columnBean0.equals((java.lang.Object) audioObjectProperty1);
        boolean boolean3 = columnBean0.isVisible();
        columnBean0.setWidth((int) ' ');
        int int6 = columnBean0.getWidth();
        columnBean0.setOrder(1);
        org.junit.Assert.assertTrue("'" + audioObjectProperty1 + "' != '" + net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY + "'", audioObjectProperty1.equals(net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 32 + "'", int6 == 32);
    }

    @Test
    public void test0835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0835");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        java.lang.String str12 = applicationVersion9.getChanges();
        int int13 = applicationVersion9.getMinorNumber();
        java.lang.String str14 = applicationVersion9.getChanges();
        int int15 = applicationVersion9.getMajorNumber();
        java.lang.String str16 = applicationVersion9.getDownloadURL();
        java.lang.Throwable throwable17 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException18 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable17);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList19 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable20 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException21 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable20);
        java.lang.Throwable[] throwableArray22 = searchQuerySyntaxException21.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException23 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException21);
        java.lang.Throwable throwable24 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException25 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable24);
        java.lang.Throwable[] throwableArray26 = searchQuerySyntaxException25.getSuppressed();
        throwableRankList19.replaceItem((java.lang.Throwable) searchQuerySyntaxException21, (java.lang.Throwable) searchQuerySyntaxException25);
        searchQuerySyntaxException18.addSuppressed((java.lang.Throwable) searchQuerySyntaxException25);
        java.lang.Throwable[] throwableArray29 = searchQuerySyntaxException25.getSuppressed();
        boolean boolean30 = applicationVersion9.equals((java.lang.Object) throwableArray29);
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "./title" + "'", str12, "./title");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "./title" + "'", str14, "./title");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "./description" + "'", str16, "./description");
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test0836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0836");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        fontSettings0.setUseFontSmoothing(false);
        net.sourceforge.atunes.model.IFontBean iFontBean3 = fontSettings0.getFont();
        boolean boolean4 = fontSettings0.isUseFontSmoothing();
        fontSettings0.setUseFontSmoothing(true);
        boolean boolean7 = fontSettings0.isUseFontSmoothing();
        net.sourceforge.atunes.model.IFontBean iFontBean8 = fontSettings0.getFont();
        org.junit.Assert.assertNull(iFontBean3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(iFontBean8);
    }

    @Test
    public void test0837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0837");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable1 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException2 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable1);
        java.lang.Throwable[] throwableArray3 = searchQuerySyntaxException2.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException4 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException2);
        java.lang.Throwable throwable5 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException6 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable5);
        java.lang.Throwable[] throwableArray7 = searchQuerySyntaxException6.getSuppressed();
        throwableRankList0.replaceItem((java.lang.Throwable) searchQuerySyntaxException2, (java.lang.Throwable) searchQuerySyntaxException6);
        java.util.List<java.lang.Throwable> throwableList9 = throwableRankList0.getOrder();
        int int10 = throwableRankList0.size();
        java.util.List<java.lang.Throwable> throwableList12 = throwableRankList0.getNFirstElements(1);
        java.lang.Class<?> wildcardClass13 = throwableList12.getClass();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableList9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(throwableList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0838");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./summary", 0, (int) (byte) 0, (int) (byte) 0, versionType4, "./title", "/rss/channel/title", "net.sourceforge.atunes.model.SearchQuerySyntaxException", "./title");
        java.lang.String str10 = applicationVersion9.getName();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
    }

    @Test
    public void test0839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0839");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.lang.String str3 = cDMetadata0.getAlbum();
        java.util.List<java.lang.Integer> intList4 = cDMetadata0.getTracks();
        net.sourceforge.atunes.model.CDMetadata cDMetadata5 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata5.setAlbumArtist("");
        java.lang.String str9 = cDMetadata5.getTitle((int) (byte) -1);
        java.lang.String[] strArray11 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        cDMetadata5.setTrackNames((java.util.List<java.lang.String>) strList12);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList12);
        cDMetadata0.setYear((int) (short) 1);
        int int18 = cDMetadata0.getYear();
        java.lang.String str19 = cDMetadata0.getGenre();
        cDMetadata0.setYear((int) (short) 10);
        net.sourceforge.atunes.model.CDMetadata cDMetadata22 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata22.setAlbumArtist("");
        java.lang.String str25 = cDMetadata22.getGenre();
        java.lang.String[] strArray27 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        cDMetadata22.setTrackNames((java.util.List<java.lang.String>) strList28);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList28);
        int int32 = cDMetadata0.getDisc();
        java.util.List<java.lang.String> strList33 = cDMetadata0.getComposerNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata34 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata34.setAlbumArtist("");
        java.lang.String str37 = cDMetadata34.getGenre();
        java.util.List<java.lang.String> strList38 = cDMetadata34.getTrackNames();
        java.util.List<java.lang.String> strList39 = cDMetadata34.getTrackNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata40 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata40.setAlbumArtist("");
        java.lang.String str44 = cDMetadata40.getTitle((int) (byte) -1);
        net.sourceforge.atunes.model.CDMetadata cDMetadata45 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata45.setAlbumArtist("");
        java.lang.String str48 = cDMetadata45.getGenre();
        int int49 = cDMetadata45.getYear();
        int int50 = cDMetadata45.getYear();
        net.sourceforge.atunes.model.CDMetadata cDMetadata51 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str52 = cDMetadata51.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata53 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata53.setAlbumArtist("");
        java.lang.String str56 = cDMetadata53.getGenre();
        java.lang.String[] strArray58 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList59 = new java.util.ArrayList<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList59, strArray58);
        cDMetadata53.setTrackNames((java.util.List<java.lang.String>) strList59);
        cDMetadata51.setComposerNames((java.util.List<java.lang.String>) strList59);
        cDMetadata45.setTrackNames((java.util.List<java.lang.String>) strList59);
        net.sourceforge.atunes.model.CDMetadata cDMetadata64 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str65 = cDMetadata64.getGenre();
        java.util.List<java.lang.String> strList66 = cDMetadata64.getComposerNames();
        java.lang.String str67 = cDMetadata64.getAlbum();
        java.util.List<java.lang.Integer> intList68 = cDMetadata64.getTracks();
        int int69 = cDMetadata64.getDisc();
        java.lang.String[] strArray77 = new java.lang.String[] { "net.sourceforge.atunes.model.InconsistentRepositoryException", "./title", "1.0.0 ", "./title", "./duration", "mpc", "net.sourceforge.atunes.model.InconsistentRepositoryException" };
        java.util.ArrayList<java.lang.String> strList78 = new java.util.ArrayList<java.lang.String>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList78, strArray77);
        cDMetadata64.setArtistNames((java.util.List<java.lang.String>) strList78);
        cDMetadata45.setArtistNames((java.util.List<java.lang.String>) strList78);
        cDMetadata40.setComposerNames((java.util.List<java.lang.String>) strList78);
        cDMetadata34.setTrackNames((java.util.List<java.lang.String>) strList78);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList78);
        int int85 = cDMetadata0.getYear();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(intList4);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNull(strList33);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(strList38);
        org.junit.Assert.assertNull(strList39);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNull(strList66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNull(intList68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 10 + "'", int85 == 10);
    }

    @Test
    public void test0840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0840");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        columnBean0.setVisible(false);
        columnBean0.setWidth(0);
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType12 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion17 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType12, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str18 = applicationVersion17.getDate();
        java.lang.String str19 = applicationVersion17.toShortString();
        java.lang.String str20 = applicationVersion17.getChanges();
        boolean boolean21 = columnBean0.equals((java.lang.Object) applicationVersion17);
        net.sourceforge.atunes.model.ColumnBean columnBean22 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean23 = columnBean22.isVisible();
        net.sourceforge.atunes.model.SubmissionState submissionState24 = net.sourceforge.atunes.model.SubmissionState.PENDING;
        boolean boolean25 = columnBean22.equals((java.lang.Object) submissionState24);
        columnBean22.setVisible(false);
        net.sourceforge.atunes.model.ColumnSort columnSort28 = net.sourceforge.atunes.model.ColumnSort.ASCENDING;
        columnBean22.setSort(columnSort28);
        columnBean0.setSort(columnSort28);
        net.sourceforge.atunes.model.FontSettings fontSettings31 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata32 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata32.setAlbumArtist("");
        boolean boolean35 = fontSettings31.equals((java.lang.Object) cDMetadata32);
        net.sourceforge.atunes.model.FeedType feedType36 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str37 = feedType36.getUrlXPath();
        java.lang.String str38 = feedType36.getNameXPath();
        java.lang.String str39 = feedType36.getDescriptionXPath();
        boolean boolean40 = fontSettings31.equals((java.lang.Object) str39);
        boolean boolean41 = fontSettings31.isUseFontSmoothing();
        boolean boolean42 = columnBean0.equals((java.lang.Object) boolean41);
        int int43 = columnBean0.getOrder();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + versionType12 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType12.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "./title" + "'", str18, "./title");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1.0.0 " + "'", str19, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "./title" + "'", str20, "./title");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + submissionState24 + "' != '" + net.sourceforge.atunes.model.SubmissionState.PENDING + "'", submissionState24.equals(net.sourceforge.atunes.model.SubmissionState.PENDING));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + columnSort28 + "' != '" + net.sourceforge.atunes.model.ColumnSort.ASCENDING + "'", columnSort28.equals(net.sourceforge.atunes.model.ColumnSort.ASCENDING));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + feedType36 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType36.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "./enclosure/@url" + "'", str37, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "/rss/channel/title" + "'", str38, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "./description" + "'", str39, "./description");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
    }

    @Test
    public void test0841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0841");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType8 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion13 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType8, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str14 = applicationVersion13.getDate();
        java.lang.String str15 = applicationVersion13.toShortString();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType16 = applicationVersion13.getVersionType();
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion21 = new net.sourceforge.atunes.model.ApplicationVersion("1.0.0 ", (int) (short) 10, (int) '4', (int) '#', versionType16, "", "./enclosure/@url", "SOCKS_PROXY", "./enclosure/@url");
        java.lang.String str22 = applicationVersion21.getName();
        int int23 = applicationVersion21.getMajorNumber();
        java.lang.String str24 = applicationVersion21.toShortString();
        int int25 = applicationVersion21.getMajorNumber();
        java.lang.String str26 = applicationVersion21.toString();
        org.junit.Assert.assertTrue("'" + versionType8 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType8.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "./title" + "'", str14, "./title");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1.0.0 " + "'", str15, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + versionType16 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType16.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "10.52.35 " + "'", str24, "10.52.35 ");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "10.52.35  " + "'", str26, "10.52.35  ");
    }

    @Test
    public void test0842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0842");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.lang.String str3 = cDMetadata0.getGenre();
        java.lang.String[] strArray5 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList6);
        cDMetadata0.setYear((int) (short) 10);
        cDMetadata0.setDisc(0);
        java.lang.String str13 = cDMetadata0.getAlbum();
        cDMetadata0.setAlbumArtist("HTTP_PROXY");
        net.sourceforge.atunes.model.FontSettings fontSettings16 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata17 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata17.setAlbumArtist("");
        boolean boolean20 = fontSettings16.equals((java.lang.Object) cDMetadata17);
        java.lang.String str21 = cDMetadata17.getAlbum();
        java.lang.String str22 = cDMetadata17.getAlbum();
        java.util.List<java.lang.Integer> intList23 = cDMetadata17.getTracks();
        net.sourceforge.atunes.model.FontSettings fontSettings24 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata25 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata25.setAlbumArtist("");
        boolean boolean28 = fontSettings24.equals((java.lang.Object) cDMetadata25);
        fontSettings24.setUseFontSmoothing(true);
        net.sourceforge.atunes.model.IFontBean iFontBean31 = fontSettings24.getFont();
        net.sourceforge.atunes.model.CDMetadata cDMetadata32 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str33 = cDMetadata32.getGenre();
        java.util.List<java.lang.String> strList34 = cDMetadata32.getComposerNames();
        java.lang.String str35 = cDMetadata32.getAlbum();
        java.util.List<java.lang.Integer> intList36 = cDMetadata32.getTracks();
        cDMetadata32.setAlbumArtist("mpc");
        java.lang.String str39 = cDMetadata32.getAlbum();
        boolean boolean40 = fontSettings24.equals((java.lang.Object) cDMetadata32);
        java.lang.String[] strArray65 = new java.lang.String[] { "./link[@rel='enclosure']/@type", "SOCKS_PROXY", "/feed/title", "./pubDate", "1.0.0 mpc ", "net.sourceforge.atunes.model.InconsistentRepositoryException", "1.0.0 mpc ", "1.0.0 mpc ", "rm", "./enclosure/@type", "/rss/channel/item", "mpc", "./title", "1.0.0 ", "flv", "1.0.0 ", "./link[@rel='enclosure']/@type", "hi!", "./link[@rel='enclosure']/@type", "./updated", "10.52.35  ", "net.sourceforge.atunes.model.InconsistentRepositoryException", "./enclosure/@url", "SOCKS_PROXY" };
        java.util.ArrayList<java.lang.String> strList66 = new java.util.ArrayList<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList66, strArray65);
        cDMetadata32.setTrackNames((java.util.List<java.lang.String>) strList66);
        cDMetadata17.setTrackNames((java.util.List<java.lang.String>) strList66);
        net.sourceforge.atunes.model.ColumnBean columnBean70 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean71 = columnBean70.isVisible();
        net.sourceforge.atunes.model.SubmissionState submissionState72 = net.sourceforge.atunes.model.SubmissionState.PENDING;
        boolean boolean73 = columnBean70.equals((java.lang.Object) submissionState72);
        net.sourceforge.atunes.model.CDMetadata cDMetadata74 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata74.setAlbumArtist("");
        java.lang.String str78 = cDMetadata74.getTitle((int) (byte) -1);
        net.sourceforge.atunes.model.CDMetadata cDMetadata79 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata79.setAlbumArtist("");
        java.lang.String str83 = cDMetadata79.getTitle((int) (byte) -1);
        java.lang.String[] strArray85 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList86 = new java.util.ArrayList<java.lang.String>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList86, strArray85);
        cDMetadata79.setTrackNames((java.util.List<java.lang.String>) strList86);
        cDMetadata74.setArtistNames((java.util.List<java.lang.String>) strList86);
        boolean boolean90 = columnBean70.equals((java.lang.Object) strList86);
        cDMetadata17.setComposerNames((java.util.List<java.lang.String>) strList86);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList86);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(intList23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(iFontBean31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(strList34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(intList36);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + submissionState72 + "' != '" + net.sourceforge.atunes.model.SubmissionState.PENDING + "'", submissionState72.equals(net.sourceforge.atunes.model.SubmissionState.PENDING));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test0843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0843");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str1 = feedType0.getUrlXPath();
        java.lang.String str2 = feedType0.getNameXPath();
        java.lang.String str3 = feedType0.getDescriptionXPath();
        java.lang.String str4 = feedType0.getNameXPath();
        java.lang.String str5 = feedType0.getEntryXPath();
        java.lang.String str6 = feedType0.getEntryXPath();
        java.lang.String str7 = feedType0.getNameXPath();
        java.lang.String str8 = feedType0.getUrlXPath();
        java.lang.String str9 = feedType0.getEntryXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "./enclosure/@url" + "'", str1, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "/rss/channel/title" + "'", str2, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "./description" + "'", str3, "./description");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "/rss/channel/title" + "'", str4, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/rss/channel/item" + "'", str5, "/rss/channel/item");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "/rss/channel/item" + "'", str6, "/rss/channel/item");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/rss/channel/title" + "'", str7, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "./enclosure/@url" + "'", str8, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/rss/channel/item" + "'", str9, "/rss/channel/item");
    }

    @Test
    public void test0844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0844");
        net.sourceforge.atunes.model.LookAndFeelBean lookAndFeelBean0 = new net.sourceforge.atunes.model.LookAndFeelBean();
        lookAndFeelBean0.setName("./summary");
        lookAndFeelBean0.setSkin("./enclosure/@url");
        java.lang.String str5 = lookAndFeelBean0.getSkin();
        lookAndFeelBean0.setSkin("rm");
        java.lang.String str8 = lookAndFeelBean0.getName();
        lookAndFeelBean0.setSkin("net.sourceforge.atunes.model.SearchIndexNotAvailableException: net.sourceforge.atunes.model.SearchIndexNotAvailableException: net.sourceforge.atunes.model.SearchQuerySyntaxException: net.sourceforge.atunes.model.SearchQuerySyntaxException");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "./enclosure/@url" + "'", str5, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "./summary" + "'", str8, "./summary");
    }

    @Test
    public void test0845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0845");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        columnBean0.setVisible(false);
        net.sourceforge.atunes.model.ColumnSort columnSort6 = columnBean0.getSort();
        net.sourceforge.atunes.model.TextTagAttribute textTagAttribute7 = net.sourceforge.atunes.model.TextTagAttribute.COMPOSER;
        boolean boolean8 = columnBean0.equals((java.lang.Object) textTagAttribute7);
        columnBean0.setVisible(true);
        columnBean0.setOrder((int) (short) 100);
        net.sourceforge.atunes.model.ColumnBean columnBean13 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean14 = columnBean13.isVisible();
        columnBean13.setOrder((int) (byte) -1);
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType21 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion26 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType21, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str27 = applicationVersion26.getDate();
        java.lang.String str28 = applicationVersion26.toShortString();
        int int29 = applicationVersion26.getMajorNumber();
        int int30 = applicationVersion26.getMinorNumber();
        java.lang.String str31 = applicationVersion26.getName();
        java.lang.String str32 = applicationVersion26.getChanges();
        boolean boolean33 = columnBean13.equals((java.lang.Object) applicationVersion26);
        int int34 = columnBean13.getOrder();
        boolean boolean35 = columnBean0.equals((java.lang.Object) columnBean13);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList36 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        int int37 = throwableRankList36.size();
        java.util.List<java.lang.Throwable> throwableList38 = throwableRankList36.getOrder();
        java.lang.Throwable throwable39 = null;
        java.lang.Integer int40 = throwableRankList36.getCount(throwable39);
        java.util.List<java.lang.Integer> intList42 = throwableRankList36.getNFirstElementCounts(1);
        boolean boolean43 = columnBean0.equals((java.lang.Object) throwableRankList36);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(columnSort6);
        org.junit.Assert.assertTrue("'" + textTagAttribute7 + "' != '" + net.sourceforge.atunes.model.TextTagAttribute.COMPOSER + "'", textTagAttribute7.equals(net.sourceforge.atunes.model.TextTagAttribute.COMPOSER));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + versionType21 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType21.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "./title" + "'", str27, "./title");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1.0.0 " + "'", str28, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "mpc" + "'", str31, "mpc");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "./title" + "'", str32, "./title");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(throwableList38);
        org.junit.Assert.assertNull(int40);
        org.junit.Assert.assertNotNull(intList42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test0846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0846");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str1 = feedType0.getUrlXPath();
        java.lang.String str2 = feedType0.getDateXPath();
        java.lang.String str3 = feedType0.getUrlXPath();
        java.lang.String str4 = feedType0.getAuthorXPath();
        java.lang.String str5 = feedType0.getEntryXPath();
        java.lang.String str6 = feedType0.getTitleXPath();
        java.lang.String str7 = feedType0.getDurationXPath();
        java.lang.String str8 = feedType0.getNameXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "./enclosure/@url" + "'", str1, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "./pubDate" + "'", str2, "./pubDate");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "./enclosure/@url" + "'", str3, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "./author" + "'", str4, "./author");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/rss/channel/item" + "'", str5, "/rss/channel/item");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "./title" + "'", str6, "./title");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "./duration" + "'", str7, "./duration");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "/rss/channel/title" + "'", str8, "/rss/channel/title");
    }

    @Test
    public void test0847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0847");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList2 = throwableRankList0.getNFirstElements((int) (short) 10);
        int int3 = throwableRankList0.size();
        int int4 = throwableRankList0.size();
        java.util.List<java.lang.Throwable> throwableList5 = throwableRankList0.getOrder();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList6 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable7 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException8 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable7);
        java.lang.Throwable[] throwableArray9 = searchQuerySyntaxException8.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException10 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException8);
        java.lang.Throwable throwable11 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException12 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable11);
        java.lang.Throwable[] throwableArray13 = searchQuerySyntaxException12.getSuppressed();
        throwableRankList6.replaceItem((java.lang.Throwable) searchQuerySyntaxException8, (java.lang.Throwable) searchQuerySyntaxException12);
        java.lang.Throwable[] throwableArray15 = searchQuerySyntaxException8.getSuppressed();
        java.lang.Throwable[] throwableArray16 = searchQuerySyntaxException8.getSuppressed();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList17 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList19 = throwableRankList17.getNFirstElements((int) (short) 10);
        int int20 = throwableRankList17.size();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList21 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable22 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException23 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable22);
        java.lang.Throwable[] throwableArray24 = searchQuerySyntaxException23.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException25 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException23);
        java.lang.Throwable throwable26 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException27 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable26);
        java.lang.Throwable[] throwableArray28 = searchQuerySyntaxException27.getSuppressed();
        throwableRankList21.replaceItem((java.lang.Throwable) searchQuerySyntaxException23, (java.lang.Throwable) searchQuerySyntaxException27);
        java.lang.Throwable[] throwableArray30 = searchQuerySyntaxException23.getSuppressed();
        java.lang.Integer int31 = throwableRankList17.getCount((java.lang.Throwable) searchQuerySyntaxException23);
        throwableRankList0.replaceItem((java.lang.Throwable) searchQuerySyntaxException8, (java.lang.Throwable) searchQuerySyntaxException23);
        java.util.List<java.lang.Throwable> throwableList34 = throwableRankList0.getNFirstElements((int) (byte) 100);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList35 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable36 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException37 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable36);
        java.lang.Throwable[] throwableArray38 = searchQuerySyntaxException37.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException39 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException37);
        java.lang.Throwable throwable40 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException41 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable40);
        java.lang.Throwable[] throwableArray42 = searchQuerySyntaxException41.getSuppressed();
        throwableRankList35.replaceItem((java.lang.Throwable) searchQuerySyntaxException37, (java.lang.Throwable) searchQuerySyntaxException41);
        java.lang.Throwable throwable44 = null;
        throwableRankList0.replaceItem((java.lang.Throwable) searchQuerySyntaxException37, throwable44);
        org.junit.Assert.assertNotNull(throwableList2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(throwableList5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableList19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNull(int31);
        org.junit.Assert.assertNotNull(throwableList34);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray42);
    }

    @Test
    public void test0848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0848");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str1 = feedType0.getUrlXPath();
        java.lang.String str2 = feedType0.getNameXPath();
        java.lang.String str3 = feedType0.getDescriptionXPath();
        java.lang.String str4 = feedType0.getNameXPath();
        java.lang.String str5 = feedType0.getEntryXPath();
        java.lang.String str6 = feedType0.getTypeXPath();
        java.lang.String str7 = feedType0.getUrlXPath();
        java.lang.String str8 = feedType0.getEntryXPath();
        java.lang.String str9 = feedType0.getTypeXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "./enclosure/@url" + "'", str1, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "/rss/channel/title" + "'", str2, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "./description" + "'", str3, "./description");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "/rss/channel/title" + "'", str4, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/rss/channel/item" + "'", str5, "/rss/channel/item");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "./enclosure/@type" + "'", str6, "./enclosure/@type");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "./enclosure/@url" + "'", str7, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "/rss/channel/item" + "'", str8, "/rss/channel/item");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "./enclosure/@type" + "'", str9, "./enclosure/@type");
    }

    @Test
    public void test0849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0849");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.ATOM;
        java.lang.String str1 = feedType0.getUrlXPath();
        java.lang.String str2 = feedType0.getDateXPath();
        java.lang.String str3 = feedType0.getNameXPath();
        java.lang.String str4 = feedType0.getDurationXPath();
        java.lang.String str5 = feedType0.getUrlXPath();
        java.lang.String str6 = feedType0.getDurationXPath();
        java.lang.String str7 = feedType0.getTypeXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.ATOM + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.ATOM));
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "./updated" + "'", str2, "./updated");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "/feed/title" + "'", str3, "/feed/title");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "./link[@rel='enclosure']/@type" + "'", str7, "./link[@rel='enclosure']/@type");
    }

    @Test
    public void test0850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0850");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.lang.String str3 = cDMetadata0.getGenre();
        int int4 = cDMetadata0.getYear();
        int int5 = cDMetadata0.getYear();
        net.sourceforge.atunes.model.CDMetadata cDMetadata6 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str7 = cDMetadata6.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata8 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata8.setAlbumArtist("");
        java.lang.String str11 = cDMetadata8.getGenre();
        java.lang.String[] strArray13 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        cDMetadata8.setTrackNames((java.util.List<java.lang.String>) strList14);
        cDMetadata6.setComposerNames((java.util.List<java.lang.String>) strList14);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList14);
        java.lang.String str19 = cDMetadata0.getAlbumArtist();
        java.util.List<java.lang.String> strList20 = cDMetadata0.getComposerNames();
        java.util.List<java.lang.String> strList21 = cDMetadata0.getArtistNames();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList22 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable23 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException24 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable23);
        java.lang.Throwable[] throwableArray25 = searchQuerySyntaxException24.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException26 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException24);
        java.lang.Throwable throwable27 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException28 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable27);
        java.lang.Throwable[] throwableArray29 = searchQuerySyntaxException28.getSuppressed();
        throwableRankList22.replaceItem((java.lang.Throwable) searchQuerySyntaxException24, (java.lang.Throwable) searchQuerySyntaxException28);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList31 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable32 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException33 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable32);
        java.lang.Throwable[] throwableArray34 = searchQuerySyntaxException33.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException35 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException33);
        java.lang.Throwable throwable36 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException37 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable36);
        java.lang.Throwable[] throwableArray38 = searchQuerySyntaxException37.getSuppressed();
        throwableRankList31.replaceItem((java.lang.Throwable) searchQuerySyntaxException33, (java.lang.Throwable) searchQuerySyntaxException37);
        java.lang.Integer int40 = throwableRankList22.getCount((java.lang.Throwable) searchQuerySyntaxException37);
        java.lang.Throwable throwable41 = null;
        java.lang.Throwable throwable42 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException43 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable42);
        throwableRankList22.replaceItem(throwable41, (java.lang.Throwable) searchQuerySyntaxException43);
        java.util.List<java.lang.Integer> intList46 = throwableRankList22.getNFirstElementCounts((int) (byte) 1);
        java.util.List<java.lang.Throwable> throwableList48 = throwableRankList22.getNFirstElements(0);
        java.util.List<java.lang.Integer> intList50 = throwableRankList22.getNFirstElementCounts((int) 'a');
        cDMetadata0.setTracks(intList50);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNull(strList20);
        org.junit.Assert.assertNull(strList21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNull(int40);
        org.junit.Assert.assertNotNull(intList46);
        org.junit.Assert.assertNotNull(throwableList48);
        org.junit.Assert.assertNotNull(intList50);
    }

    @Test
    public void test0851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0851");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str1 = feedType0.getUrlXPath();
        java.lang.String str2 = feedType0.getNameXPath();
        java.lang.String str3 = feedType0.getDescriptionXPath();
        java.lang.String str4 = feedType0.getTypeXPath();
        java.lang.String str5 = feedType0.getEntryXPath();
        java.lang.String str6 = feedType0.getDescriptionXPath();
        java.lang.String str7 = feedType0.getAuthorXPath();
        java.lang.String str8 = feedType0.getNameXPath();
        java.lang.String str9 = feedType0.getUrlXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "./enclosure/@url" + "'", str1, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "/rss/channel/title" + "'", str2, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "./description" + "'", str3, "./description");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "./enclosure/@type" + "'", str4, "./enclosure/@type");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/rss/channel/item" + "'", str5, "/rss/channel/item");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "./description" + "'", str6, "./description");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "./author" + "'", str7, "./author");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "/rss/channel/title" + "'", str8, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "./enclosure/@url" + "'", str9, "./enclosure/@url");
    }

    @Test
    public void test0852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0852");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        java.lang.String str12 = applicationVersion9.toShortString();
        java.lang.String str13 = applicationVersion9.getDownloadURL();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType18 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion23 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType18, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str24 = applicationVersion23.getDate();
        java.lang.String str25 = applicationVersion23.toShortString();
        java.lang.String str26 = applicationVersion23.getChanges();
        int int27 = applicationVersion23.getMinorNumber();
        java.lang.String str28 = applicationVersion23.getChanges();
        boolean boolean29 = applicationVersion9.equals((java.lang.Object) str28);
        int int30 = applicationVersion9.getMinorNumber();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1.0.0 " + "'", str12, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "./description" + "'", str13, "./description");
        org.junit.Assert.assertTrue("'" + versionType18 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType18.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "./title" + "'", str24, "./title");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1.0.0 " + "'", str25, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "./title" + "'", str26, "./title");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "./title" + "'", str28, "./title");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test0853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0853");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable1 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException2 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable1);
        java.lang.Throwable[] throwableArray3 = searchQuerySyntaxException2.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException4 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException2);
        java.lang.Throwable throwable5 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException6 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable5);
        java.lang.Throwable[] throwableArray7 = searchQuerySyntaxException6.getSuppressed();
        throwableRankList0.replaceItem((java.lang.Throwable) searchQuerySyntaxException2, (java.lang.Throwable) searchQuerySyntaxException6);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList9 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable10 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException11 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable10);
        java.lang.Throwable[] throwableArray12 = searchQuerySyntaxException11.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException13 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException11);
        java.lang.Throwable throwable14 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException15 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable14);
        java.lang.Throwable[] throwableArray16 = searchQuerySyntaxException15.getSuppressed();
        throwableRankList9.replaceItem((java.lang.Throwable) searchQuerySyntaxException11, (java.lang.Throwable) searchQuerySyntaxException15);
        java.lang.Integer int18 = throwableRankList0.getCount((java.lang.Throwable) searchQuerySyntaxException15);
        java.util.List<java.lang.Throwable> throwableList20 = throwableRankList0.getNFirstElements((-1));
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList21 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList23 = throwableRankList21.getNFirstElements((int) (short) 10);
        throwableRankList21.clear();
        java.util.List<java.lang.Integer> intList26 = throwableRankList21.getNFirstElementCounts(0);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList27 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList29 = throwableRankList27.getNFirstElements((int) (short) 10);
        int int30 = throwableRankList27.size();
        int int31 = throwableRankList27.size();
        java.lang.Throwable throwable32 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException33 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable32);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList34 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable35 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException36 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable35);
        java.lang.Throwable[] throwableArray37 = searchQuerySyntaxException36.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException38 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException36);
        java.lang.Throwable throwable39 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException40 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable39);
        java.lang.Throwable[] throwableArray41 = searchQuerySyntaxException40.getSuppressed();
        throwableRankList34.replaceItem((java.lang.Throwable) searchQuerySyntaxException36, (java.lang.Throwable) searchQuerySyntaxException40);
        searchQuerySyntaxException33.addSuppressed((java.lang.Throwable) searchQuerySyntaxException40);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException44 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException33);
        java.lang.Integer int45 = throwableRankList27.getCount((java.lang.Throwable) searchQuerySyntaxException33);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList46 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList48 = throwableRankList46.getNFirstElements((int) (short) 100);
        java.lang.Throwable throwable49 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException50 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable49);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList51 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable52 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException53 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable52);
        java.lang.Throwable[] throwableArray54 = searchQuerySyntaxException53.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException55 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException53);
        java.lang.Throwable throwable56 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException57 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable56);
        java.lang.Throwable[] throwableArray58 = searchQuerySyntaxException57.getSuppressed();
        throwableRankList51.replaceItem((java.lang.Throwable) searchQuerySyntaxException53, (java.lang.Throwable) searchQuerySyntaxException57);
        searchQuerySyntaxException50.addSuppressed((java.lang.Throwable) searchQuerySyntaxException57);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException61 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException50);
        java.lang.Throwable throwable62 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException63 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable62);
        java.lang.Throwable[] throwableArray64 = searchQuerySyntaxException63.getSuppressed();
        searchQuerySyntaxException50.addSuppressed((java.lang.Throwable) searchQuerySyntaxException63);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException66 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException50);
        java.lang.Throwable throwable67 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException68 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable67);
        java.lang.Throwable[] throwableArray69 = searchQuerySyntaxException68.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException70 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException68);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException71 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException68);
        throwableRankList46.replaceItem((java.lang.Throwable) searchQuerySyntaxException50, (java.lang.Throwable) searchQuerySyntaxException71);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList73 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        net.sourceforge.atunes.model.InconsistentRepositoryException inconsistentRepositoryException74 = new net.sourceforge.atunes.model.InconsistentRepositoryException();
        net.sourceforge.atunes.model.InconsistentRepositoryException inconsistentRepositoryException75 = new net.sourceforge.atunes.model.InconsistentRepositoryException();
        throwableRankList73.replaceItem((java.lang.Throwable) inconsistentRepositoryException74, (java.lang.Throwable) inconsistentRepositoryException75);
        java.lang.Throwable throwable77 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException78 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable77);
        java.lang.Throwable[] throwableArray79 = searchQuerySyntaxException78.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException80 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException78);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException81 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException78);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList82 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable83 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException84 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable83);
        java.lang.Throwable[] throwableArray85 = searchQuerySyntaxException84.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException86 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException84);
        java.lang.Throwable throwable87 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException88 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable87);
        java.lang.Throwable[] throwableArray89 = searchQuerySyntaxException88.getSuppressed();
        throwableRankList82.replaceItem((java.lang.Throwable) searchQuerySyntaxException84, (java.lang.Throwable) searchQuerySyntaxException88);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException91 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException88);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException92 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException91);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException93 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchIndexNotAvailableException92);
        searchQuerySyntaxException81.addSuppressed((java.lang.Throwable) searchIndexNotAvailableException93);
        throwableRankList73.addItem((java.lang.Throwable) searchQuerySyntaxException81);
        throwableRankList27.replaceItem((java.lang.Throwable) searchQuerySyntaxException71, (java.lang.Throwable) searchQuerySyntaxException81);
        throwableRankList21.addItem((java.lang.Throwable) searchQuerySyntaxException71);
        throwableRankList0.addItem((java.lang.Throwable) searchQuerySyntaxException71);
        java.lang.String str99 = searchQuerySyntaxException71.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(throwableList20);
        org.junit.Assert.assertNotNull(throwableList23);
        org.junit.Assert.assertNotNull(intList26);
        org.junit.Assert.assertNotNull(throwableList29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNull(int45);
        org.junit.Assert.assertNotNull(throwableList48);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(throwableArray89);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "net.sourceforge.atunes.model.SearchQuerySyntaxException: net.sourceforge.atunes.model.SearchQuerySyntaxException" + "'", str99, "net.sourceforge.atunes.model.SearchQuerySyntaxException: net.sourceforge.atunes.model.SearchQuerySyntaxException");
    }

    @Test
    public void test0854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0854");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata2 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata2.setAlbumArtist("");
        java.lang.String str5 = cDMetadata2.getGenre();
        java.lang.String[] strArray7 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        cDMetadata2.setTrackNames((java.util.List<java.lang.String>) strList8);
        cDMetadata0.setComposerNames((java.util.List<java.lang.String>) strList8);
        java.lang.String str12 = cDMetadata0.getAlbum();
        net.sourceforge.atunes.model.FontSettings fontSettings13 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata14 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata14.setAlbumArtist("");
        boolean boolean17 = fontSettings13.equals((java.lang.Object) cDMetadata14);
        java.lang.String str18 = cDMetadata14.getAlbum();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList19 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList21 = throwableRankList19.getNFirstElements((int) (short) 10);
        throwableRankList19.clear();
        java.util.List<java.lang.Integer> intList24 = throwableRankList19.getNFirstElementCounts(150);
        cDMetadata14.setTracks(intList24);
        cDMetadata0.setTracks(intList24);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(throwableList21);
        org.junit.Assert.assertNotNull(intList24);
    }

    @Test
    public void test0855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0855");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.lang.String str4 = cDMetadata0.getTitle((int) (byte) -1);
        cDMetadata0.setDisc(100);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList7 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList9 = throwableRankList7.getNFirstElements((int) (short) 10);
        throwableRankList7.clear();
        java.util.List<java.lang.Integer> intList12 = throwableRankList7.getNFirstElementCounts(150);
        cDMetadata0.setTracks(intList12);
        cDMetadata0.setDisc((int) (byte) 1);
        java.util.List<java.lang.String> strList16 = cDMetadata0.getTrackNames();
        java.lang.String str17 = cDMetadata0.getAlbum();
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(throwableList9);
        org.junit.Assert.assertNotNull(intList12);
        org.junit.Assert.assertNull(strList16);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test0856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0856");
        net.sourceforge.atunes.model.LocalAudioObjectFormat localAudioObjectFormat0 = net.sourceforge.atunes.model.LocalAudioObjectFormat.MAC;
        java.lang.String str1 = localAudioObjectFormat0.getExtension();
        java.lang.String str2 = localAudioObjectFormat0.getExtension();
        java.lang.String str3 = localAudioObjectFormat0.getExtension();
        org.junit.Assert.assertTrue("'" + localAudioObjectFormat0 + "' != '" + net.sourceforge.atunes.model.LocalAudioObjectFormat.MAC + "'", localAudioObjectFormat0.equals(net.sourceforge.atunes.model.LocalAudioObjectFormat.MAC));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "mac" + "'", str1, "mac");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mac" + "'", str2, "mac");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mac" + "'", str3, "mac");
    }

    @Test
    public void test0857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0857");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata1 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata1.setAlbumArtist("");
        boolean boolean4 = fontSettings0.equals((java.lang.Object) cDMetadata1);
        fontSettings0.setUseFontSmoothing(true);
        net.sourceforge.atunes.model.IFontBean iFontBean7 = fontSettings0.getFont();
        net.sourceforge.atunes.model.IFontBean iFontBean8 = fontSettings0.getFont();
        boolean boolean9 = fontSettings0.isUseFontSmoothingSettingsFromOs();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(iFontBean7);
        org.junit.Assert.assertNull(iFontBean8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0858");
        net.sourceforge.atunes.model.IFontBean iFontBean0 = null;
        net.sourceforge.atunes.model.FontSettings fontSettings3 = new net.sourceforge.atunes.model.FontSettings(iFontBean0, true, true);
        boolean boolean4 = fontSettings3.isUseFontSmoothing();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test0859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0859");
        net.sourceforge.atunes.model.LookAndFeelBean lookAndFeelBean0 = new net.sourceforge.atunes.model.LookAndFeelBean();
        java.lang.String str1 = lookAndFeelBean0.getSkin();
        lookAndFeelBean0.setSkin("./enclosure/@url");
        lookAndFeelBean0.setSkin("hi!");
        java.lang.String str6 = lookAndFeelBean0.getSkin();
        lookAndFeelBean0.setName("mpc");
        lookAndFeelBean0.setName("wav");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
    }

    @Test
    public void test0860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0860");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str1 = feedType0.getNameXPath();
        java.lang.String str2 = feedType0.getDateXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "/rss/channel/title" + "'", str1, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "./pubDate" + "'", str2, "./pubDate");
    }

    @Test
    public void test0861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0861");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        java.lang.String str12 = applicationVersion9.toShortString();
        java.lang.String str13 = applicationVersion9.getDownloadURL();
        int int14 = applicationVersion9.getMinorNumber();
        java.lang.String str15 = applicationVersion9.getDate();
        java.lang.String str16 = applicationVersion9.getChanges();
        java.lang.String str17 = applicationVersion9.getDownloadURL();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1.0.0 " + "'", str12, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "./description" + "'", str13, "./description");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "./title" + "'", str15, "./title");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "./title" + "'", str16, "./title");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "./description" + "'", str17, "./description");
    }

    @Test
    public void test0862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0862");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable1 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException2 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable1);
        java.lang.Throwable[] throwableArray3 = searchQuerySyntaxException2.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException4 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException2);
        java.lang.Throwable throwable5 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException6 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable5);
        java.lang.Throwable[] throwableArray7 = searchQuerySyntaxException6.getSuppressed();
        throwableRankList0.replaceItem((java.lang.Throwable) searchQuerySyntaxException2, (java.lang.Throwable) searchQuerySyntaxException6);
        java.util.List<java.lang.Throwable> throwableList9 = throwableRankList0.getOrder();
        java.lang.Throwable throwable10 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException11 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable10);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList12 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable13 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException14 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable13);
        java.lang.Throwable[] throwableArray15 = searchQuerySyntaxException14.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException16 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException14);
        java.lang.Throwable throwable17 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException18 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable17);
        java.lang.Throwable[] throwableArray19 = searchQuerySyntaxException18.getSuppressed();
        throwableRankList12.replaceItem((java.lang.Throwable) searchQuerySyntaxException14, (java.lang.Throwable) searchQuerySyntaxException18);
        searchQuerySyntaxException11.addSuppressed((java.lang.Throwable) searchQuerySyntaxException18);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException22 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException11);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException23 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException11);
        java.lang.Integer int24 = throwableRankList0.getCount((java.lang.Throwable) searchIndexNotAvailableException23);
        java.util.List<java.lang.Integer> intList26 = throwableRankList0.getNFirstElementCounts((int) '#');
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList27 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        net.sourceforge.atunes.model.InconsistentRepositoryException inconsistentRepositoryException28 = new net.sourceforge.atunes.model.InconsistentRepositoryException();
        net.sourceforge.atunes.model.InconsistentRepositoryException inconsistentRepositoryException29 = new net.sourceforge.atunes.model.InconsistentRepositoryException();
        throwableRankList27.replaceItem((java.lang.Throwable) inconsistentRepositoryException28, (java.lang.Throwable) inconsistentRepositoryException29);
        throwableRankList0.addItem((java.lang.Throwable) inconsistentRepositoryException28);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException32 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) inconsistentRepositoryException28);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableList9);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNotNull(intList26);
    }

    @Test
    public void test0863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0863");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str1 = feedType0.getEntryXPath();
        java.lang.String str2 = feedType0.getTypeXPath();
        java.lang.String str3 = feedType0.getDurationXPath();
        java.lang.String str4 = feedType0.getTitleXPath();
        java.lang.String str5 = feedType0.getTitleXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "/rss/channel/item" + "'", str1, "/rss/channel/item");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "./enclosure/@type" + "'", str2, "./enclosure/@type");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "./duration" + "'", str3, "./duration");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "./title" + "'", str4, "./title");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "./title" + "'", str5, "./title");
    }

    @Test
    public void test0864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0864");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.lang.String str3 = cDMetadata0.getGenre();
        java.lang.String[] strArray5 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList6);
        cDMetadata0.setYear((int) (short) 10);
        java.util.List<java.lang.String> strList11 = cDMetadata0.getComposerNames();
        cDMetadata0.setDisc(120);
        java.lang.String str14 = cDMetadata0.getGenre();
        java.lang.String str15 = cDMetadata0.getAlbum();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test0865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0865");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.lang.String str3 = cDMetadata0.getAlbum();
        java.util.List<java.lang.Integer> intList4 = cDMetadata0.getTracks();
        net.sourceforge.atunes.model.CDMetadata cDMetadata5 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata5.setAlbumArtist("");
        java.lang.String str9 = cDMetadata5.getTitle((int) (byte) -1);
        java.lang.String[] strArray11 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        cDMetadata5.setTrackNames((java.util.List<java.lang.String>) strList12);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList12);
        cDMetadata0.setYear((int) (short) 1);
        int int18 = cDMetadata0.getYear();
        cDMetadata0.setAlbumArtist("net.sourceforge.atunes.model.InconsistentRepositoryException");
        cDMetadata0.setAlbum("./title");
        net.sourceforge.atunes.model.CDMetadata cDMetadata23 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata23.setAlbumArtist("");
        java.lang.String str26 = cDMetadata23.getGenre();
        java.lang.String[] strArray28 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        cDMetadata23.setTrackNames((java.util.List<java.lang.String>) strList29);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList29);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(intList4);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test0866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0866");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        columnBean0.setVisible(false);
        net.sourceforge.atunes.model.ColumnSort columnSort6 = columnBean0.getSort();
        net.sourceforge.atunes.model.TextTagAttribute textTagAttribute7 = net.sourceforge.atunes.model.TextTagAttribute.COMPOSER;
        boolean boolean8 = columnBean0.equals((java.lang.Object) textTagAttribute7);
        columnBean0.setOrder(10);
        columnBean0.setOrder((int) ' ');
        columnBean0.setVisible(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(columnSort6);
        org.junit.Assert.assertTrue("'" + textTagAttribute7 + "' != '" + net.sourceforge.atunes.model.TextTagAttribute.COMPOSER + "'", textTagAttribute7.equals(net.sourceforge.atunes.model.TextTagAttribute.COMPOSER));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0867");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        int int12 = applicationVersion9.getMajorNumber();
        int int13 = applicationVersion9.getMinorNumber();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType14 = applicationVersion9.getVersionType();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + versionType14 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType14.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
    }

    @Test
    public void test0868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0868");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        int int12 = applicationVersion9.getMajorNumber();
        java.lang.String str13 = applicationVersion9.toShortString();
        java.lang.String str14 = applicationVersion9.getName();
        net.sourceforge.atunes.model.ColumnBean columnBean15 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean16 = columnBean15.isVisible();
        columnBean15.setOrder((int) (byte) -1);
        columnBean15.setVisible(false);
        columnBean15.setWidth(0);
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType27 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion32 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType27, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str33 = applicationVersion32.getDate();
        java.lang.String str34 = applicationVersion32.toShortString();
        java.lang.String str35 = applicationVersion32.getChanges();
        boolean boolean36 = columnBean15.equals((java.lang.Object) applicationVersion32);
        java.lang.String str37 = applicationVersion32.toString();
        java.lang.String str38 = applicationVersion32.getDownloadURL();
        int int39 = applicationVersion9.compareTo(applicationVersion32);
        net.sourceforge.atunes.model.FeedType feedType40 = net.sourceforge.atunes.model.FeedType.ATOM;
        java.lang.String str41 = feedType40.getTypeXPath();
        java.lang.String str42 = feedType40.getDurationXPath();
        java.lang.String str43 = feedType40.getAuthorXPath();
        java.lang.String str44 = feedType40.getDescriptionXPath();
        boolean boolean45 = applicationVersion9.equals((java.lang.Object) str44);
        java.lang.String str46 = applicationVersion9.toString();
        java.lang.String str47 = applicationVersion9.getName();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1.0.0 " + "'", str13, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "mpc" + "'", str14, "mpc");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + versionType27 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType27.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "./title" + "'", str33, "./title");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1.0.0 " + "'", str34, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "./title" + "'", str35, "./title");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1.0.0 mpc " + "'", str37, "1.0.0 mpc ");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "./description" + "'", str38, "./description");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + feedType40 + "' != '" + net.sourceforge.atunes.model.FeedType.ATOM + "'", feedType40.equals(net.sourceforge.atunes.model.FeedType.ATOM));
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "./link[@rel='enclosure']/@type" + "'", str41, "./link[@rel='enclosure']/@type");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "./author/name" + "'", str43, "./author/name");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "./summary" + "'", str44, "./summary");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1.0.0 mpc " + "'", str46, "1.0.0 mpc ");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "mpc" + "'", str47, "mpc");
    }

    @Test
    public void test0869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0869");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str1 = feedType0.getUrlXPath();
        java.lang.String str2 = feedType0.getDurationXPath();
        java.lang.String str3 = feedType0.getDateXPath();
        java.lang.String str4 = feedType0.getEntryXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "./enclosure/@url" + "'", str1, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "./duration" + "'", str2, "./duration");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "./pubDate" + "'", str3, "./pubDate");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "/rss/channel/item" + "'", str4, "/rss/channel/item");
    }

    @Test
    public void test0870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0870");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList2 = throwableRankList0.getNFirstElements((int) (short) 10);
        int int3 = throwableRankList0.size();
        int int4 = throwableRankList0.size();
        java.lang.Throwable throwable5 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException6 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable5);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList7 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable8 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException9 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable8);
        java.lang.Throwable[] throwableArray10 = searchQuerySyntaxException9.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException11 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException9);
        java.lang.Throwable throwable12 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException13 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable12);
        java.lang.Throwable[] throwableArray14 = searchQuerySyntaxException13.getSuppressed();
        throwableRankList7.replaceItem((java.lang.Throwable) searchQuerySyntaxException9, (java.lang.Throwable) searchQuerySyntaxException13);
        searchQuerySyntaxException6.addSuppressed((java.lang.Throwable) searchQuerySyntaxException13);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException17 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException6);
        java.lang.Integer int18 = throwableRankList0.getCount((java.lang.Throwable) searchQuerySyntaxException6);
        java.lang.Throwable[] throwableArray19 = searchQuerySyntaxException6.getSuppressed();
        java.lang.Throwable[] throwableArray20 = searchQuerySyntaxException6.getSuppressed();
        org.junit.Assert.assertNotNull(throwableList2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray20);
    }

    @Test
    public void test0871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0871");
        net.sourceforge.atunes.model.IFontBean iFontBean0 = null;
        net.sourceforge.atunes.model.FontSettings fontSettings3 = new net.sourceforge.atunes.model.FontSettings(iFontBean0, false, false);
        fontSettings3.setUseFontSmoothingSettingsFromOs(true);
        fontSettings3.setUseFontSmoothingSettingsFromOs(false);
    }

    @Test
    public void test0872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0872");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList2 = throwableRankList0.getNFirstElements((int) (short) 10);
        throwableRankList0.clear();
        java.util.List<java.lang.Integer> intList5 = throwableRankList0.getNFirstElementCounts(150);
        throwableRankList0.clear();
        java.util.List<java.lang.Throwable> throwableList8 = throwableRankList0.getNFirstElements(10);
        java.lang.Throwable throwable9 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException10 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable9);
        java.lang.Throwable[] throwableArray11 = searchQuerySyntaxException10.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException12 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException10);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException13 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException10);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList14 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable15 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException16 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable15);
        java.lang.Throwable[] throwableArray17 = searchQuerySyntaxException16.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException18 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException16);
        java.lang.Throwable throwable19 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException20 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable19);
        java.lang.Throwable[] throwableArray21 = searchQuerySyntaxException20.getSuppressed();
        throwableRankList14.replaceItem((java.lang.Throwable) searchQuerySyntaxException16, (java.lang.Throwable) searchQuerySyntaxException20);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException23 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException20);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException24 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException23);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException25 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchIndexNotAvailableException24);
        searchQuerySyntaxException13.addSuppressed((java.lang.Throwable) searchIndexNotAvailableException25);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException27 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException13);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException28 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchIndexNotAvailableException27);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException29 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException28);
        java.lang.Integer int30 = throwableRankList0.getCount((java.lang.Throwable) searchIndexNotAvailableException29);
        org.junit.Assert.assertNotNull(throwableList2);
        org.junit.Assert.assertNotNull(intList5);
        org.junit.Assert.assertNotNull(throwableList8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNull(int30);
    }

    @Test
    public void test0873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0873");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.Integer> intList2 = null;
        cDMetadata0.setTracks(intList2);
        cDMetadata0.setAlbum("SOCKS_PROXY");
        java.lang.String str6 = cDMetadata0.getAlbum();
        int int7 = cDMetadata0.getYear();
        java.lang.String str9 = cDMetadata0.getTitle((int) (byte) 0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "SOCKS_PROXY" + "'", str6, "SOCKS_PROXY");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test0874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0874");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList2 = throwableRankList0.getNFirstElements((int) (short) 10);
        throwableRankList0.clear();
        java.util.List<java.lang.Integer> intList5 = throwableRankList0.getNFirstElementCounts(0);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList6 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable7 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException8 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable7);
        java.lang.Throwable[] throwableArray9 = searchQuerySyntaxException8.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException10 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException8);
        java.lang.Throwable throwable11 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException12 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable11);
        java.lang.Throwable[] throwableArray13 = searchQuerySyntaxException12.getSuppressed();
        throwableRankList6.replaceItem((java.lang.Throwable) searchQuerySyntaxException8, (java.lang.Throwable) searchQuerySyntaxException12);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException15 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException12);
        java.lang.Integer int16 = throwableRankList0.getCount((java.lang.Throwable) searchQuerySyntaxException15);
        throwableRankList0.clear();
        org.junit.Assert.assertNotNull(throwableList2);
        org.junit.Assert.assertNotNull(intList5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNull(int16);
    }

    @Test
    public void test0875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0875");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.lang.String str3 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList4 = cDMetadata0.getTrackNames();
        java.lang.String str5 = cDMetadata0.getAlbum();
        java.lang.String str6 = cDMetadata0.getGenre();
        java.lang.String str8 = cDMetadata0.getTitle((int) (byte) 0);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test0876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0876");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        net.sourceforge.atunes.model.ColumnBean columnBean2 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean3 = columnBean2.isVisible();
        columnBean2.setOrder((int) (byte) -1);
        columnBean2.setVisible(false);
        columnBean2.setWidth(0);
        net.sourceforge.atunes.model.ColumnSort columnSort10 = columnBean2.getSort();
        columnBean2.setWidth((int) (byte) 10);
        columnBean2.setVisible(true);
        net.sourceforge.atunes.model.ColumnBean columnBean15 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean16 = columnBean15.isVisible();
        columnBean15.setOrder((int) (byte) -1);
        columnBean15.setVisible(false);
        columnBean15.setWidth(0);
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType27 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion32 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType27, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str33 = applicationVersion32.getDate();
        java.lang.String str34 = applicationVersion32.toShortString();
        java.lang.String str35 = applicationVersion32.getChanges();
        boolean boolean36 = columnBean15.equals((java.lang.Object) applicationVersion32);
        net.sourceforge.atunes.model.ColumnBean columnBean37 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean38 = columnBean37.isVisible();
        net.sourceforge.atunes.model.SubmissionState submissionState39 = net.sourceforge.atunes.model.SubmissionState.PENDING;
        boolean boolean40 = columnBean37.equals((java.lang.Object) submissionState39);
        columnBean37.setVisible(false);
        net.sourceforge.atunes.model.ColumnSort columnSort43 = net.sourceforge.atunes.model.ColumnSort.ASCENDING;
        columnBean37.setSort(columnSort43);
        columnBean15.setSort(columnSort43);
        columnBean2.setSort(columnSort43);
        columnBean0.setSort(columnSort43);
        int int48 = columnBean0.getOrder();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(columnSort10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + versionType27 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType27.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "./title" + "'", str33, "./title");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1.0.0 " + "'", str34, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "./title" + "'", str35, "./title");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + submissionState39 + "' != '" + net.sourceforge.atunes.model.SubmissionState.PENDING + "'", submissionState39.equals(net.sourceforge.atunes.model.SubmissionState.PENDING));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + columnSort43 + "' != '" + net.sourceforge.atunes.model.ColumnSort.ASCENDING + "'", columnSort43.equals(net.sourceforge.atunes.model.ColumnSort.ASCENDING));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
    }

    @Test
    public void test0877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0877");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.ATOM;
        java.lang.String str1 = feedType0.getDurationXPath();
        java.lang.String str2 = feedType0.getEntryXPath();
        java.lang.String str3 = feedType0.getUrlXPath();
        java.lang.String str4 = feedType0.getAuthorXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.ATOM + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.ATOM));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "/feed/entry" + "'", str2, "/feed/entry");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "./author/name" + "'", str4, "./author/name");
    }

    @Test
    public void test0878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0878");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType8 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion13 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType8, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str14 = applicationVersion13.getDate();
        java.lang.String str15 = applicationVersion13.toShortString();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType16 = applicationVersion13.getVersionType();
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion21 = new net.sourceforge.atunes.model.ApplicationVersion("1.0.0 ", (int) (short) 10, (int) '4', (int) '#', versionType16, "", "./enclosure/@url", "SOCKS_PROXY", "./enclosure/@url");
        java.lang.String str22 = applicationVersion21.getName();
        java.lang.String str23 = applicationVersion21.toString();
        net.sourceforge.atunes.model.FeedType feedType24 = net.sourceforge.atunes.model.FeedType.ATOM;
        java.lang.String str25 = feedType24.getTypeXPath();
        java.lang.String str26 = feedType24.getUrlXPath();
        boolean boolean27 = applicationVersion21.equals((java.lang.Object) feedType24);
        java.lang.String str28 = applicationVersion21.getDate();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType29 = applicationVersion21.getVersionType();
        java.lang.String str30 = applicationVersion21.getChanges();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType35 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion40 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType35, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str41 = applicationVersion40.getDate();
        java.lang.String str42 = applicationVersion40.toShortString();
        int int43 = applicationVersion40.getMajorNumber();
        java.lang.String str44 = applicationVersion40.toString();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType49 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion54 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType49, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str55 = applicationVersion54.getDate();
        java.lang.String str56 = applicationVersion54.toShortString();
        int int57 = applicationVersion54.getMajorNumber();
        boolean boolean58 = applicationVersion40.equals((java.lang.Object) int57);
        java.lang.Class<?> wildcardClass59 = applicationVersion40.getClass();
        boolean boolean60 = applicationVersion21.equals((java.lang.Object) applicationVersion40);
        org.junit.Assert.assertTrue("'" + versionType8 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType8.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "./title" + "'", str14, "./title");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1.0.0 " + "'", str15, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + versionType16 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType16.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "10.52.35  " + "'", str23, "10.52.35  ");
        org.junit.Assert.assertTrue("'" + feedType24 + "' != '" + net.sourceforge.atunes.model.FeedType.ATOM + "'", feedType24.equals(net.sourceforge.atunes.model.FeedType.ATOM));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "./link[@rel='enclosure']/@type" + "'", str25, "./link[@rel='enclosure']/@type");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1.0.0 " + "'", str28, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + versionType29 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType29.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "./enclosure/@url" + "'", str30, "./enclosure/@url");
        org.junit.Assert.assertTrue("'" + versionType35 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType35.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "./title" + "'", str41, "./title");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1.0.0 " + "'", str42, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1.0.0 mpc " + "'", str44, "1.0.0 mpc ");
        org.junit.Assert.assertTrue("'" + versionType49 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType49.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "./title" + "'", str55, "./title");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "1.0.0 " + "'", str56, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test0879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0879");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        net.sourceforge.atunes.model.AudioObjectProperty audioObjectProperty1 = net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY;
        boolean boolean2 = columnBean0.equals((java.lang.Object) audioObjectProperty1);
        net.sourceforge.atunes.model.TextTagAttribute textTagAttribute3 = net.sourceforge.atunes.model.TextTagAttribute.LYRICS;
        boolean boolean4 = columnBean0.equals((java.lang.Object) textTagAttribute3);
        columnBean0.setOrder((int) (short) 1);
        columnBean0.setWidth((int) (byte) 0);
        org.junit.Assert.assertTrue("'" + audioObjectProperty1 + "' != '" + net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY + "'", audioObjectProperty1.equals(net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + textTagAttribute3 + "' != '" + net.sourceforge.atunes.model.TextTagAttribute.LYRICS + "'", textTagAttribute3.equals(net.sourceforge.atunes.model.TextTagAttribute.LYRICS));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0880");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata2 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata2.setAlbumArtist("");
        java.lang.String str5 = cDMetadata2.getGenre();
        java.lang.String[] strArray7 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        cDMetadata2.setTrackNames((java.util.List<java.lang.String>) strList8);
        cDMetadata0.setComposerNames((java.util.List<java.lang.String>) strList8);
        java.lang.String str12 = cDMetadata0.getAlbum();
        cDMetadata0.setAlbum("./duration");
        java.lang.String str16 = cDMetadata0.getTitle(10);
        cDMetadata0.setAlbum("SOCKS_PROXY");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test0881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0881");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList2 = throwableRankList0.getNFirstElements((int) (short) 10);
        int int3 = throwableRankList0.size();
        int int4 = throwableRankList0.size();
        java.util.List<java.lang.Throwable> throwableList5 = throwableRankList0.getOrder();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList6 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable7 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException8 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable7);
        java.lang.Throwable[] throwableArray9 = searchQuerySyntaxException8.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException10 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException8);
        java.lang.Throwable throwable11 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException12 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable11);
        java.lang.Throwable[] throwableArray13 = searchQuerySyntaxException12.getSuppressed();
        throwableRankList6.replaceItem((java.lang.Throwable) searchQuerySyntaxException8, (java.lang.Throwable) searchQuerySyntaxException12);
        java.lang.Throwable[] throwableArray15 = searchQuerySyntaxException8.getSuppressed();
        java.lang.Throwable[] throwableArray16 = searchQuerySyntaxException8.getSuppressed();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList17 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList19 = throwableRankList17.getNFirstElements((int) (short) 10);
        int int20 = throwableRankList17.size();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList21 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable22 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException23 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable22);
        java.lang.Throwable[] throwableArray24 = searchQuerySyntaxException23.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException25 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException23);
        java.lang.Throwable throwable26 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException27 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable26);
        java.lang.Throwable[] throwableArray28 = searchQuerySyntaxException27.getSuppressed();
        throwableRankList21.replaceItem((java.lang.Throwable) searchQuerySyntaxException23, (java.lang.Throwable) searchQuerySyntaxException27);
        java.lang.Throwable[] throwableArray30 = searchQuerySyntaxException23.getSuppressed();
        java.lang.Integer int31 = throwableRankList17.getCount((java.lang.Throwable) searchQuerySyntaxException23);
        throwableRankList0.replaceItem((java.lang.Throwable) searchQuerySyntaxException8, (java.lang.Throwable) searchQuerySyntaxException23);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList33 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable34 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException35 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable34);
        java.lang.Throwable[] throwableArray36 = searchQuerySyntaxException35.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException37 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException35);
        java.lang.Throwable throwable38 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException39 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable38);
        java.lang.Throwable[] throwableArray40 = searchQuerySyntaxException39.getSuppressed();
        throwableRankList33.replaceItem((java.lang.Throwable) searchQuerySyntaxException35, (java.lang.Throwable) searchQuerySyntaxException39);
        searchQuerySyntaxException23.addSuppressed((java.lang.Throwable) searchQuerySyntaxException39);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException43 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException23);
        org.junit.Assert.assertNotNull(throwableList2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(throwableList5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableList19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNull(int31);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray40);
    }

    @Test
    public void test0882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0882");
        net.sourceforge.atunes.model.ColumnBean columnBean4 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean5 = columnBean4.isVisible();
        columnBean4.setOrder((int) (byte) -1);
        columnBean4.setVisible(false);
        columnBean4.setWidth(0);
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType16 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion21 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType16, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str22 = applicationVersion21.getDate();
        java.lang.String str23 = applicationVersion21.toShortString();
        java.lang.String str24 = applicationVersion21.getChanges();
        boolean boolean25 = columnBean4.equals((java.lang.Object) applicationVersion21);
        java.lang.String str26 = applicationVersion21.getDownloadURL();
        java.lang.String str27 = applicationVersion21.getChanges();
        java.lang.String str28 = applicationVersion21.getDownloadURL();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType29 = applicationVersion21.getVersionType();
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion34 = new net.sourceforge.atunes.model.ApplicationVersion("/rss/channel/item", (int) (short) 10, 1, (int) (byte) 1, versionType29, "./updated", "mp4", "1.0.0 mpc ", "rm");
        java.lang.String str35 = applicationVersion34.toShortString();
        net.sourceforge.atunes.model.ColumnBean columnBean36 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean37 = columnBean36.isVisible();
        columnBean36.setOrder((int) (byte) -1);
        columnBean36.setVisible(false);
        columnBean36.setWidth(0);
        net.sourceforge.atunes.model.ColumnSort columnSort44 = columnBean36.getSort();
        net.sourceforge.atunes.model.ColumnSort columnSort45 = columnBean36.getSort();
        columnBean36.setOrder((int) (short) 100);
        columnBean36.setOrder((int) (byte) -1);
        boolean boolean50 = columnBean36.isVisible();
        boolean boolean51 = columnBean36.isVisible();
        net.sourceforge.atunes.model.ColumnSort columnSort52 = columnBean36.getSort();
        int int53 = columnBean36.getWidth();
        boolean boolean54 = applicationVersion34.equals((java.lang.Object) int53);
        int int55 = applicationVersion34.getMinorNumber();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + versionType16 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType16.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "./title" + "'", str22, "./title");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1.0.0 " + "'", str23, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "./title" + "'", str24, "./title");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "./description" + "'", str26, "./description");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "./title" + "'", str27, "./title");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "./description" + "'", str28, "./description");
        org.junit.Assert.assertTrue("'" + versionType29 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType29.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "10.1.1 " + "'", str35, "10.1.1 ");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(columnSort44);
        org.junit.Assert.assertNull(columnSort45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(columnSort52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
    }

    @Test
    public void test0883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0883");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList2 = throwableRankList0.getNFirstElements((int) (short) 10);
        int int3 = throwableRankList0.size();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList4 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable5 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException6 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable5);
        java.lang.Throwable[] throwableArray7 = searchQuerySyntaxException6.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException8 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException6);
        java.lang.Throwable throwable9 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException10 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable9);
        java.lang.Throwable[] throwableArray11 = searchQuerySyntaxException10.getSuppressed();
        throwableRankList4.replaceItem((java.lang.Throwable) searchQuerySyntaxException6, (java.lang.Throwable) searchQuerySyntaxException10);
        java.lang.Throwable[] throwableArray13 = searchQuerySyntaxException6.getSuppressed();
        java.lang.Integer int14 = throwableRankList0.getCount((java.lang.Throwable) searchQuerySyntaxException6);
        int int15 = throwableRankList0.size();
        java.util.List<java.lang.Throwable> throwableList17 = throwableRankList0.getNFirstElements((int) (short) 1);
        int int18 = throwableRankList0.size();
        throwableRankList0.clear();
        org.junit.Assert.assertNotNull(throwableList2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(throwableList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test0884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0884");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable1 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException2 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable1);
        java.lang.Throwable[] throwableArray3 = searchQuerySyntaxException2.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException4 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException2);
        java.lang.Throwable throwable5 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException6 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable5);
        java.lang.Throwable[] throwableArray7 = searchQuerySyntaxException6.getSuppressed();
        throwableRankList0.replaceItem((java.lang.Throwable) searchQuerySyntaxException2, (java.lang.Throwable) searchQuerySyntaxException6);
        java.util.List<java.lang.Throwable> throwableList9 = throwableRankList0.getOrder();
        java.lang.Throwable throwable10 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException11 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable10);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList12 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable13 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException14 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable13);
        java.lang.Throwable[] throwableArray15 = searchQuerySyntaxException14.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException16 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException14);
        java.lang.Throwable throwable17 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException18 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable17);
        java.lang.Throwable[] throwableArray19 = searchQuerySyntaxException18.getSuppressed();
        throwableRankList12.replaceItem((java.lang.Throwable) searchQuerySyntaxException14, (java.lang.Throwable) searchQuerySyntaxException18);
        searchQuerySyntaxException11.addSuppressed((java.lang.Throwable) searchQuerySyntaxException18);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException22 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException11);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException23 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException11);
        java.lang.Integer int24 = throwableRankList0.getCount((java.lang.Throwable) searchIndexNotAvailableException23);
        java.util.List<java.lang.Throwable> throwableList26 = throwableRankList0.getNFirstElements(90);
        java.util.List<java.lang.Throwable> throwableList28 = throwableRankList0.getNFirstElements(0);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList29 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable30 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException31 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable30);
        java.lang.Throwable[] throwableArray32 = searchQuerySyntaxException31.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException33 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException31);
        java.lang.Throwable throwable34 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException35 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable34);
        java.lang.Throwable[] throwableArray36 = searchQuerySyntaxException35.getSuppressed();
        throwableRankList29.replaceItem((java.lang.Throwable) searchQuerySyntaxException31, (java.lang.Throwable) searchQuerySyntaxException35);
        java.lang.Integer int38 = throwableRankList0.getCount((java.lang.Throwable) searchQuerySyntaxException31);
        throwableRankList0.clear();
        java.util.List<java.lang.Integer> intList41 = throwableRankList0.getNFirstElementCounts((int) (short) -1);
        java.lang.Throwable throwable42 = null;
        throwableRankList0.addItem(throwable42);
        java.util.List<java.lang.Integer> intList45 = throwableRankList0.getNFirstElementCounts(150);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableList9);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNotNull(throwableList26);
        org.junit.Assert.assertNotNull(throwableList28);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNull(int38);
        org.junit.Assert.assertNotNull(intList41);
        org.junit.Assert.assertNotNull(intList45);
    }

    @Test
    public void test0885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0885");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType8 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion13 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType8, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str14 = applicationVersion13.getDate();
        java.lang.String str15 = applicationVersion13.toShortString();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType16 = applicationVersion13.getVersionType();
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion21 = new net.sourceforge.atunes.model.ApplicationVersion("1.0.0 ", (int) (short) 10, (int) '4', (int) '#', versionType16, "", "./enclosure/@url", "SOCKS_PROXY", "./enclosure/@url");
        java.lang.String str22 = applicationVersion21.getName();
        java.lang.String str23 = applicationVersion21.toString();
        net.sourceforge.atunes.model.FeedType feedType24 = net.sourceforge.atunes.model.FeedType.ATOM;
        java.lang.String str25 = feedType24.getTypeXPath();
        java.lang.String str26 = feedType24.getUrlXPath();
        boolean boolean27 = applicationVersion21.equals((java.lang.Object) feedType24);
        int int28 = applicationVersion21.getRevisionNumber();
        java.lang.String str29 = applicationVersion21.toShortString();
        org.junit.Assert.assertTrue("'" + versionType8 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType8.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "./title" + "'", str14, "./title");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1.0.0 " + "'", str15, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + versionType16 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType16.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "10.52.35  " + "'", str23, "10.52.35  ");
        org.junit.Assert.assertTrue("'" + feedType24 + "' != '" + net.sourceforge.atunes.model.FeedType.ATOM + "'", feedType24.equals(net.sourceforge.atunes.model.FeedType.ATOM));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "./link[@rel='enclosure']/@type" + "'", str25, "./link[@rel='enclosure']/@type");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35 + "'", int28 == 35);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "10.52.35 " + "'", str29, "10.52.35 ");
    }

    @Test
    public void test0886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0886");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.lang.String str4 = cDMetadata0.getTitle((int) (byte) -1);
        net.sourceforge.atunes.model.CDMetadata cDMetadata5 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata5.setAlbumArtist("");
        java.lang.String str8 = cDMetadata5.getGenre();
        int int9 = cDMetadata5.getYear();
        int int10 = cDMetadata5.getYear();
        net.sourceforge.atunes.model.CDMetadata cDMetadata11 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str12 = cDMetadata11.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata13 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata13.setAlbumArtist("");
        java.lang.String str16 = cDMetadata13.getGenre();
        java.lang.String[] strArray18 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        cDMetadata13.setTrackNames((java.util.List<java.lang.String>) strList19);
        cDMetadata11.setComposerNames((java.util.List<java.lang.String>) strList19);
        cDMetadata5.setTrackNames((java.util.List<java.lang.String>) strList19);
        net.sourceforge.atunes.model.CDMetadata cDMetadata24 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str25 = cDMetadata24.getGenre();
        java.util.List<java.lang.String> strList26 = cDMetadata24.getComposerNames();
        java.lang.String str27 = cDMetadata24.getAlbum();
        java.util.List<java.lang.Integer> intList28 = cDMetadata24.getTracks();
        int int29 = cDMetadata24.getDisc();
        java.lang.String[] strArray37 = new java.lang.String[] { "net.sourceforge.atunes.model.InconsistentRepositoryException", "./title", "1.0.0 ", "./title", "./duration", "mpc", "net.sourceforge.atunes.model.InconsistentRepositoryException" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        cDMetadata24.setArtistNames((java.util.List<java.lang.String>) strList38);
        cDMetadata5.setArtistNames((java.util.List<java.lang.String>) strList38);
        cDMetadata0.setComposerNames((java.util.List<java.lang.String>) strList38);
        cDMetadata0.setDisc((int) (byte) 1);
        java.util.List<java.lang.String> strList45 = cDMetadata0.getArtistNames();
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(intList28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(strList45);
    }

    @Test
    public void test0887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0887");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.lang.String str4 = cDMetadata0.getTitle((int) (byte) -1);
        net.sourceforge.atunes.model.CDMetadata cDMetadata5 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata5.setAlbumArtist("");
        java.lang.String str8 = cDMetadata5.getGenre();
        int int9 = cDMetadata5.getYear();
        int int10 = cDMetadata5.getYear();
        net.sourceforge.atunes.model.CDMetadata cDMetadata11 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str12 = cDMetadata11.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata13 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata13.setAlbumArtist("");
        java.lang.String str16 = cDMetadata13.getGenre();
        java.lang.String[] strArray18 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        cDMetadata13.setTrackNames((java.util.List<java.lang.String>) strList19);
        cDMetadata11.setComposerNames((java.util.List<java.lang.String>) strList19);
        cDMetadata5.setTrackNames((java.util.List<java.lang.String>) strList19);
        net.sourceforge.atunes.model.CDMetadata cDMetadata24 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str25 = cDMetadata24.getGenre();
        java.util.List<java.lang.String> strList26 = cDMetadata24.getComposerNames();
        java.lang.String str27 = cDMetadata24.getAlbum();
        java.util.List<java.lang.Integer> intList28 = cDMetadata24.getTracks();
        int int29 = cDMetadata24.getDisc();
        java.lang.String[] strArray37 = new java.lang.String[] { "net.sourceforge.atunes.model.InconsistentRepositoryException", "./title", "1.0.0 ", "./title", "./duration", "mpc", "net.sourceforge.atunes.model.InconsistentRepositoryException" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        cDMetadata24.setArtistNames((java.util.List<java.lang.String>) strList38);
        cDMetadata5.setArtistNames((java.util.List<java.lang.String>) strList38);
        cDMetadata0.setComposerNames((java.util.List<java.lang.String>) strList38);
        cDMetadata0.setDisc((int) (byte) 1);
        java.util.List<java.lang.String> strList45 = cDMetadata0.getTrackNames();
        cDMetadata0.setAlbum("./duration");
        java.lang.String str48 = cDMetadata0.getAlbum();
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(intList28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(strList45);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "./duration" + "'", str48, "./duration");
    }

    @Test
    public void test0888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0888");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        columnBean0.setVisible(false);
        columnBean0.setWidth(0);
        net.sourceforge.atunes.model.ColumnSort columnSort8 = columnBean0.getSort();
        columnBean0.setWidth((int) (byte) 10);
        columnBean0.setVisible(true);
        int int13 = columnBean0.getWidth();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(columnSort8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
    }

    @Test
    public void test0889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0889");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        fontSettings0.setUseFontSmoothing(false);
        fontSettings0.setUseFontSmoothing(false);
        net.sourceforge.atunes.model.IFontBean iFontBean5 = null;
        fontSettings0.setFont(iFontBean5);
        net.sourceforge.atunes.model.IFontBean iFontBean7 = fontSettings0.getFont();
        fontSettings0.setUseFontSmoothing(false);
        net.sourceforge.atunes.model.IFontBean iFontBean10 = null;
        fontSettings0.setFont(iFontBean10);
        net.sourceforge.atunes.model.FeedType feedType12 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str13 = feedType12.getEntryXPath();
        java.lang.String str14 = feedType12.getTypeXPath();
        java.lang.String str15 = feedType12.getTypeXPath();
        java.lang.String str16 = feedType12.getDescriptionXPath();
        java.lang.String str17 = feedType12.getNameXPath();
        boolean boolean18 = fontSettings0.equals((java.lang.Object) str17);
        boolean boolean19 = fontSettings0.isUseFontSmoothing();
        org.junit.Assert.assertNull(iFontBean7);
        org.junit.Assert.assertTrue("'" + feedType12 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType12.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "/rss/channel/item" + "'", str13, "/rss/channel/item");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "./enclosure/@type" + "'", str14, "./enclosure/@type");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "./enclosure/@type" + "'", str15, "./enclosure/@type");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "./description" + "'", str16, "./description");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "/rss/channel/title" + "'", str17, "/rss/channel/title");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0890");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        net.sourceforge.atunes.model.AudioObjectProperty audioObjectProperty1 = net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY;
        boolean boolean2 = columnBean0.equals((java.lang.Object) audioObjectProperty1);
        boolean boolean3 = columnBean0.isVisible();
        columnBean0.setWidth((int) ' ');
        int int6 = columnBean0.getOrder();
        boolean boolean7 = columnBean0.isVisible();
        org.junit.Assert.assertTrue("'" + audioObjectProperty1 + "' != '" + net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY + "'", audioObjectProperty1.equals(net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0891");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.lang.String str3 = cDMetadata0.getAlbum();
        java.util.List<java.lang.Integer> intList4 = cDMetadata0.getTracks();
        int int5 = cDMetadata0.getYear();
        net.sourceforge.atunes.model.CDMetadata cDMetadata6 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str7 = cDMetadata6.getGenre();
        java.util.List<java.lang.String> strList8 = cDMetadata6.getComposerNames();
        java.lang.String str9 = cDMetadata6.getAlbum();
        java.util.List<java.lang.Integer> intList10 = cDMetadata6.getTracks();
        net.sourceforge.atunes.model.CDMetadata cDMetadata11 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata11.setAlbumArtist("");
        java.lang.String str15 = cDMetadata11.getTitle((int) (byte) -1);
        java.lang.String[] strArray17 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        cDMetadata11.setTrackNames((java.util.List<java.lang.String>) strList18);
        cDMetadata6.setTrackNames((java.util.List<java.lang.String>) strList18);
        cDMetadata6.setYear((int) (short) 1);
        int int24 = cDMetadata6.getYear();
        java.lang.String str25 = cDMetadata6.getGenre();
        cDMetadata6.setYear((int) (short) 10);
        net.sourceforge.atunes.model.CDMetadata cDMetadata28 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata28.setAlbumArtist("");
        java.lang.String str31 = cDMetadata28.getGenre();
        java.lang.String[] strArray33 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        cDMetadata28.setTrackNames((java.util.List<java.lang.String>) strList34);
        cDMetadata6.setTrackNames((java.util.List<java.lang.String>) strList34);
        cDMetadata0.setComposerNames((java.util.List<java.lang.String>) strList34);
        java.lang.String[] strArray56 = new java.lang.String[] { "mpc", "1.0.0 ", "hi!", "/feed/title", "net.sourceforge.atunes.model.SearchQuerySyntaxException", "./updated", "./pubDate", "./updated", "rm", "/rss/channel/title", "net.sourceforge.atunes.model.SearchIndexNotAvailableException: net.sourceforge.atunes.model.SearchQuerySyntaxException", "mac", "mpc", "/rss/channel/item", "./author", "", "1.0.0 " };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList57);
        cDMetadata0.setAlbum("/feed/title");
        java.lang.String str63 = cDMetadata0.getComposer((int) '#');
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(intList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(intList10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNull(str63);
    }

    @Test
    public void test0892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0892");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList3 = cDMetadata0.getTracks();
        cDMetadata0.setAlbumArtist("/rss/channel/title");
        java.util.List<java.lang.String> strList6 = cDMetadata0.getTrackNames();
        java.lang.String str7 = cDMetadata0.getAlbumArtist();
        cDMetadata0.setYear((-1));
        java.util.List<java.lang.String> strList10 = cDMetadata0.getTrackNames();
        java.util.List<java.lang.Integer> intList11 = cDMetadata0.getTracks();
        org.junit.Assert.assertNull(intList3);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/rss/channel/title" + "'", str7, "/rss/channel/title");
        org.junit.Assert.assertNull(strList10);
        org.junit.Assert.assertNull(intList11);
    }

    @Test
    public void test0893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0893");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.lang.String str3 = cDMetadata0.getAlbum();
        java.util.List<java.lang.Integer> intList4 = cDMetadata0.getTracks();
        net.sourceforge.atunes.model.CDMetadata cDMetadata5 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata5.setAlbumArtist("");
        java.lang.String str9 = cDMetadata5.getTitle((int) (byte) -1);
        java.lang.String[] strArray11 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        cDMetadata5.setTrackNames((java.util.List<java.lang.String>) strList12);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList12);
        cDMetadata0.setYear((int) (short) 1);
        int int18 = cDMetadata0.getYear();
        cDMetadata0.setAlbumArtist("net.sourceforge.atunes.model.InconsistentRepositoryException");
        cDMetadata0.setDisc((int) (byte) 10);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(intList4);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test0894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0894");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata1 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata1.setAlbumArtist("");
        boolean boolean4 = fontSettings0.equals((java.lang.Object) cDMetadata1);
        java.lang.String str5 = cDMetadata1.getGenre();
        java.lang.String str6 = cDMetadata1.getAlbumArtist();
        java.util.List<java.lang.String> strList7 = cDMetadata1.getArtistNames();
        java.lang.String str8 = cDMetadata1.getGenre();
        net.sourceforge.atunes.model.FontSettings fontSettings9 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata10 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata10.setAlbumArtist("");
        boolean boolean13 = fontSettings9.equals((java.lang.Object) cDMetadata10);
        java.lang.String str14 = cDMetadata10.getGenre();
        cDMetadata10.setAlbum("net.sourceforge.atunes.model.SearchQuerySyntaxException");
        java.util.List<java.lang.String> strList17 = cDMetadata10.getArtistNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata18 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str19 = cDMetadata18.getGenre();
        java.util.List<java.lang.String> strList20 = cDMetadata18.getComposerNames();
        java.lang.String str21 = cDMetadata18.getAlbum();
        java.util.List<java.lang.Integer> intList22 = cDMetadata18.getTracks();
        net.sourceforge.atunes.model.CDMetadata cDMetadata23 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata23.setAlbumArtist("");
        java.lang.String str27 = cDMetadata23.getTitle((int) (byte) -1);
        java.lang.String[] strArray29 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        cDMetadata23.setTrackNames((java.util.List<java.lang.String>) strList30);
        cDMetadata18.setTrackNames((java.util.List<java.lang.String>) strList30);
        cDMetadata18.setYear((int) (short) 1);
        int int36 = cDMetadata18.getYear();
        java.lang.String str37 = cDMetadata18.getGenre();
        cDMetadata18.setYear((int) (short) 10);
        net.sourceforge.atunes.model.CDMetadata cDMetadata40 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata40.setAlbumArtist("");
        java.lang.String str43 = cDMetadata40.getGenre();
        java.lang.String[] strArray45 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        cDMetadata40.setTrackNames((java.util.List<java.lang.String>) strList46);
        cDMetadata18.setTrackNames((java.util.List<java.lang.String>) strList46);
        cDMetadata10.setTrackNames((java.util.List<java.lang.String>) strList46);
        java.util.List<java.lang.String> strList51 = cDMetadata10.getComposerNames();
        java.lang.String[] strArray66 = new java.lang.String[] { "./enclosure/@type", "net.sourceforge.atunes.model.SearchIndexNotAvailableException: net.sourceforge.atunes.model.SearchQuerySyntaxException: net.sourceforge.atunes.model.SearchQuerySyntaxException", "/rss/channel/item", "./title", "SOCKS_PROXY", "mpc", "mp4", "./link[@rel='enclosure']/@type", "/rss/channel/title", "HTTP_PROXY", "HTTP_PROXY", "/feed/title", "10.52.35  ", "./author" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        cDMetadata10.setTrackNames((java.util.List<java.lang.String>) strList67);
        cDMetadata1.setTrackNames((java.util.List<java.lang.String>) strList67);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(strList7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(strList20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(intList22);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNull(strList51);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test0895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0895");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata1 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata1.setAlbumArtist("");
        boolean boolean4 = fontSettings0.equals((java.lang.Object) cDMetadata1);
        fontSettings0.setUseFontSmoothingSettingsFromOs(false);
        net.sourceforge.atunes.model.IFontBean iFontBean7 = fontSettings0.getFont();
        boolean boolean8 = fontSettings0.isUseFontSmoothing();
        net.sourceforge.atunes.model.IFontBean iFontBean9 = fontSettings0.getFont();
        net.sourceforge.atunes.model.FontSettings fontSettings10 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata11 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata11.setAlbumArtist("");
        boolean boolean14 = fontSettings10.equals((java.lang.Object) cDMetadata11);
        fontSettings10.setUseFontSmoothing(true);
        net.sourceforge.atunes.model.IFontBean iFontBean17 = fontSettings10.getFont();
        net.sourceforge.atunes.model.CDMetadata cDMetadata18 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str19 = cDMetadata18.getGenre();
        java.util.List<java.lang.String> strList20 = cDMetadata18.getComposerNames();
        java.lang.String str21 = cDMetadata18.getAlbum();
        java.util.List<java.lang.Integer> intList22 = cDMetadata18.getTracks();
        cDMetadata18.setAlbumArtist("mpc");
        java.lang.String str25 = cDMetadata18.getAlbum();
        boolean boolean26 = fontSettings10.equals((java.lang.Object) cDMetadata18);
        java.lang.String[] strArray51 = new java.lang.String[] { "./link[@rel='enclosure']/@type", "SOCKS_PROXY", "/feed/title", "./pubDate", "1.0.0 mpc ", "net.sourceforge.atunes.model.InconsistentRepositoryException", "1.0.0 mpc ", "1.0.0 mpc ", "rm", "./enclosure/@type", "/rss/channel/item", "mpc", "./title", "1.0.0 ", "flv", "1.0.0 ", "./link[@rel='enclosure']/@type", "hi!", "./link[@rel='enclosure']/@type", "./updated", "10.52.35  ", "net.sourceforge.atunes.model.InconsistentRepositoryException", "./enclosure/@url", "SOCKS_PROXY" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        cDMetadata18.setTrackNames((java.util.List<java.lang.String>) strList52);
        boolean boolean55 = fontSettings0.equals((java.lang.Object) strList52);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(iFontBean7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(iFontBean9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(iFontBean17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(strList20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(intList22);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test0896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0896");
        net.sourceforge.atunes.model.LookAndFeelBean lookAndFeelBean0 = new net.sourceforge.atunes.model.LookAndFeelBean();
        java.lang.String str1 = lookAndFeelBean0.getSkin();
        lookAndFeelBean0.setName("net.sourceforge.atunes.model.SearchQuerySyntaxException");
        lookAndFeelBean0.setSkin("");
        java.lang.String str6 = lookAndFeelBean0.getSkin();
        lookAndFeelBean0.setSkin("mpc");
        java.lang.String str9 = lookAndFeelBean0.getSkin();
        lookAndFeelBean0.setName("./enclosure/@url");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "mpc" + "'", str9, "mpc");
    }

    @Test
    public void test0897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0897");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.lang.String str3 = cDMetadata0.getAlbum();
        cDMetadata0.setDisc((int) (byte) 100);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test0898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0898");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.ATOM;
        java.lang.String str1 = feedType0.getNameXPath();
        java.lang.String str2 = feedType0.getAuthorXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.ATOM + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.ATOM));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "/feed/title" + "'", str1, "/feed/title");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "./author/name" + "'", str2, "./author/name");
    }

    @Test
    public void test0899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0899");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.lang.String str3 = cDMetadata0.getAlbum();
        cDMetadata0.setAlbumArtist("./description");
        java.util.List<java.lang.String> strList6 = cDMetadata0.getTrackNames();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(strList6);
    }

    @Test
    public void test0900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0900");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable1 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException2 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable1);
        java.lang.Throwable[] throwableArray3 = searchQuerySyntaxException2.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException4 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException2);
        java.lang.Throwable throwable5 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException6 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable5);
        java.lang.Throwable[] throwableArray7 = searchQuerySyntaxException6.getSuppressed();
        throwableRankList0.replaceItem((java.lang.Throwable) searchQuerySyntaxException2, (java.lang.Throwable) searchQuerySyntaxException6);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList9 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable10 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException11 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable10);
        java.lang.Throwable[] throwableArray12 = searchQuerySyntaxException11.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException13 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException11);
        java.lang.Throwable throwable14 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException15 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable14);
        java.lang.Throwable[] throwableArray16 = searchQuerySyntaxException15.getSuppressed();
        throwableRankList9.replaceItem((java.lang.Throwable) searchQuerySyntaxException11, (java.lang.Throwable) searchQuerySyntaxException15);
        java.lang.Integer int18 = throwableRankList0.getCount((java.lang.Throwable) searchQuerySyntaxException15);
        java.lang.Throwable throwable19 = null;
        java.lang.Throwable throwable20 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException21 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable20);
        throwableRankList0.replaceItem(throwable19, (java.lang.Throwable) searchQuerySyntaxException21);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList23 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable24 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException25 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable24);
        java.lang.Throwable[] throwableArray26 = searchQuerySyntaxException25.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException27 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException25);
        java.lang.Throwable throwable28 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException29 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable28);
        java.lang.Throwable[] throwableArray30 = searchQuerySyntaxException29.getSuppressed();
        throwableRankList23.replaceItem((java.lang.Throwable) searchQuerySyntaxException25, (java.lang.Throwable) searchQuerySyntaxException29);
        java.util.List<java.lang.Throwable> throwableList32 = throwableRankList23.getOrder();
        java.lang.Throwable throwable33 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException34 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable33);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList35 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable36 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException37 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable36);
        java.lang.Throwable[] throwableArray38 = searchQuerySyntaxException37.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException39 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException37);
        java.lang.Throwable throwable40 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException41 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable40);
        java.lang.Throwable[] throwableArray42 = searchQuerySyntaxException41.getSuppressed();
        throwableRankList35.replaceItem((java.lang.Throwable) searchQuerySyntaxException37, (java.lang.Throwable) searchQuerySyntaxException41);
        searchQuerySyntaxException34.addSuppressed((java.lang.Throwable) searchQuerySyntaxException41);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException45 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException34);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException46 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException34);
        java.lang.Integer int47 = throwableRankList23.getCount((java.lang.Throwable) searchIndexNotAvailableException46);
        throwableRankList0.addItem((java.lang.Throwable) searchIndexNotAvailableException46);
        java.util.List<java.lang.Integer> intList50 = throwableRankList0.getNFirstElementCounts(90);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList51 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList53 = throwableRankList51.getNFirstElements((int) (short) 100);
        java.lang.Throwable throwable54 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException55 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable54);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList56 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable57 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException58 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable57);
        java.lang.Throwable[] throwableArray59 = searchQuerySyntaxException58.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException60 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException58);
        java.lang.Throwable throwable61 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException62 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable61);
        java.lang.Throwable[] throwableArray63 = searchQuerySyntaxException62.getSuppressed();
        throwableRankList56.replaceItem((java.lang.Throwable) searchQuerySyntaxException58, (java.lang.Throwable) searchQuerySyntaxException62);
        searchQuerySyntaxException55.addSuppressed((java.lang.Throwable) searchQuerySyntaxException62);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException66 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException55);
        java.lang.Throwable throwable67 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException68 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable67);
        java.lang.Throwable[] throwableArray69 = searchQuerySyntaxException68.getSuppressed();
        searchQuerySyntaxException55.addSuppressed((java.lang.Throwable) searchQuerySyntaxException68);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException71 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException55);
        java.lang.Throwable throwable72 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException73 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable72);
        java.lang.Throwable[] throwableArray74 = searchQuerySyntaxException73.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException75 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException73);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException76 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException73);
        throwableRankList51.replaceItem((java.lang.Throwable) searchQuerySyntaxException55, (java.lang.Throwable) searchQuerySyntaxException76);
        throwableRankList0.addItem((java.lang.Throwable) searchQuerySyntaxException55);
        java.util.List<java.lang.Throwable> throwableList80 = throwableRankList0.getNFirstElements(100);
        java.lang.Class<?> wildcardClass81 = throwableRankList0.getClass();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableList32);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNull(int47);
        org.junit.Assert.assertNotNull(intList50);
        org.junit.Assert.assertNotNull(throwableList53);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableList80);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0901");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        java.lang.String str12 = applicationVersion9.getChanges();
        int int13 = applicationVersion9.getMinorNumber();
        java.lang.String str14 = applicationVersion9.getChanges();
        java.lang.String str15 = applicationVersion9.getDirectDownloadURL();
        int int16 = applicationVersion9.getMajorNumber();
        java.lang.String str17 = applicationVersion9.getDate();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "./title" + "'", str12, "./title");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "./title" + "'", str14, "./title");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "./pubDate" + "'", str15, "./pubDate");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "./title" + "'", str17, "./title");
    }

    @Test
    public void test0902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0902");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList2 = throwableRankList0.getNFirstElements((int) (short) 10);
        int int3 = throwableRankList0.size();
        int int4 = throwableRankList0.size();
        java.lang.Throwable throwable5 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException6 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable5);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList7 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable8 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException9 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable8);
        java.lang.Throwable[] throwableArray10 = searchQuerySyntaxException9.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException11 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException9);
        java.lang.Throwable throwable12 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException13 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable12);
        java.lang.Throwable[] throwableArray14 = searchQuerySyntaxException13.getSuppressed();
        throwableRankList7.replaceItem((java.lang.Throwable) searchQuerySyntaxException9, (java.lang.Throwable) searchQuerySyntaxException13);
        searchQuerySyntaxException6.addSuppressed((java.lang.Throwable) searchQuerySyntaxException13);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException17 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException6);
        java.lang.Integer int18 = throwableRankList0.getCount((java.lang.Throwable) searchQuerySyntaxException6);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList19 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList21 = throwableRankList19.getNFirstElements((int) (short) 100);
        java.lang.Throwable throwable22 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException23 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable22);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList24 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable25 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException26 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable25);
        java.lang.Throwable[] throwableArray27 = searchQuerySyntaxException26.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException28 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException26);
        java.lang.Throwable throwable29 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException30 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable29);
        java.lang.Throwable[] throwableArray31 = searchQuerySyntaxException30.getSuppressed();
        throwableRankList24.replaceItem((java.lang.Throwable) searchQuerySyntaxException26, (java.lang.Throwable) searchQuerySyntaxException30);
        searchQuerySyntaxException23.addSuppressed((java.lang.Throwable) searchQuerySyntaxException30);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException34 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException23);
        java.lang.Throwable throwable35 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException36 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable35);
        java.lang.Throwable[] throwableArray37 = searchQuerySyntaxException36.getSuppressed();
        searchQuerySyntaxException23.addSuppressed((java.lang.Throwable) searchQuerySyntaxException36);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException39 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException23);
        java.lang.Throwable throwable40 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException41 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable40);
        java.lang.Throwable[] throwableArray42 = searchQuerySyntaxException41.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException43 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException41);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException44 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException41);
        throwableRankList19.replaceItem((java.lang.Throwable) searchQuerySyntaxException23, (java.lang.Throwable) searchQuerySyntaxException44);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList46 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        net.sourceforge.atunes.model.InconsistentRepositoryException inconsistentRepositoryException47 = new net.sourceforge.atunes.model.InconsistentRepositoryException();
        net.sourceforge.atunes.model.InconsistentRepositoryException inconsistentRepositoryException48 = new net.sourceforge.atunes.model.InconsistentRepositoryException();
        throwableRankList46.replaceItem((java.lang.Throwable) inconsistentRepositoryException47, (java.lang.Throwable) inconsistentRepositoryException48);
        java.lang.Throwable throwable50 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException51 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable50);
        java.lang.Throwable[] throwableArray52 = searchQuerySyntaxException51.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException53 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException51);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException54 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException51);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList55 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable56 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException57 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable56);
        java.lang.Throwable[] throwableArray58 = searchQuerySyntaxException57.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException59 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException57);
        java.lang.Throwable throwable60 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException61 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable60);
        java.lang.Throwable[] throwableArray62 = searchQuerySyntaxException61.getSuppressed();
        throwableRankList55.replaceItem((java.lang.Throwable) searchQuerySyntaxException57, (java.lang.Throwable) searchQuerySyntaxException61);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException64 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException61);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException65 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException64);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException66 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchIndexNotAvailableException65);
        searchQuerySyntaxException54.addSuppressed((java.lang.Throwable) searchIndexNotAvailableException66);
        throwableRankList46.addItem((java.lang.Throwable) searchQuerySyntaxException54);
        throwableRankList0.replaceItem((java.lang.Throwable) searchQuerySyntaxException44, (java.lang.Throwable) searchQuerySyntaxException54);
        java.lang.Throwable throwable70 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException71 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable70);
        java.lang.Throwable[] throwableArray72 = searchQuerySyntaxException71.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException73 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException71);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException74 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException71);
        java.lang.Integer int75 = throwableRankList0.getCount((java.lang.Throwable) searchQuerySyntaxException74);
        org.junit.Assert.assertNotNull(throwableList2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(throwableList21);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNull(int75);
    }

    @Test
    public void test0903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0903");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.lang.String str3 = cDMetadata0.getAlbum();
        cDMetadata0.setAlbumArtist("./description");
        cDMetadata0.setAlbumArtist("./description");
        java.lang.String str8 = cDMetadata0.getAlbumArtist();
        net.sourceforge.atunes.model.ColumnBean columnBean9 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean10 = columnBean9.isVisible();
        net.sourceforge.atunes.model.SubmissionState submissionState11 = net.sourceforge.atunes.model.SubmissionState.PENDING;
        boolean boolean12 = columnBean9.equals((java.lang.Object) submissionState11);
        net.sourceforge.atunes.model.CDMetadata cDMetadata13 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata13.setAlbumArtist("");
        java.lang.String str17 = cDMetadata13.getTitle((int) (byte) -1);
        net.sourceforge.atunes.model.CDMetadata cDMetadata18 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata18.setAlbumArtist("");
        java.lang.String str22 = cDMetadata18.getTitle((int) (byte) -1);
        java.lang.String[] strArray24 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        cDMetadata18.setTrackNames((java.util.List<java.lang.String>) strList25);
        cDMetadata13.setArtistNames((java.util.List<java.lang.String>) strList25);
        boolean boolean29 = columnBean9.equals((java.lang.Object) strList25);
        cDMetadata0.setComposerNames((java.util.List<java.lang.String>) strList25);
        cDMetadata0.setDisc(1);
        java.lang.String str33 = cDMetadata0.getAlbumArtist();
        java.util.List<java.lang.String> strList34 = cDMetadata0.getTrackNames();
        cDMetadata0.setAlbum("./updated");
        cDMetadata0.setDisc((int) (short) 1);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "./description" + "'", str8, "./description");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + submissionState11 + "' != '" + net.sourceforge.atunes.model.SubmissionState.PENDING + "'", submissionState11.equals(net.sourceforge.atunes.model.SubmissionState.PENDING));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "./description" + "'", str33, "./description");
        org.junit.Assert.assertNull(strList34);
    }

    @Test
    public void test0904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0904");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str1 = feedType0.getDescriptionXPath();
        java.lang.String str2 = feedType0.getNameXPath();
        java.lang.String str3 = feedType0.getNameXPath();
        java.lang.String str4 = feedType0.getDurationXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "./description" + "'", str1, "./description");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "/rss/channel/title" + "'", str2, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "/rss/channel/title" + "'", str3, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "./duration" + "'", str4, "./duration");
    }

    @Test
    public void test0905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0905");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.lang.String str3 = cDMetadata0.getGenre();
        java.lang.String[] strArray5 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList6);
        java.lang.String str10 = cDMetadata0.getTitle((int) (byte) 100);
        cDMetadata0.setYear((int) '4');
        java.util.List<java.lang.String> strList13 = cDMetadata0.getComposerNames();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList14 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        int int15 = throwableRankList14.size();
        java.util.List<java.lang.Throwable> throwableList16 = throwableRankList14.getOrder();
        java.lang.Throwable throwable17 = null;
        java.lang.Integer int18 = throwableRankList14.getCount(throwable17);
        int int19 = throwableRankList14.size();
        int int20 = throwableRankList14.size();
        java.util.List<java.lang.Throwable> throwableList22 = throwableRankList14.getNFirstElements(1);
        java.util.List<java.lang.Integer> intList24 = throwableRankList14.getNFirstElementCounts((-1));
        cDMetadata0.setTracks(intList24);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(strList13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(throwableList16);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(throwableList22);
        org.junit.Assert.assertNotNull(intList24);
    }

    @Test
    public void test0906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0906");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        int int3 = cDMetadata0.getYear();
        cDMetadata0.setYear(100);
        cDMetadata0.setYear((-1));
        int int8 = cDMetadata0.getDisc();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test0907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0907");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata1 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata1.setAlbumArtist("");
        boolean boolean4 = fontSettings0.equals((java.lang.Object) cDMetadata1);
        fontSettings0.setUseFontSmoothingSettingsFromOs(false);
        net.sourceforge.atunes.model.IFontBean iFontBean7 = fontSettings0.getFont();
        boolean boolean8 = fontSettings0.isUseFontSmoothing();
        fontSettings0.setUseFontSmoothing(false);
        fontSettings0.setUseFontSmoothingSettingsFromOs(true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(iFontBean7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0908");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        net.sourceforge.atunes.model.ColumnSort columnSort4 = net.sourceforge.atunes.model.ColumnSort.DESCENDING;
        columnBean0.setSort(columnSort4);
        int int6 = columnBean0.getOrder();
        net.sourceforge.atunes.model.ColumnSort columnSort7 = columnBean0.getSort();
        columnBean0.setWidth(1);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + columnSort4 + "' != '" + net.sourceforge.atunes.model.ColumnSort.DESCENDING + "'", columnSort4.equals(net.sourceforge.atunes.model.ColumnSort.DESCENDING));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + columnSort7 + "' != '" + net.sourceforge.atunes.model.ColumnSort.DESCENDING + "'", columnSort7.equals(net.sourceforge.atunes.model.ColumnSort.DESCENDING));
    }

    @Test
    public void test0909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0909");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata1 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata1.setAlbumArtist("");
        boolean boolean4 = fontSettings0.equals((java.lang.Object) cDMetadata1);
        fontSettings0.setUseFontSmoothingSettingsFromOs(false);
        boolean boolean7 = fontSettings0.isUseFontSmoothing();
        net.sourceforge.atunes.model.PlaybackState playbackState8 = net.sourceforge.atunes.model.PlaybackState.PLAY_FINISHED;
        boolean boolean9 = fontSettings0.equals((java.lang.Object) playbackState8);
        net.sourceforge.atunes.model.IFontBean iFontBean10 = null;
        fontSettings0.setFont(iFontBean10);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + playbackState8 + "' != '" + net.sourceforge.atunes.model.PlaybackState.PLAY_FINISHED + "'", playbackState8.equals(net.sourceforge.atunes.model.PlaybackState.PLAY_FINISHED));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0910");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        columnBean0.setVisible(false);
        columnBean0.setWidth(0);
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType12 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion17 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType12, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str18 = applicationVersion17.getDate();
        java.lang.String str19 = applicationVersion17.toShortString();
        java.lang.String str20 = applicationVersion17.getChanges();
        boolean boolean21 = columnBean0.equals((java.lang.Object) applicationVersion17);
        net.sourceforge.atunes.model.ColumnBean columnBean22 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean23 = columnBean22.isVisible();
        net.sourceforge.atunes.model.SubmissionState submissionState24 = net.sourceforge.atunes.model.SubmissionState.PENDING;
        boolean boolean25 = columnBean22.equals((java.lang.Object) submissionState24);
        columnBean22.setVisible(false);
        net.sourceforge.atunes.model.ColumnSort columnSort28 = net.sourceforge.atunes.model.ColumnSort.ASCENDING;
        columnBean22.setSort(columnSort28);
        columnBean0.setSort(columnSort28);
        columnBean0.setVisible(true);
        net.sourceforge.atunes.model.CDMetadata cDMetadata33 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata33.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList36 = cDMetadata33.getTracks();
        java.util.List<java.lang.String> strList37 = cDMetadata33.getArtistNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata38 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata38.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList41 = cDMetadata38.getTracks();
        cDMetadata38.setAlbumArtist("/rss/channel/title");
        java.util.List<java.lang.String> strList44 = cDMetadata38.getTrackNames();
        cDMetadata38.setAlbum("/rss/channel/item");
        cDMetadata38.setAlbum("");
        net.sourceforge.atunes.model.CDMetadata cDMetadata49 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata49.setAlbumArtist("");
        java.lang.String str53 = cDMetadata49.getTitle((int) (byte) -1);
        java.lang.String[] strArray55 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList56 = new java.util.ArrayList<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList56, strArray55);
        cDMetadata49.setTrackNames((java.util.List<java.lang.String>) strList56);
        cDMetadata49.setAlbumArtist("/rss/channel/item");
        java.util.List<java.lang.Integer> intList61 = cDMetadata49.getTracks();
        java.lang.String str63 = cDMetadata49.getTitle(100);
        net.sourceforge.atunes.model.ColumnBean columnBean64 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean65 = columnBean64.isVisible();
        net.sourceforge.atunes.model.SubmissionState submissionState66 = net.sourceforge.atunes.model.SubmissionState.PENDING;
        boolean boolean67 = columnBean64.equals((java.lang.Object) submissionState66);
        net.sourceforge.atunes.model.CDMetadata cDMetadata68 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata68.setAlbumArtist("");
        java.lang.String str72 = cDMetadata68.getTitle((int) (byte) -1);
        net.sourceforge.atunes.model.CDMetadata cDMetadata73 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata73.setAlbumArtist("");
        java.lang.String str77 = cDMetadata73.getTitle((int) (byte) -1);
        java.lang.String[] strArray79 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList80 = new java.util.ArrayList<java.lang.String>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList80, strArray79);
        cDMetadata73.setTrackNames((java.util.List<java.lang.String>) strList80);
        cDMetadata68.setArtistNames((java.util.List<java.lang.String>) strList80);
        boolean boolean84 = columnBean64.equals((java.lang.Object) strList80);
        cDMetadata49.setTrackNames((java.util.List<java.lang.String>) strList80);
        cDMetadata38.setArtistNames((java.util.List<java.lang.String>) strList80);
        cDMetadata33.setComposerNames((java.util.List<java.lang.String>) strList80);
        boolean boolean88 = columnBean0.equals((java.lang.Object) cDMetadata33);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + versionType12 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType12.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "./title" + "'", str18, "./title");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1.0.0 " + "'", str19, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "./title" + "'", str20, "./title");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + submissionState24 + "' != '" + net.sourceforge.atunes.model.SubmissionState.PENDING + "'", submissionState24.equals(net.sourceforge.atunes.model.SubmissionState.PENDING));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + columnSort28 + "' != '" + net.sourceforge.atunes.model.ColumnSort.ASCENDING + "'", columnSort28.equals(net.sourceforge.atunes.model.ColumnSort.ASCENDING));
        org.junit.Assert.assertNull(intList36);
        org.junit.Assert.assertNull(strList37);
        org.junit.Assert.assertNull(intList41);
        org.junit.Assert.assertNull(strList44);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNull(intList61);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + submissionState66 + "' != '" + net.sourceforge.atunes.model.SubmissionState.PENDING + "'", submissionState66.equals(net.sourceforge.atunes.model.SubmissionState.PENDING));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test0911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0911");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        int int12 = applicationVersion9.getMajorNumber();
        int int13 = applicationVersion9.getMinorNumber();
        java.lang.String str14 = applicationVersion9.getName();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType19 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion24 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType19, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str25 = applicationVersion24.getDate();
        java.lang.String str26 = applicationVersion24.toShortString();
        int int27 = applicationVersion24.getMajorNumber();
        int int28 = applicationVersion24.getMinorNumber();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType33 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion38 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType33, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str39 = applicationVersion38.getDate();
        java.lang.String str40 = applicationVersion38.toShortString();
        java.lang.String str41 = applicationVersion38.getChanges();
        int int42 = applicationVersion38.getMinorNumber();
        java.lang.String str43 = applicationVersion38.getChanges();
        int int44 = applicationVersion38.getRevisionNumber();
        int int45 = applicationVersion24.compareTo(applicationVersion38);
        java.lang.String str46 = applicationVersion38.getDate();
        java.lang.String str47 = applicationVersion38.toString();
        int int48 = applicationVersion9.compareTo(applicationVersion38);
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "mpc" + "'", str14, "mpc");
        org.junit.Assert.assertTrue("'" + versionType19 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType19.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "./title" + "'", str25, "./title");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1.0.0 " + "'", str26, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + versionType33 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType33.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "./title" + "'", str39, "./title");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1.0.0 " + "'", str40, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "./title" + "'", str41, "./title");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "./title" + "'", str43, "./title");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "./title" + "'", str46, "./title");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1.0.0 mpc " + "'", str47, "1.0.0 mpc ");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
    }

    @Test
    public void test0912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0912");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable1 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException2 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable1);
        java.lang.Throwable[] throwableArray3 = searchQuerySyntaxException2.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException4 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException2);
        java.lang.Throwable throwable5 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException6 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable5);
        java.lang.Throwable[] throwableArray7 = searchQuerySyntaxException6.getSuppressed();
        throwableRankList0.replaceItem((java.lang.Throwable) searchQuerySyntaxException2, (java.lang.Throwable) searchQuerySyntaxException6);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList9 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable10 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException11 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable10);
        java.lang.Throwable[] throwableArray12 = searchQuerySyntaxException11.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException13 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException11);
        java.lang.Throwable throwable14 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException15 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable14);
        java.lang.Throwable[] throwableArray16 = searchQuerySyntaxException15.getSuppressed();
        throwableRankList9.replaceItem((java.lang.Throwable) searchQuerySyntaxException11, (java.lang.Throwable) searchQuerySyntaxException15);
        java.lang.Integer int18 = throwableRankList0.getCount((java.lang.Throwable) searchQuerySyntaxException15);
        java.lang.Throwable throwable19 = null;
        java.lang.Throwable throwable20 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException21 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable20);
        throwableRankList0.replaceItem(throwable19, (java.lang.Throwable) searchQuerySyntaxException21);
        java.util.List<java.lang.Integer> intList24 = throwableRankList0.getNFirstElementCounts((int) (byte) 1);
        java.util.List<java.lang.Throwable> throwableList26 = throwableRankList0.getNFirstElements(0);
        java.util.List<java.lang.Throwable> throwableList28 = throwableRankList0.getNFirstElements((int) ' ');
        int int29 = throwableRankList0.size();
        java.util.List<java.lang.Throwable> throwableList31 = throwableRankList0.getNFirstElements(97);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(intList24);
        org.junit.Assert.assertNotNull(throwableList26);
        org.junit.Assert.assertNotNull(throwableList28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(throwableList31);
    }

    @Test
    public void test0913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0913");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata2 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata2.setAlbumArtist("");
        java.lang.String str5 = cDMetadata2.getGenre();
        java.lang.String[] strArray7 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        cDMetadata2.setTrackNames((java.util.List<java.lang.String>) strList8);
        cDMetadata0.setComposerNames((java.util.List<java.lang.String>) strList8);
        java.lang.String str12 = cDMetadata0.getAlbum();
        cDMetadata0.setAlbum("./duration");
        cDMetadata0.setDisc((int) (short) 1);
        cDMetadata0.setYear(150);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test0914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0914");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType8 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion13 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType8, "mpc", "./description", "./pubDate", "./title");
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion18 = new net.sourceforge.atunes.model.ApplicationVersion("1.0.0 ", (int) (byte) 10, 100, 150, versionType8, "./description", "/rss/channel/item", "/rss/channel/item", "./enclosure/@url");
        java.lang.String str19 = applicationVersion18.getDirectDownloadURL();
        int int20 = applicationVersion18.getRevisionNumber();
        int int21 = applicationVersion18.getMinorNumber();
        org.junit.Assert.assertTrue("'" + versionType8 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType8.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "/rss/channel/item" + "'", str19, "/rss/channel/item");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 150 + "'", int20 == 150);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
    }

    @Test
    public void test0915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0915");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.lang.String str3 = cDMetadata0.getGenre();
        java.lang.String[] strArray5 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList6);
        cDMetadata0.setAlbumArtist("net.sourceforge.atunes.model.InconsistentRepositoryException");
        cDMetadata0.setDisc((int) (short) -1);
        java.lang.String str13 = cDMetadata0.getAlbumArtist();
        cDMetadata0.setDisc(97);
        net.sourceforge.atunes.model.CDMetadata cDMetadata16 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str17 = cDMetadata16.getGenre();
        java.util.List<java.lang.String> strList18 = cDMetadata16.getComposerNames();
        java.lang.String str19 = cDMetadata16.getAlbum();
        java.util.List<java.lang.Integer> intList20 = cDMetadata16.getTracks();
        int int21 = cDMetadata16.getDisc();
        java.lang.String[] strArray29 = new java.lang.String[] { "net.sourceforge.atunes.model.InconsistentRepositoryException", "./title", "1.0.0 ", "./title", "./duration", "mpc", "net.sourceforge.atunes.model.InconsistentRepositoryException" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        cDMetadata16.setArtistNames((java.util.List<java.lang.String>) strList30);
        java.lang.String[] strArray41 = new java.lang.String[] { "/rss/channel/title", "/rss/channel/title", "mpc", "mpc", "./title", "rm", "./enclosure/@type", "1.0.0 " };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        cDMetadata16.setTrackNames((java.util.List<java.lang.String>) strList42);
        cDMetadata0.setArtistNames((java.util.List<java.lang.String>) strList42);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "net.sourceforge.atunes.model.InconsistentRepositoryException" + "'", str13, "net.sourceforge.atunes.model.InconsistentRepositoryException");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(intList20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test0916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0916");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.ATOM;
        java.lang.String str1 = feedType0.getUrlXPath();
        java.lang.String str2 = feedType0.getDateXPath();
        java.lang.String str3 = feedType0.getTitleXPath();
        java.lang.String str4 = feedType0.getDateXPath();
        java.lang.String str5 = feedType0.getAuthorXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.ATOM + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.ATOM));
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "./updated" + "'", str2, "./updated");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "./title" + "'", str3, "./title");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "./updated" + "'", str4, "./updated");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "./author/name" + "'", str5, "./author/name");
    }

    @Test
    public void test0917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0917");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str1 = feedType0.getEntryXPath();
        java.lang.String str2 = feedType0.getTypeXPath();
        java.lang.String str3 = feedType0.getTypeXPath();
        java.lang.String str4 = feedType0.getDescriptionXPath();
        java.lang.String str5 = feedType0.getNameXPath();
        java.lang.String str6 = feedType0.getNameXPath();
        java.lang.String str7 = feedType0.getTitleXPath();
        java.lang.String str8 = feedType0.getDateXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "/rss/channel/item" + "'", str1, "/rss/channel/item");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "./enclosure/@type" + "'", str2, "./enclosure/@type");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "./enclosure/@type" + "'", str3, "./enclosure/@type");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "./description" + "'", str4, "./description");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/rss/channel/title" + "'", str5, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "/rss/channel/title" + "'", str6, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "./title" + "'", str7, "./title");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "./pubDate" + "'", str8, "./pubDate");
    }

    @Test
    public void test0918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0918");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType8 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion13 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType8, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str14 = applicationVersion13.getDate();
        java.lang.String str15 = applicationVersion13.toShortString();
        int int16 = applicationVersion13.getMajorNumber();
        int int17 = applicationVersion13.getMinorNumber();
        java.lang.String str18 = applicationVersion13.getName();
        java.lang.String str19 = applicationVersion13.getChanges();
        boolean boolean20 = columnBean0.equals((java.lang.Object) applicationVersion13);
        columnBean0.setWidth(10);
        int int23 = columnBean0.getOrder();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + versionType8 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType8.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "./title" + "'", str14, "./title");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1.0.0 " + "'", str15, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "mpc" + "'", str18, "mpc");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "./title" + "'", str19, "./title");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
    }

    @Test
    public void test0919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0919");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable1 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException2 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable1);
        java.lang.Throwable[] throwableArray3 = searchQuerySyntaxException2.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException4 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException2);
        java.lang.Throwable throwable5 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException6 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable5);
        java.lang.Throwable[] throwableArray7 = searchQuerySyntaxException6.getSuppressed();
        throwableRankList0.replaceItem((java.lang.Throwable) searchQuerySyntaxException2, (java.lang.Throwable) searchQuerySyntaxException6);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList9 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable10 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException11 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable10);
        java.lang.Throwable[] throwableArray12 = searchQuerySyntaxException11.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException13 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException11);
        java.lang.Throwable throwable14 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException15 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable14);
        java.lang.Throwable[] throwableArray16 = searchQuerySyntaxException15.getSuppressed();
        throwableRankList9.replaceItem((java.lang.Throwable) searchQuerySyntaxException11, (java.lang.Throwable) searchQuerySyntaxException15);
        java.lang.Integer int18 = throwableRankList0.getCount((java.lang.Throwable) searchQuerySyntaxException15);
        java.lang.Throwable[] throwableArray19 = searchQuerySyntaxException15.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(throwableArray19);
    }

    @Test
    public void test0920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0920");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata1 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata1.setAlbumArtist("");
        boolean boolean4 = fontSettings0.equals((java.lang.Object) cDMetadata1);
        net.sourceforge.atunes.model.IFontBean iFontBean5 = null;
        fontSettings0.setFont(iFontBean5);
        net.sourceforge.atunes.model.IFontBean iFontBean7 = fontSettings0.getFont();
        fontSettings0.setUseFontSmoothingSettingsFromOs(false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(iFontBean7);
    }

    @Test
    public void test0921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0921");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str1 = feedType0.getUrlXPath();
        java.lang.String str2 = feedType0.getNameXPath();
        java.lang.String str3 = feedType0.getDescriptionXPath();
        java.lang.String str4 = feedType0.getNameXPath();
        java.lang.String str5 = feedType0.getNameXPath();
        java.lang.String str6 = feedType0.getAuthorXPath();
        java.lang.String str7 = feedType0.getTypeXPath();
        java.lang.String str8 = feedType0.getEntryXPath();
        java.lang.String str9 = feedType0.getEntryXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "./enclosure/@url" + "'", str1, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "/rss/channel/title" + "'", str2, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "./description" + "'", str3, "./description");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "/rss/channel/title" + "'", str4, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/rss/channel/title" + "'", str5, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "./author" + "'", str6, "./author");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "./enclosure/@type" + "'", str7, "./enclosure/@type");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "/rss/channel/item" + "'", str8, "/rss/channel/item");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/rss/channel/item" + "'", str9, "/rss/channel/item");
    }

    @Test
    public void test0922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0922");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.lang.String str3 = cDMetadata0.getGenre();
        int int4 = cDMetadata0.getYear();
        int int5 = cDMetadata0.getYear();
        cDMetadata0.setGenre("./enclosure/@url");
        net.sourceforge.atunes.model.CDMetadata cDMetadata8 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata8.setAlbumArtist("");
        java.lang.String str11 = cDMetadata8.getGenre();
        int int12 = cDMetadata8.getYear();
        int int13 = cDMetadata8.getYear();
        net.sourceforge.atunes.model.CDMetadata cDMetadata14 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str15 = cDMetadata14.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata16 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata16.setAlbumArtist("");
        java.lang.String str19 = cDMetadata16.getGenre();
        java.lang.String[] strArray21 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        cDMetadata16.setTrackNames((java.util.List<java.lang.String>) strList22);
        cDMetadata14.setComposerNames((java.util.List<java.lang.String>) strList22);
        cDMetadata8.setTrackNames((java.util.List<java.lang.String>) strList22);
        net.sourceforge.atunes.model.CDMetadata cDMetadata27 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str28 = cDMetadata27.getGenre();
        java.util.List<java.lang.String> strList29 = cDMetadata27.getComposerNames();
        java.lang.String str30 = cDMetadata27.getAlbum();
        java.util.List<java.lang.Integer> intList31 = cDMetadata27.getTracks();
        int int32 = cDMetadata27.getDisc();
        java.lang.String[] strArray40 = new java.lang.String[] { "net.sourceforge.atunes.model.InconsistentRepositoryException", "./title", "1.0.0 ", "./title", "./duration", "mpc", "net.sourceforge.atunes.model.InconsistentRepositoryException" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        cDMetadata27.setArtistNames((java.util.List<java.lang.String>) strList41);
        cDMetadata8.setArtistNames((java.util.List<java.lang.String>) strList41);
        net.sourceforge.atunes.model.CDMetadata cDMetadata45 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata45.setAlbumArtist("");
        java.lang.String str48 = cDMetadata45.getGenre();
        java.lang.String[] strArray50 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        cDMetadata45.setTrackNames((java.util.List<java.lang.String>) strList51);
        cDMetadata8.setTrackNames((java.util.List<java.lang.String>) strList51);
        cDMetadata0.setComposerNames((java.util.List<java.lang.String>) strList51);
        net.sourceforge.atunes.model.CDMetadata cDMetadata56 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str57 = cDMetadata56.getGenre();
        java.util.List<java.lang.String> strList58 = cDMetadata56.getComposerNames();
        java.lang.String str59 = cDMetadata56.getAlbum();
        java.util.List<java.lang.Integer> intList60 = cDMetadata56.getTracks();
        int int61 = cDMetadata56.getYear();
        java.util.List<java.lang.String> strList62 = cDMetadata56.getArtistNames();
        cDMetadata56.setDisc((int) (short) 100);
        net.sourceforge.atunes.model.CDMetadata cDMetadata65 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata65.setAlbumArtist("");
        java.lang.String str68 = cDMetadata65.getGenre();
        java.lang.String[] strArray70 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList71 = new java.util.ArrayList<java.lang.String>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList71, strArray70);
        cDMetadata65.setTrackNames((java.util.List<java.lang.String>) strList71);
        cDMetadata56.setArtistNames((java.util.List<java.lang.String>) strList71);
        cDMetadata0.setComposerNames((java.util.List<java.lang.String>) strList71);
        net.sourceforge.atunes.model.CDMetadata cDMetadata76 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata76.setAlbumArtist("");
        java.lang.String str79 = cDMetadata76.getGenre();
        int int80 = cDMetadata76.getYear();
        int int81 = cDMetadata76.getYear();
        net.sourceforge.atunes.model.CDMetadata cDMetadata82 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str83 = cDMetadata82.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata84 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata84.setAlbumArtist("");
        java.lang.String str87 = cDMetadata84.getGenre();
        java.lang.String[] strArray89 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList90 = new java.util.ArrayList<java.lang.String>();
        boolean boolean91 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList90, strArray89);
        cDMetadata84.setTrackNames((java.util.List<java.lang.String>) strList90);
        cDMetadata82.setComposerNames((java.util.List<java.lang.String>) strList90);
        cDMetadata76.setTrackNames((java.util.List<java.lang.String>) strList90);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList90);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(intList31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(strList58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNull(intList60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNull(strList62);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
    }

    @Test
    public void test0923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0923");
        net.sourceforge.atunes.model.LookAndFeelBean lookAndFeelBean0 = new net.sourceforge.atunes.model.LookAndFeelBean();
        java.lang.String str1 = lookAndFeelBean0.getSkin();
        lookAndFeelBean0.setSkin("./enclosure/@url");
        lookAndFeelBean0.setSkin("hi!");
        lookAndFeelBean0.setSkin("1.0.0 ");
        java.lang.String str8 = lookAndFeelBean0.getSkin();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1.0.0 " + "'", str8, "1.0.0 ");
    }

    @Test
    public void test0924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0924");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType8 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion13 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType8, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str14 = applicationVersion13.getDate();
        java.lang.String str15 = applicationVersion13.toShortString();
        java.lang.String str16 = applicationVersion13.getChanges();
        java.lang.String str17 = applicationVersion13.getChanges();
        int int18 = applicationVersion13.getMajorNumber();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType19 = applicationVersion13.getVersionType();
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion24 = new net.sourceforge.atunes.model.ApplicationVersion("net.sourceforge.atunes.model.SearchQuerySyntaxException: net.sourceforge.atunes.model.SearchIndexNotAvailableException: net.sourceforge.atunes.model.SearchQuerySyntaxException", 52, 120, (int) (short) 100, versionType19, "mp4", "10.1.1 ", "/feed/title", "net.sourceforge.atunes.model.SearchIndexNotAvailableException: net.sourceforge.atunes.model.SearchQuerySyntaxException");
        org.junit.Assert.assertTrue("'" + versionType8 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType8.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "./title" + "'", str14, "./title");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1.0.0 " + "'", str15, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "./title" + "'", str16, "./title");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "./title" + "'", str17, "./title");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + versionType19 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType19.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
    }

    @Test
    public void test0925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0925");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        int int1 = cDMetadata0.getYear();
        cDMetadata0.setDisc(3);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
    }

    @Test
    public void test0926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0926");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        java.lang.String str12 = applicationVersion9.getChanges();
        int int13 = applicationVersion9.getMinorNumber();
        java.lang.String str14 = applicationVersion9.getChanges();
        int int15 = applicationVersion9.getRevisionNumber();
        net.sourceforge.atunes.model.ColumnBean columnBean16 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean17 = columnBean16.isVisible();
        columnBean16.setOrder((int) (byte) -1);
        columnBean16.setVisible(false);
        columnBean16.setWidth(0);
        net.sourceforge.atunes.model.ColumnSort columnSort24 = columnBean16.getSort();
        net.sourceforge.atunes.model.ColumnSort columnSort25 = columnBean16.getSort();
        columnBean16.setOrder((int) (short) 100);
        columnBean16.setOrder((int) (byte) -1);
        columnBean16.setOrder((int) (short) -1);
        boolean boolean32 = applicationVersion9.equals((java.lang.Object) columnBean16);
        columnBean16.setOrder((int) 'a');
        net.sourceforge.atunes.model.ColumnBean columnBean35 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean36 = columnBean35.isVisible();
        net.sourceforge.atunes.model.SubmissionState submissionState37 = net.sourceforge.atunes.model.SubmissionState.PENDING;
        boolean boolean38 = columnBean35.equals((java.lang.Object) submissionState37);
        net.sourceforge.atunes.model.CDMetadata cDMetadata39 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata39.setAlbumArtist("");
        java.lang.String str43 = cDMetadata39.getTitle((int) (byte) -1);
        net.sourceforge.atunes.model.CDMetadata cDMetadata44 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata44.setAlbumArtist("");
        java.lang.String str48 = cDMetadata44.getTitle((int) (byte) -1);
        java.lang.String[] strArray50 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        cDMetadata44.setTrackNames((java.util.List<java.lang.String>) strList51);
        cDMetadata39.setArtistNames((java.util.List<java.lang.String>) strList51);
        boolean boolean55 = columnBean35.equals((java.lang.Object) strList51);
        net.sourceforge.atunes.model.ColumnSort columnSort56 = columnBean35.getSort();
        net.sourceforge.atunes.model.ColumnBean columnBean57 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean58 = columnBean57.isVisible();
        columnBean57.setOrder((int) (byte) -1);
        columnBean57.setVisible(false);
        columnBean57.setWidth(0);
        net.sourceforge.atunes.model.ColumnSort columnSort65 = columnBean57.getSort();
        net.sourceforge.atunes.model.ColumnSort columnSort66 = columnBean57.getSort();
        columnBean57.setOrder((int) (short) 100);
        columnBean57.setWidth((int) (short) 10);
        net.sourceforge.atunes.model.ColumnBean columnBean71 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean72 = columnBean71.isVisible();
        columnBean71.setOrder((int) (byte) -1);
        net.sourceforge.atunes.model.ColumnSort columnSort75 = net.sourceforge.atunes.model.ColumnSort.DESCENDING;
        columnBean71.setSort(columnSort75);
        int int77 = columnBean71.getOrder();
        net.sourceforge.atunes.model.ColumnSort columnSort78 = columnBean71.getSort();
        columnBean57.setSort(columnSort78);
        columnBean35.setSort(columnSort78);
        columnBean16.setSort(columnSort78);
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "./title" + "'", str12, "./title");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "./title" + "'", str14, "./title");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(columnSort24);
        org.junit.Assert.assertNull(columnSort25);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + submissionState37 + "' != '" + net.sourceforge.atunes.model.SubmissionState.PENDING + "'", submissionState37.equals(net.sourceforge.atunes.model.SubmissionState.PENDING));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(columnSort56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(columnSort65);
        org.junit.Assert.assertNull(columnSort66);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + columnSort75 + "' != '" + net.sourceforge.atunes.model.ColumnSort.DESCENDING + "'", columnSort75.equals(net.sourceforge.atunes.model.ColumnSort.DESCENDING));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertTrue("'" + columnSort78 + "' != '" + net.sourceforge.atunes.model.ColumnSort.DESCENDING + "'", columnSort78.equals(net.sourceforge.atunes.model.ColumnSort.DESCENDING));
    }

    @Test
    public void test0927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0927");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata1 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata1.setAlbumArtist("");
        boolean boolean4 = fontSettings0.equals((java.lang.Object) cDMetadata1);
        java.lang.String str5 = cDMetadata1.getAlbum();
        java.lang.String str6 = cDMetadata1.getAlbum();
        java.lang.String str8 = cDMetadata1.getTitle(1);
        java.util.List<java.lang.String> strList9 = cDMetadata1.getTrackNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata10 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str11 = cDMetadata10.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata12 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata12.setAlbumArtist("");
        java.lang.String str15 = cDMetadata12.getGenre();
        java.lang.String[] strArray17 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        cDMetadata12.setTrackNames((java.util.List<java.lang.String>) strList18);
        cDMetadata10.setComposerNames((java.util.List<java.lang.String>) strList18);
        cDMetadata1.setComposerNames((java.util.List<java.lang.String>) strList18);
        cDMetadata1.setDisc(10);
        java.util.List<java.lang.String> strList25 = null;
        cDMetadata1.setTrackNames(strList25);
        java.lang.String str27 = cDMetadata1.getAlbum();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(strList9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test0928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0928");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        int int12 = applicationVersion9.getMajorNumber();
        int int13 = applicationVersion9.getMinorNumber();
        java.lang.String str14 = applicationVersion9.getName();
        int int15 = applicationVersion9.getMinorNumber();
        int int16 = applicationVersion9.getMajorNumber();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType21 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion26 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType21, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str27 = applicationVersion26.getDate();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType28 = applicationVersion26.getVersionType();
        java.lang.String str29 = applicationVersion26.toShortString();
        java.lang.String str30 = applicationVersion26.getDate();
        int int31 = applicationVersion9.compareTo(applicationVersion26);
        java.lang.String str32 = applicationVersion9.getName();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "mpc" + "'", str14, "mpc");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + versionType21 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType21.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "./title" + "'", str27, "./title");
        org.junit.Assert.assertTrue("'" + versionType28 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType28.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1.0.0 " + "'", str29, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "./title" + "'", str30, "./title");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "mpc" + "'", str32, "mpc");
    }

    @Test
    public void test0929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0929");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata1 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata1.setAlbumArtist("");
        boolean boolean4 = fontSettings0.equals((java.lang.Object) cDMetadata1);
        fontSettings0.setUseFontSmoothing(true);
        net.sourceforge.atunes.model.IFontBean iFontBean7 = fontSettings0.getFont();
        net.sourceforge.atunes.model.CDMetadata cDMetadata8 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str9 = cDMetadata8.getGenre();
        java.util.List<java.lang.String> strList10 = cDMetadata8.getComposerNames();
        java.lang.String str11 = cDMetadata8.getAlbum();
        java.util.List<java.lang.Integer> intList12 = cDMetadata8.getTracks();
        cDMetadata8.setAlbumArtist("mpc");
        java.lang.String str15 = cDMetadata8.getAlbum();
        boolean boolean16 = fontSettings0.equals((java.lang.Object) cDMetadata8);
        net.sourceforge.atunes.model.ColumnBean columnBean17 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean18 = columnBean17.isVisible();
        columnBean17.setOrder((int) (byte) -1);
        columnBean17.setVisible(false);
        net.sourceforge.atunes.model.ColumnSort columnSort23 = columnBean17.getSort();
        net.sourceforge.atunes.model.TextTagAttribute textTagAttribute24 = net.sourceforge.atunes.model.TextTagAttribute.COMPOSER;
        boolean boolean25 = columnBean17.equals((java.lang.Object) textTagAttribute24);
        columnBean17.setVisible(true);
        columnBean17.setOrder((int) (short) 100);
        boolean boolean30 = fontSettings0.equals((java.lang.Object) (short) 100);
        fontSettings0.setUseFontSmoothingSettingsFromOs(true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(iFontBean7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(strList10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(intList12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(columnSort23);
        org.junit.Assert.assertTrue("'" + textTagAttribute24 + "' != '" + net.sourceforge.atunes.model.TextTagAttribute.COMPOSER + "'", textTagAttribute24.equals(net.sourceforge.atunes.model.TextTagAttribute.COMPOSER));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test0930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0930");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList2 = throwableRankList0.getNFirstElements((int) (short) 100);
        java.lang.Throwable throwable3 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException4 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable3);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList5 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable6 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException7 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable6);
        java.lang.Throwable[] throwableArray8 = searchQuerySyntaxException7.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException9 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException7);
        java.lang.Throwable throwable10 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException11 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable10);
        java.lang.Throwable[] throwableArray12 = searchQuerySyntaxException11.getSuppressed();
        throwableRankList5.replaceItem((java.lang.Throwable) searchQuerySyntaxException7, (java.lang.Throwable) searchQuerySyntaxException11);
        searchQuerySyntaxException4.addSuppressed((java.lang.Throwable) searchQuerySyntaxException11);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException15 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException4);
        java.lang.Throwable throwable16 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException17 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable16);
        java.lang.Throwable[] throwableArray18 = searchQuerySyntaxException17.getSuppressed();
        searchQuerySyntaxException4.addSuppressed((java.lang.Throwable) searchQuerySyntaxException17);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException20 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException4);
        java.lang.Throwable throwable21 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException22 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable21);
        java.lang.Throwable[] throwableArray23 = searchQuerySyntaxException22.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException24 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException22);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException25 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException22);
        throwableRankList0.replaceItem((java.lang.Throwable) searchQuerySyntaxException4, (java.lang.Throwable) searchQuerySyntaxException25);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException27 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException25);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException28 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException27);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList29 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList31 = throwableRankList29.getNFirstElements((int) (short) 10);
        throwableRankList29.clear();
        java.util.List<java.lang.Integer> intList34 = throwableRankList29.getNFirstElementCounts(150);
        java.util.List<java.lang.Throwable> throwableList35 = throwableRankList29.getOrder();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList36 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable37 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException38 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable37);
        java.lang.Throwable[] throwableArray39 = searchQuerySyntaxException38.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException40 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException38);
        java.lang.Throwable throwable41 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException42 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable41);
        java.lang.Throwable[] throwableArray43 = searchQuerySyntaxException42.getSuppressed();
        throwableRankList36.replaceItem((java.lang.Throwable) searchQuerySyntaxException38, (java.lang.Throwable) searchQuerySyntaxException42);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException45 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException42);
        java.lang.Throwable[] throwableArray46 = searchQuerySyntaxException45.getSuppressed();
        throwableRankList29.addItem((java.lang.Throwable) searchQuerySyntaxException45);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException48 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException45);
        searchQuerySyntaxException27.addSuppressed((java.lang.Throwable) searchQuerySyntaxException45);
        org.junit.Assert.assertNotNull(throwableList2);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableList31);
        org.junit.Assert.assertNotNull(intList34);
        org.junit.Assert.assertNotNull(throwableList35);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray46);
    }

    @Test
    public void test0931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0931");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        columnBean0.setVisible(false);
        columnBean0.setWidth(0);
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType12 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion17 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType12, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str18 = applicationVersion17.getDate();
        java.lang.String str19 = applicationVersion17.toShortString();
        java.lang.String str20 = applicationVersion17.getChanges();
        boolean boolean21 = columnBean0.equals((java.lang.Object) applicationVersion17);
        int int22 = columnBean0.getOrder();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + versionType12 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType12.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "./title" + "'", str18, "./title");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1.0.0 " + "'", str19, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "./title" + "'", str20, "./title");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
    }

    @Test
    public void test0932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0932");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList3 = cDMetadata0.getTracks();
        cDMetadata0.setAlbumArtist("/rss/channel/title");
        java.lang.String str7 = cDMetadata0.getTitle((int) (short) 10);
        java.util.List<java.lang.String> strList8 = cDMetadata0.getComposerNames();
        org.junit.Assert.assertNull(intList3);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(strList8);
    }

    @Test
    public void test0933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0933");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType12 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion17 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType12, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str18 = applicationVersion17.getDate();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType19 = applicationVersion17.getVersionType();
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion24 = new net.sourceforge.atunes.model.ApplicationVersion("./summary", (int) (short) 1, 120, 35, versionType19, "hi!", "./author/name", "hi!", "10.1.1 ");
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion29 = new net.sourceforge.atunes.model.ApplicationVersion("", 0, 35, (int) (byte) -1, versionType19, "10.1.1 ", "", "/feed/entry", "net.sourceforge.atunes.model.SearchQuerySyntaxException: net.sourceforge.atunes.model.SearchQuerySyntaxException");
        org.junit.Assert.assertTrue("'" + versionType12 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType12.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "./title" + "'", str18, "./title");
        org.junit.Assert.assertTrue("'" + versionType19 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType19.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
    }

    @Test
    public void test0934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0934");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        boolean boolean1 = fontSettings0.isUseFontSmoothing();
        net.sourceforge.atunes.model.IFontBean iFontBean2 = null;
        fontSettings0.setFont(iFontBean2);
        java.lang.Object obj4 = null;
        boolean boolean5 = fontSettings0.equals(obj4);
        fontSettings0.setUseFontSmoothing(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0935");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        int int12 = applicationVersion9.getMajorNumber();
        java.lang.String str13 = applicationVersion9.toShortString();
        int int14 = applicationVersion9.getRevisionNumber();
        int int15 = applicationVersion9.getMinorNumber();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1.0.0 " + "'", str13, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test0936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0936");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType8 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion13 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType8, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str14 = applicationVersion13.getDate();
        java.lang.String str15 = applicationVersion13.toShortString();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType16 = applicationVersion13.getVersionType();
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion21 = new net.sourceforge.atunes.model.ApplicationVersion("1.0.0 ", (int) (short) 10, (int) '4', (int) '#', versionType16, "", "./enclosure/@url", "SOCKS_PROXY", "./enclosure/@url");
        java.lang.String str22 = applicationVersion21.getName();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType27 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion32 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType27, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str33 = applicationVersion32.getDate();
        java.lang.String str34 = applicationVersion32.toShortString();
        java.lang.String str35 = applicationVersion32.getChanges();
        int int36 = applicationVersion32.getMinorNumber();
        java.lang.String str37 = applicationVersion32.getChanges();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType42 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion47 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType42, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str48 = applicationVersion47.getDate();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType49 = applicationVersion47.getVersionType();
        java.lang.String str50 = applicationVersion47.getDownloadURL();
        java.lang.String str51 = applicationVersion47.getDirectDownloadURL();
        int int52 = applicationVersion32.compareTo(applicationVersion47);
        int int53 = applicationVersion21.compareTo(applicationVersion47);
        java.lang.String str54 = applicationVersion47.getChanges();
        int int55 = applicationVersion47.getMinorNumber();
        org.junit.Assert.assertTrue("'" + versionType8 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType8.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "./title" + "'", str14, "./title");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1.0.0 " + "'", str15, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + versionType16 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType16.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + versionType27 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType27.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "./title" + "'", str33, "./title");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1.0.0 " + "'", str34, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "./title" + "'", str35, "./title");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "./title" + "'", str37, "./title");
        org.junit.Assert.assertTrue("'" + versionType42 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType42.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "./title" + "'", str48, "./title");
        org.junit.Assert.assertTrue("'" + versionType49 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType49.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "./description" + "'", str50, "./description");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "./pubDate" + "'", str51, "./pubDate");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "./title" + "'", str54, "./title");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
    }

    @Test
    public void test0937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0937");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        fontSettings0.setUseFontSmoothing(false);
        net.sourceforge.atunes.model.IFontBean iFontBean3 = fontSettings0.getFont();
        boolean boolean4 = fontSettings0.isUseFontSmoothing();
        fontSettings0.setUseFontSmoothing(true);
        net.sourceforge.atunes.model.IFontBean iFontBean7 = fontSettings0.getFont();
        boolean boolean8 = fontSettings0.isUseFontSmoothing();
        net.sourceforge.atunes.model.IFontBean iFontBean9 = null;
        fontSettings0.setFont(iFontBean9);
        boolean boolean11 = fontSettings0.isUseFontSmoothing();
        org.junit.Assert.assertNull(iFontBean3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(iFontBean7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test0938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0938");
        net.sourceforge.atunes.model.LookAndFeelBean lookAndFeelBean0 = new net.sourceforge.atunes.model.LookAndFeelBean();
        java.lang.String str1 = lookAndFeelBean0.getSkin();
        lookAndFeelBean0.setSkin("./enclosure/@url");
        java.lang.String str4 = lookAndFeelBean0.getSkin();
        java.lang.String str5 = lookAndFeelBean0.getSkin();
        java.lang.String str6 = lookAndFeelBean0.getSkin();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "./enclosure/@url" + "'", str4, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "./enclosure/@url" + "'", str5, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "./enclosure/@url" + "'", str6, "./enclosure/@url");
    }

    @Test
    public void test0939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0939");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str1 = feedType0.getDescriptionXPath();
        java.lang.String str2 = feedType0.getTypeXPath();
        java.lang.String str3 = feedType0.getDurationXPath();
        java.lang.String str4 = feedType0.getUrlXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "./description" + "'", str1, "./description");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "./enclosure/@type" + "'", str2, "./enclosure/@type");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "./duration" + "'", str3, "./duration");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "./enclosure/@url" + "'", str4, "./enclosure/@url");
    }

    @Test
    public void test0940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0940");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.lang.String str4 = cDMetadata0.getTitle((int) (byte) -1);
        net.sourceforge.atunes.model.CDMetadata cDMetadata5 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata5.setAlbumArtist("");
        java.lang.String str9 = cDMetadata5.getTitle((int) (byte) -1);
        java.lang.String[] strArray11 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        cDMetadata5.setTrackNames((java.util.List<java.lang.String>) strList12);
        cDMetadata0.setArtistNames((java.util.List<java.lang.String>) strList12);
        java.lang.String str17 = cDMetadata0.getTitle((int) (byte) -1);
        net.sourceforge.atunes.model.CDMetadata cDMetadata18 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata18.setAlbumArtist("");
        java.lang.String str22 = cDMetadata18.getTitle((int) (byte) -1);
        java.lang.String[] strArray24 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        cDMetadata18.setTrackNames((java.util.List<java.lang.String>) strList25);
        net.sourceforge.atunes.model.CDMetadata cDMetadata28 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata28.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList31 = cDMetadata28.getTracks();
        cDMetadata28.setAlbumArtist("/rss/channel/title");
        java.util.List<java.lang.String> strList34 = cDMetadata28.getTrackNames();
        java.lang.String str35 = cDMetadata28.getAlbumArtist();
        cDMetadata28.setYear((-1));
        java.util.List<java.lang.String> strList38 = cDMetadata28.getTrackNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata39 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str40 = cDMetadata39.getGenre();
        java.util.List<java.lang.String> strList41 = cDMetadata39.getComposerNames();
        java.lang.String str42 = cDMetadata39.getAlbum();
        java.util.List<java.lang.Integer> intList43 = cDMetadata39.getTracks();
        int int44 = cDMetadata39.getDisc();
        net.sourceforge.atunes.model.CDMetadata cDMetadata45 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str46 = cDMetadata45.getGenre();
        java.util.List<java.lang.String> strList47 = cDMetadata45.getComposerNames();
        java.lang.String str48 = cDMetadata45.getAlbum();
        net.sourceforge.atunes.model.CDMetadata cDMetadata49 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata49.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList52 = cDMetadata49.getTracks();
        cDMetadata49.setAlbumArtist("/rss/channel/title");
        java.util.List<java.lang.String> strList55 = cDMetadata49.getTrackNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata56 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata56.setAlbumArtist("");
        java.lang.String str59 = cDMetadata56.getGenre();
        java.lang.String[] strArray61 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        cDMetadata56.setTrackNames((java.util.List<java.lang.String>) strList62);
        cDMetadata49.setTrackNames((java.util.List<java.lang.String>) strList62);
        cDMetadata45.setTrackNames((java.util.List<java.lang.String>) strList62);
        java.util.List<java.lang.String> strList67 = cDMetadata45.getTrackNames();
        cDMetadata39.setComposerNames(strList67);
        net.sourceforge.atunes.model.CDMetadata cDMetadata69 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata69.setAlbumArtist("");
        java.lang.String str72 = cDMetadata69.getGenre();
        int int73 = cDMetadata69.getYear();
        int int74 = cDMetadata69.getYear();
        net.sourceforge.atunes.model.CDMetadata cDMetadata75 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str76 = cDMetadata75.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata77 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata77.setAlbumArtist("");
        java.lang.String str80 = cDMetadata77.getGenre();
        java.lang.String[] strArray82 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList83 = new java.util.ArrayList<java.lang.String>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList83, strArray82);
        cDMetadata77.setTrackNames((java.util.List<java.lang.String>) strList83);
        cDMetadata75.setComposerNames((java.util.List<java.lang.String>) strList83);
        cDMetadata69.setTrackNames((java.util.List<java.lang.String>) strList83);
        cDMetadata39.setTrackNames((java.util.List<java.lang.String>) strList83);
        cDMetadata28.setTrackNames((java.util.List<java.lang.String>) strList83);
        cDMetadata18.setComposerNames((java.util.List<java.lang.String>) strList83);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList83);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(intList31);
        org.junit.Assert.assertNull(strList34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "/rss/channel/title" + "'", str35, "/rss/channel/title");
        org.junit.Assert.assertNull(strList38);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(strList41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(intList43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(strList47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(intList52);
        org.junit.Assert.assertNull(strList55);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strList67);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
    }

    @Test
    public void test0941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0941");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.ATOM;
        java.lang.String str1 = feedType0.getUrlXPath();
        java.lang.String str2 = feedType0.getDescriptionXPath();
        java.lang.String str3 = feedType0.getNameXPath();
        java.lang.String str4 = feedType0.getAuthorXPath();
        java.lang.String str5 = feedType0.getAuthorXPath();
        java.lang.String str6 = feedType0.getTypeXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.ATOM + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.ATOM));
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "./summary" + "'", str2, "./summary");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "/feed/title" + "'", str3, "/feed/title");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "./author/name" + "'", str4, "./author/name");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "./author/name" + "'", str5, "./author/name");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "./link[@rel='enclosure']/@type" + "'", str6, "./link[@rel='enclosure']/@type");
    }

    @Test
    public void test0942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0942");
        net.sourceforge.atunes.model.LookAndFeelBean lookAndFeelBean0 = new net.sourceforge.atunes.model.LookAndFeelBean();
        java.lang.String str1 = lookAndFeelBean0.getSkin();
        lookAndFeelBean0.setSkin("./enclosure/@url");
        lookAndFeelBean0.setSkin("hi!");
        java.lang.String str6 = lookAndFeelBean0.getSkin();
        java.lang.String str7 = lookAndFeelBean0.getName();
        lookAndFeelBean0.setName("HTTP_PROXY");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test0943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0943");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList2 = throwableRankList0.getNFirstElements((int) (short) 10);
        int int3 = throwableRankList0.size();
        int int4 = throwableRankList0.size();
        java.util.List<java.lang.Throwable> throwableList5 = throwableRankList0.getOrder();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList6 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable7 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException8 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable7);
        java.lang.Throwable[] throwableArray9 = searchQuerySyntaxException8.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException10 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException8);
        java.lang.Throwable throwable11 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException12 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable11);
        java.lang.Throwable[] throwableArray13 = searchQuerySyntaxException12.getSuppressed();
        throwableRankList6.replaceItem((java.lang.Throwable) searchQuerySyntaxException8, (java.lang.Throwable) searchQuerySyntaxException12);
        java.lang.Throwable[] throwableArray15 = searchQuerySyntaxException8.getSuppressed();
        java.lang.Throwable[] throwableArray16 = searchQuerySyntaxException8.getSuppressed();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList17 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList19 = throwableRankList17.getNFirstElements((int) (short) 10);
        int int20 = throwableRankList17.size();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList21 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable22 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException23 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable22);
        java.lang.Throwable[] throwableArray24 = searchQuerySyntaxException23.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException25 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException23);
        java.lang.Throwable throwable26 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException27 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable26);
        java.lang.Throwable[] throwableArray28 = searchQuerySyntaxException27.getSuppressed();
        throwableRankList21.replaceItem((java.lang.Throwable) searchQuerySyntaxException23, (java.lang.Throwable) searchQuerySyntaxException27);
        java.lang.Throwable[] throwableArray30 = searchQuerySyntaxException23.getSuppressed();
        java.lang.Integer int31 = throwableRankList17.getCount((java.lang.Throwable) searchQuerySyntaxException23);
        throwableRankList0.replaceItem((java.lang.Throwable) searchQuerySyntaxException8, (java.lang.Throwable) searchQuerySyntaxException23);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList33 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList35 = throwableRankList33.getNFirstElements((int) (short) 10);
        throwableRankList33.clear();
        java.util.List<java.lang.Integer> intList38 = throwableRankList33.getNFirstElementCounts(0);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList39 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable40 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException41 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable40);
        java.lang.Throwable[] throwableArray42 = searchQuerySyntaxException41.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException43 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException41);
        java.lang.Throwable throwable44 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException45 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable44);
        java.lang.Throwable[] throwableArray46 = searchQuerySyntaxException45.getSuppressed();
        throwableRankList39.replaceItem((java.lang.Throwable) searchQuerySyntaxException41, (java.lang.Throwable) searchQuerySyntaxException45);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException48 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException45);
        java.lang.Integer int49 = throwableRankList33.getCount((java.lang.Throwable) searchQuerySyntaxException48);
        java.lang.Throwable throwable50 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException51 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable50);
        java.lang.Throwable[] throwableArray52 = searchQuerySyntaxException51.getSuppressed();
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException53 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException51);
        java.lang.Integer int54 = throwableRankList33.getCount((java.lang.Throwable) searchQuerySyntaxException53);
        java.lang.Throwable throwable55 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException56 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable55);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList57 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable58 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException59 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable58);
        java.lang.Throwable[] throwableArray60 = searchQuerySyntaxException59.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException61 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException59);
        java.lang.Throwable throwable62 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException63 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable62);
        java.lang.Throwable[] throwableArray64 = searchQuerySyntaxException63.getSuppressed();
        throwableRankList57.replaceItem((java.lang.Throwable) searchQuerySyntaxException59, (java.lang.Throwable) searchQuerySyntaxException63);
        searchQuerySyntaxException56.addSuppressed((java.lang.Throwable) searchQuerySyntaxException63);
        java.lang.Throwable[] throwableArray67 = searchQuerySyntaxException56.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException68 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException56);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList69 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable70 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException71 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable70);
        java.lang.Throwable[] throwableArray72 = searchQuerySyntaxException71.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException73 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException71);
        java.lang.Throwable throwable74 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException75 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable74);
        java.lang.Throwable[] throwableArray76 = searchQuerySyntaxException75.getSuppressed();
        throwableRankList69.replaceItem((java.lang.Throwable) searchQuerySyntaxException71, (java.lang.Throwable) searchQuerySyntaxException75);
        java.lang.Throwable[] throwableArray78 = searchQuerySyntaxException71.getSuppressed();
        throwableRankList33.replaceItem((java.lang.Throwable) searchIndexNotAvailableException68, (java.lang.Throwable) searchQuerySyntaxException71);
        java.lang.Integer int80 = throwableRankList0.getCount((java.lang.Throwable) searchIndexNotAvailableException68);
        java.lang.Class<?> wildcardClass81 = searchIndexNotAvailableException68.getClass();
        org.junit.Assert.assertNotNull(throwableList2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(throwableList5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableList19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNull(int31);
        org.junit.Assert.assertNotNull(throwableList35);
        org.junit.Assert.assertNotNull(intList38);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNull(int49);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNull(int54);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNull(int80);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0944");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.lang.String str3 = cDMetadata0.getGenre();
        int int4 = cDMetadata0.getYear();
        int int5 = cDMetadata0.getYear();
        net.sourceforge.atunes.model.CDMetadata cDMetadata6 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str7 = cDMetadata6.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata8 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata8.setAlbumArtist("");
        java.lang.String str11 = cDMetadata8.getGenre();
        java.lang.String[] strArray13 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        cDMetadata8.setTrackNames((java.util.List<java.lang.String>) strList14);
        cDMetadata6.setComposerNames((java.util.List<java.lang.String>) strList14);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList14);
        net.sourceforge.atunes.model.CDMetadata cDMetadata19 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata19.setAlbumArtist("");
        java.lang.String str22 = cDMetadata19.getGenre();
        int int23 = cDMetadata19.getYear();
        int int24 = cDMetadata19.getYear();
        cDMetadata19.setGenre("./enclosure/@url");
        java.util.List<java.lang.String> strList27 = null;
        cDMetadata19.setTrackNames(strList27);
        cDMetadata19.setAlbumArtist("");
        net.sourceforge.atunes.model.CDMetadata cDMetadata31 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str32 = cDMetadata31.getGenre();
        java.util.List<java.lang.String> strList33 = cDMetadata31.getComposerNames();
        java.lang.String str34 = cDMetadata31.getAlbum();
        java.util.List<java.lang.Integer> intList35 = cDMetadata31.getTracks();
        net.sourceforge.atunes.model.CDMetadata cDMetadata36 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata36.setAlbumArtist("");
        java.lang.String str40 = cDMetadata36.getTitle((int) (byte) -1);
        java.lang.String[] strArray42 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        cDMetadata36.setTrackNames((java.util.List<java.lang.String>) strList43);
        cDMetadata31.setTrackNames((java.util.List<java.lang.String>) strList43);
        cDMetadata31.setYear((int) (short) 1);
        int int49 = cDMetadata31.getYear();
        java.lang.String str50 = cDMetadata31.getGenre();
        cDMetadata31.setAlbum("/rss/channel/title");
        java.util.List<java.lang.String> strList53 = cDMetadata31.getTrackNames();
        cDMetadata19.setComposerNames(strList53);
        cDMetadata0.setArtistNames(strList53);
        net.sourceforge.atunes.model.CDMetadata cDMetadata56 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str57 = cDMetadata56.getGenre();
        java.util.List<java.lang.String> strList58 = cDMetadata56.getComposerNames();
        java.lang.String str59 = cDMetadata56.getAlbum();
        net.sourceforge.atunes.model.CDMetadata cDMetadata60 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata60.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList63 = cDMetadata60.getTracks();
        cDMetadata60.setAlbumArtist("/rss/channel/title");
        java.util.List<java.lang.String> strList66 = cDMetadata60.getTrackNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata67 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata67.setAlbumArtist("");
        java.lang.String str70 = cDMetadata67.getGenre();
        java.lang.String[] strArray72 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList73 = new java.util.ArrayList<java.lang.String>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList73, strArray72);
        cDMetadata67.setTrackNames((java.util.List<java.lang.String>) strList73);
        cDMetadata60.setTrackNames((java.util.List<java.lang.String>) strList73);
        cDMetadata56.setTrackNames((java.util.List<java.lang.String>) strList73);
        cDMetadata0.setArtistNames((java.util.List<java.lang.String>) strList73);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(strList33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(intList35);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(strList53);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(strList58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNull(intList63);
        org.junit.Assert.assertNull(strList66);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    public void test0945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0945");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable1 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException2 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable1);
        java.lang.Throwable[] throwableArray3 = searchQuerySyntaxException2.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException4 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException2);
        java.lang.Throwable throwable5 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException6 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable5);
        java.lang.Throwable[] throwableArray7 = searchQuerySyntaxException6.getSuppressed();
        throwableRankList0.replaceItem((java.lang.Throwable) searchQuerySyntaxException2, (java.lang.Throwable) searchQuerySyntaxException6);
        java.util.List<java.lang.Throwable> throwableList9 = throwableRankList0.getOrder();
        java.lang.Throwable throwable10 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException11 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable10);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList12 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable13 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException14 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable13);
        java.lang.Throwable[] throwableArray15 = searchQuerySyntaxException14.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException16 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException14);
        java.lang.Throwable throwable17 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException18 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable17);
        java.lang.Throwable[] throwableArray19 = searchQuerySyntaxException18.getSuppressed();
        throwableRankList12.replaceItem((java.lang.Throwable) searchQuerySyntaxException14, (java.lang.Throwable) searchQuerySyntaxException18);
        searchQuerySyntaxException11.addSuppressed((java.lang.Throwable) searchQuerySyntaxException18);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException22 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException11);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException23 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException11);
        java.lang.Integer int24 = throwableRankList0.getCount((java.lang.Throwable) searchIndexNotAvailableException23);
        java.util.List<java.lang.Integer> intList26 = throwableRankList0.getNFirstElementCounts((int) '#');
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList27 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        net.sourceforge.atunes.model.InconsistentRepositoryException inconsistentRepositoryException28 = new net.sourceforge.atunes.model.InconsistentRepositoryException();
        net.sourceforge.atunes.model.InconsistentRepositoryException inconsistentRepositoryException29 = new net.sourceforge.atunes.model.InconsistentRepositoryException();
        throwableRankList27.replaceItem((java.lang.Throwable) inconsistentRepositoryException28, (java.lang.Throwable) inconsistentRepositoryException29);
        throwableRankList0.addItem((java.lang.Throwable) inconsistentRepositoryException28);
        java.util.List<java.lang.Throwable> throwableList33 = throwableRankList0.getNFirstElements((int) (byte) 100);
        java.lang.Throwable throwable34 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException35 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable34);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList36 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable37 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException38 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable37);
        java.lang.Throwable[] throwableArray39 = searchQuerySyntaxException38.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException40 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException38);
        java.lang.Throwable throwable41 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException42 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable41);
        java.lang.Throwable[] throwableArray43 = searchQuerySyntaxException42.getSuppressed();
        throwableRankList36.replaceItem((java.lang.Throwable) searchQuerySyntaxException38, (java.lang.Throwable) searchQuerySyntaxException42);
        searchQuerySyntaxException35.addSuppressed((java.lang.Throwable) searchQuerySyntaxException42);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException46 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException35);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException47 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException46);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException48 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException47);
        java.lang.Integer int49 = throwableRankList0.getCount((java.lang.Throwable) searchIndexNotAvailableException48);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableList9);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNotNull(intList26);
        org.junit.Assert.assertNotNull(throwableList33);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNull(int49);
    }

    @Test
    public void test0946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0946");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.lang.String str3 = cDMetadata0.getGenre();
        java.lang.String[] strArray5 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList6);
        cDMetadata0.setAlbumArtist("net.sourceforge.atunes.model.InconsistentRepositoryException");
        cDMetadata0.setAlbum("");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test0947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0947");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        java.lang.String str12 = applicationVersion9.getChanges();
        int int13 = applicationVersion9.getMinorNumber();
        java.lang.String str14 = applicationVersion9.getChanges();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType19 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion24 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType19, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str25 = applicationVersion24.getDate();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType26 = applicationVersion24.getVersionType();
        java.lang.String str27 = applicationVersion24.getDownloadURL();
        java.lang.String str28 = applicationVersion24.getDirectDownloadURL();
        int int29 = applicationVersion9.compareTo(applicationVersion24);
        java.lang.String str30 = applicationVersion24.getDirectDownloadURL();
        int int31 = applicationVersion24.getMajorNumber();
        java.lang.String str32 = applicationVersion24.toString();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "./title" + "'", str12, "./title");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "./title" + "'", str14, "./title");
        org.junit.Assert.assertTrue("'" + versionType19 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType19.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "./title" + "'", str25, "./title");
        org.junit.Assert.assertTrue("'" + versionType26 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType26.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "./description" + "'", str27, "./description");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "./pubDate" + "'", str28, "./pubDate");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "./pubDate" + "'", str30, "./pubDate");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1.0.0 mpc " + "'", str32, "1.0.0 mpc ");
    }

    @Test
    public void test0948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0948");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        columnBean0.setVisible(false);
        net.sourceforge.atunes.model.ColumnSort columnSort6 = columnBean0.getSort();
        net.sourceforge.atunes.model.TextTagAttribute textTagAttribute7 = net.sourceforge.atunes.model.TextTagAttribute.COMPOSER;
        boolean boolean8 = columnBean0.equals((java.lang.Object) textTagAttribute7);
        columnBean0.setVisible(true);
        columnBean0.setOrder((int) (short) 100);
        columnBean0.setOrder(100);
        int int15 = columnBean0.getOrder();
        columnBean0.setVisible(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(columnSort6);
        org.junit.Assert.assertTrue("'" + textTagAttribute7 + "' != '" + net.sourceforge.atunes.model.TextTagAttribute.COMPOSER + "'", textTagAttribute7.equals(net.sourceforge.atunes.model.TextTagAttribute.COMPOSER));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
    }

    @Test
    public void test0949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0949");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.lang.String str3 = cDMetadata0.getGenre();
        int int4 = cDMetadata0.getYear();
        int int5 = cDMetadata0.getYear();
        net.sourceforge.atunes.model.CDMetadata cDMetadata6 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str7 = cDMetadata6.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata8 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata8.setAlbumArtist("");
        java.lang.String str11 = cDMetadata8.getGenre();
        java.lang.String[] strArray13 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        cDMetadata8.setTrackNames((java.util.List<java.lang.String>) strList14);
        cDMetadata6.setComposerNames((java.util.List<java.lang.String>) strList14);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList14);
        net.sourceforge.atunes.model.CDMetadata cDMetadata19 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str20 = cDMetadata19.getGenre();
        java.util.List<java.lang.String> strList21 = cDMetadata19.getComposerNames();
        java.lang.String str22 = cDMetadata19.getAlbum();
        java.util.List<java.lang.Integer> intList23 = cDMetadata19.getTracks();
        int int24 = cDMetadata19.getDisc();
        java.lang.String[] strArray32 = new java.lang.String[] { "net.sourceforge.atunes.model.InconsistentRepositoryException", "./title", "1.0.0 ", "./title", "./duration", "mpc", "net.sourceforge.atunes.model.InconsistentRepositoryException" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        cDMetadata19.setArtistNames((java.util.List<java.lang.String>) strList33);
        cDMetadata0.setArtistNames((java.util.List<java.lang.String>) strList33);
        cDMetadata0.setAlbumArtist("10.100.150 ./description ");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(strList21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(intList23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test0950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0950");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        columnBean0.setOrder((int) (byte) -1);
        columnBean0.setVisible(false);
        net.sourceforge.atunes.model.ColumnSort columnSort6 = columnBean0.getSort();
        net.sourceforge.atunes.model.TextTagAttribute textTagAttribute7 = net.sourceforge.atunes.model.TextTagAttribute.COMPOSER;
        boolean boolean8 = columnBean0.equals((java.lang.Object) textTagAttribute7);
        columnBean0.setVisible(true);
        columnBean0.setOrder((int) (short) 100);
        columnBean0.setOrder(100);
        columnBean0.setVisible(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(columnSort6);
        org.junit.Assert.assertTrue("'" + textTagAttribute7 + "' != '" + net.sourceforge.atunes.model.TextTagAttribute.COMPOSER + "'", textTagAttribute7.equals(net.sourceforge.atunes.model.TextTagAttribute.COMPOSER));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0951");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList3 = cDMetadata0.getTracks();
        cDMetadata0.setAlbumArtist("/rss/channel/title");
        java.util.List<java.lang.String> strList6 = cDMetadata0.getTrackNames();
        int int7 = cDMetadata0.getDisc();
        cDMetadata0.setGenre("./author/name");
        java.lang.String str10 = cDMetadata0.getAlbum();
        org.junit.Assert.assertNull(intList3);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test0952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0952");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.lang.String str4 = cDMetadata0.getTitle((int) (byte) -1);
        java.lang.String[] strArray6 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList7);
        cDMetadata0.setAlbumArtist("/rss/channel/item");
        java.util.List<java.lang.Integer> intList12 = cDMetadata0.getTracks();
        java.lang.String str14 = cDMetadata0.getTitle(100);
        net.sourceforge.atunes.model.ColumnBean columnBean15 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean16 = columnBean15.isVisible();
        net.sourceforge.atunes.model.SubmissionState submissionState17 = net.sourceforge.atunes.model.SubmissionState.PENDING;
        boolean boolean18 = columnBean15.equals((java.lang.Object) submissionState17);
        net.sourceforge.atunes.model.CDMetadata cDMetadata19 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata19.setAlbumArtist("");
        java.lang.String str23 = cDMetadata19.getTitle((int) (byte) -1);
        net.sourceforge.atunes.model.CDMetadata cDMetadata24 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata24.setAlbumArtist("");
        java.lang.String str28 = cDMetadata24.getTitle((int) (byte) -1);
        java.lang.String[] strArray30 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        cDMetadata24.setTrackNames((java.util.List<java.lang.String>) strList31);
        cDMetadata19.setArtistNames((java.util.List<java.lang.String>) strList31);
        boolean boolean35 = columnBean15.equals((java.lang.Object) strList31);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList31);
        net.sourceforge.atunes.model.FontSettings fontSettings37 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata38 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata38.setAlbumArtist("");
        boolean boolean41 = fontSettings37.equals((java.lang.Object) cDMetadata38);
        java.lang.String str42 = cDMetadata38.getGenre();
        cDMetadata38.setAlbum("net.sourceforge.atunes.model.SearchQuerySyntaxException");
        java.util.List<java.lang.String> strList45 = cDMetadata38.getArtistNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata46 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str47 = cDMetadata46.getGenre();
        java.util.List<java.lang.String> strList48 = cDMetadata46.getComposerNames();
        java.lang.String str49 = cDMetadata46.getAlbum();
        java.util.List<java.lang.Integer> intList50 = cDMetadata46.getTracks();
        net.sourceforge.atunes.model.CDMetadata cDMetadata51 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata51.setAlbumArtist("");
        java.lang.String str55 = cDMetadata51.getTitle((int) (byte) -1);
        java.lang.String[] strArray57 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        cDMetadata51.setTrackNames((java.util.List<java.lang.String>) strList58);
        cDMetadata46.setTrackNames((java.util.List<java.lang.String>) strList58);
        cDMetadata46.setYear((int) (short) 1);
        int int64 = cDMetadata46.getYear();
        java.lang.String str65 = cDMetadata46.getGenre();
        cDMetadata46.setYear((int) (short) 10);
        net.sourceforge.atunes.model.CDMetadata cDMetadata68 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata68.setAlbumArtist("");
        java.lang.String str71 = cDMetadata68.getGenre();
        java.lang.String[] strArray73 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList74 = new java.util.ArrayList<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList74, strArray73);
        cDMetadata68.setTrackNames((java.util.List<java.lang.String>) strList74);
        cDMetadata46.setTrackNames((java.util.List<java.lang.String>) strList74);
        cDMetadata38.setTrackNames((java.util.List<java.lang.String>) strList74);
        java.util.List<java.lang.String> strList79 = cDMetadata38.getComposerNames();
        java.lang.String[] strArray94 = new java.lang.String[] { "./enclosure/@type", "net.sourceforge.atunes.model.SearchIndexNotAvailableException: net.sourceforge.atunes.model.SearchQuerySyntaxException: net.sourceforge.atunes.model.SearchQuerySyntaxException", "/rss/channel/item", "./title", "SOCKS_PROXY", "mpc", "mp4", "./link[@rel='enclosure']/@type", "/rss/channel/title", "HTTP_PROXY", "HTTP_PROXY", "/feed/title", "10.52.35  ", "./author" };
        java.util.ArrayList<java.lang.String> strList95 = new java.util.ArrayList<java.lang.String>();
        boolean boolean96 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList95, strArray94);
        cDMetadata38.setTrackNames((java.util.List<java.lang.String>) strList95);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList95);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(intList12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + submissionState17 + "' != '" + net.sourceforge.atunes.model.SubmissionState.PENDING + "'", submissionState17.equals(net.sourceforge.atunes.model.SubmissionState.PENDING));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(strList45);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(strList48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(intList50);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNull(strList79);
        org.junit.Assert.assertNotNull(strArray94);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
    }

    @Test
    public void test0953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0953");
        net.sourceforge.atunes.model.LocalAudioObjectFormat localAudioObjectFormat0 = net.sourceforge.atunes.model.LocalAudioObjectFormat.REAL_2;
        java.lang.String str1 = localAudioObjectFormat0.getExtension();
        java.lang.String str2 = localAudioObjectFormat0.getExtension();
        org.junit.Assert.assertTrue("'" + localAudioObjectFormat0 + "' != '" + net.sourceforge.atunes.model.LocalAudioObjectFormat.REAL_2 + "'", localAudioObjectFormat0.equals(net.sourceforge.atunes.model.LocalAudioObjectFormat.REAL_2));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "rm" + "'", str1, "rm");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "rm" + "'", str2, "rm");
    }

    @Test
    public void test0954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0954");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata2 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata2.setAlbumArtist("");
        java.lang.String str5 = cDMetadata2.getGenre();
        java.lang.String[] strArray7 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        cDMetadata2.setTrackNames((java.util.List<java.lang.String>) strList8);
        cDMetadata0.setComposerNames((java.util.List<java.lang.String>) strList8);
        java.lang.String str12 = cDMetadata0.getAlbum();
        cDMetadata0.setAlbum("./duration");
        cDMetadata0.setAlbumArtist("HTTP_PROXY");
        java.util.List<java.lang.String> strList17 = cDMetadata0.getComposerNames();
        cDMetadata0.setAlbumArtist("flv");
        cDMetadata0.setGenre("1.0.0 mpc ");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strList17);
    }

    @Test
    public void test0955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0955");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList2 = throwableRankList0.getNFirstElements((int) (short) 10);
        throwableRankList0.clear();
        java.util.List<java.lang.Integer> intList5 = throwableRankList0.getNFirstElementCounts(150);
        java.util.List<java.lang.Throwable> throwableList6 = throwableRankList0.getOrder();
        throwableRankList0.clear();
        java.util.List<java.lang.Integer> intList9 = throwableRankList0.getNFirstElementCounts(120);
        java.util.List<java.lang.Integer> intList11 = throwableRankList0.getNFirstElementCounts(0);
        int int12 = throwableRankList0.size();
        java.util.List<java.lang.Throwable> throwableList14 = throwableRankList0.getNFirstElements(150);
        java.util.List<java.lang.Throwable> throwableList16 = throwableRankList0.getNFirstElements((int) (short) 10);
        org.junit.Assert.assertNotNull(throwableList2);
        org.junit.Assert.assertNotNull(intList5);
        org.junit.Assert.assertNotNull(throwableList6);
        org.junit.Assert.assertNotNull(intList9);
        org.junit.Assert.assertNotNull(intList11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(throwableList14);
        org.junit.Assert.assertNotNull(throwableList16);
    }

    @Test
    public void test0956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0956");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.lang.String str3 = cDMetadata0.getAlbum();
        net.sourceforge.atunes.model.CDMetadata cDMetadata4 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata4.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList7 = cDMetadata4.getTracks();
        cDMetadata4.setAlbumArtist("/rss/channel/title");
        java.util.List<java.lang.String> strList10 = cDMetadata4.getTrackNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata11 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata11.setAlbumArtist("");
        java.lang.String str14 = cDMetadata11.getGenre();
        java.lang.String[] strArray16 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        cDMetadata11.setTrackNames((java.util.List<java.lang.String>) strList17);
        cDMetadata4.setTrackNames((java.util.List<java.lang.String>) strList17);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList17);
        java.util.List<java.lang.String> strList22 = cDMetadata0.getTrackNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata23 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str24 = cDMetadata23.getGenre();
        java.util.List<java.lang.String> strList25 = cDMetadata23.getComposerNames();
        java.lang.String str26 = cDMetadata23.getAlbum();
        java.util.List<java.lang.Integer> intList27 = cDMetadata23.getTracks();
        net.sourceforge.atunes.model.CDMetadata cDMetadata28 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata28.setAlbumArtist("");
        java.lang.String str32 = cDMetadata28.getTitle((int) (byte) -1);
        java.lang.String[] strArray34 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        cDMetadata28.setTrackNames((java.util.List<java.lang.String>) strList35);
        cDMetadata23.setTrackNames((java.util.List<java.lang.String>) strList35);
        cDMetadata23.setYear((int) (short) 1);
        int int41 = cDMetadata23.getYear();
        cDMetadata23.setAlbumArtist("net.sourceforge.atunes.model.InconsistentRepositoryException");
        cDMetadata23.setAlbum("./title");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList46 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList48 = throwableRankList46.getNFirstElements((int) (short) 10);
        int int49 = throwableRankList46.size();
        int int50 = throwableRankList46.size();
        java.util.List<java.lang.Throwable> throwableList51 = throwableRankList46.getOrder();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList52 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable53 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException54 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable53);
        java.lang.Throwable[] throwableArray55 = searchQuerySyntaxException54.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException56 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException54);
        java.lang.Throwable throwable57 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException58 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable57);
        java.lang.Throwable[] throwableArray59 = searchQuerySyntaxException58.getSuppressed();
        throwableRankList52.replaceItem((java.lang.Throwable) searchQuerySyntaxException54, (java.lang.Throwable) searchQuerySyntaxException58);
        java.lang.Throwable[] throwableArray61 = searchQuerySyntaxException54.getSuppressed();
        java.lang.Throwable[] throwableArray62 = searchQuerySyntaxException54.getSuppressed();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList63 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList65 = throwableRankList63.getNFirstElements((int) (short) 10);
        int int66 = throwableRankList63.size();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList67 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable68 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException69 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable68);
        java.lang.Throwable[] throwableArray70 = searchQuerySyntaxException69.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException71 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException69);
        java.lang.Throwable throwable72 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException73 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable72);
        java.lang.Throwable[] throwableArray74 = searchQuerySyntaxException73.getSuppressed();
        throwableRankList67.replaceItem((java.lang.Throwable) searchQuerySyntaxException69, (java.lang.Throwable) searchQuerySyntaxException73);
        java.lang.Throwable[] throwableArray76 = searchQuerySyntaxException69.getSuppressed();
        java.lang.Integer int77 = throwableRankList63.getCount((java.lang.Throwable) searchQuerySyntaxException69);
        throwableRankList46.replaceItem((java.lang.Throwable) searchQuerySyntaxException54, (java.lang.Throwable) searchQuerySyntaxException69);
        java.lang.Throwable throwable79 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException80 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable79);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList81 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable82 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException83 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable82);
        java.lang.Throwable[] throwableArray84 = searchQuerySyntaxException83.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException85 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException83);
        java.lang.Throwable throwable86 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException87 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable86);
        java.lang.Throwable[] throwableArray88 = searchQuerySyntaxException87.getSuppressed();
        throwableRankList81.replaceItem((java.lang.Throwable) searchQuerySyntaxException83, (java.lang.Throwable) searchQuerySyntaxException87);
        searchQuerySyntaxException80.addSuppressed((java.lang.Throwable) searchQuerySyntaxException87);
        java.lang.Throwable[] throwableArray91 = searchQuerySyntaxException87.getSuppressed();
        throwableRankList46.addItem((java.lang.Throwable) searchQuerySyntaxException87);
        java.util.List<java.lang.Integer> intList94 = throwableRankList46.getNFirstElementCounts((int) (short) -1);
        cDMetadata23.setTracks(intList94);
        cDMetadata0.setTracks(intList94);
        int int97 = cDMetadata0.getYear();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(intList7);
        org.junit.Assert.assertNull(strList10);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(strList25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(intList27);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(throwableList48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(throwableList51);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableList65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNull(int77);
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertNotNull(throwableArray88);
        org.junit.Assert.assertNotNull(throwableArray91);
        org.junit.Assert.assertNotNull(intList94);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
    }

    @Test
    public void test0957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0957");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList2 = throwableRankList0.getNFirstElements((int) (short) 10);
        throwableRankList0.clear();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList4 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable5 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException6 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable5);
        java.lang.Throwable[] throwableArray7 = searchQuerySyntaxException6.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException8 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException6);
        java.lang.Throwable throwable9 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException10 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable9);
        java.lang.Throwable[] throwableArray11 = searchQuerySyntaxException10.getSuppressed();
        throwableRankList4.replaceItem((java.lang.Throwable) searchQuerySyntaxException6, (java.lang.Throwable) searchQuerySyntaxException10);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList13 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable14 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException15 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable14);
        java.lang.Throwable[] throwableArray16 = searchQuerySyntaxException15.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException17 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException15);
        java.lang.Throwable throwable18 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException19 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable18);
        java.lang.Throwable[] throwableArray20 = searchQuerySyntaxException19.getSuppressed();
        throwableRankList13.replaceItem((java.lang.Throwable) searchQuerySyntaxException15, (java.lang.Throwable) searchQuerySyntaxException19);
        java.lang.Integer int22 = throwableRankList4.getCount((java.lang.Throwable) searchQuerySyntaxException19);
        throwableRankList0.addItem((java.lang.Throwable) searchQuerySyntaxException19);
        java.util.List<java.lang.Integer> intList25 = throwableRankList0.getNFirstElementCounts((int) (byte) -1);
        org.junit.Assert.assertNotNull(throwableList2);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertNotNull(intList25);
    }

    @Test
    public void test0958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0958");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType11 = applicationVersion9.getVersionType();
        java.lang.String str12 = applicationVersion9.getDownloadURL();
        java.lang.String str13 = applicationVersion9.getDirectDownloadURL();
        java.lang.String str14 = applicationVersion9.getDownloadURL();
        java.lang.String str15 = applicationVersion9.getChanges();
        java.lang.String str16 = applicationVersion9.getDownloadURL();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertTrue("'" + versionType11 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType11.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "./description" + "'", str12, "./description");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "./pubDate" + "'", str13, "./pubDate");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "./description" + "'", str14, "./description");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "./title" + "'", str15, "./title");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "./description" + "'", str16, "./description");
    }

    @Test
    public void test0959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0959");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable1 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException2 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable1);
        java.lang.Throwable[] throwableArray3 = searchQuerySyntaxException2.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException4 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException2);
        java.lang.Throwable throwable5 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException6 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable5);
        java.lang.Throwable[] throwableArray7 = searchQuerySyntaxException6.getSuppressed();
        throwableRankList0.replaceItem((java.lang.Throwable) searchQuerySyntaxException2, (java.lang.Throwable) searchQuerySyntaxException6);
        java.util.List<java.lang.Throwable> throwableList9 = throwableRankList0.getOrder();
        java.lang.Throwable throwable10 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException11 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable10);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList12 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable13 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException14 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable13);
        java.lang.Throwable[] throwableArray15 = searchQuerySyntaxException14.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException16 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException14);
        java.lang.Throwable throwable17 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException18 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable17);
        java.lang.Throwable[] throwableArray19 = searchQuerySyntaxException18.getSuppressed();
        throwableRankList12.replaceItem((java.lang.Throwable) searchQuerySyntaxException14, (java.lang.Throwable) searchQuerySyntaxException18);
        searchQuerySyntaxException11.addSuppressed((java.lang.Throwable) searchQuerySyntaxException18);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException22 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException11);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException23 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException11);
        java.lang.Integer int24 = throwableRankList0.getCount((java.lang.Throwable) searchIndexNotAvailableException23);
        java.util.List<java.lang.Integer> intList26 = throwableRankList0.getNFirstElementCounts((int) '#');
        java.lang.Throwable throwable27 = null;
        java.lang.Integer int28 = throwableRankList0.getCount(throwable27);
        int int29 = throwableRankList0.size();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableList9);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNotNull(intList26);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test0960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0960");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType12 = applicationVersion9.getVersionType();
        int int13 = applicationVersion9.getMinorNumber();
        java.lang.String str14 = applicationVersion9.toShortString();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + versionType12 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType12.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1.0.0 " + "'", str14, "1.0.0 ");
    }

    @Test
    public void test0961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0961");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        int int12 = applicationVersion9.getMajorNumber();
        java.lang.String str13 = applicationVersion9.toShortString();
        net.sourceforge.atunes.model.ArtistViewMode artistViewMode14 = net.sourceforge.atunes.model.ArtistViewMode.BOTH;
        boolean boolean15 = applicationVersion9.equals((java.lang.Object) artistViewMode14);
        int int16 = applicationVersion9.getMajorNumber();
        java.lang.String str17 = applicationVersion9.getChanges();
        java.lang.String str18 = applicationVersion9.getName();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1.0.0 " + "'", str13, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + artistViewMode14 + "' != '" + net.sourceforge.atunes.model.ArtistViewMode.BOTH + "'", artistViewMode14.equals(net.sourceforge.atunes.model.ArtistViewMode.BOTH));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "./title" + "'", str17, "./title");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "mpc" + "'", str18, "mpc");
    }

    @Test
    public void test0962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0962");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType10 = applicationVersion9.getVersionType();
        java.lang.String str11 = applicationVersion9.getName();
        java.lang.String str12 = applicationVersion9.toShortString();
        java.lang.String str13 = applicationVersion9.getDownloadURL();
        java.lang.String str14 = applicationVersion9.getChanges();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertTrue("'" + versionType10 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType10.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mpc" + "'", str11, "mpc");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1.0.0 " + "'", str12, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "./description" + "'", str13, "./description");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "./title" + "'", str14, "./title");
    }

    @Test
    public void test0963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0963");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList3 = cDMetadata0.getTracks();
        java.util.List<java.lang.String> strList4 = cDMetadata0.getArtistNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata5 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata5.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList8 = cDMetadata5.getTracks();
        cDMetadata5.setAlbumArtist("/rss/channel/title");
        java.util.List<java.lang.String> strList11 = cDMetadata5.getTrackNames();
        cDMetadata5.setAlbum("/rss/channel/item");
        cDMetadata5.setAlbum("");
        net.sourceforge.atunes.model.CDMetadata cDMetadata16 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata16.setAlbumArtist("");
        java.lang.String str20 = cDMetadata16.getTitle((int) (byte) -1);
        java.lang.String[] strArray22 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        cDMetadata16.setTrackNames((java.util.List<java.lang.String>) strList23);
        cDMetadata16.setAlbumArtist("/rss/channel/item");
        java.util.List<java.lang.Integer> intList28 = cDMetadata16.getTracks();
        java.lang.String str30 = cDMetadata16.getTitle(100);
        net.sourceforge.atunes.model.ColumnBean columnBean31 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean32 = columnBean31.isVisible();
        net.sourceforge.atunes.model.SubmissionState submissionState33 = net.sourceforge.atunes.model.SubmissionState.PENDING;
        boolean boolean34 = columnBean31.equals((java.lang.Object) submissionState33);
        net.sourceforge.atunes.model.CDMetadata cDMetadata35 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata35.setAlbumArtist("");
        java.lang.String str39 = cDMetadata35.getTitle((int) (byte) -1);
        net.sourceforge.atunes.model.CDMetadata cDMetadata40 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata40.setAlbumArtist("");
        java.lang.String str44 = cDMetadata40.getTitle((int) (byte) -1);
        java.lang.String[] strArray46 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        cDMetadata40.setTrackNames((java.util.List<java.lang.String>) strList47);
        cDMetadata35.setArtistNames((java.util.List<java.lang.String>) strList47);
        boolean boolean51 = columnBean31.equals((java.lang.Object) strList47);
        cDMetadata16.setTrackNames((java.util.List<java.lang.String>) strList47);
        cDMetadata5.setArtistNames((java.util.List<java.lang.String>) strList47);
        cDMetadata0.setComposerNames((java.util.List<java.lang.String>) strList47);
        java.util.List<java.lang.String> strList55 = cDMetadata0.getComposerNames();
        org.junit.Assert.assertNull(intList3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNull(intList8);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(intList28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + submissionState33 + "' != '" + net.sourceforge.atunes.model.SubmissionState.PENDING + "'", submissionState33.equals(net.sourceforge.atunes.model.SubmissionState.PENDING));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strList55);
    }

    @Test
    public void test0964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0964");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable1 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException2 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable1);
        java.lang.Throwable[] throwableArray3 = searchQuerySyntaxException2.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException4 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException2);
        java.lang.Throwable throwable5 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException6 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable5);
        java.lang.Throwable[] throwableArray7 = searchQuerySyntaxException6.getSuppressed();
        throwableRankList0.replaceItem((java.lang.Throwable) searchQuerySyntaxException2, (java.lang.Throwable) searchQuerySyntaxException6);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList9 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable10 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException11 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable10);
        java.lang.Throwable[] throwableArray12 = searchQuerySyntaxException11.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException13 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException11);
        java.lang.Throwable throwable14 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException15 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable14);
        java.lang.Throwable[] throwableArray16 = searchQuerySyntaxException15.getSuppressed();
        throwableRankList9.replaceItem((java.lang.Throwable) searchQuerySyntaxException11, (java.lang.Throwable) searchQuerySyntaxException15);
        java.lang.Integer int18 = throwableRankList0.getCount((java.lang.Throwable) searchQuerySyntaxException15);
        java.lang.Throwable throwable19 = null;
        java.lang.Throwable throwable20 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException21 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable20);
        throwableRankList0.replaceItem(throwable19, (java.lang.Throwable) searchQuerySyntaxException21);
        int int23 = throwableRankList0.size();
        java.lang.Throwable throwable24 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException25 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable24);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList26 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable27 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException28 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable27);
        java.lang.Throwable[] throwableArray29 = searchQuerySyntaxException28.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException30 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException28);
        java.lang.Throwable throwable31 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException32 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable31);
        java.lang.Throwable[] throwableArray33 = searchQuerySyntaxException32.getSuppressed();
        throwableRankList26.replaceItem((java.lang.Throwable) searchQuerySyntaxException28, (java.lang.Throwable) searchQuerySyntaxException32);
        searchQuerySyntaxException25.addSuppressed((java.lang.Throwable) searchQuerySyntaxException32);
        java.lang.Throwable[] throwableArray36 = searchQuerySyntaxException25.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException37 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException25);
        throwableRankList0.addItem((java.lang.Throwable) searchIndexNotAvailableException37);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray36);
    }

    @Test
    public void test0965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0965");
        java.lang.Throwable throwable0 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException1 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable0);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList2 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable3 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException4 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable3);
        java.lang.Throwable[] throwableArray5 = searchQuerySyntaxException4.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException6 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException4);
        java.lang.Throwable throwable7 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException8 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable7);
        java.lang.Throwable[] throwableArray9 = searchQuerySyntaxException8.getSuppressed();
        throwableRankList2.replaceItem((java.lang.Throwable) searchQuerySyntaxException4, (java.lang.Throwable) searchQuerySyntaxException8);
        searchQuerySyntaxException1.addSuppressed((java.lang.Throwable) searchQuerySyntaxException8);
        java.lang.Throwable[] throwableArray12 = searchQuerySyntaxException1.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException13 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException1);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException14 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchIndexNotAvailableException13);
        java.lang.String str15 = searchQuerySyntaxException14.toString();
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "net.sourceforge.atunes.model.SearchQuerySyntaxException: net.sourceforge.atunes.model.SearchIndexNotAvailableException: net.sourceforge.atunes.model.SearchQuerySyntaxException" + "'", str15, "net.sourceforge.atunes.model.SearchQuerySyntaxException: net.sourceforge.atunes.model.SearchIndexNotAvailableException: net.sourceforge.atunes.model.SearchQuerySyntaxException");
    }

    @Test
    public void test0966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0966");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList3 = cDMetadata0.getTracks();
        cDMetadata0.setAlbumArtist("/rss/channel/title");
        java.util.List<java.lang.String> strList6 = cDMetadata0.getTrackNames();
        cDMetadata0.setGenre("");
        cDMetadata0.setYear((int) ' ');
        java.util.List<java.lang.String> strList11 = cDMetadata0.getTrackNames();
        net.sourceforge.atunes.model.FontSettings fontSettings12 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata13 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata13.setAlbumArtist("");
        boolean boolean16 = fontSettings12.equals((java.lang.Object) cDMetadata13);
        java.lang.String str17 = cDMetadata13.getAlbum();
        java.lang.String str18 = cDMetadata13.getAlbum();
        java.lang.String str20 = cDMetadata13.getTitle(1);
        java.util.List<java.lang.String> strList21 = cDMetadata13.getTrackNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata22 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str23 = cDMetadata22.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata24 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata24.setAlbumArtist("");
        java.lang.String str27 = cDMetadata24.getGenre();
        java.lang.String[] strArray29 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        cDMetadata24.setTrackNames((java.util.List<java.lang.String>) strList30);
        cDMetadata22.setComposerNames((java.util.List<java.lang.String>) strList30);
        cDMetadata13.setComposerNames((java.util.List<java.lang.String>) strList30);
        cDMetadata13.setDisc(10);
        cDMetadata13.setYear((int) (byte) 100);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList39 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable40 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException41 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable40);
        java.lang.Throwable[] throwableArray42 = searchQuerySyntaxException41.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException43 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException41);
        java.lang.Throwable throwable44 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException45 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable44);
        java.lang.Throwable[] throwableArray46 = searchQuerySyntaxException45.getSuppressed();
        throwableRankList39.replaceItem((java.lang.Throwable) searchQuerySyntaxException41, (java.lang.Throwable) searchQuerySyntaxException45);
        java.util.List<java.lang.Integer> intList49 = throwableRankList39.getNFirstElementCounts(0);
        cDMetadata13.setTracks(intList49);
        cDMetadata0.setTracks(intList49);
        org.junit.Assert.assertNull(intList3);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(strList21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(intList49);
    }

    @Test
    public void test0967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0967");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.lang.String str4 = cDMetadata0.getTitle((int) (byte) -1);
        java.lang.String[] strArray6 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList7);
        cDMetadata0.setAlbumArtist("/rss/channel/item");
        java.util.List<java.lang.Integer> intList12 = cDMetadata0.getTracks();
        java.util.List<java.lang.Integer> intList13 = cDMetadata0.getTracks();
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(intList12);
        org.junit.Assert.assertNull(intList13);
    }

    @Test
    public void test0968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0968");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.lang.String str3 = cDMetadata0.getAlbum();
        java.util.List<java.lang.Integer> intList4 = cDMetadata0.getTracks();
        net.sourceforge.atunes.model.CDMetadata cDMetadata5 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata5.setAlbumArtist("");
        java.lang.String str9 = cDMetadata5.getTitle((int) (byte) -1);
        java.lang.String[] strArray11 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        cDMetadata5.setTrackNames((java.util.List<java.lang.String>) strList12);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList12);
        cDMetadata0.setYear((int) (short) 1);
        int int18 = cDMetadata0.getYear();
        java.lang.String str19 = cDMetadata0.getGenre();
        cDMetadata0.setYear((int) (short) 10);
        net.sourceforge.atunes.model.CDMetadata cDMetadata22 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata22.setAlbumArtist("");
        java.lang.String str25 = cDMetadata22.getGenre();
        java.lang.String[] strArray27 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        cDMetadata22.setTrackNames((java.util.List<java.lang.String>) strList28);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList28);
        int int32 = cDMetadata0.getDisc();
        java.util.List<java.lang.String> strList33 = cDMetadata0.getComposerNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata34 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata34.setAlbumArtist("");
        java.lang.String str37 = cDMetadata34.getGenre();
        java.util.List<java.lang.String> strList38 = cDMetadata34.getTrackNames();
        java.util.List<java.lang.String> strList39 = cDMetadata34.getTrackNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata40 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata40.setAlbumArtist("");
        java.lang.String str44 = cDMetadata40.getTitle((int) (byte) -1);
        net.sourceforge.atunes.model.CDMetadata cDMetadata45 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata45.setAlbumArtist("");
        java.lang.String str48 = cDMetadata45.getGenre();
        int int49 = cDMetadata45.getYear();
        int int50 = cDMetadata45.getYear();
        net.sourceforge.atunes.model.CDMetadata cDMetadata51 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str52 = cDMetadata51.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata53 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata53.setAlbumArtist("");
        java.lang.String str56 = cDMetadata53.getGenre();
        java.lang.String[] strArray58 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList59 = new java.util.ArrayList<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList59, strArray58);
        cDMetadata53.setTrackNames((java.util.List<java.lang.String>) strList59);
        cDMetadata51.setComposerNames((java.util.List<java.lang.String>) strList59);
        cDMetadata45.setTrackNames((java.util.List<java.lang.String>) strList59);
        net.sourceforge.atunes.model.CDMetadata cDMetadata64 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str65 = cDMetadata64.getGenre();
        java.util.List<java.lang.String> strList66 = cDMetadata64.getComposerNames();
        java.lang.String str67 = cDMetadata64.getAlbum();
        java.util.List<java.lang.Integer> intList68 = cDMetadata64.getTracks();
        int int69 = cDMetadata64.getDisc();
        java.lang.String[] strArray77 = new java.lang.String[] { "net.sourceforge.atunes.model.InconsistentRepositoryException", "./title", "1.0.0 ", "./title", "./duration", "mpc", "net.sourceforge.atunes.model.InconsistentRepositoryException" };
        java.util.ArrayList<java.lang.String> strList78 = new java.util.ArrayList<java.lang.String>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList78, strArray77);
        cDMetadata64.setArtistNames((java.util.List<java.lang.String>) strList78);
        cDMetadata45.setArtistNames((java.util.List<java.lang.String>) strList78);
        cDMetadata40.setComposerNames((java.util.List<java.lang.String>) strList78);
        cDMetadata34.setTrackNames((java.util.List<java.lang.String>) strList78);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList78);
        java.lang.String str86 = cDMetadata0.getTitle(150);
        java.lang.String str87 = cDMetadata0.getAlbumArtist();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(intList4);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNull(strList33);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(strList38);
        org.junit.Assert.assertNull(strList39);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNull(strList66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNull(intList68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNull(str87);
    }

    @Test
    public void test0969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0969");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable1 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException2 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable1);
        java.lang.Throwable[] throwableArray3 = searchQuerySyntaxException2.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException4 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException2);
        java.lang.Throwable throwable5 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException6 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable5);
        java.lang.Throwable[] throwableArray7 = searchQuerySyntaxException6.getSuppressed();
        throwableRankList0.replaceItem((java.lang.Throwable) searchQuerySyntaxException2, (java.lang.Throwable) searchQuerySyntaxException6);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList9 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable10 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException11 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable10);
        java.lang.Throwable[] throwableArray12 = searchQuerySyntaxException11.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException13 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException11);
        java.lang.Throwable throwable14 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException15 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable14);
        java.lang.Throwable[] throwableArray16 = searchQuerySyntaxException15.getSuppressed();
        throwableRankList9.replaceItem((java.lang.Throwable) searchQuerySyntaxException11, (java.lang.Throwable) searchQuerySyntaxException15);
        java.lang.Integer int18 = throwableRankList0.getCount((java.lang.Throwable) searchQuerySyntaxException15);
        java.util.List<java.lang.Throwable> throwableList20 = throwableRankList0.getNFirstElements((int) (byte) -1);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList21 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable22 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException23 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable22);
        java.lang.Throwable[] throwableArray24 = searchQuerySyntaxException23.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException25 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException23);
        java.lang.Throwable throwable26 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException27 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable26);
        java.lang.Throwable[] throwableArray28 = searchQuerySyntaxException27.getSuppressed();
        throwableRankList21.replaceItem((java.lang.Throwable) searchQuerySyntaxException23, (java.lang.Throwable) searchQuerySyntaxException27);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList30 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable31 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException32 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable31);
        java.lang.Throwable[] throwableArray33 = searchQuerySyntaxException32.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException34 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException32);
        java.lang.Throwable throwable35 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException36 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable35);
        java.lang.Throwable[] throwableArray37 = searchQuerySyntaxException36.getSuppressed();
        throwableRankList30.replaceItem((java.lang.Throwable) searchQuerySyntaxException32, (java.lang.Throwable) searchQuerySyntaxException36);
        java.lang.Integer int39 = throwableRankList21.getCount((java.lang.Throwable) searchQuerySyntaxException36);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList40 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList42 = throwableRankList40.getNFirstElements((int) (short) 10);
        throwableRankList40.clear();
        int int44 = throwableRankList40.size();
        java.lang.Throwable throwable45 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException46 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable45);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList47 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable48 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException49 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable48);
        java.lang.Throwable[] throwableArray50 = searchQuerySyntaxException49.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException51 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException49);
        java.lang.Throwable throwable52 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException53 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable52);
        java.lang.Throwable[] throwableArray54 = searchQuerySyntaxException53.getSuppressed();
        throwableRankList47.replaceItem((java.lang.Throwable) searchQuerySyntaxException49, (java.lang.Throwable) searchQuerySyntaxException53);
        searchQuerySyntaxException46.addSuppressed((java.lang.Throwable) searchQuerySyntaxException53);
        java.lang.Integer int57 = throwableRankList40.getCount((java.lang.Throwable) searchQuerySyntaxException53);
        searchQuerySyntaxException36.addSuppressed((java.lang.Throwable) searchQuerySyntaxException53);
        java.lang.Throwable throwable59 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException60 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable59);
        java.lang.Throwable[] throwableArray61 = searchQuerySyntaxException60.getSuppressed();
        searchQuerySyntaxException53.addSuppressed((java.lang.Throwable) searchQuerySyntaxException60);
        java.lang.Integer int63 = throwableRankList0.getCount((java.lang.Throwable) searchQuerySyntaxException60);
        java.util.List<java.lang.Throwable> throwableList65 = throwableRankList0.getNFirstElements(0);
        java.util.List<java.lang.Throwable> throwableList67 = throwableRankList0.getNFirstElements(100);
        java.util.List<java.lang.Throwable> throwableList69 = throwableRankList0.getNFirstElements(52);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(throwableList20);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNull(int39);
        org.junit.Assert.assertNotNull(throwableList42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNull(int57);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNull(int63);
        org.junit.Assert.assertNotNull(throwableList65);
        org.junit.Assert.assertNotNull(throwableList67);
        org.junit.Assert.assertNotNull(throwableList69);
    }

    @Test
    public void test0970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0970");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        cDMetadata0.setDisc(150);
        cDMetadata0.setDisc((int) (byte) -1);
        cDMetadata0.setDisc((int) (byte) 1);
    }

    @Test
    public void test0971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0971");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata2 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata2.setAlbumArtist("");
        java.lang.String str5 = cDMetadata2.getGenre();
        java.lang.String[] strArray7 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        cDMetadata2.setTrackNames((java.util.List<java.lang.String>) strList8);
        cDMetadata0.setComposerNames((java.util.List<java.lang.String>) strList8);
        java.lang.String str12 = cDMetadata0.getAlbum();
        java.lang.String str14 = cDMetadata0.getComposer(2);
        net.sourceforge.atunes.model.CDMetadata cDMetadata15 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str16 = cDMetadata15.getGenre();
        java.util.List<java.lang.String> strList17 = cDMetadata15.getComposerNames();
        java.lang.String str18 = cDMetadata15.getAlbum();
        java.util.List<java.lang.Integer> intList19 = cDMetadata15.getTracks();
        int int20 = cDMetadata15.getYear();
        net.sourceforge.atunes.model.CDMetadata cDMetadata21 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str22 = cDMetadata21.getGenre();
        java.util.List<java.lang.String> strList23 = cDMetadata21.getComposerNames();
        java.lang.String str24 = cDMetadata21.getAlbum();
        java.util.List<java.lang.Integer> intList25 = cDMetadata21.getTracks();
        net.sourceforge.atunes.model.CDMetadata cDMetadata26 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata26.setAlbumArtist("");
        java.lang.String str30 = cDMetadata26.getTitle((int) (byte) -1);
        java.lang.String[] strArray32 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        cDMetadata26.setTrackNames((java.util.List<java.lang.String>) strList33);
        cDMetadata21.setTrackNames((java.util.List<java.lang.String>) strList33);
        cDMetadata21.setYear((int) (short) 1);
        int int39 = cDMetadata21.getYear();
        java.lang.String str40 = cDMetadata21.getGenre();
        cDMetadata21.setYear((int) (short) 10);
        net.sourceforge.atunes.model.CDMetadata cDMetadata43 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata43.setAlbumArtist("");
        java.lang.String str46 = cDMetadata43.getGenre();
        java.lang.String[] strArray48 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        cDMetadata43.setTrackNames((java.util.List<java.lang.String>) strList49);
        cDMetadata21.setTrackNames((java.util.List<java.lang.String>) strList49);
        cDMetadata15.setComposerNames((java.util.List<java.lang.String>) strList49);
        java.lang.String[] strArray71 = new java.lang.String[] { "mpc", "1.0.0 ", "hi!", "/feed/title", "net.sourceforge.atunes.model.SearchQuerySyntaxException", "./updated", "./pubDate", "./updated", "rm", "/rss/channel/title", "net.sourceforge.atunes.model.SearchIndexNotAvailableException: net.sourceforge.atunes.model.SearchQuerySyntaxException", "mac", "mpc", "/rss/channel/item", "./author", "", "1.0.0 " };
        java.util.ArrayList<java.lang.String> strList72 = new java.util.ArrayList<java.lang.String>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList72, strArray71);
        cDMetadata15.setTrackNames((java.util.List<java.lang.String>) strList72);
        net.sourceforge.atunes.model.FontSettings fontSettings75 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata76 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata76.setAlbumArtist("");
        boolean boolean79 = fontSettings75.equals((java.lang.Object) cDMetadata76);
        java.lang.String str80 = cDMetadata76.getAlbum();
        java.lang.String str81 = cDMetadata76.getAlbum();
        java.lang.String str83 = cDMetadata76.getTitle(1);
        java.util.List<java.lang.String> strList84 = cDMetadata76.getTrackNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata85 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str86 = cDMetadata85.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata87 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata87.setAlbumArtist("");
        java.lang.String str90 = cDMetadata87.getGenre();
        java.lang.String[] strArray92 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList93 = new java.util.ArrayList<java.lang.String>();
        boolean boolean94 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList93, strArray92);
        cDMetadata87.setTrackNames((java.util.List<java.lang.String>) strList93);
        cDMetadata85.setComposerNames((java.util.List<java.lang.String>) strList93);
        cDMetadata76.setComposerNames((java.util.List<java.lang.String>) strList93);
        cDMetadata15.setArtistNames((java.util.List<java.lang.String>) strList93);
        cDMetadata0.setArtistNames((java.util.List<java.lang.String>) strList93);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(intList19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(strList23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(intList25);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNull(strList84);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertNotNull(strArray92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
    }

    @Test
    public void test0972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0972");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str1 = feedType0.getUrlXPath();
        java.lang.String str2 = feedType0.getNameXPath();
        java.lang.String str3 = feedType0.getDescriptionXPath();
        java.lang.String str4 = feedType0.getTypeXPath();
        java.lang.String str5 = feedType0.getEntryXPath();
        java.lang.String str6 = feedType0.getDescriptionXPath();
        java.lang.String str7 = feedType0.getTypeXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "./enclosure/@url" + "'", str1, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "/rss/channel/title" + "'", str2, "/rss/channel/title");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "./description" + "'", str3, "./description");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "./enclosure/@type" + "'", str4, "./enclosure/@type");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/rss/channel/item" + "'", str5, "/rss/channel/item");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "./description" + "'", str6, "./description");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "./enclosure/@type" + "'", str7, "./enclosure/@type");
    }

    @Test
    public void test0973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0973");
        net.sourceforge.atunes.model.LookAndFeelBean lookAndFeelBean0 = new net.sourceforge.atunes.model.LookAndFeelBean();
        java.lang.String str1 = lookAndFeelBean0.getSkin();
        lookAndFeelBean0.setName("net.sourceforge.atunes.model.SearchQuerySyntaxException");
        lookAndFeelBean0.setSkin("");
        java.lang.String str6 = lookAndFeelBean0.getSkin();
        java.lang.String str7 = lookAndFeelBean0.getSkin();
        lookAndFeelBean0.setName("wav");
        lookAndFeelBean0.setSkin("./updated");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test0974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0974");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable1 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException2 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable1);
        java.lang.Throwable[] throwableArray3 = searchQuerySyntaxException2.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException4 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException2);
        java.lang.Throwable throwable5 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException6 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable5);
        java.lang.Throwable[] throwableArray7 = searchQuerySyntaxException6.getSuppressed();
        throwableRankList0.replaceItem((java.lang.Throwable) searchQuerySyntaxException2, (java.lang.Throwable) searchQuerySyntaxException6);
        java.util.List<java.lang.Throwable> throwableList9 = throwableRankList0.getOrder();
        int int10 = throwableRankList0.size();
        java.util.List<java.lang.Throwable> throwableList12 = throwableRankList0.getNFirstElements(1);
        java.util.List<java.lang.Integer> intList14 = throwableRankList0.getNFirstElementCounts(0);
        int int15 = throwableRankList0.size();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableList9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(throwableList12);
        org.junit.Assert.assertNotNull(intList14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test0975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0975");
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList0 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList2 = throwableRankList0.getNFirstElements((int) (short) 10);
        int int3 = throwableRankList0.size();
        int int4 = throwableRankList0.size();
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList5 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList7 = throwableRankList5.getNFirstElements((int) (short) 10);
        int int8 = throwableRankList5.size();
        int int9 = throwableRankList5.size();
        java.lang.Throwable throwable10 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException11 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable10);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList12 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable13 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException14 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable13);
        java.lang.Throwable[] throwableArray15 = searchQuerySyntaxException14.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException16 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException14);
        java.lang.Throwable throwable17 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException18 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable17);
        java.lang.Throwable[] throwableArray19 = searchQuerySyntaxException18.getSuppressed();
        throwableRankList12.replaceItem((java.lang.Throwable) searchQuerySyntaxException14, (java.lang.Throwable) searchQuerySyntaxException18);
        searchQuerySyntaxException11.addSuppressed((java.lang.Throwable) searchQuerySyntaxException18);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException22 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException11);
        java.lang.Integer int23 = throwableRankList5.getCount((java.lang.Throwable) searchQuerySyntaxException11);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList24 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.util.List<java.lang.Throwable> throwableList26 = throwableRankList24.getNFirstElements((int) (short) 100);
        java.lang.Throwable throwable27 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException28 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable27);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList29 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable30 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException31 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable30);
        java.lang.Throwable[] throwableArray32 = searchQuerySyntaxException31.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException33 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException31);
        java.lang.Throwable throwable34 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException35 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable34);
        java.lang.Throwable[] throwableArray36 = searchQuerySyntaxException35.getSuppressed();
        throwableRankList29.replaceItem((java.lang.Throwable) searchQuerySyntaxException31, (java.lang.Throwable) searchQuerySyntaxException35);
        searchQuerySyntaxException28.addSuppressed((java.lang.Throwable) searchQuerySyntaxException35);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException39 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException28);
        java.lang.Throwable throwable40 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException41 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable40);
        java.lang.Throwable[] throwableArray42 = searchQuerySyntaxException41.getSuppressed();
        searchQuerySyntaxException28.addSuppressed((java.lang.Throwable) searchQuerySyntaxException41);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException44 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException28);
        java.lang.Throwable throwable45 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException46 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable45);
        java.lang.Throwable[] throwableArray47 = searchQuerySyntaxException46.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException48 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException46);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException49 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException46);
        throwableRankList24.replaceItem((java.lang.Throwable) searchQuerySyntaxException28, (java.lang.Throwable) searchQuerySyntaxException49);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList51 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        net.sourceforge.atunes.model.InconsistentRepositoryException inconsistentRepositoryException52 = new net.sourceforge.atunes.model.InconsistentRepositoryException();
        net.sourceforge.atunes.model.InconsistentRepositoryException inconsistentRepositoryException53 = new net.sourceforge.atunes.model.InconsistentRepositoryException();
        throwableRankList51.replaceItem((java.lang.Throwable) inconsistentRepositoryException52, (java.lang.Throwable) inconsistentRepositoryException53);
        java.lang.Throwable throwable55 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException56 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable55);
        java.lang.Throwable[] throwableArray57 = searchQuerySyntaxException56.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException58 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException56);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException59 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException56);
        net.sourceforge.atunes.model.RankList<java.lang.Throwable> throwableRankList60 = new net.sourceforge.atunes.model.RankList<java.lang.Throwable>();
        java.lang.Throwable throwable61 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException62 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable61);
        java.lang.Throwable[] throwableArray63 = searchQuerySyntaxException62.getSuppressed();
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException64 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException62);
        java.lang.Throwable throwable65 = null;
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException66 = new net.sourceforge.atunes.model.SearchQuerySyntaxException(throwable65);
        java.lang.Throwable[] throwableArray67 = searchQuerySyntaxException66.getSuppressed();
        throwableRankList60.replaceItem((java.lang.Throwable) searchQuerySyntaxException62, (java.lang.Throwable) searchQuerySyntaxException66);
        net.sourceforge.atunes.model.SearchQuerySyntaxException searchQuerySyntaxException69 = new net.sourceforge.atunes.model.SearchQuerySyntaxException((java.lang.Throwable) searchQuerySyntaxException66);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException70 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchQuerySyntaxException69);
        net.sourceforge.atunes.model.SearchIndexNotAvailableException searchIndexNotAvailableException71 = new net.sourceforge.atunes.model.SearchIndexNotAvailableException((java.lang.Throwable) searchIndexNotAvailableException70);
        searchQuerySyntaxException59.addSuppressed((java.lang.Throwable) searchIndexNotAvailableException71);
        throwableRankList51.addItem((java.lang.Throwable) searchQuerySyntaxException59);
        throwableRankList5.replaceItem((java.lang.Throwable) searchQuerySyntaxException49, (java.lang.Throwable) searchQuerySyntaxException59);
        throwableRankList0.addItem((java.lang.Throwable) searchQuerySyntaxException49);
        java.util.List<java.lang.Throwable> throwableList76 = throwableRankList0.getOrder();
        int int77 = throwableRankList0.size();
        org.junit.Assert.assertNotNull(throwableList2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(throwableList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertNotNull(throwableList26);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableList76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
    }

    @Test
    public void test0976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0976");
        net.sourceforge.atunes.model.LookAndFeelBean lookAndFeelBean0 = new net.sourceforge.atunes.model.LookAndFeelBean();
        lookAndFeelBean0.setName("./summary");
        java.lang.String str3 = lookAndFeelBean0.getSkin();
        lookAndFeelBean0.setSkin("./summary");
        lookAndFeelBean0.setName("rm");
        java.lang.String str8 = lookAndFeelBean0.getName();
        lookAndFeelBean0.setName("SOCKS_PROXY");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "rm" + "'", str8, "rm");
    }

    @Test
    public void test0977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0977");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.lang.String str4 = cDMetadata0.getTitle((int) (byte) -1);
        java.lang.String[] strArray6 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList7);
        cDMetadata0.setAlbumArtist("/rss/channel/item");
        java.util.List<java.lang.Integer> intList12 = cDMetadata0.getTracks();
        java.lang.String str14 = cDMetadata0.getTitle(100);
        java.lang.String str15 = cDMetadata0.getAlbumArtist();
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(intList12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "/rss/channel/item" + "'", str15, "/rss/channel/item");
    }

    @Test
    public void test0978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0978");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata2 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata2.setAlbumArtist("");
        java.lang.String str5 = cDMetadata2.getGenre();
        java.lang.String[] strArray7 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        cDMetadata2.setTrackNames((java.util.List<java.lang.String>) strList8);
        cDMetadata0.setComposerNames((java.util.List<java.lang.String>) strList8);
        java.util.List<java.lang.String> strList12 = cDMetadata0.getComposerNames();
        cDMetadata0.setAlbumArtist("");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strList12);
    }

    @Test
    public void test0979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0979");
        net.sourceforge.atunes.model.LookAndFeelBean lookAndFeelBean0 = new net.sourceforge.atunes.model.LookAndFeelBean();
        java.lang.String str1 = lookAndFeelBean0.getSkin();
        lookAndFeelBean0.setName("net.sourceforge.atunes.model.SearchQuerySyntaxException");
        lookAndFeelBean0.setSkin("");
        java.lang.String str6 = lookAndFeelBean0.getSkin();
        java.lang.String str7 = lookAndFeelBean0.getSkin();
        lookAndFeelBean0.setName("flac");
        lookAndFeelBean0.setSkin("");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test0980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0980");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        int int12 = applicationVersion9.getMajorNumber();
        int int13 = applicationVersion9.getMinorNumber();
        java.lang.String str14 = applicationVersion9.getName();
        int int15 = applicationVersion9.getMinorNumber();
        java.lang.String str16 = applicationVersion9.getChanges();
        int int17 = applicationVersion9.getMinorNumber();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "mpc" + "'", str14, "mpc");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "./title" + "'", str16, "./title");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test0981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0981");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        java.lang.String str12 = applicationVersion9.toShortString();
        java.lang.String str13 = applicationVersion9.getDownloadURL();
        java.lang.String str14 = applicationVersion9.getDate();
        int int15 = applicationVersion9.getMajorNumber();
        java.lang.String str16 = applicationVersion9.getDate();
        int int17 = applicationVersion9.getMinorNumber();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType18 = applicationVersion9.getVersionType();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1.0.0 " + "'", str12, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "./description" + "'", str13, "./description");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "./title" + "'", str14, "./title");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "./title" + "'", str16, "./title");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + versionType18 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType18.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
    }

    @Test
    public void test0982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0982");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.lang.String str3 = cDMetadata0.getGenre();
        java.lang.String[] strArray5 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList6);
        cDMetadata0.setDisc(2);
        net.sourceforge.atunes.model.CDMetadata cDMetadata11 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata11.setAlbumArtist("");
        java.util.List<java.lang.Integer> intList14 = cDMetadata11.getTracks();
        cDMetadata11.setAlbumArtist("/rss/channel/title");
        java.util.List<java.lang.String> strList17 = cDMetadata11.getTrackNames();
        cDMetadata11.setAlbum("/rss/channel/item");
        java.util.List<java.lang.String> strList20 = cDMetadata11.getArtistNames();
        net.sourceforge.atunes.model.CDMetadata cDMetadata21 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str22 = cDMetadata21.getGenre();
        java.util.List<java.lang.String> strList23 = cDMetadata21.getComposerNames();
        java.lang.String str24 = cDMetadata21.getAlbum();
        java.util.List<java.lang.Integer> intList25 = cDMetadata21.getTracks();
        net.sourceforge.atunes.model.CDMetadata cDMetadata26 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata26.setAlbumArtist("");
        java.lang.String str30 = cDMetadata26.getTitle((int) (byte) -1);
        java.lang.String[] strArray32 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        cDMetadata26.setTrackNames((java.util.List<java.lang.String>) strList33);
        cDMetadata21.setTrackNames((java.util.List<java.lang.String>) strList33);
        cDMetadata21.setYear((int) (short) 1);
        int int39 = cDMetadata21.getYear();
        java.lang.String str40 = cDMetadata21.getGenre();
        cDMetadata21.setYear((int) (short) 10);
        net.sourceforge.atunes.model.CDMetadata cDMetadata43 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata43.setAlbumArtist("");
        java.lang.String str46 = cDMetadata43.getGenre();
        java.lang.String[] strArray48 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        cDMetadata43.setTrackNames((java.util.List<java.lang.String>) strList49);
        cDMetadata21.setTrackNames((java.util.List<java.lang.String>) strList49);
        cDMetadata11.setArtistNames((java.util.List<java.lang.String>) strList49);
        cDMetadata0.setArtistNames((java.util.List<java.lang.String>) strList49);
        java.util.List<java.lang.Integer> intList55 = cDMetadata0.getTracks();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(intList14);
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertNull(strList20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(strList23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(intList25);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNull(intList55);
    }

    @Test
    public void test0983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0983");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.lang.String str3 = cDMetadata0.getAlbum();
        java.util.List<java.lang.Integer> intList4 = cDMetadata0.getTracks();
        int int5 = cDMetadata0.getYear();
        net.sourceforge.atunes.model.CDMetadata cDMetadata6 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str7 = cDMetadata6.getGenre();
        java.util.List<java.lang.String> strList8 = cDMetadata6.getComposerNames();
        java.lang.String str9 = cDMetadata6.getAlbum();
        java.util.List<java.lang.Integer> intList10 = cDMetadata6.getTracks();
        net.sourceforge.atunes.model.CDMetadata cDMetadata11 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata11.setAlbumArtist("");
        java.lang.String str15 = cDMetadata11.getTitle((int) (byte) -1);
        java.lang.String[] strArray17 = new java.lang.String[] { "./title" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        cDMetadata11.setTrackNames((java.util.List<java.lang.String>) strList18);
        cDMetadata6.setTrackNames((java.util.List<java.lang.String>) strList18);
        cDMetadata6.setYear((int) (short) 1);
        int int24 = cDMetadata6.getYear();
        java.lang.String str25 = cDMetadata6.getGenre();
        cDMetadata6.setYear((int) (short) 10);
        net.sourceforge.atunes.model.CDMetadata cDMetadata28 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata28.setAlbumArtist("");
        java.lang.String str31 = cDMetadata28.getGenre();
        java.lang.String[] strArray33 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        cDMetadata28.setTrackNames((java.util.List<java.lang.String>) strList34);
        cDMetadata6.setTrackNames((java.util.List<java.lang.String>) strList34);
        cDMetadata0.setComposerNames((java.util.List<java.lang.String>) strList34);
        java.util.List<java.lang.Integer> intList39 = cDMetadata0.getTracks();
        java.lang.String str41 = cDMetadata0.getTitle((int) (byte) 10);
        cDMetadata0.setAlbumArtist("/rss/channel/title");
        cDMetadata0.setGenre("10.1.1 ");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(intList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(intList10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNull(intList39);
        org.junit.Assert.assertNull(str41);
    }

    @Test
    public void test0984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0984");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        int int12 = applicationVersion9.getMajorNumber();
        java.lang.String str13 = applicationVersion9.toShortString();
        java.lang.String str14 = applicationVersion9.getDirectDownloadURL();
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType15 = applicationVersion9.getVersionType();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1.0.0 " + "'", str13, "1.0.0 ");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "./pubDate" + "'", str14, "./pubDate");
        org.junit.Assert.assertTrue("'" + versionType15 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType15.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
    }

    @Test
    public void test0985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0985");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata1 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata1.setAlbumArtist("");
        boolean boolean4 = fontSettings0.equals((java.lang.Object) cDMetadata1);
        fontSettings0.setUseFontSmoothingSettingsFromOs(false);
        boolean boolean7 = fontSettings0.isUseFontSmoothing();
        net.sourceforge.atunes.model.PlaybackState playbackState8 = net.sourceforge.atunes.model.PlaybackState.PLAY_FINISHED;
        boolean boolean9 = fontSettings0.equals((java.lang.Object) playbackState8);
        net.sourceforge.atunes.model.CDMetadata cDMetadata10 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata10.setAlbumArtist("");
        java.lang.String str13 = cDMetadata10.getGenre();
        int int14 = cDMetadata10.getYear();
        int int15 = cDMetadata10.getYear();
        net.sourceforge.atunes.model.CDMetadata cDMetadata16 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str17 = cDMetadata16.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata18 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata18.setAlbumArtist("");
        java.lang.String str21 = cDMetadata18.getGenre();
        java.lang.String[] strArray23 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        cDMetadata18.setTrackNames((java.util.List<java.lang.String>) strList24);
        cDMetadata16.setComposerNames((java.util.List<java.lang.String>) strList24);
        cDMetadata10.setTrackNames((java.util.List<java.lang.String>) strList24);
        net.sourceforge.atunes.model.CDMetadata cDMetadata29 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str30 = cDMetadata29.getGenre();
        java.util.List<java.lang.String> strList31 = cDMetadata29.getComposerNames();
        java.lang.String str32 = cDMetadata29.getAlbum();
        java.util.List<java.lang.Integer> intList33 = cDMetadata29.getTracks();
        int int34 = cDMetadata29.getDisc();
        java.lang.String[] strArray42 = new java.lang.String[] { "net.sourceforge.atunes.model.InconsistentRepositoryException", "./title", "1.0.0 ", "./title", "./duration", "mpc", "net.sourceforge.atunes.model.InconsistentRepositoryException" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        cDMetadata29.setArtistNames((java.util.List<java.lang.String>) strList43);
        cDMetadata10.setArtistNames((java.util.List<java.lang.String>) strList43);
        net.sourceforge.atunes.model.CDMetadata cDMetadata47 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata47.setAlbumArtist("");
        java.lang.String str50 = cDMetadata47.getGenre();
        java.lang.String[] strArray52 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        cDMetadata47.setTrackNames((java.util.List<java.lang.String>) strList53);
        cDMetadata10.setTrackNames((java.util.List<java.lang.String>) strList53);
        boolean boolean57 = fontSettings0.equals((java.lang.Object) cDMetadata10);
        cDMetadata10.setGenre("");
        java.lang.String str60 = cDMetadata10.getAlbum();
        net.sourceforge.atunes.model.CDMetadata cDMetadata61 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata61.setAlbumArtist("");
        java.lang.String str64 = cDMetadata61.getGenre();
        java.lang.String[] strArray66 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        cDMetadata61.setTrackNames((java.util.List<java.lang.String>) strList67);
        java.lang.String str71 = cDMetadata61.getTitle((int) (byte) 100);
        cDMetadata61.setYear((int) '4');
        java.util.List<java.lang.String> strList74 = cDMetadata61.getComposerNames();
        int int75 = cDMetadata61.getDisc();
        java.util.List<java.lang.String> strList76 = cDMetadata61.getTrackNames();
        cDMetadata10.setArtistNames(strList76);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + playbackState8 + "' != '" + net.sourceforge.atunes.model.PlaybackState.PLAY_FINISHED + "'", playbackState8.equals(net.sourceforge.atunes.model.PlaybackState.PLAY_FINISHED));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(strList31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(intList33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNull(strList74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(strList76);
    }

    @Test
    public void test0986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0986");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.lang.String str3 = cDMetadata0.getGenre();
        int int4 = cDMetadata0.getYear();
        int int5 = cDMetadata0.getYear();
        cDMetadata0.setGenre("./enclosure/@url");
        net.sourceforge.atunes.model.CDMetadata cDMetadata8 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata8.setAlbumArtist("");
        java.lang.String str11 = cDMetadata8.getGenre();
        int int12 = cDMetadata8.getYear();
        int int13 = cDMetadata8.getYear();
        net.sourceforge.atunes.model.CDMetadata cDMetadata14 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str15 = cDMetadata14.getGenre();
        net.sourceforge.atunes.model.CDMetadata cDMetadata16 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata16.setAlbumArtist("");
        java.lang.String str19 = cDMetadata16.getGenre();
        java.lang.String[] strArray21 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        cDMetadata16.setTrackNames((java.util.List<java.lang.String>) strList22);
        cDMetadata14.setComposerNames((java.util.List<java.lang.String>) strList22);
        cDMetadata8.setTrackNames((java.util.List<java.lang.String>) strList22);
        net.sourceforge.atunes.model.CDMetadata cDMetadata27 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str28 = cDMetadata27.getGenre();
        java.util.List<java.lang.String> strList29 = cDMetadata27.getComposerNames();
        java.lang.String str30 = cDMetadata27.getAlbum();
        java.util.List<java.lang.Integer> intList31 = cDMetadata27.getTracks();
        int int32 = cDMetadata27.getDisc();
        java.lang.String[] strArray40 = new java.lang.String[] { "net.sourceforge.atunes.model.InconsistentRepositoryException", "./title", "1.0.0 ", "./title", "./duration", "mpc", "net.sourceforge.atunes.model.InconsistentRepositoryException" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        cDMetadata27.setArtistNames((java.util.List<java.lang.String>) strList41);
        cDMetadata8.setArtistNames((java.util.List<java.lang.String>) strList41);
        net.sourceforge.atunes.model.CDMetadata cDMetadata45 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata45.setAlbumArtist("");
        java.lang.String str48 = cDMetadata45.getGenre();
        java.lang.String[] strArray50 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        cDMetadata45.setTrackNames((java.util.List<java.lang.String>) strList51);
        cDMetadata8.setTrackNames((java.util.List<java.lang.String>) strList51);
        cDMetadata0.setComposerNames((java.util.List<java.lang.String>) strList51);
        cDMetadata0.setYear(150);
        java.lang.String str58 = cDMetadata0.getGenre();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(intList31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "./enclosure/@url" + "'", str58, "./enclosure/@url");
    }

    @Test
    public void test0987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0987");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.lang.String str3 = cDMetadata0.getGenre();
        java.lang.String[] strArray5 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList6);
        cDMetadata0.setYear((int) (short) 10);
        cDMetadata0.setDisc(0);
        java.util.List<java.lang.String> strList13 = cDMetadata0.getComposerNames();
        java.lang.String str14 = cDMetadata0.getAlbum();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(strList13);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test0988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0988");
        net.sourceforge.atunes.model.RankList<net.sourceforge.atunes.model.SubmissionState> submissionStateRankList0 = new net.sourceforge.atunes.model.RankList<net.sourceforge.atunes.model.SubmissionState>();
    }

    @Test
    public void test0989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0989");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str1 = feedType0.getUrlXPath();
        java.lang.String str2 = feedType0.getUrlXPath();
        java.lang.String str3 = feedType0.getDescriptionXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "./enclosure/@url" + "'", str1, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "./enclosure/@url" + "'", str2, "./enclosure/@url");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "./description" + "'", str3, "./description");
    }

    @Test
    public void test0990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0990");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType8 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion13 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType8, "mpc", "./description", "./pubDate", "./title");
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion18 = new net.sourceforge.atunes.model.ApplicationVersion("./author", 1, 3, (-1), versionType8, "mac", "HTTP_PROXY", "./description", "0.10.10 ");
        java.lang.String str19 = applicationVersion18.getDownloadURL();
        org.junit.Assert.assertTrue("'" + versionType8 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType8.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "HTTP_PROXY" + "'", str19, "HTTP_PROXY");
    }

    @Test
    public void test0991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0991");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("./title", 1, (int) (short) 0, (int) (byte) 0, versionType4, "mpc", "./description", "./pubDate", "./title");
        java.lang.String str10 = applicationVersion9.getDate();
        java.lang.String str11 = applicationVersion9.toShortString();
        int int12 = applicationVersion9.getMajorNumber();
        int int13 = applicationVersion9.getMinorNumber();
        java.lang.String str14 = applicationVersion9.getName();
        java.lang.String str15 = applicationVersion9.toShortString();
        int int16 = applicationVersion9.getRevisionNumber();
        java.lang.String str17 = applicationVersion9.getDownloadURL();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.FINAL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "./title" + "'", str10, "./title");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1.0.0 " + "'", str11, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "mpc" + "'", str14, "mpc");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1.0.0 " + "'", str15, "1.0.0 ");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "./description" + "'", str17, "./description");
    }

    @Test
    public void test0992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0992");
        net.sourceforge.atunes.model.FeedType feedType0 = net.sourceforge.atunes.model.FeedType.RSS;
        java.lang.String str1 = feedType0.getEntryXPath();
        java.lang.String str2 = feedType0.getTypeXPath();
        java.lang.String str3 = feedType0.getTypeXPath();
        java.lang.String str4 = feedType0.getDescriptionXPath();
        java.lang.String str5 = feedType0.getDescriptionXPath();
        java.lang.String str6 = feedType0.getNameXPath();
        org.junit.Assert.assertTrue("'" + feedType0 + "' != '" + net.sourceforge.atunes.model.FeedType.RSS + "'", feedType0.equals(net.sourceforge.atunes.model.FeedType.RSS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "/rss/channel/item" + "'", str1, "/rss/channel/item");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "./enclosure/@type" + "'", str2, "./enclosure/@type");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "./enclosure/@type" + "'", str3, "./enclosure/@type");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "./description" + "'", str4, "./description");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "./description" + "'", str5, "./description");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "/rss/channel/title" + "'", str6, "/rss/channel/title");
    }

    @Test
    public void test0993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0993");
        net.sourceforge.atunes.model.ColumnBean columnBean0 = new net.sourceforge.atunes.model.ColumnBean();
        boolean boolean1 = columnBean0.isVisible();
        net.sourceforge.atunes.model.SubmissionState submissionState2 = net.sourceforge.atunes.model.SubmissionState.PENDING;
        boolean boolean3 = columnBean0.equals((java.lang.Object) submissionState2);
        columnBean0.setVisible(false);
        net.sourceforge.atunes.model.ColumnSort columnSort6 = columnBean0.getSort();
        columnBean0.setWidth((int) '4');
        columnBean0.setVisible(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + submissionState2 + "' != '" + net.sourceforge.atunes.model.SubmissionState.PENDING + "'", submissionState2.equals(net.sourceforge.atunes.model.SubmissionState.PENDING));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(columnSort6);
    }

    @Test
    public void test0994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0994");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.lang.String str3 = cDMetadata0.getAlbum();
        java.util.List<java.lang.Integer> intList4 = cDMetadata0.getTracks();
        cDMetadata0.setAlbumArtist("mpc");
        java.lang.String str8 = cDMetadata0.getTitle(90);
        java.util.List<java.lang.String> strList9 = cDMetadata0.getArtistNames();
        cDMetadata0.setDisc(3);
        cDMetadata0.setYear(90);
        java.util.List<java.lang.String> strList14 = cDMetadata0.getComposerNames();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(intList4);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(strList9);
        org.junit.Assert.assertNull(strList14);
    }

    @Test
    public void test0995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0995");
        net.sourceforge.atunes.model.FontSettings fontSettings0 = new net.sourceforge.atunes.model.FontSettings();
        net.sourceforge.atunes.model.CDMetadata cDMetadata1 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata1.setAlbumArtist("");
        boolean boolean4 = fontSettings0.equals((java.lang.Object) cDMetadata1);
        fontSettings0.setUseFontSmoothingSettingsFromOs(false);
        net.sourceforge.atunes.model.IFontBean iFontBean7 = fontSettings0.getFont();
        net.sourceforge.atunes.model.ColumnBean columnBean8 = new net.sourceforge.atunes.model.ColumnBean();
        net.sourceforge.atunes.model.AudioObjectProperty audioObjectProperty9 = net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY;
        boolean boolean10 = columnBean8.equals((java.lang.Object) audioObjectProperty9);
        int int11 = columnBean8.getWidth();
        int int12 = columnBean8.getOrder();
        net.sourceforge.atunes.model.CDMetadata cDMetadata13 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata13.setAlbumArtist("");
        java.lang.String str16 = cDMetadata13.getGenre();
        int int17 = cDMetadata13.getYear();
        int int18 = cDMetadata13.getYear();
        cDMetadata13.setGenre("./enclosure/@url");
        java.util.List<java.lang.String> strList21 = null;
        cDMetadata13.setTrackNames(strList21);
        cDMetadata13.setAlbumArtist("./link[@rel='enclosure']/@type");
        boolean boolean25 = columnBean8.equals((java.lang.Object) "./link[@rel='enclosure']/@type");
        boolean boolean26 = fontSettings0.equals((java.lang.Object) "./link[@rel='enclosure']/@type");
        fontSettings0.setUseFontSmoothingSettingsFromOs(false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(iFontBean7);
        org.junit.Assert.assertTrue("'" + audioObjectProperty9 + "' != '" + net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY + "'", audioObjectProperty9.equals(net.sourceforge.atunes.model.AudioObjectProperty.NOT_LISTENED_ENTRY));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0996");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        java.lang.String str1 = cDMetadata0.getGenre();
        java.util.List<java.lang.String> strList2 = cDMetadata0.getComposerNames();
        java.lang.String str3 = cDMetadata0.getAlbum();
        java.util.List<java.lang.Integer> intList4 = cDMetadata0.getTracks();
        int int5 = cDMetadata0.getYear();
        java.util.List<java.lang.String> strList6 = cDMetadata0.getArtistNames();
        cDMetadata0.setAlbum("rm");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(intList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(strList6);
    }

    @Test
    public void test0997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0997");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType4 = net.sourceforge.atunes.model.ApplicationVersion.VersionType.BETA;
        net.sourceforge.atunes.model.ApplicationVersion applicationVersion9 = new net.sourceforge.atunes.model.ApplicationVersion("mpc", (int) (short) 0, 150, (int) (byte) -1, versionType4, "flac", "/rss/channel/item", "hi!", "./pubDate");
        net.sourceforge.atunes.model.ApplicationVersion.VersionType versionType10 = applicationVersion9.getVersionType();
        int int11 = applicationVersion9.getRevisionNumber();
        org.junit.Assert.assertTrue("'" + versionType4 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.BETA + "'", versionType4.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.BETA));
        org.junit.Assert.assertTrue("'" + versionType10 + "' != '" + net.sourceforge.atunes.model.ApplicationVersion.VersionType.BETA + "'", versionType10.equals(net.sourceforge.atunes.model.ApplicationVersion.VersionType.BETA));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test0998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0998");
        net.sourceforge.atunes.model.LookAndFeelBean lookAndFeelBean0 = new net.sourceforge.atunes.model.LookAndFeelBean();
        java.lang.String str1 = lookAndFeelBean0.getSkin();
        lookAndFeelBean0.setName("net.sourceforge.atunes.model.SearchQuerySyntaxException");
        lookAndFeelBean0.setSkin("");
        java.lang.String str6 = lookAndFeelBean0.getSkin();
        lookAndFeelBean0.setSkin("net.sourceforge.atunes.model.SearchQuerySyntaxException");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test0999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0999");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.lang.String str3 = cDMetadata0.getGenre();
        java.lang.String[] strArray5 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList6);
        cDMetadata0.setAlbumArtist("net.sourceforge.atunes.model.InconsistentRepositoryException");
        cDMetadata0.setDisc((int) (short) -1);
        java.util.List<java.lang.String> strList13 = cDMetadata0.getArtistNames();
        java.util.List<java.lang.String> strList14 = cDMetadata0.getArtistNames();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(strList13);
        org.junit.Assert.assertNull(strList14);
    }

    @Test
    public void test1000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test1000");
        net.sourceforge.atunes.model.CDMetadata cDMetadata0 = new net.sourceforge.atunes.model.CDMetadata();
        cDMetadata0.setAlbumArtist("");
        java.lang.String str3 = cDMetadata0.getGenre();
        java.lang.String[] strArray5 = new java.lang.String[] { "HTTP_PROXY" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        cDMetadata0.setTrackNames((java.util.List<java.lang.String>) strList6);
        cDMetadata0.setAlbumArtist("net.sourceforge.atunes.model.InconsistentRepositoryException");
        cDMetadata0.setDisc((int) (short) -1);
        java.util.List<java.lang.String> strList13 = cDMetadata0.getArtistNames();
        java.util.List<java.lang.String> strList14 = cDMetadata0.getComposerNames();
        cDMetadata0.setYear(97);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(strList13);
        org.junit.Assert.assertNull(strList14);
    }
}

